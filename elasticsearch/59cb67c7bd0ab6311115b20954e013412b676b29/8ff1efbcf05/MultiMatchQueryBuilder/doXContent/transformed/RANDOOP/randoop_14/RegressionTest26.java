import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest26 {

    public static boolean debug = false;

    @Test
    public void test13001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13001");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder17.setfieldsBoosts(strObjectFloatHashMap18);
        multiMatchQueryBuilder17.setqueryName("");
        multiMatchQueryBuilder17.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder17.boost((float) (byte) 1);
        multiMatchQueryBuilder25.setmaxExpansions((java.lang.Integer) 100);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test13002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13002");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.slop = 0;
        multiMatchQueryBuilder10.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder10.getoperator();
        java.lang.Float float17 = multiMatchQueryBuilder10.boost;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.useDisMax(false);
        multiMatchQueryBuilder10.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}";
        multiMatchQueryBuilder10.setprefixLength((java.lang.Integer) 100);
        java.lang.Object obj24 = multiMatchQueryBuilder10.text;
        java.lang.Boolean boolean25 = multiMatchQueryBuilder10.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        multiMatchQueryBuilder10.setuseDisMax((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + (-1.0f) + "'", obj24, (-1.0f));
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + false + "'", boolean25, false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test13003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13003");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.maxExpansions((int) (short) 0);
        multiMatchQueryBuilder11.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery22);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator24 = multiMatchQueryBuilder11.operator;
        java.lang.Float float25 = multiMatchQueryBuilder11.getcutoffFrequency();
        java.lang.String str26 = null; // flaky: multiMatchQueryBuilder11.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder11.operator(operator27);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(operator24);
        org.junit.Assert.assertNull(float25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!^-1.0\", \"\", \"hi!^-1.0\", \"hi!^-1.0\", \"hi!^-1.0\", \"\", \"hi!^-1.0\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\"\n  }\n}" + "'", str26, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!^-1.0\", \"\", \"hi!^-1.0\", \"hi!^-1.0\", \"hi!^-1.0\", \"\", \"hi!^-1.0\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test13004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13004");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        multiMatchQueryBuilder15.setoperator(operator16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.boost((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.slop((int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test13005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13005");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.prefixLength((-1));
        java.lang.String str16 = multiMatchQueryBuilder8.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder8.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"phrase\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 0,\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.Integer int19 = multiMatchQueryBuilder8.getmaxExpansions();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.operator(operator20);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test13006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13006");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray9);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder10.getzeroTermsQuery();
        multiMatchQueryBuilder10.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.useDisMax(false);
        java.lang.String str16 = multiMatchQueryBuilder15.minimumShouldMatch;
        multiMatchQueryBuilder15.prefixLength = 100;
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray26);
        java.lang.String str28 = multiMatchQueryBuilder27.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder27.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type31 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float32 = type31.tieBreaker();
        float float33 = type31.tieBreaker();
        org.elasticsearch.common.ParseField parseField34 = type31.parseField();
        multiMatchQueryBuilder27.settype(type31);
        org.elasticsearch.common.ParseField parseField36 = type31.parseField();
        float float37 = type31.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder15.type(type31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder38.field("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}", (float) 'a');
        java.lang.Object obj42 = multiMatchQueryBuilder38.text;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery43 = null;
        multiMatchQueryBuilder38.zeroTermsQuery = zeroTermsQuery43;
        multiMatchQueryBuilder38.tieBreaker = 35.0f;
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray54);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery56 = multiMatchQueryBuilder55.getzeroTermsQuery();
        multiMatchQueryBuilder55.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder55.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder55.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.useDisMax(true);
        java.lang.Boolean boolean65 = multiMatchQueryBuilder62.getlenient();
        java.lang.Object obj66 = null;
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray74);
        multiMatchQueryBuilder75.maxExpansions = 0;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = org.elasticsearch.common.xcontent.XContentBuilder.defaultDatePrinter;
        java.lang.Class<?> wildcardClass79 = dateTimeFormatter78.getClass();
        java.lang.String[] strArray87 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray87);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass79, strArray87);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray87);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj66, strArray87);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder62, strArray87);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder38, strArray87);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder94 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type31.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 0.0f + "'", float32 == 0.0f);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(parseField34);
        org.junit.Assert.assertNotNull(parseField36);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 0.0f + "'", float37 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertEquals("'" + obj42 + "' != '" + (-1.0f) + "'", obj42, (-1.0f));
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNull(zeroTermsQuery56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNull(boolean65);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(strArray87);
    }

    @Test
    public void test13007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13007");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        multiMatchQueryBuilder11.setoperator(operator14);
        multiMatchQueryBuilder11.setprefixLength((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator18 = null;
        multiMatchQueryBuilder11.setoperator(operator18);
        multiMatchQueryBuilder11.setcutoffFrequency((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder11.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"tieBreaker\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        java.lang.String str26 = multiMatchQueryBuilder23.getanalyzer();
        java.util.List<java.lang.String> strList27 = multiMatchQueryBuilder23.getfields();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strList27);
    }

    @Test
    public void test13008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13008");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions((int) (short) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery18);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder17.getuseDisMax();
        multiMatchQueryBuilder17.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : -1.0\n  }\n}");
        multiMatchQueryBuilder17.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder17.maxExpansions((int) (short) 10);
        java.lang.Boolean boolean27 = multiMatchQueryBuilder26.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder26.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.useDisMax(false);
        multiMatchQueryBuilder31.settieBreaker((java.lang.Float) 52.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + boolean20 + "' != '" + false + "'", boolean20, false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + boolean27 + "' != '" + false + "'", boolean27, false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test13009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13009");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.tieBreaker((float) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.prefixLength((int) (byte) 0);
        multiMatchQueryBuilder13.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
        multiMatchQueryBuilder13.queryName = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"slop\" : -1,\n    \"max_expansions\" : 0,\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : -1.0\n  }\n}";
        java.lang.Object obj22 = multiMatchQueryBuilder13.gettext();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + (-1.0f) + "'", obj22, (-1.0f));
    }

    @Test
    public void test13010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13010");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.type(type11);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = multiMatchQueryBuilder12.getfieldsBoosts();
        java.lang.String str14 = multiMatchQueryBuilder12.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0\n  }\n}");
        multiMatchQueryBuilder16.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"\" ],\n    \"fuzziness\" : \"[hi!, , hi!, hi!, hi!, ]\"\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type11.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(strObjectFloatHashMap13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test13011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13011");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) (-1.0f));
        multiMatchQueryBuilder10.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery18;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = multiMatchQueryBuilder10.getoperator();
        java.lang.Boolean boolean21 = multiMatchQueryBuilder10.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.useDisMax(false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(operator20);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + false + "'", boolean21, false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test13012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13012");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("hi!", (float) (-1L));
        java.lang.String str18 = multiMatchQueryBuilder11.queryName;
        java.lang.Boolean boolean19 = multiMatchQueryBuilder11.getuseDisMax();
        multiMatchQueryBuilder11.setprefixLength((java.lang.Integer) (-1));
        java.lang.String str22 = multiMatchQueryBuilder11.queryName;
        org.elasticsearch.common.unit.Fuzziness fuzziness23 = multiMatchQueryBuilder11.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder11.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"use_dis_max\" : false\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap26 = multiMatchQueryBuilder11.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder11.tieBreaker(0.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNull(fuzziness23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test13013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13013");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.lenient(false);
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder15.getfuzziness();
        java.lang.String str17 = multiMatchQueryBuilder15.fuzzyRewrite;
        java.lang.String str18 = multiMatchQueryBuilder15.getanalyzer();
        java.lang.Boolean boolean19 = multiMatchQueryBuilder15.getuseDisMax();
        java.lang.String str20 = multiMatchQueryBuilder15.minimumShouldMatch;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap21 = multiMatchQueryBuilder15.fieldsBoosts;
        multiMatchQueryBuilder15.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 0.0,\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 0,\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : true,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strObjectFloatHashMap21);
    }

    @Test
    public void test13014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13014");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        java.lang.String str12 = multiMatchQueryBuilder8.fuzzyRewrite;
        java.lang.Integer int13 = multiMatchQueryBuilder8.prefixLength;
        java.lang.Float float14 = multiMatchQueryBuilder8.getboost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"prefixLength\\\" : 1,\\n    \\\"useDisMax\\\" : false,\\n    \\\"cutoffFrequency\\\" : 0.0\\n  }\\n}\" ],\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test13015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13015");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder17.setfieldsBoosts(strObjectFloatHashMap18);
        multiMatchQueryBuilder17.setqueryName("");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = multiMatchQueryBuilder17.zeroTermsQuery;
        multiMatchQueryBuilder17.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str25 = multiMatchQueryBuilder17.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder17.tieBreaker(1.0f);
        org.elasticsearch.common.xcontent.XContentType xContentType28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference29 = multiMatchQueryBuilder17.buildAsBytes(xContentType28);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(zeroTermsQuery22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}" + "'", str25, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test13016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13016");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.lang.Boolean boolean13 = multiMatchQueryBuilder10.getlenient();
        java.lang.String str14 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery15;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator17 = multiMatchQueryBuilder10.getoperator();
        multiMatchQueryBuilder10.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 10.0,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"tieBreaker\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.maxExpansions(52);
        multiMatchQueryBuilder21.setmaxExpansions((java.lang.Integer) 32);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        multiMatchQueryBuilder21.zeroTermsQuery = zeroTermsQuery24;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder21.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"slop\" : -1,\n    \"max_expansions\" : 0,\n    \"fuzzy_rewrite\" : \"\",\n    \"tie_breaker\" : -1.0\n  }\n}");
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray35);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = multiMatchQueryBuilder36.getzeroTermsQuery();
        multiMatchQueryBuilder36.cutoffFrequency = 0.0f;
        multiMatchQueryBuilder36.maxExpansions = 10;
        multiMatchQueryBuilder36.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder36.cutoffFrequency((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.useDisMax(false);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray55);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery57 = multiMatchQueryBuilder56.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder56.boost((float) (short) 100);
        multiMatchQueryBuilder59.queryName = "hi!";
        java.lang.Integer int62 = multiMatchQueryBuilder59.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder59.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder59.maxExpansions((int) (short) 0);
        multiMatchQueryBuilder59.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery70 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder59.zeroTermsQuery(zeroTermsQuery70);
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray79);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery81 = multiMatchQueryBuilder80.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder80.boost((float) (short) 100);
        java.lang.Integer int84 = multiMatchQueryBuilder83.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery85 = multiMatchQueryBuilder83.zeroTermsQuery;
        multiMatchQueryBuilder83.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = multiMatchQueryBuilder83.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = null; // flaky: multiMatchQueryBuilder71.fuzziness((java.lang.Object) multiMatchQueryBuilder89);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = null; // flaky: multiMatchQueryBuilder90.lenient(false);
// flaky:         multiMatchQueryBuilder90.setprefixLength((java.lang.Integer) 100);
// flaky:         multiMatchQueryBuilder90.slop = 32;
        org.elasticsearch.common.unit.Fuzziness fuzziness97 = null; // flaky: multiMatchQueryBuilder90.fuzziness;
        multiMatchQueryBuilder45.setfuzziness(fuzziness97);
        multiMatchQueryBuilder27.fuzziness = fuzziness97;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(operator17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNull(zeroTermsQuery37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNull(zeroTermsQuery57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(int62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNull(zeroTermsQuery81);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNull(int84);
        org.junit.Assert.assertNull(zeroTermsQuery85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder90);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder92);
// flaky:         org.junit.Assert.assertNotNull(fuzziness97);
    }

    @Test
    public void test13017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13017");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        multiMatchQueryBuilder10.setoperator(operator16);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator18 = multiMatchQueryBuilder10.operator;
        multiMatchQueryBuilder10.slop = 35;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"prefixLength\" : 32,\n    \"cutoffFrequency\" : 0.0\n  }\n}");
        java.lang.Float float23 = multiMatchQueryBuilder10.gettieBreaker();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(operator18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(float23);
    }

    @Test
    public void test13018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13018");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Integer int16 = multiMatchQueryBuilder10.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.useDisMax(false);
        multiMatchQueryBuilder10.setmaxExpansions((java.lang.Integer) 32);
        multiMatchQueryBuilder10.lenient = false;
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray30);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = multiMatchQueryBuilder31.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder31.boost((float) (short) 100);
        java.lang.Integer int35 = multiMatchQueryBuilder34.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder34.boost((float) '4');
        multiMatchQueryBuilder34.setfuzzyRewrite("");
        java.lang.Integer int40 = multiMatchQueryBuilder34.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder34.boost(10.0f);
        multiMatchQueryBuilder42.minimumShouldMatch = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder42.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}", (float) 1L);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.useDisMax(false);
        java.lang.String str59 = multiMatchQueryBuilder58.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness60 = multiMatchQueryBuilder58.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery61 = null;
        multiMatchQueryBuilder58.zeroTermsQuery = zeroTermsQuery61;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type63 = multiMatchQueryBuilder58.type;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator64 = multiMatchQueryBuilder58.operator;
        java.lang.String str65 = multiMatchQueryBuilder58.getqueryName();
        java.lang.Float float66 = multiMatchQueryBuilder58.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = null; // flaky: multiMatchQueryBuilder42.fuzziness((java.lang.Object) multiMatchQueryBuilder58);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type68 = null; // flaky: multiMatchQueryBuilder67.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder67);
        java.lang.Float float70 = multiMatchQueryBuilder10.boost;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNull(zeroTermsQuery32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(fuzziness60);
        org.junit.Assert.assertNull(type63);
        org.junit.Assert.assertNull(operator64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(float66);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNull(type68);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNull(float70);
    }

    @Test
    public void test13019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13019");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        java.lang.Integer int18 = multiMatchQueryBuilder11.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        float float20 = type19.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder11.type(type19);
        java.util.List<java.lang.String> strList22 = multiMatchQueryBuilder11.getfields();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strList22);
    }

    @Test
    public void test13020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13020");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder10.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder10.getfields();
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) (-1.0f));
        multiMatchQueryBuilder10.setslop((java.lang.Integer) 0);
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery24);
        multiMatchQueryBuilder10.slop = 0;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder10.cutoffFrequency((float) 10L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion32 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.CAMELCASE;
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) fieldCaseConversion32, strArray40);
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion32);
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion32);
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion32);
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion32);
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion32);
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder29.fuzziness((java.lang.Object) fieldCaseConversion32);
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion32);
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion32);
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion32);
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion32);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertTrue("'" + fieldCaseConversion32 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.CAMELCASE + "'", fieldCaseConversion32.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.CAMELCASE));
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
    }

    @Test
    public void test13021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13021");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.slop;
        java.lang.Integer int16 = multiMatchQueryBuilder10.slop;
        java.lang.String str17 = multiMatchQueryBuilder10.minimumShouldMatch;
        java.lang.String str18 = null; // flaky: multiMatchQueryBuilder10.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.slop(1);
        multiMatchQueryBuilder20.setslop((java.lang.Integer) 52);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(str17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : false\n  }\n}" + "'", str18, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test13022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13022");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator9 = multiMatchQueryBuilder8.getoperator();
        java.lang.Integer int10 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator11 = null;
        multiMatchQueryBuilder8.setoperator(operator11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray22);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = multiMatchQueryBuilder23.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.boost((float) (short) 100);
        multiMatchQueryBuilder26.queryName = "hi!";
        java.lang.Integer int29 = multiMatchQueryBuilder26.maxExpansions;
        java.lang.String str30 = multiMatchQueryBuilder26.queryName;
        java.lang.Boolean boolean31 = multiMatchQueryBuilder26.lenient;
        java.lang.Boolean boolean32 = multiMatchQueryBuilder26.lenient;
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray40);
        multiMatchQueryBuilder41.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder41.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder41.minimumShouldMatch("");
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean32, strArray55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder8, strArray55);
        java.lang.Float float60 = multiMatchQueryBuilder8.getcutoffFrequency();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNull(zeroTermsQuery24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNull(boolean31);
        org.junit.Assert.assertNull(boolean32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNull(float60);
    }

    @Test
    public void test13023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13023");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.maxExpansions((int) (short) 0);
        multiMatchQueryBuilder11.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        multiMatchQueryBuilder11.setmaxExpansions((java.lang.Integer) 1);
        java.lang.String[] strArray28 = new java.lang.String[] { "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}^1.0\" ],\n    \"useDisMax\" : true,\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"maxExpansions\\\" : 0,\\n    \\\"useDisMax\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!^-1.0\", \"\", \"hi!^-1.0\", \"hi!^-1.0\", \"hi!^-1.0\", \"\", \"hi!^-1.0\" ],\n    \"boost\" : 100.0,\n    \"slop\" : 0,\n    \"useDisMax\" : false,\n    \"Name\" : \"hi!\"\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder11, strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder11.maxExpansions((int) (byte) -1);
        multiMatchQueryBuilder11.useDisMax = false;
        multiMatchQueryBuilder11.setprefixLength((java.lang.Integer) (-1));
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test13024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13024");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type14 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type14);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.operator(operator16);
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"max_expansions\" : 0,\n    \"lenient\" : false\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = multiMatchQueryBuilder21.getoperator();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray30);
        java.lang.String str32 = multiMatchQueryBuilder31.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder31.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type35 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float36 = type35.tieBreaker();
        float float37 = type35.tieBreaker();
        org.elasticsearch.common.ParseField parseField38 = type35.parseField();
        multiMatchQueryBuilder31.settype(type35);
        org.elasticsearch.common.ParseField parseField40 = type35.parseField();
        float float41 = type35.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder21.type(type35);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder43 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params44 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder45 = multiMatchQueryBuilder21.toXContent(xContentBuilder43, params44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type14.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(operator22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type35.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 0.0f + "'", float37 == 0.0f);
        org.junit.Assert.assertNotNull(parseField38);
        org.junit.Assert.assertNotNull(parseField40);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 0.0f + "'", float41 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(params44);
    }

    @Test
    public void test13025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13025");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.type(type11);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = multiMatchQueryBuilder12.getfieldsBoosts();
        multiMatchQueryBuilder12.setcutoffFrequency((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder12.setzeroTermsQuery(zeroTermsQuery16);
        java.lang.Integer int18 = multiMatchQueryBuilder12.getprefixLength();
        java.lang.Object obj19 = multiMatchQueryBuilder12.gettext();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        multiMatchQueryBuilder12.setzeroTermsQuery(zeroTermsQuery20);
        java.lang.Object obj22 = multiMatchQueryBuilder12.gettext();
        multiMatchQueryBuilder12.setboost((java.lang.Float) 35.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder12.maxExpansions((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder12.slop((int) (short) -1);
        multiMatchQueryBuilder12.setqueryName("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 52.0,\n    \"fuzzyRewrite\" : \"\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type11.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(strObjectFloatHashMap13);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-1.0f) + "'", obj19, (-1.0f));
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + (-1.0f) + "'", obj22, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test13026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13026");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        java.lang.Float float14 = multiMatchQueryBuilder8.gettieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"type\" : \"best_fields\",\n    \"boost\" : 100.0,\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
        multiMatchQueryBuilder16.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"type\" : \"best_fields\",\n    \"boost\" : 100.0,\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0,\n    \"cutoffFrequency\" : 100.0\n  }\n}";
        multiMatchQueryBuilder16.setprefixLength((java.lang.Integer) 52);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test13027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13027");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Float float16 = multiMatchQueryBuilder15.tieBreaker;
        java.lang.String str17 = null; // flaky: multiMatchQueryBuilder15.toString();
        multiMatchQueryBuilder15.cutoffFrequency = 52.0f;
        java.lang.Float float20 = multiMatchQueryBuilder15.getboost();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"Name\" : \"hi!\"\n  }\n}" + "'", str17, "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"Name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNull(float20);
    }

    @Test
    public void test13028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13028");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator9 = multiMatchQueryBuilder8.getoperator();
        java.lang.Integer int10 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator11 = null;
        multiMatchQueryBuilder8.setoperator(operator11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.zeroTermsQuery(zeroTermsQuery26);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray35);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = multiMatchQueryBuilder36.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder36.boost((float) (short) 100);
        java.lang.Integer int40 = multiMatchQueryBuilder39.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder39.boost((float) '4');
        multiMatchQueryBuilder39.setfuzzyRewrite("");
        java.lang.Integer int45 = multiMatchQueryBuilder39.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder39.boost(10.0f);
        multiMatchQueryBuilder47.minimumShouldMatch = "";
        multiMatchQueryBuilder47.boost = 0.0f;
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray59);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery61 = multiMatchQueryBuilder60.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder60.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type64 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder63.settype(type64);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery66 = multiMatchQueryBuilder63.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type67 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float68 = type67.tieBreaker();
        float float69 = type67.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type70 = type67.matchQueryType();
        org.elasticsearch.common.ParseField parseField71 = type67.parseField();
        multiMatchQueryBuilder63.type = type67;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder47.type(type67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder27.type(type67);
        multiMatchQueryBuilder14.type = type67;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder14.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 10.0,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"tie_breaker\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator78 = multiMatchQueryBuilder77.getoperator();
        multiMatchQueryBuilder77.maxExpansions = 100;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNull(zeroTermsQuery37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNull(zeroTermsQuery61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertTrue("'" + type64 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type64.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(zeroTermsQuery66);
        org.junit.Assert.assertTrue("'" + type67 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type67.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + 0.0f + "'", float68 == 0.0f);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + 0.0f + "'", float69 == 0.0f);
        org.junit.Assert.assertTrue("'" + type70 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type70.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNull(operator78);
    }

    @Test
    public void test13029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13029");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.slop((int) '#');
        multiMatchQueryBuilder13.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.lenient(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery18);
        java.lang.String str20 = multiMatchQueryBuilder17.getfuzzyRewrite();
        java.util.List<java.lang.String> strList21 = multiMatchQueryBuilder17.getfields();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = multiMatchQueryBuilder17.zeroTermsQuery;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap23 = multiMatchQueryBuilder17.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNull(zeroTermsQuery22);
        org.junit.Assert.assertNull(strObjectFloatHashMap23);
    }

    @Test
    public void test13030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13030");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap11;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder8.setfieldsBoosts(strObjectFloatHashMap13);
        multiMatchQueryBuilder8.cutoffFrequency = (-1.0f);
        java.lang.String str17 = multiMatchQueryBuilder8.queryName;
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.useDisMax(false);
        java.lang.String str29 = multiMatchQueryBuilder28.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness30 = multiMatchQueryBuilder28.fuzziness;
        java.lang.String str31 = multiMatchQueryBuilder28.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        multiMatchQueryBuilder28.zeroTermsQuery = zeroTermsQuery32;
        multiMatchQueryBuilder28.setqueryName("hi!");
        multiMatchQueryBuilder28.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder28.maxExpansions((-1));
        java.lang.String str40 = multiMatchQueryBuilder28.getfuzzyRewrite();
        multiMatchQueryBuilder28.queryName = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"tieBreaker\" : 0.0\n  }\n}";
        java.lang.String str43 = multiMatchQueryBuilder28.queryName;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap44 = null;
        multiMatchQueryBuilder28.setfieldsBoosts(strObjectFloatHashMap44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder8.type((java.lang.Object) strObjectFloatHashMap44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder46.maxExpansions((int) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(fuzziness30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"tieBreaker\" : 0.0\n  }\n}" + "'", str43, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"tieBreaker\" : 0.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
    }

    @Test
    public void test13031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13031");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.slop((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
        multiMatchQueryBuilder18.setprefixLength((java.lang.Integer) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator21 = null;
        multiMatchQueryBuilder18.setoperator(operator21);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test13032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13032");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.lenient = true;
        java.lang.Float float14 = multiMatchQueryBuilder10.gettieBreaker();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery15;
        multiMatchQueryBuilder10.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.boost((float) (short) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator21 = null;
        multiMatchQueryBuilder20.setoperator(operator21);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test13033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13033");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder10.getfields();
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = null;
        multiMatchQueryBuilder10.setfieldsBoosts(strObjectFloatHashMap14);
        multiMatchQueryBuilder10.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.operator(operator20);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = null;
        multiMatchQueryBuilder10.operator = operator22;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test13034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13034");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        multiMatchQueryBuilder8.setqueryName("hi!");
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray21);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = multiMatchQueryBuilder22.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder22.boost((float) (short) 100);
        java.lang.Integer int26 = multiMatchQueryBuilder25.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder25.boost((float) '4');
        multiMatchQueryBuilder25.setfuzzyRewrite("");
        java.lang.String str31 = multiMatchQueryBuilder25.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder25.tieBreaker(0.0f);
        multiMatchQueryBuilder25.boost = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        multiMatchQueryBuilder25.type = type36;
        float float38 = type36.tieBreaker();
        float float39 = type36.tieBreaker();
        multiMatchQueryBuilder8.settype(type36);
        java.util.List<java.lang.String> strList41 = multiMatchQueryBuilder8.fields;
        java.util.List<java.lang.String> strList42 = multiMatchQueryBuilder8.fields;
        multiMatchQueryBuilder8.setqueryName("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"useDisMax\" : true\n  }\n}");
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type56 = multiMatchQueryBuilder55.type;
        java.lang.Boolean boolean57 = multiMatchQueryBuilder55.getuseDisMax();
        java.lang.Integer int58 = multiMatchQueryBuilder55.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type59 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder55.type = type59;
        org.elasticsearch.index.search.MatchQuery.Type type61 = type59.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type62 = type59.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder8.type(type59);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(zeroTermsQuery23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 0.0f + "'", float38 == 0.0f);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 0.0f + "'", float39 == 0.0f);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNull(type56);
        org.junit.Assert.assertEquals("'" + boolean57 + "' != '" + false + "'", boolean57, false);
        org.junit.Assert.assertNull(int58);
        org.junit.Assert.assertTrue("'" + type59 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type59.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + type61 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type61.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type62 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type62.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
    }

    @Test
    public void test13035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13035");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        multiMatchQueryBuilder14.setlenient((java.lang.Boolean) true);
        multiMatchQueryBuilder14.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        multiMatchQueryBuilder14.boost = 0.0f;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test13036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13036");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.lang.Boolean boolean13 = multiMatchQueryBuilder10.getlenient();
        java.lang.String str14 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery15;
        multiMatchQueryBuilder10.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.prefixLength((int) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        multiMatchQueryBuilder22.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"class org.joda.time.format.DateTimeFormatter\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        org.elasticsearch.common.unit.Fuzziness fuzziness25 = multiMatchQueryBuilder22.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = multiMatchQueryBuilder22.zeroTermsQuery;
        java.lang.String str27 = multiMatchQueryBuilder22.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(fuzziness25);
        org.junit.Assert.assertNull(zeroTermsQuery26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test13037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13037");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness14 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray24);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = multiMatchQueryBuilder25.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder25.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type29 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder28.settype(type29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = multiMatchQueryBuilder28.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type32 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float33 = type32.tieBreaker();
        float float34 = type32.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type35 = type32.matchQueryType();
        org.elasticsearch.common.ParseField parseField36 = type32.parseField();
        multiMatchQueryBuilder28.type = type32;
        multiMatchQueryBuilder16.type = type32;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder16.boost((float) (short) 10);
        java.util.List<java.lang.String> strList41 = multiMatchQueryBuilder40.getfields();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray50);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray50);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery53 = null;
        multiMatchQueryBuilder52.setzeroTermsQuery(zeroTermsQuery53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder52.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.cutoffFrequency((float) 100);
        java.lang.Boolean boolean59 = multiMatchQueryBuilder56.getlenient();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator60 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder56.operator(operator60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder56.useDisMax(false);
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray71);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery73 = multiMatchQueryBuilder72.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder72.boost((float) (short) 100);
        multiMatchQueryBuilder75.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator78 = null;
        multiMatchQueryBuilder75.setoperator(operator78);
        java.util.List<java.lang.String> strList80 = multiMatchQueryBuilder75.getfields();
        java.util.List<java.lang.String> strList81 = multiMatchQueryBuilder75.getfields();
        java.lang.String str82 = multiMatchQueryBuilder75.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type83 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float84 = type83.tieBreaker();
        float float85 = type83.tieBreaker();
        org.elasticsearch.common.ParseField parseField86 = type83.parseField();
        float float87 = type83.tieBreaker();
        multiMatchQueryBuilder75.settype(type83);
        org.elasticsearch.common.ParseField parseField89 = type83.parseField();
        multiMatchQueryBuilder56.settype(type83);
        org.elasticsearch.index.search.MatchQuery.Type type91 = type83.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = multiMatchQueryBuilder40.type(type83);
        org.elasticsearch.index.search.MatchQuery.Type type93 = type83.matchQueryType();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(fuzziness14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNull(zeroTermsQuery26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type29.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(zeroTermsQuery31);
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type32.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 0.0f + "'", float34 == 0.0f);
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type35.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNull(boolean59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNull(zeroTermsQuery73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + type83 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type83.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + 0.0f + "'", float84 == 0.0f);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + 0.0f + "'", float85 == 0.0f);
        org.junit.Assert.assertNotNull(parseField86);
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + 0.0f + "'", float87 == 0.0f);
        org.junit.Assert.assertNotNull(parseField89);
        org.junit.Assert.assertTrue("'" + type91 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type91.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder92);
        org.junit.Assert.assertTrue("'" + type93 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type93.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test13038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13038");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder11.lenient;
        java.lang.Object obj19 = multiMatchQueryBuilder11.text;
        java.lang.Integer int20 = multiMatchQueryBuilder11.maxExpansions;
        multiMatchQueryBuilder11.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder11.lenient(false);
        java.lang.String str25 = multiMatchQueryBuilder24.minimumShouldMatch;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap26 = multiMatchQueryBuilder24.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}");
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray37);
        java.lang.Integer int40 = multiMatchQueryBuilder39.maxExpansions;
        multiMatchQueryBuilder39.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness43 = multiMatchQueryBuilder39.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder39.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery46 = null;
        multiMatchQueryBuilder39.setzeroTermsQuery(zeroTermsQuery46);
        multiMatchQueryBuilder39.setboost((java.lang.Float) 1.0f);
        multiMatchQueryBuilder39.useDisMax = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder39.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : -1\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.boost((float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = null; // flaky: multiMatchQueryBuilder28.fuzziness((java.lang.Object) multiMatchQueryBuilder53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder53.boost(0.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-1.0f) + "'", obj19, (-1.0f));
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strObjectFloatHashMap26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNull(fuzziness43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
    }

    @Test
    public void test13039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13039");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0d, strArray9);
        multiMatchQueryBuilder12.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder12.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type16 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float17 = type16.tieBreaker();
        float float18 = type16.tieBreaker();
        org.elasticsearch.common.ParseField parseField19 = type16.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type20 = type16.matchQueryType();
        org.elasticsearch.common.ParseField parseField21 = type16.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder12.type(type16);
        java.lang.Float float23 = multiMatchQueryBuilder22.tieBreaker;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator24 = null;
        multiMatchQueryBuilder22.setoperator(operator24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder22.tieBreaker(10.0f);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type39 = multiMatchQueryBuilder38.type;
        multiMatchQueryBuilder38.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}");
        java.lang.Boolean boolean42 = multiMatchQueryBuilder38.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = null; // flaky: multiMatchQueryBuilder27.fuzziness((java.lang.Object) multiMatchQueryBuilder38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder27.tieBreaker((float) 100);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type16.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertNotNull(parseField19);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(float23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(type39);
        org.junit.Assert.assertEquals("'" + boolean42 + "' != '" + false + "'", boolean42, false);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
    }

    @Test
    public void test13040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13040");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) 100);
        java.lang.Integer int17 = multiMatchQueryBuilder14.slop;
        multiMatchQueryBuilder14.setprefixLength((java.lang.Integer) 1);
        multiMatchQueryBuilder14.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.zeroTermsQuery(zeroTermsQuery33);
        multiMatchQueryBuilder34.minimumShouldMatch = "hi!";
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap37 = null;
        multiMatchQueryBuilder34.setfieldsBoosts(strObjectFloatHashMap37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder34.boost(100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type41 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float42 = type41.tieBreaker();
        float float43 = type41.tieBreaker();
        float float44 = type41.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder40.type(type41);
        multiMatchQueryBuilder14.type = type41;
        java.lang.String str47 = multiMatchQueryBuilder14.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type48 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float49 = type48.tieBreaker();
        float float50 = type48.tieBreaker();
        org.elasticsearch.common.ParseField parseField51 = type48.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type52 = type48.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type53 = type48.matchQueryType();
        float float54 = type48.tieBreaker();
        org.elasticsearch.common.ParseField parseField55 = type48.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type56 = type48.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder14.type(type48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!^-1.0\", \"\", \"hi!^-1.0\", \"hi!^-1.0\", \"hi!^-1.0\", \"\" ],\n    \"useDisMax\" : false,\n    \"lenient\" : false\n  }\n}");
        multiMatchQueryBuilder59.tieBreaker = 97.0f;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type41.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 0.0f + "'", float42 == 0.0f);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 0.0f + "'", float43 == 0.0f);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 0.0f + "'", float44 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type48.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + 0.0f + "'", float49 == 0.0f);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 0.0f + "'", float50 == 0.0f);
        org.junit.Assert.assertNotNull(parseField51);
        org.junit.Assert.assertTrue("'" + type52 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type52.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type53 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type53.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 0.0f + "'", float54 == 0.0f);
        org.junit.Assert.assertNotNull(parseField55);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type56.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
    }

    @Test
    public void test13041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13041");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.useDisMax(true);
        java.lang.Float float18 = multiMatchQueryBuilder17.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = multiMatchQueryBuilder17.type;
        multiMatchQueryBuilder17.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"prefixLength\\\" : 1,\\n    \\\"useDisMax\\\" : false,\\n    \\\"cutoffFrequency\\\" : 0.0\\n  }\\n}\" ],\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0\n  }\n}");
        multiMatchQueryBuilder23.setboost((java.lang.Float) (-1.0f));
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(float18);
        org.junit.Assert.assertNull(type19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test13042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13042");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder10.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.tieBreaker((float) '#');
        java.lang.Integer int17 = multiMatchQueryBuilder10.getmaxExpansions();
        multiMatchQueryBuilder10.setboost((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.cutoffFrequency((float) 1L);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = null;
        multiMatchQueryBuilder10.setoperator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder10.maxExpansions(10);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test13043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13043");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.field("hi!");
        java.lang.String str14 = multiMatchQueryBuilder13.getanalyzer();
        multiMatchQueryBuilder13.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}";
        multiMatchQueryBuilder13.setcutoffFrequency((java.lang.Float) 0.0f);
        multiMatchQueryBuilder13.analyzer = "hi!";
        multiMatchQueryBuilder13.setuseDisMax((java.lang.Boolean) false);
        java.lang.Float float23 = multiMatchQueryBuilder13.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder13.maxExpansions(97);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        multiMatchQueryBuilder25.zeroTermsQuery = zeroTermsQuery26;
        multiMatchQueryBuilder25.setuseDisMax((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(float23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test13044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13044");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = multiMatchQueryBuilder9.getzeroTermsQuery();
        multiMatchQueryBuilder9.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder9.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.useDisMax(false);
        java.lang.Boolean boolean17 = multiMatchQueryBuilder16.getuseDisMax();
        multiMatchQueryBuilder16.cutoffFrequency = (-1.0f);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.useDisMax(false);
        java.lang.String str31 = multiMatchQueryBuilder30.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness32 = multiMatchQueryBuilder30.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        multiMatchQueryBuilder30.zeroTermsQuery = zeroTermsQuery33;
        java.lang.Integer int35 = multiMatchQueryBuilder30.slop;
        java.lang.Integer int36 = multiMatchQueryBuilder30.maxExpansions;
        multiMatchQueryBuilder30.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.useDisMax(false);
        java.lang.String str50 = multiMatchQueryBuilder49.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness51 = multiMatchQueryBuilder49.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder49.prefixLength((int) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type54 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type55 = type54.matchQueryType();
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray63);
        multiMatchQueryBuilder64.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder64.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder64.minimumShouldMatch("");
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type55, strArray78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder49, strArray78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 100, strArray78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray78);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder85 = null; // flaky: org.elasticsearch.common.xcontent.XContentBuilder.builder(xContent0, strArray78);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(zeroTermsQuery10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + false + "'", boolean17, false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(fuzziness32);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(fuzziness51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertTrue("'" + type54 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type54.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type55.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(strArray78);
    }

    @Test
    public void test13045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13045");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery14;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder10.lenient = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.operator(operator20);
        java.lang.Boolean boolean22 = multiMatchQueryBuilder10.lenient;
        java.lang.Object obj23 = multiMatchQueryBuilder10.text;
        multiMatchQueryBuilder10.fuzzyRewrite = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder10.cutoffFrequency((float) ' ');
        multiMatchQueryBuilder10.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 0,\n    \"useDisMax\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + boolean22 + "' != '" + false + "'", boolean22, false);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + (-1.0f) + "'", obj23, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test13046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13046");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder10, strArray22);
        multiMatchQueryBuilder10.maxExpansions = 1;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder10.operator(operator28);
        multiMatchQueryBuilder10.slop = 100;
        multiMatchQueryBuilder10.setminimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder10.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.boost((float) (-1L));
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap38 = multiMatchQueryBuilder37.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder37.lenient(false);
        multiMatchQueryBuilder40.slop = 35;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.prefixLength(100);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator45 = null;
        multiMatchQueryBuilder40.operator = operator45;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(strObjectFloatHashMap38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
    }

    @Test
    public void test13047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13047");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap11;
        multiMatchQueryBuilder8.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        multiMatchQueryBuilder8.setzeroTermsQuery(zeroTermsQuery15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder8.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        multiMatchQueryBuilder8.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"tie_breaker\" : 10.0\n  }\n}";
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder8.getfuzziness();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = null;
        multiMatchQueryBuilder8.setoperator(operator22);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        multiMatchQueryBuilder8.setzeroTermsQuery(zeroTermsQuery24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder8.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"useDisMax\\\" : true\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false,\\n    \\\"lenient\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test13048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13048");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        multiMatchQueryBuilder10.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str13 = null; // flaky: multiMatchQueryBuilder10.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery14);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0\n  }\n}", (float) 35);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = multiMatchQueryBuilder18.zeroTermsQuery;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = multiMatchQueryBuilder18.zeroTermsQuery;
        java.lang.Boolean boolean21 = multiMatchQueryBuilder18.lenient;
        multiMatchQueryBuilder18.setslop((java.lang.Integer) (-1));
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(zeroTermsQuery19);
        org.junit.Assert.assertNull(zeroTermsQuery20);
        org.junit.Assert.assertNull(boolean21);
    }

    @Test
    public void test13049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13049");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        multiMatchQueryBuilder11.setoperator(operator14);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        multiMatchQueryBuilder11.setoperator(operator16);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder11.zeroTermsQuery = zeroTermsQuery18;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
    }

    @Test
    public void test13050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13050");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.slop = 0;
        multiMatchQueryBuilder10.useDisMax = true;
        multiMatchQueryBuilder10.setuseDisMax((java.lang.Boolean) true);
        java.lang.Boolean boolean18 = multiMatchQueryBuilder10.lenient;
        multiMatchQueryBuilder10.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true\n  }\n}";
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) 1.0f);
        multiMatchQueryBuilder10.setboost((java.lang.Float) 32.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNull(boolean18);
    }

    @Test
    public void test13051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13051");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        multiMatchQueryBuilder12.minimumShouldMatch = "hi!";
        java.lang.String str15 = multiMatchQueryBuilder12.getanalyzer();
        java.lang.String str16 = multiMatchQueryBuilder12.analyzer;
        multiMatchQueryBuilder12.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"Name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test13052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13052");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder11.gettype();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder11.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.boost(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = null;
        multiMatchQueryBuilder11.fuzziness = fuzziness19;
        java.lang.Float float21 = multiMatchQueryBuilder11.cutoffFrequency;
        multiMatchQueryBuilder11.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder11.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"max_expansions\" : 0,\n    \"tie_breaker\" : 100.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0,\\n    \\\"prefixLength\\\" : 100,\\n    \\\"Name\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"use_dis_max\\\\\\\" : false\\\\n  }\\\\n}\\\"\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(float21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test13053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13053");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        multiMatchQueryBuilder10.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str13 = null; // flaky: multiMatchQueryBuilder10.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery14);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0\n  }\n}", (float) 35);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = multiMatchQueryBuilder18.zeroTermsQuery;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = multiMatchQueryBuilder18.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Boolean boolean23 = multiMatchQueryBuilder18.getlenient();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery24);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(zeroTermsQuery19);
        org.junit.Assert.assertNull(zeroTermsQuery20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test13054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13054");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.maxExpansions = 0;
        multiMatchQueryBuilder8.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.maxExpansions((int) (short) -1);
        java.lang.Boolean boolean15 = multiMatchQueryBuilder14.lenient;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type16 = multiMatchQueryBuilder14.gettype();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator17 = null;
        multiMatchQueryBuilder14.operator = operator17;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(type16);
    }

    @Test
    public void test13055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13055");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.Integer int17 = multiMatchQueryBuilder11.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.boost(10.0f);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder11.getlenient();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean20);
    }

    @Test
    public void test13056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13056");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.tieBreaker(0.0f);
        java.lang.Integer int20 = multiMatchQueryBuilder19.maxExpansions;
        multiMatchQueryBuilder19.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : false\n  }\n}");
        multiMatchQueryBuilder19.tieBreaker = 35.0f;
        multiMatchQueryBuilder19.prefixLength = 10;
        multiMatchQueryBuilder19.setslop((java.lang.Integer) 97);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder19.field("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 100,\n    \"useDisMax\" : false,\n    \"lenient\" : true\n  }\n}", 52.0f);
        multiMatchQueryBuilder19.setprefixLength((java.lang.Integer) (-1));
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test13057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13057");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder10.getfields();
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        java.lang.Integer int14 = multiMatchQueryBuilder10.getprefixLength();
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) false);
        java.lang.Object obj17 = multiMatchQueryBuilder10.text;
        multiMatchQueryBuilder10.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!^-1.0\", \"\", \"hi!^-1.0\", \"hi!^-1.0\", \"hi!^-1.0\", \"\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : true,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 35.0\n  }\n}";
        multiMatchQueryBuilder10.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + (-1.0f) + "'", obj17, (-1.0f));
    }

    @Test
    public void test13058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13058");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Integer int16 = multiMatchQueryBuilder8.getslop();
        java.lang.Object obj17 = multiMatchQueryBuilder8.gettext();
        multiMatchQueryBuilder8.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"Name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder8.minimumShouldMatch("");
        java.lang.Boolean boolean24 = multiMatchQueryBuilder23.lenient;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + (-1.0f) + "'", obj17, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + boolean24 + "' != '" + false + "'", boolean24, false);
    }

    @Test
    public void test13059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13059");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap11;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator13 = null;
        multiMatchQueryBuilder8.setoperator(operator13);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray23);
        java.lang.Integer int26 = multiMatchQueryBuilder25.maxExpansions;
        multiMatchQueryBuilder25.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder25.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        multiMatchQueryBuilder31.setzeroTermsQuery(zeroTermsQuery32);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test13060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13060");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"use_dis_max\\\\\\\" : false\\\\n  }\\\\n}\\\",\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 10.0\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test13061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13061");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        multiMatchQueryBuilder10.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str13 = null; // flaky: multiMatchQueryBuilder10.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery14);
        multiMatchQueryBuilder10.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(false);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray27);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = multiMatchQueryBuilder28.getzeroTermsQuery();
        multiMatchQueryBuilder28.cutoffFrequency = 0.0f;
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.zeroTermsQuery(zeroTermsQuery43);
        java.lang.String str45 = multiMatchQueryBuilder44.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder28.type((java.lang.Object) str45);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray55);
        java.lang.Integer int58 = multiMatchQueryBuilder57.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap59 = multiMatchQueryBuilder57.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery60 = null;
        multiMatchQueryBuilder57.zeroTermsQuery = zeroTermsQuery60;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder57.boost((float) (short) 10);
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray71);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery73 = multiMatchQueryBuilder72.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder72.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder72.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder72.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness80 = multiMatchQueryBuilder72.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder72.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type83 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float84 = type83.tieBreaker();
        float float85 = type83.tieBreaker();
        float float86 = type83.tieBreaker();
        multiMatchQueryBuilder72.type = type83;
        float float88 = type83.tieBreaker();
        org.elasticsearch.common.ParseField parseField89 = type83.parseField();
        multiMatchQueryBuilder63.settype(type83);
        org.elasticsearch.index.search.MatchQuery.Type type91 = type83.matchQueryType();
        multiMatchQueryBuilder46.type = type83;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = multiMatchQueryBuilder10.type(type83);
        org.elasticsearch.common.ParseField parseField94 = type83.parseField();
        org.elasticsearch.common.ParseField parseField95 = type83.parseField();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNull(zeroTermsQuery29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNull(int58);
        org.junit.Assert.assertNull(strObjectFloatHashMap59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNull(zeroTermsQuery73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNull(fuzziness80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertTrue("'" + type83 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type83.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + 0.0f + "'", float84 == 0.0f);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + 0.0f + "'", float85 == 0.0f);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + 0.0f + "'", float86 == 0.0f);
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + 0.0f + "'", float88 == 0.0f);
        org.junit.Assert.assertNotNull(parseField89);
        org.junit.Assert.assertTrue("'" + type91 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type91.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder93);
        org.junit.Assert.assertNotNull(parseField94);
        org.junit.Assert.assertNotNull(parseField95);
    }

    @Test
    public void test13062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13062");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder8.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.minimumShouldMatch("");
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder8.fuzziness;
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder24.getzeroTermsQuery();
        multiMatchQueryBuilder24.cutoffFrequency = 0.0f;
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.zeroTermsQuery(zeroTermsQuery39);
        java.lang.String str41 = multiMatchQueryBuilder40.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder24.type((java.lang.Object) str41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder8.type((java.lang.Object) str41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str46 = multiMatchQueryBuilder45.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap47 = multiMatchQueryBuilder45.getfieldsBoosts();
        multiMatchQueryBuilder45.queryName = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 97,\n    \"useDisMax\" : false\n  }\n}";
        java.lang.Boolean boolean50 = multiMatchQueryBuilder45.useDisMax;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(fuzziness15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(strObjectFloatHashMap47);
        org.junit.Assert.assertNull(boolean50);
    }

    @Test
    public void test13063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13063");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str14 = multiMatchQueryBuilder13.minimumShouldMatch;
        java.lang.Float float15 = multiMatchQueryBuilder13.gettieBreaker();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder24.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.boost((float) (short) 100);
        java.lang.Integer int28 = multiMatchQueryBuilder27.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder27.boost((float) '4');
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator31 = multiMatchQueryBuilder30.operator;
        multiMatchQueryBuilder30.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder30.lenient(false);
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type47 = multiMatchQueryBuilder46.type;
        java.lang.Boolean boolean48 = multiMatchQueryBuilder46.getuseDisMax();
        java.lang.Integer int49 = multiMatchQueryBuilder46.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type50 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder46.type = type50;
        float float52 = type50.tieBreaker();
        float float53 = type50.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type54 = type50.matchQueryType();
        float float55 = type50.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type56 = type50.matchQueryType();
        org.elasticsearch.common.ParseField parseField57 = type50.parseField();
        multiMatchQueryBuilder30.settype(type50);
        java.util.List<java.lang.String> strList59 = multiMatchQueryBuilder30.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder13.fuzziness((java.lang.Object) strList59);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(operator31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNull(type47);
        org.junit.Assert.assertEquals("'" + boolean48 + "' != '" + false + "'", boolean48, false);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type50.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + 1.0f + "'", float52 == 1.0f);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 1.0f + "'", float53 == 1.0f);
        org.junit.Assert.assertTrue("'" + type54 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type54.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + 1.0f + "'", float55 == 1.0f);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type56.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField57);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
    }

    @Test
    public void test13064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13064");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.lang.Boolean boolean15 = multiMatchQueryBuilder10.lenient;
        multiMatchQueryBuilder10.setslop((java.lang.Integer) 0);
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = null;
        multiMatchQueryBuilder10.setfuzziness(fuzziness18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.slop(10);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = multiMatchQueryBuilder30.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder30.boost((float) (short) 100);
        java.lang.Integer int34 = multiMatchQueryBuilder33.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder33.boost((float) '4');
        multiMatchQueryBuilder33.setfuzzyRewrite("");
        java.lang.Integer int39 = multiMatchQueryBuilder33.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder33.boost(10.0f);
        multiMatchQueryBuilder41.minimumShouldMatch = "";
        multiMatchQueryBuilder41.boost = 0.0f;
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray53);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery55 = multiMatchQueryBuilder54.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder54.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type58 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder57.settype(type58);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery60 = multiMatchQueryBuilder57.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type61 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float62 = type61.tieBreaker();
        float float63 = type61.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type64 = type61.matchQueryType();
        org.elasticsearch.common.ParseField parseField65 = type61.parseField();
        multiMatchQueryBuilder57.type = type61;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder41.type(type61);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.prefixLength((int) '4');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery70 = null;
        multiMatchQueryBuilder69.zeroTermsQuery = zeroTermsQuery70;
        java.lang.Float float72 = multiMatchQueryBuilder69.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type73 = multiMatchQueryBuilder69.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder10.type(type73);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNull(zeroTermsQuery31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNull(zeroTermsQuery55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type58.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(zeroTermsQuery60);
        org.junit.Assert.assertTrue("'" + type61 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type61.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + 0.0f + "'", float62 == 0.0f);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + 0.0f + "'", float63 == 0.0f);
        org.junit.Assert.assertTrue("'" + type64 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type64.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNull(float72);
        org.junit.Assert.assertTrue("'" + type73 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type73.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
    }

    @Test
    public void test13065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13065");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap17;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.tieBreaker((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}", (float) (short) 1);
        java.lang.Integer int24 = multiMatchQueryBuilder16.maxExpansions;
        multiMatchQueryBuilder16.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder16.tieBreaker(0.0f);
        java.util.List<java.lang.String> strList29 = multiMatchQueryBuilder28.getfields();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        multiMatchQueryBuilder28.zeroTermsQuery = zeroTermsQuery30;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator32 = multiMatchQueryBuilder28.getoperator();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNull(operator32);
    }

    @Test
    public void test13066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13066");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        multiMatchQueryBuilder14.setlenient((java.lang.Boolean) true);
        multiMatchQueryBuilder14.maxExpansions = 35;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder14.boost((float) (short) -1);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params24 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder14.doXContent(xContentBuilder23, params24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(params24);
    }

    @Test
    public void test13067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13067");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.Integer int17 = multiMatchQueryBuilder10.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(true);
        java.lang.String str20 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder10.getfuzziness();
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder10.queryName("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 0,\n    \"maxExpansions\" : 1,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap26 = multiMatchQueryBuilder25.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(strObjectFloatHashMap26);
    }

    @Test
    public void test13068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13068");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Boolean boolean12 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.slop((int) '4');
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.useDisMax(false);
        java.lang.String str26 = multiMatchQueryBuilder25.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness27 = multiMatchQueryBuilder25.fuzziness;
        multiMatchQueryBuilder25.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder25.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.Integer int32 = multiMatchQueryBuilder25.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder25.lenient(true);
        java.lang.String str35 = multiMatchQueryBuilder25.getqueryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder14.type((java.lang.Object) str35);
        multiMatchQueryBuilder36.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.String str39 = multiMatchQueryBuilder36.getminimumShouldMatch();
        java.lang.String str40 = multiMatchQueryBuilder36.queryName;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(fuzziness27);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test13069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13069");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder11.settype(type12);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = multiMatchQueryBuilder11.fieldsBoosts;
        multiMatchQueryBuilder11.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"use_dis_max\" : true,\n    \"_name\" : \"\"\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.field("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"tie_breaker\" : -1.0,\n    \"lenient\" : false\n  }\n}");
        multiMatchQueryBuilder11.setlenient((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(strObjectFloatHashMap14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test13070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13070");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness14 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        multiMatchQueryBuilder16.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}");
        multiMatchQueryBuilder16.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery32);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray41);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery43 = multiMatchQueryBuilder42.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder42.boost((float) (short) 100);
        java.lang.Integer int46 = multiMatchQueryBuilder45.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder45.boost((float) '4');
        multiMatchQueryBuilder45.setfuzzyRewrite("");
        java.lang.String str51 = multiMatchQueryBuilder45.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder45.tieBreaker(0.0f);
        multiMatchQueryBuilder45.boost = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type56 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        multiMatchQueryBuilder45.type = type56;
        float float58 = type56.tieBreaker();
        float float59 = type56.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder33.type(type56);
        org.elasticsearch.common.ParseField parseField61 = type56.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder16.type(type56);
        float float63 = type56.tieBreaker();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(fuzziness14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNull(zeroTermsQuery43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type56.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + 0.0f + "'", float58 == 0.0f);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + 0.0f + "'", float59 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(parseField61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + 0.0f + "'", float63 == 0.0f);
    }

    @Test
    public void test13071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13071");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("hi!", (float) (-1L));
        multiMatchQueryBuilder17.slop = 0;
        java.lang.String str20 = multiMatchQueryBuilder17.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}");
        java.lang.Object obj23 = multiMatchQueryBuilder22.text;
        java.lang.Boolean boolean24 = multiMatchQueryBuilder22.useDisMax;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder22.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder22.prefixLength((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"tie_breaker\" : 0.0\n  }\n}");
        multiMatchQueryBuilder29.setmaxExpansions((java.lang.Integer) (-1));
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + (-1.0f) + "'", obj23, (-1.0f));
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test13072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13072");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions(0);
        multiMatchQueryBuilder10.cutoffFrequency = (-1.0f);
        multiMatchQueryBuilder10.boost = 0.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = multiMatchQueryBuilder10.zeroTermsQuery;
        java.lang.String str23 = null; // flaky: multiMatchQueryBuilder10.toString();
        multiMatchQueryBuilder10.prefixLength = 10;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(zeroTermsQuery22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 0.0,\n    \"maxExpansions\" : 0,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0\n  }\n}" + "'", str23, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 0.0,\n    \"maxExpansions\" : 0,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0\n  }\n}");
    }

    @Test
    public void test13073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13073");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.slop((int) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap17;
        java.lang.Object obj19 = multiMatchQueryBuilder16.text;
        java.lang.Float float20 = multiMatchQueryBuilder16.getcutoffFrequency();
        multiMatchQueryBuilder16.setmaxExpansions((java.lang.Integer) 100);
        java.lang.Boolean boolean23 = multiMatchQueryBuilder16.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-1.0f) + "'", obj19, (-1.0f));
        org.junit.Assert.assertNull(float20);
        org.junit.Assert.assertNull(boolean23);
    }

    @Test
    public void test13074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13074");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) 100);
        java.lang.String str17 = null; // flaky: multiMatchQueryBuilder14.toString();
        multiMatchQueryBuilder14.slop = (-1);
        multiMatchQueryBuilder14.boost = 1.0f;
        java.lang.Integer int22 = multiMatchQueryBuilder14.getmaxExpansions();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap23 = multiMatchQueryBuilder14.getfieldsBoosts();
        multiMatchQueryBuilder14.prefixLength = 1;
        java.lang.String str26 = multiMatchQueryBuilder14.getminimumShouldMatch();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap27 = multiMatchQueryBuilder14.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}" + "'", str17, "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(strObjectFloatHashMap23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(strObjectFloatHashMap27);
    }

    @Test
    public void test13075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13075");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator18 = multiMatchQueryBuilder10.operator;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery19;
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.useDisMax(false);
        java.lang.String str32 = multiMatchQueryBuilder31.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder31.slop((int) '#');
        java.lang.Object obj35 = multiMatchQueryBuilder34.gettext();
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type47 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder44.type(type47);
        org.elasticsearch.common.ParseField parseField49 = type47.parseField();
        multiMatchQueryBuilder34.type = type47;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder10.type(type47);
        java.util.List<java.lang.String> strList52 = multiMatchQueryBuilder10.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder10.cutoffFrequency((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder10.cutoffFrequency((float) 100L);
        java.lang.Boolean boolean57 = multiMatchQueryBuilder56.getlenient();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNull(operator18);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + (-1.0f) + "'", obj35, (-1.0f));
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type47.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(parseField49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNull(boolean57);
    }

    @Test
    public void test13076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13076");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) 100);
        java.lang.Integer int17 = multiMatchQueryBuilder14.slop;
        multiMatchQueryBuilder14.setprefixLength((java.lang.Integer) 1);
        multiMatchQueryBuilder14.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.zeroTermsQuery(zeroTermsQuery33);
        multiMatchQueryBuilder34.minimumShouldMatch = "hi!";
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap37 = null;
        multiMatchQueryBuilder34.setfieldsBoosts(strObjectFloatHashMap37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder34.boost(100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type41 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float42 = type41.tieBreaker();
        float float43 = type41.tieBreaker();
        float float44 = type41.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder40.type(type41);
        multiMatchQueryBuilder14.type = type41;
        java.lang.String str47 = multiMatchQueryBuilder14.getfuzzyRewrite();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery48 = null;
        multiMatchQueryBuilder14.zeroTermsQuery = zeroTermsQuery48;
        org.elasticsearch.common.unit.Fuzziness fuzziness50 = multiMatchQueryBuilder14.fuzziness;
        multiMatchQueryBuilder14.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 1.0,\n    \"prefix_length\" : 1,\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type41.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 0.0f + "'", float42 == 0.0f);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 0.0f + "'", float43 == 0.0f);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 0.0f + "'", float44 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(fuzziness50);
    }

    @Test
    public void test13077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13077");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        java.lang.Integer int15 = multiMatchQueryBuilder14.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder14.setzeroTermsQuery(zeroTermsQuery16);
        java.lang.Object obj18 = multiMatchQueryBuilder14.text;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + '#' + "'", obj18, '#');
    }

    @Test
    public void test13078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13078");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.lang.Boolean boolean13 = multiMatchQueryBuilder10.getlenient();
        multiMatchQueryBuilder10.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        java.lang.Float float16 = multiMatchQueryBuilder10.tieBreaker;
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray24);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator26 = multiMatchQueryBuilder25.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder25.field("");
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray36);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = multiMatchQueryBuilder37.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder37.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type41 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder40.settype(type41);
        float float43 = type41.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder28.type(type41);
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray52);
        multiMatchQueryBuilder53.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray63);
        java.lang.String str65 = multiMatchQueryBuilder64.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder53.type((java.lang.Object) str65);
        multiMatchQueryBuilder66.tieBreaker = 10.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder44.fuzziness((java.lang.Object) 10.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness70 = multiMatchQueryBuilder69.fuzziness;
        multiMatchQueryBuilder10.setfuzziness(fuzziness70);
        java.lang.Integer int72 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder10.queryName("");
        java.lang.Boolean boolean75 = multiMatchQueryBuilder74.getuseDisMax();
        multiMatchQueryBuilder74.lenient = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder74.cutoffFrequency((float) '4');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNull(operator26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNull(zeroTermsQuery38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type41.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 0.0f + "'", float43 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(fuzziness70);
        org.junit.Assert.assertNull(int72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNull(boolean75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
    }

    @Test
    public void test13079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13079");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = null;
        multiMatchQueryBuilder10.fieldsBoosts = strObjectFloatHashMap14;
        multiMatchQueryBuilder10.queryName = "";
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.useDisMax(false);
        java.lang.String str29 = multiMatchQueryBuilder28.getminimumShouldMatch();
        java.util.List<java.lang.String> strList30 = multiMatchQueryBuilder28.getfields();
        java.lang.Integer int31 = multiMatchQueryBuilder28.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder28.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator34 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.operator(operator34);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap36 = null;
        multiMatchQueryBuilder33.setfieldsBoosts(strObjectFloatHashMap36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder33);
        java.lang.Integer int39 = multiMatchQueryBuilder10.getmaxExpansions();
        multiMatchQueryBuilder10.queryName = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!^-1.0\", \"\", \"hi!^-1.0\", \"hi!^-1.0\", \"hi!^-1.0\", \"\", \"hi!^-1.0\" ],\n    \"boost\" : 100.0,\n    \"slop\" : 0,\n    \"useDisMax\" : false,\n    \"Name\" : \"hi!\"\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(int39);
    }

    @Test
    public void test13080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13080");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.slop;
        java.lang.Integer int16 = multiMatchQueryBuilder10.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.cutoffFrequency(10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}");
        multiMatchQueryBuilder10.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 100,\n    \"use_dis_max\" : false,\n    \"lenient\" : true\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test13081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13081");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder8.getmaxExpansions();
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) 10.0f);
        multiMatchQueryBuilder8.queryName = "hi!";
        multiMatchQueryBuilder8.setuseDisMax((java.lang.Boolean) false);
        multiMatchQueryBuilder8.setprefixLength((java.lang.Integer) 100);
        java.lang.String str21 = multiMatchQueryBuilder8.minimumShouldMatch;
        java.util.List<java.lang.String> strList22 = multiMatchQueryBuilder8.fields;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = null;
        multiMatchQueryBuilder8.setzeroTermsQuery(zeroTermsQuery23);
        org.elasticsearch.common.unit.Fuzziness fuzziness25 = multiMatchQueryBuilder8.fuzziness;
        multiMatchQueryBuilder8.setuseDisMax((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNull(fuzziness25);
    }

    @Test
    public void test13082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13082");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.slop = 0;
        multiMatchQueryBuilder10.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder10.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.boost(1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.field("", (float) (-1L));
        org.elasticsearch.common.unit.Fuzziness fuzziness22 = multiMatchQueryBuilder21.getfuzziness();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(fuzziness22);
    }

    @Test
    public void test13083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13083");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Integer int16 = multiMatchQueryBuilder8.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = multiMatchQueryBuilder8.gettype();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(type17);
    }

    @Test
    public void test13084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13084");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder11.zeroTermsQuery;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = multiMatchQueryBuilder11.getfieldsBoosts();
        java.lang.Integer int16 = multiMatchQueryBuilder11.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"prefixLength\" : 100,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}");
        multiMatchQueryBuilder11.setqueryName("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 0.0,\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 0,\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : true,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNull(strObjectFloatHashMap15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test13085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13085");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.Integer int17 = multiMatchQueryBuilder11.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.maxExpansions((int) (byte) 100);
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder11.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder11.maxExpansions((int) (short) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.zeroTermsQuery(zeroTermsQuery23);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test13086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13086");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder14.cutoffFrequency((float) (byte) 0);
        multiMatchQueryBuilder14.boost = 1.0f;
        java.lang.String str25 = multiMatchQueryBuilder14.getfuzzyRewrite();
        multiMatchQueryBuilder14.setprefixLength((java.lang.Integer) (-1));
        java.lang.String str28 = multiMatchQueryBuilder14.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder14.maxExpansions(52);
        java.lang.Integer int31 = multiMatchQueryBuilder30.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder30.cutoffFrequency((float) 97);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
    }

    @Test
    public void test13087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13087");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        java.lang.String str15 = multiMatchQueryBuilder11.queryName;
        java.lang.Integer int16 = multiMatchQueryBuilder11.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.tieBreaker((float) (short) 100);
        java.util.List<java.lang.String> strList19 = multiMatchQueryBuilder18.fields;
        multiMatchQueryBuilder18.setslop((java.lang.Integer) 32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.prefixLength((int) (byte) -1);
        multiMatchQueryBuilder18.setcutoffFrequency((java.lang.Float) 100.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test13088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13088");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.lang.String str14 = multiMatchQueryBuilder10.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.tieBreaker((float) 1);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray24);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = multiMatchQueryBuilder25.getzeroTermsQuery();
        multiMatchQueryBuilder25.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator29 = null;
        multiMatchQueryBuilder25.setoperator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = null; // flaky: multiMatchQueryBuilder16.fuzziness((java.lang.Object) multiMatchQueryBuilder25);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator32 = null;
        multiMatchQueryBuilder25.setoperator(operator32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder25.useDisMax(false);
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray43);
        multiMatchQueryBuilder44.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder44.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder44.minimumShouldMatch("");
        org.elasticsearch.common.unit.Fuzziness fuzziness51 = multiMatchQueryBuilder44.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery52 = multiMatchQueryBuilder44.zeroTermsQuery;
        multiMatchQueryBuilder44.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = null; // flaky: multiMatchQueryBuilder35.fuzziness((java.lang.Object) multiMatchQueryBuilder44);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery56 = null; // flaky: multiMatchQueryBuilder55.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNull(zeroTermsQuery26);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(fuzziness51);
        org.junit.Assert.assertNull(zeroTermsQuery52);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNull(zeroTermsQuery56);
    }

    @Test
    public void test13089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13089");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.operator(operator14);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        multiMatchQueryBuilder24.maxExpansions = 0;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator27 = multiMatchQueryBuilder24.getoperator();
        java.lang.String str28 = multiMatchQueryBuilder24.getfuzzyRewrite();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.useDisMax(false);
        java.lang.String str40 = multiMatchQueryBuilder39.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder39.slop((int) '#');
        java.lang.Object obj43 = multiMatchQueryBuilder42.gettext();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type55 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder52.type(type55);
        org.elasticsearch.common.ParseField parseField57 = type55.parseField();
        multiMatchQueryBuilder42.type = type55;
        org.elasticsearch.common.ParseField parseField59 = type55.parseField();
        multiMatchQueryBuilder24.settype(type55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder15.type(type55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder15.field("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}", (float) (short) -1);
        multiMatchQueryBuilder15.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        multiMatchQueryBuilder15.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"max_expansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"_name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tie_breaker\\\" : 10.0\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 97.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(operator27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertEquals("'" + obj43 + "' != '" + (-1.0f) + "'", obj43, (-1.0f));
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type55.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(parseField57);
        org.junit.Assert.assertNotNull(parseField59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
    }

    @Test
    public void test13090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13090");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Float float15 = multiMatchQueryBuilder10.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        java.lang.Integer int18 = multiMatchQueryBuilder17.getmaxExpansions();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.type(type30);
        org.elasticsearch.common.ParseField parseField32 = type30.parseField();
        float float33 = type30.tieBreaker();
        multiMatchQueryBuilder17.type = type30;
        java.lang.Float float35 = multiMatchQueryBuilder17.getboost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder17.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"\" ],\n    \"fuzziness\" : \"[hi!, , hi!, hi!, hi!, ]\"\n  }\n}");
        multiMatchQueryBuilder17.queryName = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"Name\" : \"hi!\"\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder17.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"use_dis_max\\\\\\\" : false\\\\n  }\\\\n}\\\",\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"lenient\" : true,\n    \"cutoff_frequency\" : 10.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type30.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(parseField32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 1.0f + "'", float33 == 1.0f);
        org.junit.Assert.assertNull(float35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
    }

    @Test
    public void test13091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13091");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.useDisMax(true);
        java.lang.String str19 = multiMatchQueryBuilder18.analyzer;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap20 = multiMatchQueryBuilder18.fieldsBoosts;
        multiMatchQueryBuilder18.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false\n  }\n}";
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strObjectFloatHashMap20);
    }

    @Test
    public void test13092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13092");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery14;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder10.lenient = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.operator(operator20);
        java.lang.Boolean boolean22 = multiMatchQueryBuilder10.lenient;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 97.0,\n    \"fuzziness\" : \"[hi!, , hi!, hi!, hi!, ]\",\n    \"tieBreaker\" : 52.0,\n    \"Name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder10.lenient(true);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = multiMatchQueryBuilder37.type;
        multiMatchQueryBuilder37.slop = 0;
        multiMatchQueryBuilder37.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator43 = multiMatchQueryBuilder37.getoperator();
        multiMatchQueryBuilder37.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder37.maxExpansions((-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder37.boost((float) 52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type50 = multiMatchQueryBuilder37.type;
        java.lang.Integer int51 = multiMatchQueryBuilder37.getprefixLength();
        multiMatchQueryBuilder37.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"tie_breaker\" : 100.0,\n    \"lenient\" : false,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"maxExpansions\\\" : 97,\\n    \\\"useDisMax\\\" : false\\n  }\\n}\"\n  }\n}");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = null; // flaky: multiMatchQueryBuilder26.type((java.lang.Object) multiMatchQueryBuilder37);
// flaky:             org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multimatch\" : {?    \"query\" : -1.0,?    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],?    \"boost\" : 52.0,?    \"slop\" : 0,?    \"maxexpansions\" : -1,?    \"minimumshouldmatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"lenient\\\" : false,\\n    \\\"_name\\\" : \\\"{\\\\n  \\\\\\\"multimatch\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"maxexpansions\\\\\\\" : 97,\\\\n    \\\\\\\"usedismax\\\\\\\" : false\\\\n  }\\\\n}\\\"\\n  }\\n}\",?    \"usedismax\" : true,?    \"name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + boolean22 + "' != '" + false + "'", boolean22, false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(type38);
        org.junit.Assert.assertNull(operator43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(type50);
        org.junit.Assert.assertNull(int51);
    }

    @Test
    public void test13093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13093");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.slop((int) '#');
        multiMatchQueryBuilder13.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.lenient(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery18);
        multiMatchQueryBuilder19.fuzzyRewrite = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.useDisMax(false);
        multiMatchQueryBuilder23.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 32.0,\n    \"prefixLength\" : 1,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multiMatch\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"maxExpansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzyRewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"Name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tieBreaker\\\" : 10.0\\n  }\\n}\",\n    \"cutoffFrequency\" : 0.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test13094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13094");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.slop((int) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.slop((int) (short) 10);
        multiMatchQueryBuilder10.setqueryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = multiMatchQueryBuilder10.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = multiMatchQueryBuilder10.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.field("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 35.0,\n    \"cutoffFrequency\" : 100.0\n  }\n}", (float) 100L);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(type18);
        org.junit.Assert.assertNull(type19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test13095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13095");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        java.lang.String str15 = multiMatchQueryBuilder11.queryName;
        java.lang.Integer int16 = multiMatchQueryBuilder11.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.slop(52);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator19 = multiMatchQueryBuilder18.operator;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(operator19);
    }

    @Test
    public void test13096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13096");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray18);
        java.lang.String str20 = multiMatchQueryBuilder19.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.type((java.lang.Object) str20);
        multiMatchQueryBuilder21.tieBreaker = 10.0f;
        multiMatchQueryBuilder21.setlenient((java.lang.Boolean) true);
        multiMatchQueryBuilder21.settieBreaker((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type28 = multiMatchQueryBuilder21.gettype();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(type28);
    }

    @Test
    public void test13097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13097");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder15.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.boost((float) 10L);
        java.lang.String[] strArray23 = new java.lang.String[] { "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 0,\n    \"useDisMax\" : false\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder18, strArray23);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray33);
        java.lang.Integer int36 = multiMatchQueryBuilder35.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap37 = multiMatchQueryBuilder35.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = null;
        multiMatchQueryBuilder35.zeroTermsQuery = zeroTermsQuery38;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder35.boost((float) (short) 10);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray49);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery51 = multiMatchQueryBuilder50.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder50.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder50.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder50.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness58 = multiMatchQueryBuilder50.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder50.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type61 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float62 = type61.tieBreaker();
        float float63 = type61.tieBreaker();
        float float64 = type61.tieBreaker();
        multiMatchQueryBuilder50.type = type61;
        float float66 = type61.tieBreaker();
        org.elasticsearch.common.ParseField parseField67 = type61.parseField();
        multiMatchQueryBuilder41.settype(type61);
        org.elasticsearch.common.ParseField parseField69 = type61.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder24.type(type61);
        java.util.List<java.lang.String> strList71 = multiMatchQueryBuilder70.getfields();
        java.lang.Float float72 = multiMatchQueryBuilder70.gettieBreaker();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNull(strObjectFloatHashMap37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNull(zeroTermsQuery51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNull(fuzziness58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertTrue("'" + type61 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type61.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + 0.0f + "'", float62 == 0.0f);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + 0.0f + "'", float63 == 0.0f);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + 0.0f + "'", float64 == 0.0f);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + 0.0f + "'", float66 == 0.0f);
        org.junit.Assert.assertNotNull(parseField67);
        org.junit.Assert.assertNotNull(parseField69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNull(float72);
    }

    @Test
    public void test13098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13098");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap11;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder8.setfieldsBoosts(strObjectFloatHashMap13);
        java.lang.String str15 = multiMatchQueryBuilder8.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        multiMatchQueryBuilder8.setoperator(operator16);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray25);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator27 = multiMatchQueryBuilder26.getoperator();
        java.lang.Integer int28 = multiMatchQueryBuilder26.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator29 = null;
        multiMatchQueryBuilder26.setoperator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder26.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray40);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery42 = multiMatchQueryBuilder41.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder41.boost((float) (short) 100);
        multiMatchQueryBuilder44.queryName = "hi!";
        java.lang.Integer int47 = multiMatchQueryBuilder44.maxExpansions;
        java.lang.String str48 = multiMatchQueryBuilder44.queryName;
        java.lang.Boolean boolean49 = multiMatchQueryBuilder44.lenient;
        java.lang.Boolean boolean50 = multiMatchQueryBuilder44.lenient;
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray58);
        multiMatchQueryBuilder59.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder59.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder59.minimumShouldMatch("");
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean50, strArray73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder26, strArray73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder8, strArray73);
        multiMatchQueryBuilder78.setslop((java.lang.Integer) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder78.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multiMatch\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"maxExpansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzyRewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"Name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tieBreaker\\\" : 10.0\\n  }\\n}^100.0\" ],\n    \"max_expansions\" : 100,\n    \"lenient\" : true,\n    \"cutoff_frequency\" : 100.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNull(operator27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNull(zeroTermsQuery42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertNull(boolean50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
    }

    @Test
    public void test13099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13099");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder11.gettype();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder11.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        multiMatchQueryBuilder20.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        java.lang.String str23 = multiMatchQueryBuilder20.minimumShouldMatch;
        multiMatchQueryBuilder20.tieBreaker = 52.0f;
        multiMatchQueryBuilder20.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder20.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true\n  }\n}");
        multiMatchQueryBuilder29.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 10.0,\n    \"fuzzy_rewrite\" : \"\"\n  }\n}";
        multiMatchQueryBuilder29.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false,\\n    \\\"lenient\\\" : false\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"lenient\" : true\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test13100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13100");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.maxExpansions((int) (short) 0);
        multiMatchQueryBuilder11.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery22);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray31);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = multiMatchQueryBuilder32.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder32.boost((float) (short) 100);
        java.lang.Integer int36 = multiMatchQueryBuilder35.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = multiMatchQueryBuilder35.zeroTermsQuery;
        multiMatchQueryBuilder35.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder35.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = null; // flaky: multiMatchQueryBuilder23.fuzziness((java.lang.Object) multiMatchQueryBuilder41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder41.tieBreaker((float) (short) 1);
        multiMatchQueryBuilder44.tieBreaker = 10.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery47 = multiMatchQueryBuilder44.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(zeroTermsQuery33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNull(zeroTermsQuery37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(zeroTermsQuery47);
    }

    @Test
    public void test13101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13101");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        multiMatchQueryBuilder15.setoperator(operator16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.boost((float) 1);
        java.lang.Object obj20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder15.type(obj20);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = multiMatchQueryBuilder15.zeroTermsQuery;
        multiMatchQueryBuilder15.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"\" ],\n    \"slop\" : 0,\n    \"tie_breaker\" : -1.0,\n    \"lenient\" : false\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder15.operator(operator25);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(zeroTermsQuery22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test13102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13102");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder8.getmaxExpansions();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder8.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = multiMatchQueryBuilder8.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.fuzzyRewrite("");
        multiMatchQueryBuilder8.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.field("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"type\" : \"best_fields\",\n    \"boost\" : 100.0,\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.zeroTermsQuery(zeroTermsQuery22);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray31);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = multiMatchQueryBuilder32.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder32.boost((float) (short) 100);
        multiMatchQueryBuilder35.queryName = "hi!";
        java.lang.Integer int38 = multiMatchQueryBuilder35.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder35.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder35.maxExpansions((int) (short) 0);
        multiMatchQueryBuilder35.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        multiMatchQueryBuilder35.setmaxExpansions((java.lang.Integer) 1);
        java.lang.String[] strArray52 = new java.lang.String[] { "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}^1.0\" ],\n    \"useDisMax\" : true,\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"maxExpansions\\\" : 0,\\n    \\\"useDisMax\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!^-1.0\", \"\", \"hi!^-1.0\", \"hi!^-1.0\", \"hi!^-1.0\", \"\", \"hi!^-1.0\" ],\n    \"boost\" : 100.0,\n    \"slop\" : 0,\n    \"useDisMax\" : false,\n    \"Name\" : \"hi!\"\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder35, strArray52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder21, strArray52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder21.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"minimumShouldMatch\" : \"hi!\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery57 = multiMatchQueryBuilder56.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(operator15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(zeroTermsQuery33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNull(zeroTermsQuery57);
    }

    @Test
    public void test13103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13103");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray18);
        java.lang.String str20 = multiMatchQueryBuilder19.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.type((java.lang.Object) str20);
        multiMatchQueryBuilder21.tieBreaker = 10.0f;
        multiMatchQueryBuilder21.setlenient((java.lang.Boolean) true);
        multiMatchQueryBuilder21.settieBreaker((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder21.lenient(true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test13104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13104");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator13 = null;
        multiMatchQueryBuilder12.setoperator(operator13);
        java.lang.String str15 = null; // flaky: multiMatchQueryBuilder12.toString();
        java.lang.String str16 = multiMatchQueryBuilder12.getfuzzyRewrite();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray25);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = null;
        multiMatchQueryBuilder27.setzeroTermsQuery(zeroTermsQuery28);
        java.lang.Boolean boolean30 = multiMatchQueryBuilder27.getlenient();
        java.lang.Object obj31 = multiMatchQueryBuilder27.text;
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray39);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery41 = multiMatchQueryBuilder40.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder40.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type44 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder43.settype(type44);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery46 = multiMatchQueryBuilder43.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type47 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float48 = type47.tieBreaker();
        float float49 = type47.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type50 = type47.matchQueryType();
        org.elasticsearch.common.ParseField parseField51 = type47.parseField();
        multiMatchQueryBuilder43.type = type47;
        org.elasticsearch.index.search.MatchQuery.Type type53 = type47.matchQueryType();
        multiMatchQueryBuilder27.settype(type47);
        org.elasticsearch.common.ParseField parseField55 = type47.parseField();
        multiMatchQueryBuilder12.settype(type47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder12.field("", (float) (short) -1);
        multiMatchQueryBuilder12.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type62 = multiMatchQueryBuilder12.gettype();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : false\n  }\n}" + "'", str15, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : false\n  }\n}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertEquals("'" + obj31 + "' != '" + '#' + "'", obj31, '#');
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNull(zeroTermsQuery41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type44.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(zeroTermsQuery46);
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type47.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + 0.0f + "'", float48 == 0.0f);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + 0.0f + "'", float49 == 0.0f);
        org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type50.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField51);
        org.junit.Assert.assertTrue("'" + type53 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type53.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertTrue("'" + type62 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type62.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
    }

    @Test
    public void test13105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13105");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.tieBreaker(0.0f);
        multiMatchQueryBuilder11.boost = 0.0f;
        multiMatchQueryBuilder11.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"tieBreaker\" : 0.0\n  }\n}";
        java.lang.Integer int24 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        multiMatchQueryBuilder11.setzeroTermsQuery(zeroTermsQuery25);
        multiMatchQueryBuilder11.settieBreaker((java.lang.Float) 0.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(int24);
    }

    @Test
    public void test13106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13106");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery14;
        multiMatchQueryBuilder10.setqueryName("hi!");
        multiMatchQueryBuilder10.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.maxExpansions((-1));
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = null;
        multiMatchQueryBuilder10.operator = operator22;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator24 = multiMatchQueryBuilder10.operator;
        multiMatchQueryBuilder10.queryName = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"tie_breaker\" : -1.0\n  }\n}";
        org.elasticsearch.common.unit.Fuzziness fuzziness27 = multiMatchQueryBuilder10.getfuzziness();
        java.util.List<java.lang.String> strList28 = multiMatchQueryBuilder10.getfields();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(operator24);
        org.junit.Assert.assertNull(fuzziness27);
        org.junit.Assert.assertNotNull(strList28);
    }

    @Test
    public void test13107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13107");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap11;
        multiMatchQueryBuilder8.useDisMax = true;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = multiMatchQueryBuilder8.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.lenient(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.zeroTermsQuery(zeroTermsQuery20);
        multiMatchQueryBuilder21.setuseDisMax((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(strObjectFloatHashMap15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test13108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13108");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.common.unit.Fuzziness fuzziness11 = multiMatchQueryBuilder10.getfuzziness();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = null;
        multiMatchQueryBuilder10.fieldsBoosts = strObjectFloatHashMap12;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.prefixLength((int) (short) 1);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap16 = multiMatchQueryBuilder15.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(fuzziness11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(strObjectFloatHashMap16);
    }

    @Test
    public void test13109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13109");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.slop((int) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.slop((int) (short) 10);
        multiMatchQueryBuilder10.queryName = "hi!";
        java.lang.Boolean boolean18 = multiMatchQueryBuilder10.lenient;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator19 = multiMatchQueryBuilder10.operator;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap20 = multiMatchQueryBuilder10.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNull(operator19);
        org.junit.Assert.assertNull(strObjectFloatHashMap20);
    }

    @Test
    public void test13110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13110");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        java.lang.Boolean boolean12 = multiMatchQueryBuilder8.getuseDisMax();
        java.lang.String str13 = multiMatchQueryBuilder8.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.tieBreaker((float) 10L);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
    }

    @Test
    public void test13111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13111");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        java.lang.String str16 = multiMatchQueryBuilder11.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator17 = multiMatchQueryBuilder11.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.field("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}", (float) (byte) 0);
        multiMatchQueryBuilder11.setslop((java.lang.Integer) 0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(operator17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test13112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13112");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder10, strArray22);
        multiMatchQueryBuilder10.maxExpansions = 1;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder10.operator(operator28);
        multiMatchQueryBuilder10.slop = 100;
        multiMatchQueryBuilder10.setminimumShouldMatch("hi!");
        java.lang.String str34 = multiMatchQueryBuilder10.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder10.prefixLength(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder10.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.maxExpansions(0);
        java.lang.Float float41 = multiMatchQueryBuilder38.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder38.boost((float) 52);
        multiMatchQueryBuilder43.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!^-1.0\", \"\", \"hi!^-1.0\", \"hi!^-1.0\", \"hi!^-1.0\", \"\" ],\n    \"max_expansions\" : 10,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : true,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 35.0\n  }\n}";
        multiMatchQueryBuilder43.queryName = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}^10.0\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0,\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"slop\" : 1,\n    \"useDisMax\" : false,\n    \"lenient\" : false\n  }\n}";
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(float41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
    }

    @Test
    public void test13113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13113");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.setslop((java.lang.Integer) 52);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery18;
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder10.fields;
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) (-1.0f));
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(fuzziness15);
        org.junit.Assert.assertNotNull(strList20);
    }

    @Test
    public void test13114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13114");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.String str12 = null; // flaky: multiMatchQueryBuilder8.toString();
        java.lang.Boolean boolean13 = multiMatchQueryBuilder8.lenient;
        java.lang.Integer int14 = multiMatchQueryBuilder8.getmaxExpansions();
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder8.getfuzziness();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}" + "'", str12, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(fuzziness15);
    }

    @Test
    public void test13115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13115");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.prefixLength((int) (byte) -1);
        multiMatchQueryBuilder10.lenient = false;
        multiMatchQueryBuilder10.cutoffFrequency = 97.0f;
        multiMatchQueryBuilder10.setmaxExpansions((java.lang.Integer) 100);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
    }

    @Test
    public void test13116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13116");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery14;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder10.lenient = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}", (float) (byte) 10);
        java.lang.Float float25 = multiMatchQueryBuilder24.cutoffFrequency;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator26 = null;
        multiMatchQueryBuilder24.setoperator(operator26);
        java.lang.Float float28 = multiMatchQueryBuilder24.gettieBreaker();
        multiMatchQueryBuilder24.prefixLength = 100;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder24.setzeroTermsQuery(zeroTermsQuery31);
        java.lang.Float float33 = multiMatchQueryBuilder24.tieBreaker;
        java.lang.String str34 = multiMatchQueryBuilder24.getanalyzer();
        java.lang.String str35 = multiMatchQueryBuilder24.getminimumShouldMatch();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(float25);
        org.junit.Assert.assertNull(float28);
        org.junit.Assert.assertNull(float33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test13117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13117");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        multiMatchQueryBuilder14.setlenient((java.lang.Boolean) true);
        java.lang.Object obj19 = multiMatchQueryBuilder14.text;
        multiMatchQueryBuilder14.slop = 0;
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray30);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        multiMatchQueryBuilder32.setzeroTermsQuery(zeroTermsQuery33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.cutoffFrequency((float) 100);
        java.lang.Integer int39 = multiMatchQueryBuilder36.slop;
        multiMatchQueryBuilder36.setprefixLength((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator42 = multiMatchQueryBuilder36.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder36.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = null; // flaky: multiMatchQueryBuilder14.fuzziness((java.lang.Object) multiMatchQueryBuilder44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder14.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"use_dis_max\" : true,\n    \"_name\" : \"\"\n  }\n}");
        java.lang.Boolean boolean48 = multiMatchQueryBuilder47.lenient;
        multiMatchQueryBuilder47.setcutoffFrequency((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type51 = multiMatchQueryBuilder47.gettype();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + '#' + "'", obj19, '#');
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNull(operator42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertEquals("'" + boolean48 + "' != '" + true + "'", boolean48, true);
        org.junit.Assert.assertNull(type51);
    }

    @Test
    public void test13118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13118");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery14;
        multiMatchQueryBuilder10.setqueryName("hi!");
        multiMatchQueryBuilder10.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.maxExpansions((-1));
        java.lang.Object obj22 = multiMatchQueryBuilder21.gettext();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.operator(operator23);
        java.lang.Boolean boolean25 = multiMatchQueryBuilder24.getuseDisMax();
        java.lang.Float float26 = multiMatchQueryBuilder24.cutoffFrequency;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + (-1.0f) + "'", obj22, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + false + "'", boolean25, false);
        org.junit.Assert.assertNull(float26);
    }

    @Test
    public void test13119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13119");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder8.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.minimumShouldMatch("");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.operator(operator15);
        multiMatchQueryBuilder16.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.cutoffFrequency(1.0f);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder20.doXContent(xContentBuilder21, params22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(params22);
    }

    @Test
    public void test13120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13120");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.minimumShouldMatch("");
        java.lang.Object obj14 = multiMatchQueryBuilder8.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder8.getslop();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder8.settieBreaker((java.lang.Float) 97.0f);
        multiMatchQueryBuilder8.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = multiMatchQueryBuilder30.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder30.boost((float) (short) 100);
        multiMatchQueryBuilder33.queryName = "hi!";
        java.lang.Integer int36 = multiMatchQueryBuilder33.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder33.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder33.maxExpansions((int) (short) 0);
        multiMatchQueryBuilder33.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        multiMatchQueryBuilder33.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder33.lenient(true);
        java.lang.Float float48 = multiMatchQueryBuilder47.gettieBreaker();
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray56);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery58 = multiMatchQueryBuilder57.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder57.boost((float) (short) 100);
        java.lang.Integer int61 = multiMatchQueryBuilder60.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery62 = multiMatchQueryBuilder60.zeroTermsQuery;
        org.elasticsearch.common.unit.Fuzziness fuzziness63 = null;
        multiMatchQueryBuilder60.fuzziness = fuzziness63;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator65 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder60.operator(operator65);
        multiMatchQueryBuilder66.setboost((java.lang.Float) 1.0f);
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray76);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery78 = multiMatchQueryBuilder77.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder77.boost((float) (short) 100);
        multiMatchQueryBuilder80.queryName = "hi!";
        java.lang.Integer int83 = multiMatchQueryBuilder80.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder80.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = multiMatchQueryBuilder80.maxExpansions((int) (short) 0);
        java.lang.String str89 = multiMatchQueryBuilder80.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap90 = multiMatchQueryBuilder80.fieldsBoosts;
        multiMatchQueryBuilder66.setfieldsBoosts(strObjectFloatHashMap90);
        java.lang.Integer int92 = multiMatchQueryBuilder66.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery93 = null;
        multiMatchQueryBuilder66.zeroTermsQuery = zeroTermsQuery93;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap95 = multiMatchQueryBuilder66.fieldsBoosts;
        multiMatchQueryBuilder47.fieldsBoosts = strObjectFloatHashMap95;
        multiMatchQueryBuilder8.setfieldsBoosts(strObjectFloatHashMap95);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + (-1.0f) + "'", obj14, (-1.0f));
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNull(zeroTermsQuery31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(float48);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNull(zeroTermsQuery58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNull(zeroTermsQuery62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNull(zeroTermsQuery78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNull(int83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder88);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap90);
        org.junit.Assert.assertNull(int92);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap95);
    }

    @Test
    public void test13121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13121");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator9 = multiMatchQueryBuilder8.getoperator();
        java.lang.Integer int10 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator11 = null;
        multiMatchQueryBuilder8.setoperator(operator11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray23);
        java.lang.Integer int26 = multiMatchQueryBuilder25.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap27 = multiMatchQueryBuilder25.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = null;
        multiMatchQueryBuilder25.zeroTermsQuery = zeroTermsQuery28;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder25.boost((float) (short) 10);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray39);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery41 = multiMatchQueryBuilder40.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder40.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder40.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder40.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness48 = multiMatchQueryBuilder40.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder40.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type51 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float52 = type51.tieBreaker();
        float float53 = type51.tieBreaker();
        float float54 = type51.tieBreaker();
        multiMatchQueryBuilder40.type = type51;
        float float56 = type51.tieBreaker();
        org.elasticsearch.common.ParseField parseField57 = type51.parseField();
        multiMatchQueryBuilder31.settype(type51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder14.type(type51);
        org.elasticsearch.common.unit.Fuzziness fuzziness60 = multiMatchQueryBuilder59.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator61 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder59.operator(operator61);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNull(strObjectFloatHashMap27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNull(zeroTermsQuery41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(fuzziness48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertTrue("'" + type51 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type51.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + 0.0f + "'", float52 == 0.0f);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 0.0f + "'", float54 == 0.0f);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 0.0f + "'", float56 == 0.0f);
        org.junit.Assert.assertNotNull(parseField57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(fuzziness60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
    }

    @Test
    public void test13122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13122");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder10, strArray22);
        org.elasticsearch.common.unit.Fuzziness fuzziness26 = null;
        multiMatchQueryBuilder10.setfuzziness(fuzziness26);
        java.lang.Float float28 = multiMatchQueryBuilder10.getboost();
        multiMatchQueryBuilder10.setmaxExpansions((java.lang.Integer) 32);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNull(float28);
    }

    @Test
    public void test13123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13123");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder8.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder8.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder8.useDisMax(false);
        multiMatchQueryBuilder8.tieBreaker = 100.0f;
        multiMatchQueryBuilder8.setboost((java.lang.Float) 1.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(zeroTermsQuery25);
    }

    @Test
    public void test13124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13124");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder10.fuzziness;
        java.lang.Float float17 = multiMatchQueryBuilder10.getboost();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = multiMatchQueryBuilder10.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.tieBreaker(100.0f);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray28);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = multiMatchQueryBuilder29.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder29.boost((float) (short) 100);
        multiMatchQueryBuilder32.queryName = "hi!";
        java.lang.Integer int35 = multiMatchQueryBuilder32.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder32.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder32.maxExpansions((int) (short) 0);
        multiMatchQueryBuilder32.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        multiMatchQueryBuilder32.setlenient((java.lang.Boolean) true);
        java.lang.Float float45 = multiMatchQueryBuilder32.gettieBreaker();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap46 = multiMatchQueryBuilder32.getfieldsBoosts();
        multiMatchQueryBuilder10.setfieldsBoosts(strObjectFloatHashMap46);
        multiMatchQueryBuilder10.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 10.0,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"tie_breaker\" : 100.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(fuzziness15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNull(strObjectFloatHashMap18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNull(zeroTermsQuery30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(float45);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap46);
    }

    @Test
    public void test13125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13125");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        java.lang.String str9 = multiMatchQueryBuilder8.analyzer;
        multiMatchQueryBuilder8.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder13.fuzziness;
        multiMatchQueryBuilder13.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder13.zeroTermsQuery(zeroTermsQuery19);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test13126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13126");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Integer int16 = multiMatchQueryBuilder8.getslop();
        java.lang.Object obj17 = multiMatchQueryBuilder8.gettext();
        multiMatchQueryBuilder8.lenient = false;
        java.lang.String str20 = null; // flaky: multiMatchQueryBuilder8.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder8.lenient(true);
        java.lang.String str23 = multiMatchQueryBuilder22.minimumShouldMatch;
        java.lang.String str24 = multiMatchQueryBuilder22.getanalyzer();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + (-1.0f) + "'", obj17, (-1.0f));
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"lenient\" : false\n  }\n}" + "'", str20, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"lenient\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test13127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13127");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.Integer int17 = multiMatchQueryBuilder10.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.cutoffFrequency(100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.cutoffFrequency((float) (byte) 0);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap24 = multiMatchQueryBuilder21.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(strObjectFloatHashMap24);
    }

    @Test
    public void test13128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13128");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0d, strArray9);
        multiMatchQueryBuilder12.setqueryName("");
        multiMatchQueryBuilder12.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"Name\" : \"hi!\"\n  }\n}");
        multiMatchQueryBuilder12.useDisMax = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder12.maxExpansions(0);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test13129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13129");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap12;
        multiMatchQueryBuilder8.boost = 1.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.tieBreaker((float) 52);
        java.lang.String str18 = multiMatchQueryBuilder8.queryName;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder8.operator(operator19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.prefixLength((int) (short) 1);
        multiMatchQueryBuilder22.setmaxExpansions((java.lang.Integer) 35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder22.lenient(true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test13130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13130");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Float float15 = multiMatchQueryBuilder10.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        java.lang.String str18 = multiMatchQueryBuilder17.getminimumShouldMatch();
        multiMatchQueryBuilder17.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"lenient\" : false\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery21);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0d, strArray32);
        multiMatchQueryBuilder35.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder35.prefixLength((int) (byte) 0);
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray47);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator49 = multiMatchQueryBuilder48.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder48.field("");
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray59);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery61 = multiMatchQueryBuilder60.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder60.boost((float) (short) 100);
        multiMatchQueryBuilder63.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator66 = null;
        multiMatchQueryBuilder63.setoperator(operator66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder63.fuzzyRewrite("");
        java.util.List<java.lang.String> strList70 = multiMatchQueryBuilder63.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder51.fuzziness((java.lang.Object) strList70);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder51.boost(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness74 = multiMatchQueryBuilder73.fuzziness;
        multiMatchQueryBuilder35.setfuzziness(fuzziness74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder22.fuzziness((java.lang.Object) fuzziness74);
        multiMatchQueryBuilder22.setuseDisMax((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNull(operator49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNull(zeroTermsQuery61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(fuzziness74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
    }

    @Test
    public void test13131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13131");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder10.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.maxExpansions((int) 'a');
        java.lang.String str17 = multiMatchQueryBuilder16.queryName;
        multiMatchQueryBuilder16.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}";
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test13132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13132");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}";
        multiMatchQueryBuilder10.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = multiMatchQueryBuilder10.getzeroTermsQuery();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type31 = multiMatchQueryBuilder30.type;
        multiMatchQueryBuilder30.slop = 0;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator34 = null;
        multiMatchQueryBuilder30.operator = operator34;
        java.lang.String str36 = multiMatchQueryBuilder30.getfuzzyRewrite();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = null;
        multiMatchQueryBuilder30.zeroTermsQuery = zeroTermsQuery37;
        java.lang.Boolean boolean39 = multiMatchQueryBuilder30.getlenient();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap51 = null;
        multiMatchQueryBuilder48.fieldsBoosts = strObjectFloatHashMap51;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator53 = null;
        multiMatchQueryBuilder48.setoperator(operator53);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray63);
        java.lang.Integer int66 = multiMatchQueryBuilder65.maxExpansions;
        multiMatchQueryBuilder65.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder65.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder48.fuzziness((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        multiMatchQueryBuilder71.prefixLength = 52;
        org.elasticsearch.common.unit.Fuzziness fuzziness74 = multiMatchQueryBuilder71.fuzziness;
        multiMatchQueryBuilder30.setfuzziness(fuzziness74);
        multiMatchQueryBuilder10.setfuzziness(fuzziness74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder10.tieBreaker((float) (short) -1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(zeroTermsQuery19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(type31);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(boolean39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNull(int66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(fuzziness74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
    }

    @Test
    public void test13133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13133");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap11;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator13 = null;
        multiMatchQueryBuilder8.setoperator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder8.type = type15;
        java.lang.Float float17 = multiMatchQueryBuilder8.tieBreaker;
        multiMatchQueryBuilder8.boost = 10.0f;
        multiMatchQueryBuilder8.lenient = false;
        java.lang.String str22 = multiMatchQueryBuilder8.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder8.boost(0.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type15.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test13134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13134");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.useDisMax(true);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = multiMatchQueryBuilder18.getfieldsBoosts();
        multiMatchQueryBuilder18.setboost((java.lang.Float) 35.0f);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(strObjectFloatHashMap19);
    }

    @Test
    public void test13135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13135");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Integer int16 = multiMatchQueryBuilder15.maxExpansions;
        multiMatchQueryBuilder15.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"Name\" : \"hi!\"\n  }\n}");
        java.lang.Integer int19 = multiMatchQueryBuilder15.slop;
        multiMatchQueryBuilder15.setlenient((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder15.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 0.0,\n    \"maxExpansions\" : 0,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder15.getfuzziness();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(fuzziness24);
    }

    @Test
    public void test13136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13136");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"maxExpansions\" : 32,\n    \"useDisMax\" : false,\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 52.0\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test13137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13137");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        java.lang.Float float15 = multiMatchQueryBuilder11.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 52.0,\n    \"fuzzy_rewrite\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.tieBreaker((float) (byte) 1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test13138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13138");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.Integer int17 = multiMatchQueryBuilder10.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(true);
        java.lang.String str20 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
        java.lang.Integer int23 = multiMatchQueryBuilder10.getslop();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray31);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = multiMatchQueryBuilder32.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder32.boost((float) (short) 100);
        java.lang.Boolean boolean36 = multiMatchQueryBuilder32.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder32.slop((int) '4');
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.useDisMax(false);
        java.lang.String str50 = multiMatchQueryBuilder49.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness51 = multiMatchQueryBuilder49.fuzziness;
        multiMatchQueryBuilder49.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder49.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.Integer int56 = multiMatchQueryBuilder49.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder49.lenient(true);
        java.lang.String str59 = multiMatchQueryBuilder49.getqueryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder38.type((java.lang.Object) str59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder10.type((java.lang.Object) str59);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery62 = multiMatchQueryBuilder61.zeroTermsQuery;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery63 = multiMatchQueryBuilder61.zeroTermsQuery;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery64 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder61.zeroTermsQuery(zeroTermsQuery64);
        multiMatchQueryBuilder61.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : false,\n    \"lenient\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(zeroTermsQuery33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(boolean36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(fuzziness51);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNull(zeroTermsQuery62);
        org.junit.Assert.assertNull(zeroTermsQuery63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
    }

    @Test
    public void test13139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13139");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        java.lang.String str16 = multiMatchQueryBuilder11.getanalyzer();
        multiMatchQueryBuilder11.setuseDisMax((java.lang.Boolean) false);
        multiMatchQueryBuilder11.setcutoffFrequency((java.lang.Float) 1.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder11.getfuzziness();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(fuzziness21);
    }

    @Test
    public void test13140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13140");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.slop((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float18 = type17.tieBreaker();
        float float19 = type17.tieBreaker();
        org.elasticsearch.common.ParseField parseField20 = type17.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder11.type(type17);
        multiMatchQueryBuilder21.lenient = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator24 = multiMatchQueryBuilder21.getoperator();
        java.lang.String str25 = multiMatchQueryBuilder21.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder21.lenient(false);
        multiMatchQueryBuilder27.setprefixLength((java.lang.Integer) 100);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type17.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertNotNull(parseField20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(operator24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}" + "'", str25, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test13141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13141");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.slop((int) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.slop((int) (short) 10);
        multiMatchQueryBuilder10.setqueryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = multiMatchQueryBuilder10.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.fuzzyRewrite("");
        java.lang.String str21 = null; // flaky: multiMatchQueryBuilder20.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(type18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"slop\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : false,\n    \"Name\" : \"hi!\"\n  }\n}" + "'", str21, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"slop\" : 10,\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : false,\n    \"Name\" : \"hi!\"\n  }\n}");
    }

    @Test
    public void test13142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13142");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.elasticsearch.common.xcontent.XContentBuilder.defaultDatePrinter;
        java.lang.Class<?> wildcardClass1 = dateTimeFormatter0.getClass();
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass1, strArray9);
        java.lang.String str12 = multiMatchQueryBuilder11.minimumShouldMatch;
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray20);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = multiMatchQueryBuilder21.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.boost((float) (short) 100);
        java.lang.Integer int25 = multiMatchQueryBuilder24.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.boost((float) '4');
        multiMatchQueryBuilder24.setfuzzyRewrite("");
        java.lang.String str30 = multiMatchQueryBuilder24.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder24.tieBreaker(0.0f);
        multiMatchQueryBuilder32.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        java.lang.Integer int37 = multiMatchQueryBuilder36.prefixLength;
        multiMatchQueryBuilder36.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder36.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"tie_breaker\" : 10.0\n  }\n}");
        java.lang.Boolean boolean42 = multiMatchQueryBuilder36.getuseDisMax();
        org.elasticsearch.common.unit.Fuzziness fuzziness43 = multiMatchQueryBuilder36.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder36.lenient(false);
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray53);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery55 = multiMatchQueryBuilder54.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder54.boost((float) (short) 100);
        java.lang.Integer int58 = multiMatchQueryBuilder57.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder57.boost((float) '4');
        multiMatchQueryBuilder57.setfuzzyRewrite("");
        java.lang.String str63 = multiMatchQueryBuilder57.getfuzzyRewrite();
        java.lang.Boolean boolean64 = multiMatchQueryBuilder57.lenient;
        java.lang.Object obj65 = multiMatchQueryBuilder57.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder57.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.lenient(false);
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray77);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder78.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type81 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder78.type(type81);
        org.elasticsearch.common.ParseField parseField83 = type81.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder67.fuzziness((java.lang.Object) type81);
        multiMatchQueryBuilder45.type = type81;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder11.type(type81);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = multiMatchQueryBuilder86.lenient(true);
        multiMatchQueryBuilder88.setslop((java.lang.Integer) 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNull(zeroTermsQuery22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertEquals("'" + boolean42 + "' != '" + true + "'", boolean42, true);
        org.junit.Assert.assertNull(fuzziness43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNull(zeroTermsQuery55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNull(int58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNull(boolean64);
        org.junit.Assert.assertEquals("'" + obj65 + "' != '" + (-1.0f) + "'", obj65, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertTrue("'" + type81 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type81.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNotNull(parseField83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder88);
    }

    @Test
    public void test13143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13143");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.slop = 0;
        multiMatchQueryBuilder10.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder10.getoperator();
        java.lang.Float float17 = multiMatchQueryBuilder10.boost;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.useDisMax(false);
        multiMatchQueryBuilder10.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}";
        multiMatchQueryBuilder10.maxExpansions = 10;
        multiMatchQueryBuilder10.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder10.cutoffFrequency((float) ' ');
        java.lang.Boolean boolean28 = multiMatchQueryBuilder27.getuseDisMax();
        java.lang.Integer int29 = multiMatchQueryBuilder27.getprefixLength();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertEquals("'" + boolean28 + "' != '" + false + "'", boolean28, false);
        org.junit.Assert.assertNull(int29);
    }

    @Test
    public void test13144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13144");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) (-1.0f));
        multiMatchQueryBuilder10.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator18 = multiMatchQueryBuilder10.getoperator();
        java.lang.String str19 = multiMatchQueryBuilder10.analyzer;
        java.lang.String str20 = multiMatchQueryBuilder10.getminimumShouldMatch();
        java.lang.Boolean boolean21 = multiMatchQueryBuilder10.getlenient();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(operator18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(boolean21);
    }

    @Test
    public void test13145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13145");
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion0 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.CAMELCASE;
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) fieldCaseConversion0, strArray8);
        java.lang.String str11 = multiMatchQueryBuilder10.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.maxExpansions((int) (byte) 10);
        java.lang.Boolean boolean14 = multiMatchQueryBuilder10.useDisMax;
        org.junit.Assert.assertTrue("'" + fieldCaseConversion0 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.CAMELCASE + "'", fieldCaseConversion0.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.CAMELCASE));
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(boolean14);
    }

    @Test
    public void test13146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13146");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder11.lenient;
        java.lang.Object obj19 = multiMatchQueryBuilder11.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float21 = type20.tieBreaker();
        float float22 = type20.tieBreaker();
        multiMatchQueryBuilder11.settype(type20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder11.minimumShouldMatch("");
        multiMatchQueryBuilder25.setboost((java.lang.Float) 100.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness28 = multiMatchQueryBuilder25.getfuzziness();
        java.lang.String str29 = multiMatchQueryBuilder25.getanalyzer();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-1.0f) + "'", obj19, (-1.0f));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type20.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 0.0f + "'", float22 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(fuzziness28);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test13147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13147");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder10.getfields();
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        java.lang.Integer int14 = multiMatchQueryBuilder10.prefixLength;
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray22);
        multiMatchQueryBuilder23.maxExpansions = 0;
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray33);
        multiMatchQueryBuilder34.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder34.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder34.minimumShouldMatch("");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type52 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type53 = type52.matchQueryType();
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray61);
        multiMatchQueryBuilder62.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder62.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder62.minimumShouldMatch("");
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray76);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray76);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type53, strArray76);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray76);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder10, strArray76);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder10.cutoffFrequency((float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder10.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder10.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"tie_breaker\" : 0.0\n  }\n}");
        java.lang.String str88 = multiMatchQueryBuilder87.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + type52 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type52.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type53 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type53.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test13148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13148");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("hi!", (float) (-1L));
        java.lang.String str18 = multiMatchQueryBuilder11.queryName;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.operator(operator19);
        multiMatchQueryBuilder11.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!^-1.0\", \"\", \"hi!^-1.0\", \"hi!^-1.0\", \"hi!^-1.0\", \"\", \"hi!^-1.0\" ],\n    \"boost\" : 100.0,\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0,\\n    \\\"maxExpansions\\\" : -1\\n  }\\n}\",\n    \"maxExpansions\" : 0,\n    \"lenient\" : false,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder11.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"max_expansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"_name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tie_breaker\\\" : 10.0\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 97.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test13149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13149");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder8.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.minimumShouldMatch("");
        multiMatchQueryBuilder14.maxExpansions = 100;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = null;
        multiMatchQueryBuilder14.setfieldsBoosts(strObjectFloatHashMap17);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = multiMatchQueryBuilder14.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.operator(operator20);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(strObjectFloatHashMap19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test13150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13150");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        multiMatchQueryBuilder11.setoperator(operator14);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.fuzzyRewrite("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder11.setfieldsBoosts(strObjectFloatHashMap18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.Integer int22 = multiMatchQueryBuilder21.prefixLength;
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray30);
        multiMatchQueryBuilder31.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.lenient(true);
        org.elasticsearch.common.unit.Fuzziness fuzziness36 = null;
        multiMatchQueryBuilder35.fuzziness = fuzziness36;
        multiMatchQueryBuilder35.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder35.field("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}", (float) 100);
        java.lang.Float float43 = multiMatchQueryBuilder42.getboost();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap44 = multiMatchQueryBuilder42.getfieldsBoosts();
        multiMatchQueryBuilder21.setfieldsBoosts(strObjectFloatHashMap44);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(float43);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap44);
    }

    @Test
    public void test13151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13151");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.lang.Boolean boolean15 = multiMatchQueryBuilder10.lenient;
        multiMatchQueryBuilder10.setslop((java.lang.Integer) 0);
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = null;
        multiMatchQueryBuilder10.setfuzziness(fuzziness18);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap20 = multiMatchQueryBuilder10.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.tieBreaker((float) 35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.slop(0);
        java.lang.Boolean boolean25 = multiMatchQueryBuilder22.lenient;
        java.lang.String str26 = multiMatchQueryBuilder22.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder22.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"prefixLength\" : 100,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}");
        java.lang.Boolean boolean29 = multiMatchQueryBuilder28.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 10.0,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"tieBreaker\" : 100.0\n  }\n}");
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray39);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery41 = multiMatchQueryBuilder40.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder40.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder40.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder40.lenient(false);
        org.elasticsearch.common.unit.Fuzziness fuzziness48 = multiMatchQueryBuilder47.getfuzziness();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator49 = null;
        multiMatchQueryBuilder47.operator = operator49;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder28.type((java.lang.Object) operator49);
        multiMatchQueryBuilder51.queryName = "";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(strObjectFloatHashMap20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(boolean25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(boolean29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNull(zeroTermsQuery41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(fuzziness48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
    }

    @Test
    public void test13152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13152");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.type(type11);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = multiMatchQueryBuilder12.getfieldsBoosts();
        multiMatchQueryBuilder12.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.lang.String str16 = null; // flaky: multiMatchQueryBuilder12.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type11.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(strObjectFloatHashMap13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0\n  }\n}" + "'", str16, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0\n  }\n}");
    }

    @Test
    public void test13153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13153");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Float float15 = multiMatchQueryBuilder10.cutoffFrequency;
        java.lang.String str16 = multiMatchQueryBuilder10.getminimumShouldMatch();
        java.lang.String str17 = multiMatchQueryBuilder10.minimumShouldMatch;
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder10.getfuzziness();
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 35.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(fuzziness18);
    }

    @Test
    public void test13154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13154");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("");
        java.lang.String str18 = multiMatchQueryBuilder11.queryName;
        multiMatchQueryBuilder11.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float22 = type21.tieBreaker();
        float float23 = type21.tieBreaker();
        multiMatchQueryBuilder11.type = type21;
        java.lang.String str25 = multiMatchQueryBuilder11.getqueryName();
        java.lang.Float float26 = multiMatchQueryBuilder11.tieBreaker;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type21.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 0.0f + "'", float22 == 0.0f);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(float26);
    }

    @Test
    public void test13155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13155");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.type(type11);
        multiMatchQueryBuilder12.tieBreaker = 1.0f;
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = null;
        multiMatchQueryBuilder12.setfuzziness(fuzziness15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder12.field("", (float) 0);
        java.lang.String str20 = multiMatchQueryBuilder12.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type22 = type21.matchQueryType();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray30);
        multiMatchQueryBuilder31.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder31.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder31.minimumShouldMatch("");
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type22, strArray45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str20, strArray45);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery50 = null;
        multiMatchQueryBuilder49.zeroTermsQuery = zeroTermsQuery50;
        java.lang.String str52 = multiMatchQueryBuilder49.minimumShouldMatch;
        multiMatchQueryBuilder49.setprefixLength((java.lang.Integer) 0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type11.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type22.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test13156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13156");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder10.getfields();
        java.lang.String str13 = multiMatchQueryBuilder10.getanalyzer();
        java.lang.Boolean boolean14 = multiMatchQueryBuilder10.lenient;
        java.lang.Integer int15 = multiMatchQueryBuilder10.prefixLength;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertNull(int15);
    }

    @Test
    public void test13157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13157");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        java.util.List<java.lang.String> strList10 = multiMatchQueryBuilder8.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder8.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.queryName("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        multiMatchQueryBuilder13.lenient = true;
        multiMatchQueryBuilder13.maxExpansions = 100;
        java.lang.Float float18 = multiMatchQueryBuilder13.boost;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder13.zeroTermsQuery(zeroTermsQuery19);
        java.lang.Boolean boolean21 = multiMatchQueryBuilder13.lenient;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder13.useDisMax(true);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray32);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = null;
        multiMatchQueryBuilder34.setzeroTermsQuery(zeroTermsQuery35);
        java.lang.Boolean boolean37 = multiMatchQueryBuilder34.getlenient();
        multiMatchQueryBuilder34.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder34.boost((float) (short) 0);
        java.lang.String str42 = multiMatchQueryBuilder41.getqueryName();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0d, strArray52);
        multiMatchQueryBuilder55.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder55.prefixLength((int) (byte) 0);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray67);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator69 = multiMatchQueryBuilder68.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder68.field("");
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray79);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery81 = multiMatchQueryBuilder80.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder80.boost((float) (short) 100);
        multiMatchQueryBuilder83.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator86 = null;
        multiMatchQueryBuilder83.setoperator(operator86);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = multiMatchQueryBuilder83.fuzzyRewrite("");
        java.util.List<java.lang.String> strList90 = multiMatchQueryBuilder83.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = multiMatchQueryBuilder71.fuzziness((java.lang.Object) strList90);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = multiMatchQueryBuilder71.boost(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness94 = multiMatchQueryBuilder93.fuzziness;
        multiMatchQueryBuilder55.setfuzziness(fuzziness94);
        multiMatchQueryBuilder41.fuzziness = fuzziness94;
        multiMatchQueryBuilder23.fuzziness = fuzziness94;
        java.lang.Float float98 = multiMatchQueryBuilder23.gettieBreaker();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(float18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + true + "'", boolean21, true);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNull(boolean37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}" + "'", str42, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNull(operator69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNull(zeroTermsQuery81);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder91);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder93);
        org.junit.Assert.assertNotNull(fuzziness94);
        org.junit.Assert.assertNull(float98);
    }

    @Test
    public void test13158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13158");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.prefixLength((int) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type16 = type15.matchQueryType();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray24);
        multiMatchQueryBuilder25.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder25.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder25.minimumShouldMatch("");
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type16, strArray39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder10, strArray39);
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.useDisMax(false);
        java.lang.String str55 = multiMatchQueryBuilder54.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness56 = multiMatchQueryBuilder54.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder54.prefixLength((int) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type59 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type60 = type59.matchQueryType();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray68);
        multiMatchQueryBuilder69.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder69.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder69.minimumShouldMatch("");
        java.lang.String[] strArray83 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type60, strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder54, strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray39, strArray83);
        java.lang.Integer int89 = multiMatchQueryBuilder88.slop;
        java.lang.String str90 = multiMatchQueryBuilder88.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = multiMatchQueryBuilder88.tieBreaker((float) (short) 1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type15.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type16.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(fuzziness56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertTrue("'" + type59 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type59.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type60 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type60.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNull(int89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder92);
    }

    @Test
    public void test13159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13159");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        java.lang.String str9 = multiMatchQueryBuilder8.analyzer;
        multiMatchQueryBuilder8.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.operator(operator12);
        multiMatchQueryBuilder13.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.String str16 = multiMatchQueryBuilder13.getqueryName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test13160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13160");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder10.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder10.getfields();
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) (-1.0f));
        multiMatchQueryBuilder10.setboost((java.lang.Float) 0.0f);
        multiMatchQueryBuilder10.fuzzyRewrite = "";
        java.lang.Boolean boolean22 = multiMatchQueryBuilder10.getuseDisMax();
        java.lang.Boolean boolean23 = multiMatchQueryBuilder10.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertNull(boolean23);
    }

    @Test
    public void test13161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13161");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        multiMatchQueryBuilder12.minimumShouldMatch = "hi!";
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder12.fields;
        multiMatchQueryBuilder12.slop = 52;
        multiMatchQueryBuilder12.setboost((java.lang.Float) (-1.0f));
        java.lang.Object obj20 = multiMatchQueryBuilder12.text;
        multiMatchQueryBuilder12.settieBreaker((java.lang.Float) 52.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-1.0f) + "'", obj20, (-1.0f));
    }

    @Test
    public void test13162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13162");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.lang.Boolean boolean13 = multiMatchQueryBuilder10.getlenient();
        multiMatchQueryBuilder10.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        java.lang.Float float16 = multiMatchQueryBuilder10.tieBreaker;
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray24);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator26 = multiMatchQueryBuilder25.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder25.field("");
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray36);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = multiMatchQueryBuilder37.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder37.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type41 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder40.settype(type41);
        float float43 = type41.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder28.type(type41);
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray52);
        multiMatchQueryBuilder53.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray63);
        java.lang.String str65 = multiMatchQueryBuilder64.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder53.type((java.lang.Object) str65);
        multiMatchQueryBuilder66.tieBreaker = 10.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder44.fuzziness((java.lang.Object) 10.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness70 = multiMatchQueryBuilder69.fuzziness;
        multiMatchQueryBuilder10.setfuzziness(fuzziness70);
        java.lang.Integer int72 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder10.queryName("");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator75 = null;
        multiMatchQueryBuilder10.setoperator(operator75);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder10.cutoffFrequency((float) (short) 1);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNull(operator26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNull(zeroTermsQuery38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type41.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 0.0f + "'", float43 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(fuzziness70);
        org.junit.Assert.assertNull(int72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
    }

    @Test
    public void test13163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13163");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder11.lenient;
        java.lang.Object obj19 = multiMatchQueryBuilder11.text;
        multiMatchQueryBuilder11.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        multiMatchQueryBuilder11.setcutoffFrequency((java.lang.Float) 52.0f);
        java.lang.Integer int24 = multiMatchQueryBuilder11.slop;
        java.lang.Boolean boolean25 = multiMatchQueryBuilder11.lenient;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-1.0f) + "'", obj19, (-1.0f));
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(boolean25);
    }

    @Test
    public void test13164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13164");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder10.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.maxExpansions((int) 'a');
        java.lang.Float float17 = multiMatchQueryBuilder16.gettieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.tieBreaker((float) (-1L));
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray28);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder30.setzeroTermsQuery(zeroTermsQuery31);
        java.util.List<java.lang.String> strList33 = multiMatchQueryBuilder30.fields;
        java.lang.String str34 = multiMatchQueryBuilder30.queryName;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder30.zeroTermsQuery(zeroTermsQuery35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type50 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder47.type(type50);
        org.elasticsearch.common.ParseField parseField52 = type50.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder38.type(type50);
        multiMatchQueryBuilder53.boost = (-1.0f);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type67 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder64.type(type67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder53.type(type67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type70 = multiMatchQueryBuilder69.gettype();
        org.elasticsearch.common.ParseField parseField71 = type70.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder16.fuzziness((java.lang.Object) type70);
        multiMatchQueryBuilder16.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder16.maxExpansions((int) (byte) 10);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator77 = multiMatchQueryBuilder16.operator;
        java.lang.Boolean boolean78 = multiMatchQueryBuilder16.getlenient();
        multiMatchQueryBuilder16.setqueryName("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!^1.0\", \"\", \"hi!^1.0\", \"hi!^1.0\", \"hi!^1.0\", \"\", \"hi!^1.0\" ],\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0,\\n    \\\"max_expansions\\\" : 0,\\n    \\\"lenient\\\" : false\\n  }\\n}\"\n  }\n}");
        java.lang.Float float81 = multiMatchQueryBuilder16.getcutoffFrequency();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type50.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(parseField52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + type67 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type67.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertTrue("'" + type70 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type70.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNull(operator77);
        org.junit.Assert.assertNull(boolean78);
        org.junit.Assert.assertNull(float81);
    }

    @Test
    public void test13165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13165");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.Integer int17 = multiMatchQueryBuilder10.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.cutoffFrequency(100.0f);
        java.lang.Boolean boolean22 = multiMatchQueryBuilder19.useDisMax;
        java.lang.Integer int23 = multiMatchQueryBuilder19.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder19.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"use_dis_max\" : true,\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        java.lang.Float float26 = multiMatchQueryBuilder19.getboost();
        multiMatchQueryBuilder19.slop = 1;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + boolean22 + "' != '" + false + "'", boolean22, false);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(float26);
    }

    @Test
    public void test13166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13166");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.slop = 0;
        multiMatchQueryBuilder10.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder10.getoperator();
        java.lang.Float float17 = multiMatchQueryBuilder10.boost;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.useDisMax(false);
        multiMatchQueryBuilder10.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}";
        multiMatchQueryBuilder10.setprefixLength((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder10.useDisMax(true);
        multiMatchQueryBuilder25.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"max_expansions\" : 10\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test13167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13167");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray20);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = multiMatchQueryBuilder21.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.boost((float) (short) 100);
        java.lang.Integer int25 = multiMatchQueryBuilder24.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.boost((float) '4');
        multiMatchQueryBuilder24.setfuzzyRewrite("");
        java.lang.Integer int30 = multiMatchQueryBuilder24.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder24.boost(10.0f);
        multiMatchQueryBuilder32.minimumShouldMatch = "";
        multiMatchQueryBuilder32.boost = 0.0f;
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray44);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery46 = multiMatchQueryBuilder45.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder45.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type49 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder48.settype(type49);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery51 = multiMatchQueryBuilder48.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type52 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float53 = type52.tieBreaker();
        float float54 = type52.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type55 = type52.matchQueryType();
        org.elasticsearch.common.ParseField parseField56 = type52.parseField();
        multiMatchQueryBuilder48.type = type52;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder32.type(type52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder12.type(type52);
        multiMatchQueryBuilder59.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 97,\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder59.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder59.slop((int) 'a');
        org.elasticsearch.common.unit.Fuzziness fuzziness66 = multiMatchQueryBuilder59.getfuzziness();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery67 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder59.zeroTermsQuery(zeroTermsQuery67);
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray76);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery78 = multiMatchQueryBuilder77.getzeroTermsQuery();
        multiMatchQueryBuilder77.cutoffFrequency = 0.0f;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap81 = null;
        multiMatchQueryBuilder77.fieldsBoosts = strObjectFloatHashMap81;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder77.fuzzyRewrite("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap85 = multiMatchQueryBuilder84.fieldsBoosts;
        java.lang.Float float86 = multiMatchQueryBuilder84.tieBreaker;
        java.lang.Object obj87 = multiMatchQueryBuilder84.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = multiMatchQueryBuilder84.boost((float) 1L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = multiMatchQueryBuilder89.lenient(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery92 = multiMatchQueryBuilder91.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = null; // flaky: multiMatchQueryBuilder68.fuzziness((java.lang.Object) multiMatchQueryBuilder91);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNull(zeroTermsQuery22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNull(zeroTermsQuery46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type49.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(zeroTermsQuery51);
        org.junit.Assert.assertTrue("'" + type52 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type52.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 0.0f + "'", float54 == 0.0f);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type55.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNull(fuzziness66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNull(zeroTermsQuery78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
        org.junit.Assert.assertNull(strObjectFloatHashMap85);
        org.junit.Assert.assertNull(float86);
        org.junit.Assert.assertEquals("'" + obj87 + "' != '" + (-1.0f) + "'", obj87, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder91);
        org.junit.Assert.assertNull(zeroTermsQuery92);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder93);
    }

    @Test
    public void test13168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13168");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.lang.Boolean boolean15 = multiMatchQueryBuilder10.lenient;
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray24);
        java.lang.Integer int27 = multiMatchQueryBuilder26.maxExpansions;
        multiMatchQueryBuilder26.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness30 = multiMatchQueryBuilder26.fuzziness;
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery42 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.zeroTermsQuery(zeroTermsQuery42);
        java.lang.Integer int44 = multiMatchQueryBuilder43.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder26.type((java.lang.Object) int44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder26.prefixLength(32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder48.field("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder48.lenient(true);
        org.elasticsearch.common.unit.Fuzziness fuzziness54 = multiMatchQueryBuilder53.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder53.field("", (float) 0L);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNull(fuzziness30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNull(fuzziness54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
    }

    @Test
    public void test13169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13169");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery14;
        multiMatchQueryBuilder10.setqueryName("hi!");
        multiMatchQueryBuilder10.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.maxExpansions((-1));
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = null;
        multiMatchQueryBuilder10.operator = operator22;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator24 = multiMatchQueryBuilder10.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder10.maxExpansions((int) (short) 100);
        java.lang.Integer int27 = multiMatchQueryBuilder10.prefixLength;
        multiMatchQueryBuilder10.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator30 = multiMatchQueryBuilder10.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder10.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"lenient\" : true,\n    \"Name\" : \"hi!\"\n  }\n}", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder10.field("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 0,\n    \"max_expansions\" : -1,\n    \"use_dis_max\" : true\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(operator24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNull(operator30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
    }

    @Test
    public void test13170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13170");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.slop((int) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.slop((int) (short) 10);
        multiMatchQueryBuilder10.setqueryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = multiMatchQueryBuilder10.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = multiMatchQueryBuilder10.type;
        java.lang.String str20 = multiMatchQueryBuilder10.getqueryName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(type18);
        org.junit.Assert.assertNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test13171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13171");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions((int) (short) 0);
        java.lang.Float float18 = multiMatchQueryBuilder10.tieBreaker;
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.useDisMax(false);
        java.lang.String str30 = multiMatchQueryBuilder29.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder29.slop((int) '#');
        java.lang.Object obj33 = multiMatchQueryBuilder32.gettext();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type45 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.type(type45);
        org.elasticsearch.common.ParseField parseField47 = type45.parseField();
        multiMatchQueryBuilder32.type = type45;
        org.elasticsearch.common.ParseField parseField49 = type45.parseField();
        multiMatchQueryBuilder10.settype(type45);
        java.lang.String str51 = multiMatchQueryBuilder10.getanalyzer();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(float18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + (-1.0f) + "'", obj33, (-1.0f));
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type45.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(parseField47);
        org.junit.Assert.assertNotNull(parseField49);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test13172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13172");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        multiMatchQueryBuilder10.setboost((java.lang.Float) 10.0f);
        multiMatchQueryBuilder10.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : false\n  }\n}");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray22);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = multiMatchQueryBuilder23.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.boost((float) (short) 100);
        multiMatchQueryBuilder26.queryName = "hi!";
        java.lang.Integer int29 = multiMatchQueryBuilder26.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder26.field("hi!", (float) (-1L));
        java.lang.String str33 = multiMatchQueryBuilder26.queryName;
        java.lang.Boolean boolean34 = multiMatchQueryBuilder26.getuseDisMax();
        multiMatchQueryBuilder26.setprefixLength((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder26.slop(0);
        java.lang.String str39 = multiMatchQueryBuilder38.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder38.prefixLength((int) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"slop\" : -1,\n    \"max_expansions\" : 100\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder43);
        java.lang.String str45 = null; // flaky: multiMatchQueryBuilder44.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNull(zeroTermsQuery24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNull(boolean34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test13173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13173");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder8.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder8.getfuzziness();
        multiMatchQueryBuilder8.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 0,\n    \"useDisMax\" : false\n  }\n}";
        java.lang.Boolean boolean19 = multiMatchQueryBuilder8.lenient;
        java.lang.Object obj20 = multiMatchQueryBuilder8.text;
        java.lang.Float float21 = multiMatchQueryBuilder8.cutoffFrequency;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-1.0f) + "'", obj20, (-1.0f));
        org.junit.Assert.assertNull(float21);
    }

    @Test
    public void test13174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13174");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("");
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder17.fuzziness;
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = multiMatchQueryBuilder29.type;
        java.lang.Boolean boolean31 = multiMatchQueryBuilder29.getuseDisMax();
        java.lang.Integer int32 = multiMatchQueryBuilder29.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type33 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder29.type = type33;
        float float35 = type33.tieBreaker();
        float float36 = type33.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder17.type(type33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.maxExpansions(97);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.slop(100);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(fuzziness18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(type30);
        org.junit.Assert.assertEquals("'" + boolean31 + "' != '" + false + "'", boolean31, false);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type33.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 1.0f + "'", float35 == 1.0f);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 1.0f + "'", float36 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
    }

    @Test
    public void test13175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13175");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.analyzer("hi!");
        java.lang.String str13 = multiMatchQueryBuilder12.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder12.getfuzziness();
        java.lang.String str17 = multiMatchQueryBuilder12.queryName;
        java.lang.Integer int18 = multiMatchQueryBuilder12.getmaxExpansions();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator19 = multiMatchQueryBuilder12.operator;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNull(operator19);
    }

    @Test
    public void test13176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13176");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.useDisMax(true);
        java.lang.Float float18 = multiMatchQueryBuilder17.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = multiMatchQueryBuilder17.type;
        multiMatchQueryBuilder17.useDisMax = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.field("", (float) (byte) 0);
        multiMatchQueryBuilder24.setlenient((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(float18);
        org.junit.Assert.assertNull(type19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test13177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13177");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.lenient(true);
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = null;
        multiMatchQueryBuilder12.fuzziness = fuzziness13;
        multiMatchQueryBuilder12.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"prefixLength\" : 100,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}");
        java.lang.Boolean boolean19 = multiMatchQueryBuilder18.useDisMax;
        java.lang.String str20 = multiMatchQueryBuilder18.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.lenient(true);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = multiMatchQueryBuilder33.type;
        java.lang.Boolean boolean35 = multiMatchQueryBuilder33.getuseDisMax();
        java.lang.Integer int36 = multiMatchQueryBuilder33.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder33.type = type37;
        float float39 = type37.tieBreaker();
        float float40 = type37.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type41 = type37.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder18.type((java.lang.Object) type37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"phrase\",\n    \"boost\" : 100.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        multiMatchQueryBuilder44.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"use_dis_max\" : false\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(type34);
        org.junit.Assert.assertEquals("'" + boolean35 + "' != '" + false + "'", boolean35, false);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type37.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 1.0f + "'", float39 == 1.0f);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + 1.0f + "'", float40 == 1.0f);
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type41.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
    }

    @Test
    public void test13178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13178");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.operator(operator14);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        multiMatchQueryBuilder24.maxExpansions = 0;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator27 = multiMatchQueryBuilder24.getoperator();
        java.lang.String str28 = multiMatchQueryBuilder24.getfuzzyRewrite();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.useDisMax(false);
        java.lang.String str40 = multiMatchQueryBuilder39.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder39.slop((int) '#');
        java.lang.Object obj43 = multiMatchQueryBuilder42.gettext();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type55 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder52.type(type55);
        org.elasticsearch.common.ParseField parseField57 = type55.parseField();
        multiMatchQueryBuilder42.type = type55;
        org.elasticsearch.common.ParseField parseField59 = type55.parseField();
        multiMatchQueryBuilder24.settype(type55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder15.type(type55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder61.slop((-1));
        java.lang.Class<?> wildcardClass64 = multiMatchQueryBuilder61.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(operator27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertEquals("'" + obj43 + "' != '" + (-1.0f) + "'", obj43, (-1.0f));
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type55.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(parseField57);
        org.junit.Assert.assertNotNull(parseField59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test13179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13179");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.zeroTermsQuery(zeroTermsQuery23);
        java.lang.String str25 = multiMatchQueryBuilder24.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder8.type((java.lang.Object) str25);
        multiMatchQueryBuilder26.tieBreaker = 0.0f;
        java.lang.Object obj29 = multiMatchQueryBuilder26.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder26.cutoffFrequency((float) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray39);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery41 = multiMatchQueryBuilder40.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder40.boost((float) (short) 100);
        java.lang.Integer int44 = multiMatchQueryBuilder43.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery45 = multiMatchQueryBuilder43.zeroTermsQuery;
        multiMatchQueryBuilder43.maxExpansions = (-1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery48 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder43.zeroTermsQuery(zeroTermsQuery48);
        multiMatchQueryBuilder49.setboost((java.lang.Float) 0.0f);
        multiMatchQueryBuilder49.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder49.cutoffFrequency((float) 1);
        multiMatchQueryBuilder49.setcutoffFrequency((java.lang.Float) 0.0f);
        multiMatchQueryBuilder49.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder49.useDisMax(true);
        java.lang.String str62 = multiMatchQueryBuilder49.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = null; // flaky: multiMatchQueryBuilder26.fuzziness((java.lang.Object) multiMatchQueryBuilder49);
// flaky:         multiMatchQueryBuilder63.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 0,\n    \"maxExpansions\" : -1,\n    \"useDisMax\" : true\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + obj29 + "' != '" + (-1.0f) + "'", obj29, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNull(zeroTermsQuery41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNull(zeroTermsQuery45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNull(str62);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
    }

    @Test
    public void test13180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13180");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Integer int16 = multiMatchQueryBuilder15.slop;
        java.lang.Boolean boolean17 = multiMatchQueryBuilder15.useDisMax;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(boolean17);
    }

    @Test
    public void test13181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13181");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        multiMatchQueryBuilder10.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str13 = null; // flaky: multiMatchQueryBuilder10.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery14);
        multiMatchQueryBuilder10.setmaxExpansions((java.lang.Integer) (-1));
        java.lang.Boolean boolean18 = multiMatchQueryBuilder10.getuseDisMax();
        multiMatchQueryBuilder10.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator21 = multiMatchQueryBuilder10.getoperator();
        java.lang.String str22 = multiMatchQueryBuilder10.queryName;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + boolean18 + "' != '" + false + "'", boolean18, false);
        org.junit.Assert.assertNull(operator21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test13182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13182");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        multiMatchQueryBuilder10.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder10.getzeroTermsQuery();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = multiMatchQueryBuilder10.operator;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = multiMatchQueryBuilder10.fieldsBoosts;
        multiMatchQueryBuilder10.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = multiMatchQueryBuilder10.getzeroTermsQuery();
        java.lang.String str19 = multiMatchQueryBuilder10.getanalyzer();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNull(operator14);
        org.junit.Assert.assertNull(strObjectFloatHashMap15);
        org.junit.Assert.assertNull(zeroTermsQuery18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}" + "'", str19, "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
    }

    @Test
    public void test13183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13183");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Float float15 = multiMatchQueryBuilder10.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator18 = multiMatchQueryBuilder17.getoperator();
        java.lang.String str19 = multiMatchQueryBuilder17.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = multiMatchQueryBuilder17.getoperator();
        multiMatchQueryBuilder17.prefixLength = 32;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery23);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(operator18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(operator20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test13184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13184");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder10.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.tieBreaker((float) '#');
        java.lang.Integer int17 = multiMatchQueryBuilder10.getmaxExpansions();
        multiMatchQueryBuilder10.setboost((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.cutoffFrequency((float) 1L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.boost((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.prefixLength((int) 'a');
        multiMatchQueryBuilder25.prefixLength = 35;
        multiMatchQueryBuilder25.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 97,\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}";
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder30 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params31 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder25.doXContent(xContentBuilder30, params31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(params31);
    }

    @Test
    public void test13185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13185");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.cutoffFrequency = (-1.0f);
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.lenient(true);
        java.lang.Integer int21 = multiMatchQueryBuilder20.getmaxExpansions();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = multiMatchQueryBuilder20.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(zeroTermsQuery22);
    }

    @Test
    public void test13186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13186");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder8.getmaxExpansions();
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) 10.0f);
        java.lang.Boolean boolean15 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.cutoffFrequency(52.0f);
        multiMatchQueryBuilder17.tieBreaker = 97.0f;
        multiMatchQueryBuilder17.setboost((java.lang.Float) 52.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test13187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13187");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.slop;
        java.lang.Integer int16 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.Object obj19 = multiMatchQueryBuilder18.text;
        multiMatchQueryBuilder18.settieBreaker((java.lang.Float) 0.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-1.0f) + "'", obj19, (-1.0f));
    }

    @Test
    public void test13188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13188");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.maxExpansions((int) (short) 0);
        multiMatchQueryBuilder11.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery22);
        multiMatchQueryBuilder23.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        java.lang.Boolean boolean26 = multiMatchQueryBuilder23.lenient;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder23.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder29 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params30 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder31 = multiMatchQueryBuilder23.toXContent(xContentBuilder29, params30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(params30);
    }

    @Test
    public void test13189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13189");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.getmaxExpansions();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        multiMatchQueryBuilder10.operator = operator16;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder10.fieldsBoosts = strObjectFloatHashMap18;
        java.lang.Object obj20 = multiMatchQueryBuilder10.gettext();
        java.lang.String str21 = multiMatchQueryBuilder10.getminimumShouldMatch();
        java.lang.Integer int22 = multiMatchQueryBuilder10.getslop();
        multiMatchQueryBuilder10.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"boost\" : -1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"max_expansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"_name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tie_breaker\\\" : 10.0\\n  }\\n}\"\n  }\n}");
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 97.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-1.0f) + "'", obj20, (-1.0f));
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(int22);
    }

    @Test
    public void test13190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13190");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        multiMatchQueryBuilder10.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str13 = null; // flaky: multiMatchQueryBuilder10.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery14);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.slop(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.lenient(false);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test13191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13191");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("hi!", (float) (-1L));
        java.lang.String str18 = multiMatchQueryBuilder11.queryName;
        java.lang.Boolean boolean19 = multiMatchQueryBuilder11.getuseDisMax();
        multiMatchQueryBuilder11.setprefixLength((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder11.slop(0);
        java.lang.Boolean boolean24 = multiMatchQueryBuilder23.lenient;
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray32);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery34 = multiMatchQueryBuilder33.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder33.boost((float) (short) 100);
        java.lang.Integer int37 = multiMatchQueryBuilder36.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder36.boost((float) '4');
        multiMatchQueryBuilder36.setfuzzyRewrite("");
        java.lang.Integer int42 = multiMatchQueryBuilder36.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder36.maxExpansions((int) (byte) 100);
        multiMatchQueryBuilder44.queryName = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder44.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}");
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type60 = multiMatchQueryBuilder59.type;
        multiMatchQueryBuilder59.slop = 0;
        multiMatchQueryBuilder59.useDisMax = true;
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray72);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery74 = multiMatchQueryBuilder73.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder73.boost((float) (short) 100);
        multiMatchQueryBuilder76.queryName = "hi!";
        java.lang.Integer int79 = multiMatchQueryBuilder76.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder76.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder76.maxExpansions((int) (short) 0);
        java.lang.String str85 = multiMatchQueryBuilder76.getanalyzer();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap86 = multiMatchQueryBuilder76.getfieldsBoosts();
        multiMatchQueryBuilder59.setfieldsBoosts(strObjectFloatHashMap86);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap88 = multiMatchQueryBuilder59.getfieldsBoosts();
        multiMatchQueryBuilder44.setfieldsBoosts(strObjectFloatHashMap88);
        multiMatchQueryBuilder23.setfieldsBoosts(strObjectFloatHashMap88);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNull(zeroTermsQuery34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(type60);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNull(zeroTermsQuery74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNull(int79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap86);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap88);
    }

    @Test
    public void test13192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13192");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.prefixLength((int) (short) 0);
        multiMatchQueryBuilder8.maxExpansions = 1;
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.useDisMax(false);
        java.lang.String str29 = multiMatchQueryBuilder28.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness30 = multiMatchQueryBuilder28.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.prefixLength((int) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type33 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type34 = type33.matchQueryType();
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray42);
        multiMatchQueryBuilder43.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder43.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder43.minimumShouldMatch("");
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type34, strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder28, strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder8, strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.cutoffFrequency((float) 10L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder62.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        multiMatchQueryBuilder62.setlenient((java.lang.Boolean) false);
        org.elasticsearch.common.unit.Fuzziness fuzziness69 = multiMatchQueryBuilder62.fuzziness;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(fuzziness30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type33.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type34.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNull(fuzziness69);
    }

    @Test
    public void test13193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13193");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder10.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder10.getfields();
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) (-1.0f));
        multiMatchQueryBuilder10.setslop((java.lang.Integer) 0);
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.lenient(false);
        java.lang.String str24 = multiMatchQueryBuilder10.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder10.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 0,\n    \"useDisMax\" : false\n  }\n}");
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) true);
        java.lang.String str29 = multiMatchQueryBuilder10.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 0,\n    \"useDisMax\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test13194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13194");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions((int) (short) 0);
        java.lang.Float float18 = multiMatchQueryBuilder10.tieBreaker;
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = multiMatchQueryBuilder10.fuzziness;
        java.lang.Object obj20 = multiMatchQueryBuilder10.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true\n  }\n}");
        java.lang.Float float23 = multiMatchQueryBuilder22.tieBreaker;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        multiMatchQueryBuilder22.setzeroTermsQuery(zeroTermsQuery24);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(float18);
        org.junit.Assert.assertNull(fuzziness19);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-1.0f) + "'", obj20, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(float23);
    }

    @Test
    public void test13195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13195");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator18 = null;
        multiMatchQueryBuilder17.setoperator(operator18);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap20 = null;
        multiMatchQueryBuilder17.setfieldsBoosts(strObjectFloatHashMap20);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        multiMatchQueryBuilder17.setzeroTermsQuery(zeroTermsQuery22);
        java.lang.Boolean boolean24 = multiMatchQueryBuilder17.getuseDisMax();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder17.zeroTermsQuery;
        java.lang.Float float26 = multiMatchQueryBuilder17.gettieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder17.cutoffFrequency(10.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNull(float26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test13196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13196");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.analyzer("hi!");
        java.lang.Boolean boolean13 = multiMatchQueryBuilder12.useDisMax;
        multiMatchQueryBuilder12.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.cutoffFrequency((float) 1);
        multiMatchQueryBuilder17.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"phrase\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 0,\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}";
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test13197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13197");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray9);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder10.getzeroTermsQuery();
        multiMatchQueryBuilder10.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator18 = null;
        multiMatchQueryBuilder17.setoperator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.boost((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.useDisMax(false);
        java.lang.String str24 = null; // flaky: multiMatchQueryBuilder23.toString();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray32);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery34 = multiMatchQueryBuilder33.getzeroTermsQuery();
        multiMatchQueryBuilder33.cutoffFrequency = 0.0f;
        multiMatchQueryBuilder33.maxExpansions = 10;
        multiMatchQueryBuilder33.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder33.cutoffFrequency((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.useDisMax(false);
        multiMatchQueryBuilder44.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder44.zeroTermsQuery(zeroTermsQuery47);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type60 = multiMatchQueryBuilder59.type;
        multiMatchQueryBuilder59.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = org.elasticsearch.common.xcontent.XContentBuilder.defaultDatePrinter;
        java.lang.Class<?> wildcardClass64 = dateTimeFormatter63.getClass();
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass64, strArray72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder59, strArray72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder48, strArray72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str24, strArray72);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder78 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 1.0,\n    \"prefixLength\" : 1,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}" + "'", str24, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 1.0,\n    \"prefixLength\" : 1,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNull(zeroTermsQuery34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(type60);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(strArray72);
    }

    @Test
    public void test13198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13198");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.type(type11);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = multiMatchQueryBuilder12.getfieldsBoosts();
        multiMatchQueryBuilder12.setcutoffFrequency((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder12.setzeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder12.settype(type18);
        multiMatchQueryBuilder12.setcutoffFrequency((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = multiMatchQueryBuilder12.operator;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type11.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(strObjectFloatHashMap13);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNull(operator22);
    }

    @Test
    public void test13199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13199");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.operator(operator14);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.operator(operator16);
        multiMatchQueryBuilder13.settieBreaker((java.lang.Float) 52.0f);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray27);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = multiMatchQueryBuilder28.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.boost((float) (short) 100);
        java.lang.Integer int32 = multiMatchQueryBuilder31.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder31.boost((float) '4');
        multiMatchQueryBuilder31.setfuzzyRewrite("");
        java.lang.Integer int37 = multiMatchQueryBuilder31.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder31.boost(10.0f);
        multiMatchQueryBuilder39.minimumShouldMatch = "";
        multiMatchQueryBuilder39.boost = 0.0f;
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray51);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery53 = multiMatchQueryBuilder52.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder52.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type56 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder55.settype(type56);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery58 = multiMatchQueryBuilder55.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type59 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float60 = type59.tieBreaker();
        float float61 = type59.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type62 = type59.matchQueryType();
        org.elasticsearch.common.ParseField parseField63 = type59.parseField();
        multiMatchQueryBuilder55.type = type59;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder39.type(type59);
        float float66 = type59.tieBreaker();
        org.elasticsearch.common.ParseField parseField67 = type59.parseField();
        multiMatchQueryBuilder13.type = type59;
        org.elasticsearch.common.ParseField parseField69 = type59.parseField();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNull(zeroTermsQuery29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNull(zeroTermsQuery53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type56.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(zeroTermsQuery58);
        org.junit.Assert.assertTrue("'" + type59 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type59.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + 0.0f + "'", float60 == 0.0f);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + 0.0f + "'", float61 == 0.0f);
        org.junit.Assert.assertTrue("'" + type62 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type62.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + 0.0f + "'", float66 == 0.0f);
        org.junit.Assert.assertNotNull(parseField67);
        org.junit.Assert.assertNotNull(parseField69);
    }

    @Test
    public void test13200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13200");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Float float15 = multiMatchQueryBuilder10.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        java.lang.Integer int18 = multiMatchQueryBuilder17.getmaxExpansions();
        java.lang.String str19 = multiMatchQueryBuilder17.getfuzzyRewrite();
        multiMatchQueryBuilder17.maxExpansions = 100;
        java.lang.Boolean boolean22 = multiMatchQueryBuilder17.lenient;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(boolean22);
    }

    @Test
    public void test13201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13201");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.lang.String str14 = multiMatchQueryBuilder10.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.tieBreaker((float) 1);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray24);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = multiMatchQueryBuilder25.getzeroTermsQuery();
        multiMatchQueryBuilder25.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator29 = null;
        multiMatchQueryBuilder25.setoperator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = null; // flaky: multiMatchQueryBuilder16.fuzziness((java.lang.Object) multiMatchQueryBuilder25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = null; // flaky: multiMatchQueryBuilder31.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 10.0,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"tieBreaker\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = null; // flaky: multiMatchQueryBuilder31.prefixLength((int) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator36 = null; // flaky: multiMatchQueryBuilder35.getoperator();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNull(zeroTermsQuery26);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(operator36);
    }

    @Test
    public void test13202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13202");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.slop((int) '#');
        java.lang.Float float14 = multiMatchQueryBuilder10.getcutoffFrequency();
        multiMatchQueryBuilder10.cutoffFrequency = (-1.0f);
        multiMatchQueryBuilder10.slop = 1;
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.useDisMax(false);
        java.lang.String str30 = multiMatchQueryBuilder29.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness31 = multiMatchQueryBuilder29.fuzziness;
        java.lang.String str32 = multiMatchQueryBuilder29.getqueryName();
        multiMatchQueryBuilder29.setcutoffFrequency((java.lang.Float) (-1.0f));
        multiMatchQueryBuilder29.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = null;
        multiMatchQueryBuilder29.zeroTermsQuery = zeroTermsQuery37;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator39 = multiMatchQueryBuilder29.getoperator();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator40 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder29.operator(operator40);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray49);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery51 = multiMatchQueryBuilder50.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder50.boost((float) (short) 100);
        java.lang.Integer int54 = multiMatchQueryBuilder53.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder53.boost((float) '4');
        multiMatchQueryBuilder53.setfuzzyRewrite("");
        java.lang.String str59 = multiMatchQueryBuilder53.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder53.tieBreaker(0.0f);
        multiMatchQueryBuilder61.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder61.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        java.lang.Integer int66 = multiMatchQueryBuilder65.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder65.slop((int) (short) 100);
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray76);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator78 = multiMatchQueryBuilder77.getoperator();
        java.lang.Integer int79 = multiMatchQueryBuilder77.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator80 = null;
        multiMatchQueryBuilder77.setoperator(operator80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder77.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator84 = multiMatchQueryBuilder83.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type85 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type86 = type85.matchQueryType();
        multiMatchQueryBuilder83.type = type85;
        multiMatchQueryBuilder68.settype(type85);
        org.elasticsearch.index.search.MatchQuery.Type type89 = type85.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = multiMatchQueryBuilder41.type(type85);
        multiMatchQueryBuilder10.type = type85;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(fuzziness31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(operator39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNull(zeroTermsQuery51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNull(int66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNull(operator78);
        org.junit.Assert.assertNull(int79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNull(operator84);
        org.junit.Assert.assertTrue("'" + type85 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type85.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type86 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type86.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type89 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type89.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder90);
    }

    @Test
    public void test13203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13203");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type28 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.type(type28);
        org.elasticsearch.common.ParseField parseField30 = type28.parseField();
        multiMatchQueryBuilder10.settype(type28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder10.tieBreaker((float) 1);
        multiMatchQueryBuilder33.setslop((java.lang.Integer) (-1));
        java.lang.Integer int36 = multiMatchQueryBuilder33.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"type\" : \"best_fields\",\n    \"boost\" : 100.0,\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
        multiMatchQueryBuilder38.useDisMax = true;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type28.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(parseField30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
    }

    @Test
    public void test13204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13204");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        java.lang.Float float15 = multiMatchQueryBuilder14.cutoffFrequency;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder14.setzeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator18 = null;
        multiMatchQueryBuilder14.setoperator(operator18);
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder14.getfields();
        java.util.List<java.lang.String> strList21 = multiMatchQueryBuilder14.getfields();
        multiMatchQueryBuilder14.boost = 52.0f;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test13205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13205");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.tieBreaker(0.0f);
        multiMatchQueryBuilder19.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        java.lang.Integer int24 = multiMatchQueryBuilder23.prefixLength;
        multiMatchQueryBuilder23.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder23.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"tie_breaker\" : 10.0\n  }\n}");
        java.lang.Boolean boolean29 = multiMatchQueryBuilder23.getuseDisMax();
        org.elasticsearch.common.unit.Fuzziness fuzziness30 = multiMatchQueryBuilder23.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder23.prefixLength((int) ' ');
        multiMatchQueryBuilder32.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"prefix_length\" : 100,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertEquals("'" + boolean29 + "' != '" + true + "'", boolean29, true);
        org.junit.Assert.assertNull(fuzziness30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
    }

    @Test
    public void test13206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13206");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.type(type11);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = multiMatchQueryBuilder12.getfieldsBoosts();
        java.lang.Integer int14 = multiMatchQueryBuilder12.getprefixLength();
        java.lang.String str15 = null; // flaky: multiMatchQueryBuilder12.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        multiMatchQueryBuilder12.operator = operator16;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type11.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(strObjectFloatHashMap13);
        org.junit.Assert.assertNull(int14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"useDisMax\" : false\n  }\n}" + "'", str15, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"useDisMax\" : false\n  }\n}");
    }

    @Test
    public void test13207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13207");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Integer int16 = multiMatchQueryBuilder15.maxExpansions;
        multiMatchQueryBuilder15.setboost((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        multiMatchQueryBuilder15.setzeroTermsQuery(zeroTermsQuery19);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray28);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator30 = multiMatchQueryBuilder29.getoperator();
        java.lang.Integer int31 = multiMatchQueryBuilder29.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator32 = null;
        multiMatchQueryBuilder29.setoperator(operator32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder29.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray44);
        java.lang.Integer int47 = multiMatchQueryBuilder46.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap48 = multiMatchQueryBuilder46.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery49 = null;
        multiMatchQueryBuilder46.zeroTermsQuery = zeroTermsQuery49;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder46.boost((float) (short) 10);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray60);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery62 = multiMatchQueryBuilder61.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder61.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder61.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder61.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness69 = multiMatchQueryBuilder61.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder61.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type72 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float73 = type72.tieBreaker();
        float float74 = type72.tieBreaker();
        float float75 = type72.tieBreaker();
        multiMatchQueryBuilder61.type = type72;
        float float77 = type72.tieBreaker();
        org.elasticsearch.common.ParseField parseField78 = type72.parseField();
        multiMatchQueryBuilder52.settype(type72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder35.type(type72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder15.type(type72);
        java.lang.Integer int82 = multiMatchQueryBuilder15.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator83 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder15.operator(operator83);
        java.lang.Object obj85 = multiMatchQueryBuilder15.text;
        multiMatchQueryBuilder15.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"prefixLength\" : 100,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}";
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNull(operator30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNull(strObjectFloatHashMap48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNull(zeroTermsQuery62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNull(fuzziness69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertTrue("'" + type72 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type72.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float73 + "' != '" + 0.0f + "'", float73 == 0.0f);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 0.0f + "'", float74 == 0.0f);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + 0.0f + "'", float75 == 0.0f);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + 0.0f + "'", float77 == 0.0f);
        org.junit.Assert.assertNotNull(parseField78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNull(int82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
        org.junit.Assert.assertEquals("'" + obj85 + "' != '" + '#' + "'", obj85, '#');
    }

    @Test
    public void test13208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13208");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder11.lenient;
        java.lang.Object obj19 = multiMatchQueryBuilder11.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder11.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = multiMatchQueryBuilder11.operator;
        java.lang.Integer int23 = multiMatchQueryBuilder11.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-1.0f) + "'", obj19, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(operator22);
        org.junit.Assert.assertNull(int23);
    }

    @Test
    public void test13209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13209");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.Integer int17 = multiMatchQueryBuilder10.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(true);
        java.lang.String str20 = multiMatchQueryBuilder19.getminimumShouldMatch();
        java.lang.String str21 = multiMatchQueryBuilder19.fuzzyRewrite;
        multiMatchQueryBuilder19.setprefixLength((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder19.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"max_expansions\" : 0,\n    \"lenient\" : false\n  }\n}");
        java.lang.Object obj26 = multiMatchQueryBuilder19.gettext();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder19.zeroTermsQuery(zeroTermsQuery27);
        java.lang.String str29 = multiMatchQueryBuilder19.getqueryName();
        multiMatchQueryBuilder19.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"max_expansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"_name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tie_breaker\\\" : 10.0\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 97.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}" + "'", str20, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + (-1.0f) + "'", obj26, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test13210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13210");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.maxExpansions((int) (short) 0);
        multiMatchQueryBuilder11.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery22);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray31);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = multiMatchQueryBuilder32.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder32.boost((float) (short) 100);
        java.lang.Integer int36 = multiMatchQueryBuilder35.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = multiMatchQueryBuilder35.zeroTermsQuery;
        multiMatchQueryBuilder35.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder35.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = null; // flaky: multiMatchQueryBuilder23.fuzziness((java.lang.Object) multiMatchQueryBuilder41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = null; // flaky: multiMatchQueryBuilder42.lenient(false);
        java.lang.Float float45 = null; // flaky: multiMatchQueryBuilder44.gettieBreaker();
        java.lang.Boolean boolean46 = null; // flaky: multiMatchQueryBuilder44.getlenient();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery47 = null; // flaky: multiMatchQueryBuilder44.getzeroTermsQuery();
        java.lang.String str48 = null; // flaky: multiMatchQueryBuilder44.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type49 = null; // flaky: multiMatchQueryBuilder44.gettype();
// flaky:         multiMatchQueryBuilder44.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"slop\" : 10,\n    \"max_expansions\" : 100,\n    \"use_dis_max\" : false,\n    \"tie_breaker\" : 10.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(zeroTermsQuery33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNull(zeroTermsQuery37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(float45);
// flaky:         org.junit.Assert.assertEquals("'" + boolean46 + "' != '" + false + "'", boolean46, false);
        org.junit.Assert.assertNull(zeroTermsQuery47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}" + "'", str48, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        org.junit.Assert.assertNull(type49);
    }

    @Test
    public void test13211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13211");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.slop((int) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.slop((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 0.0,\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 0,\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : true,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}");
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap29 = null;
        multiMatchQueryBuilder26.fieldsBoosts = strObjectFloatHashMap29;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator31 = null;
        multiMatchQueryBuilder26.setoperator(operator31);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray41);
        java.lang.Integer int44 = multiMatchQueryBuilder43.maxExpansions;
        multiMatchQueryBuilder43.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder43.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder26.fuzziness((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        multiMatchQueryBuilder49.prefixLength = 52;
        org.elasticsearch.common.unit.Fuzziness fuzziness52 = multiMatchQueryBuilder49.fuzziness;
        multiMatchQueryBuilder10.setfuzziness(fuzziness52);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(fuzziness52);
    }

    @Test
    public void test13212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13212");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator18 = multiMatchQueryBuilder10.operator;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery19;
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.useDisMax(false);
        java.lang.String str32 = multiMatchQueryBuilder31.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder31.slop((int) '#');
        java.lang.Object obj35 = multiMatchQueryBuilder34.gettext();
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type47 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder44.type(type47);
        org.elasticsearch.common.ParseField parseField49 = type47.parseField();
        multiMatchQueryBuilder34.type = type47;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder10.type(type47);
        java.util.List<java.lang.String> strList52 = multiMatchQueryBuilder10.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder10.cutoffFrequency((float) '4');
        multiMatchQueryBuilder54.maxExpansions = 0;
        multiMatchQueryBuilder54.setuseDisMax((java.lang.Boolean) true);
        java.lang.Integer int59 = multiMatchQueryBuilder54.prefixLength;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNull(operator18);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + (-1.0f) + "'", obj35, (-1.0f));
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type47.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(parseField49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(int59);
    }

    @Test
    public void test13213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13213");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder8.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.minimumShouldMatch("");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.operator(operator15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"useDisMax\" : true\n  }\n}");
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray27);
        java.lang.Integer int30 = multiMatchQueryBuilder29.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap31 = multiMatchQueryBuilder29.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        multiMatchQueryBuilder29.zeroTermsQuery = zeroTermsQuery32;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder29.boost((float) (short) 10);
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray43);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery45 = multiMatchQueryBuilder44.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder44.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder44.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder44.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness52 = multiMatchQueryBuilder44.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder44.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type55 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float56 = type55.tieBreaker();
        float float57 = type55.tieBreaker();
        float float58 = type55.tieBreaker();
        multiMatchQueryBuilder44.type = type55;
        float float60 = type55.tieBreaker();
        org.elasticsearch.common.ParseField parseField61 = type55.parseField();
        multiMatchQueryBuilder35.settype(type55);
        org.elasticsearch.index.search.MatchQuery.Type type63 = type55.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder18.type(type55);
        multiMatchQueryBuilder18.setslop((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type67 = multiMatchQueryBuilder18.type;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNull(strObjectFloatHashMap31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNull(zeroTermsQuery45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(fuzziness52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type55.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 0.0f + "'", float56 == 0.0f);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + 0.0f + "'", float57 == 0.0f);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + 0.0f + "'", float58 == 0.0f);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + 0.0f + "'", float60 == 0.0f);
        org.junit.Assert.assertNotNull(parseField61);
        org.junit.Assert.assertTrue("'" + type63 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type63.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertTrue("'" + type67 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type67.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
    }

    @Test
    public void test13214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13214");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery14;
        multiMatchQueryBuilder10.setqueryName("hi!");
        multiMatchQueryBuilder10.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.maxExpansions((-1));
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = null;
        multiMatchQueryBuilder10.operator = operator22;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator24 = multiMatchQueryBuilder10.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder10.maxExpansions((int) (short) 100);
        java.lang.String str27 = multiMatchQueryBuilder10.analyzer;
        java.lang.Integer int28 = multiMatchQueryBuilder10.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder10.tieBreaker((float) 35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type31 = null;
        multiMatchQueryBuilder30.settype(type31);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(operator24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
    }

    @Test
    public void test13215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13215");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.cutoffFrequency((float) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.slop((int) (short) 0);
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder15.fuzziness;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(fuzziness18);
    }

    @Test
    public void test13216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13216");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        org.elasticsearch.common.unit.Fuzziness fuzziness14 = null;
        multiMatchQueryBuilder11.fuzziness = fuzziness14;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.operator(operator16);
        multiMatchQueryBuilder17.setboost((java.lang.Float) 1.0f);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray27);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = multiMatchQueryBuilder28.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.boost((float) (short) 100);
        multiMatchQueryBuilder31.queryName = "hi!";
        java.lang.Integer int34 = multiMatchQueryBuilder31.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder31.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder31.maxExpansions((int) (short) 0);
        java.lang.String str40 = multiMatchQueryBuilder31.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap41 = multiMatchQueryBuilder31.fieldsBoosts;
        multiMatchQueryBuilder17.setfieldsBoosts(strObjectFloatHashMap41);
        java.lang.Integer int43 = multiMatchQueryBuilder17.prefixLength;
        java.util.List<java.lang.String> strList44 = multiMatchQueryBuilder17.getfields();
        multiMatchQueryBuilder17.useDisMax = false;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNull(zeroTermsQuery29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap41);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNotNull(strList44);
    }

    @Test
    public void test13217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13217");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        java.lang.String str9 = multiMatchQueryBuilder8.analyzer;
        multiMatchQueryBuilder8.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        multiMatchQueryBuilder15.tieBreaker = 35.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.lenient(false);
        java.lang.String str20 = multiMatchQueryBuilder19.getminimumShouldMatch();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test13218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13218");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap12;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.fuzzyRewrite("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap16 = multiMatchQueryBuilder15.fieldsBoosts;
        java.lang.Float float17 = multiMatchQueryBuilder15.tieBreaker;
        java.lang.Object obj18 = multiMatchQueryBuilder15.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder15.boost((float) 1L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.queryName("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 100,\n    \"lenient\" : true\n  }\n}");
        java.lang.Integer int25 = multiMatchQueryBuilder20.maxExpansions;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(strObjectFloatHashMap16);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + (-1.0f) + "'", obj18, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(int25);
    }

    @Test
    public void test13219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13219");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder10.getfields();
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = null;
        multiMatchQueryBuilder10.setfieldsBoosts(strObjectFloatHashMap14);
        multiMatchQueryBuilder10.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}";
        java.lang.Object obj18 = multiMatchQueryBuilder10.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.tieBreaker(10.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + (-1.0f) + "'", obj18, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test13220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13220");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder11.gettype();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder11.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.boost(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = null;
        multiMatchQueryBuilder11.fuzziness = fuzziness19;
        java.lang.Float float21 = multiMatchQueryBuilder11.cutoffFrequency;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder11.operator(operator22);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        multiMatchQueryBuilder11.zeroTermsQuery = zeroTermsQuery24;
        java.lang.String str26 = multiMatchQueryBuilder11.getanalyzer();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(float21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test13221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13221");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder11.gettype();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder11.operator;
        java.lang.Boolean boolean17 = multiMatchQueryBuilder11.useDisMax;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder11.zeroTermsQuery = zeroTermsQuery18;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNull(boolean17);
    }

    @Test
    public void test13222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13222");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator13 = multiMatchQueryBuilder11.operator;
        multiMatchQueryBuilder11.setslop((java.lang.Integer) 10);
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder11.fuzziness;
        multiMatchQueryBuilder11.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}";
        java.lang.Boolean boolean19 = multiMatchQueryBuilder11.getlenient();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        multiMatchQueryBuilder11.setoperator(operator20);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = multiMatchQueryBuilder11.getoperator();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(operator13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNull(operator22);
    }

    @Test
    public void test13223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13223");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.analyzer("hi!");
        java.lang.Boolean boolean13 = multiMatchQueryBuilder10.lenient;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.slop((int) (short) -1);
        java.lang.String str16 = multiMatchQueryBuilder10.analyzer;
        multiMatchQueryBuilder10.setmaxExpansions((java.lang.Integer) 1);
        java.lang.Float float19 = multiMatchQueryBuilder10.getboost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.slop((int) '#');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(float19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test13224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13224");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.maxExpansions = 0;
        java.lang.Float float11 = multiMatchQueryBuilder8.tieBreaker;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator12 = multiMatchQueryBuilder8.operator;
        java.lang.Integer int13 = multiMatchQueryBuilder8.prefixLength;
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 100);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertNull(operator12);
        org.junit.Assert.assertNull(int13);
    }

    @Test
    public void test13225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13225");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator9 = multiMatchQueryBuilder8.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.field("");
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder20.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.boost((float) (short) 100);
        multiMatchQueryBuilder23.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator26 = null;
        multiMatchQueryBuilder23.setoperator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder23.fuzzyRewrite("");
        java.util.List<java.lang.String> strList30 = multiMatchQueryBuilder23.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder11.fuzziness((java.lang.Object) strList30);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.useDisMax(false);
        java.lang.String str43 = multiMatchQueryBuilder42.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery44 = null;
        multiMatchQueryBuilder42.setzeroTermsQuery(zeroTermsQuery44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type46 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder42.type(type46);
        float float48 = type46.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder11.type(type46);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator50 = multiMatchQueryBuilder11.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder11.prefixLength((int) '4');
        multiMatchQueryBuilder52.useDisMax = false;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type46.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + 0.0f + "'", float48 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(operator50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
    }

    @Test
    public void test13226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13226");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.field("hi!");
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 10.0f);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder24.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.boost((float) (short) 100);
        java.lang.Integer int28 = multiMatchQueryBuilder27.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder27.boost((float) '4');
        multiMatchQueryBuilder27.setfuzzyRewrite("");
        java.lang.Integer int33 = multiMatchQueryBuilder27.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder27.maxExpansions((int) (byte) 100);
        multiMatchQueryBuilder27.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder27);
        java.lang.String str39 = null; // flaky: multiMatchQueryBuilder38.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type40 = null; // flaky: multiMatchQueryBuilder38.gettype();
// flaky:         multiMatchQueryBuilder38.queryName = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 10.0\n  }\n}";
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray50);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.useDisMax(false);
        java.lang.String str54 = multiMatchQueryBuilder53.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness55 = multiMatchQueryBuilder53.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery56 = null;
        multiMatchQueryBuilder53.zeroTermsQuery = zeroTermsQuery56;
        java.lang.Float float58 = multiMatchQueryBuilder53.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder53.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator61 = multiMatchQueryBuilder60.getoperator();
        multiMatchQueryBuilder60.useDisMax = false;
        multiMatchQueryBuilder60.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true\n  }\n}";
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray73);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery75 = multiMatchQueryBuilder74.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder74.boost((float) (short) 100);
        java.lang.Integer int78 = multiMatchQueryBuilder77.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder77.boost((float) '4');
        multiMatchQueryBuilder77.setfuzzyRewrite("");
        java.lang.String str83 = multiMatchQueryBuilder77.getfuzzyRewrite();
        java.lang.Boolean boolean84 = multiMatchQueryBuilder77.lenient;
        java.lang.Object obj85 = multiMatchQueryBuilder77.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type86 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float87 = type86.tieBreaker();
        float float88 = type86.tieBreaker();
        multiMatchQueryBuilder77.settype(type86);
        org.elasticsearch.common.ParseField parseField90 = type86.parseField();
        multiMatchQueryBuilder60.type = type86;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = null; // flaky: multiMatchQueryBuilder38.type(type86);
        java.lang.Boolean boolean93 = null; // flaky: multiMatchQueryBuilder38.getlenient();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}" + "'", str39, "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}");
        org.junit.Assert.assertNull(type40);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(fuzziness55);
        org.junit.Assert.assertNull(float58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNull(operator61);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNull(zeroTermsQuery75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNull(int78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNull(boolean84);
        org.junit.Assert.assertEquals("'" + obj85 + "' != '" + (-1.0f) + "'", obj85, (-1.0f));
        org.junit.Assert.assertTrue("'" + type86 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type86.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + 0.0f + "'", float87 == 0.0f);
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + 0.0f + "'", float88 == 0.0f);
        org.junit.Assert.assertNotNull(parseField90);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder92);
        org.junit.Assert.assertNull(boolean93);
    }

    @Test
    public void test13227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13227");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        multiMatchQueryBuilder11.setoperator(operator14);
        java.lang.Boolean boolean16 = multiMatchQueryBuilder11.getlenient();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator17 = null;
        multiMatchQueryBuilder11.setoperator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray28);
        java.lang.String str30 = multiMatchQueryBuilder29.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder29.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type33 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float34 = type33.tieBreaker();
        float float35 = type33.tieBreaker();
        org.elasticsearch.common.ParseField parseField36 = type33.parseField();
        multiMatchQueryBuilder29.settype(type33);
        multiMatchQueryBuilder11.settype(type33);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap39 = null;
        multiMatchQueryBuilder11.setfieldsBoosts(strObjectFloatHashMap39);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder11.operator(operator41);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator43 = null;
        multiMatchQueryBuilder11.operator = operator43;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder11.field("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 10.0,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"tie_breaker\" : 100.0\n  }\n}");
        multiMatchQueryBuilder11.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 0,\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 97.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder49 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params50 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder51 = multiMatchQueryBuilder11.toXContent(xContentBuilder49, params50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type33.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 0.0f + "'", float34 == 0.0f);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.0f + "'", float35 == 0.0f);
        org.junit.Assert.assertNotNull(parseField36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(params50);
    }

    @Test
    public void test13228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13228");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.useDisMax(true);
        java.lang.String str19 = multiMatchQueryBuilder18.analyzer;
        java.lang.String str20 = multiMatchQueryBuilder18.getqueryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.tieBreaker(10.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = multiMatchQueryBuilder18.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.field("");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(zeroTermsQuery23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test13229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13229");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("hi!", (float) (-1L));
        multiMatchQueryBuilder17.slop = 0;
        java.lang.Object obj20 = multiMatchQueryBuilder17.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.prefixLength((-1));
        org.elasticsearch.common.unit.Fuzziness fuzziness27 = multiMatchQueryBuilder26.getfuzziness();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-1.0f) + "'", obj20, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(fuzziness27);
    }

    @Test
    public void test13230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13230");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        multiMatchQueryBuilder15.setoperator(operator16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.boost((float) 1);
        multiMatchQueryBuilder19.settieBreaker((java.lang.Float) 10.0f);
        multiMatchQueryBuilder19.useDisMax = false;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test13231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13231");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.slop((int) '#');
        multiMatchQueryBuilder13.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.lenient(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery18);
        java.lang.Float float20 = multiMatchQueryBuilder19.cutoffFrequency;
        multiMatchQueryBuilder19.cutoffFrequency = 35.0f;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(float20);
    }

    @Test
    public void test13232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13232");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        multiMatchQueryBuilder8.setqueryName("hi!");
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray21);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = multiMatchQueryBuilder22.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder22.boost((float) (short) 100);
        java.lang.Integer int26 = multiMatchQueryBuilder25.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder25.boost((float) '4');
        multiMatchQueryBuilder25.setfuzzyRewrite("");
        java.lang.String str31 = multiMatchQueryBuilder25.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder25.tieBreaker(0.0f);
        multiMatchQueryBuilder25.boost = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        multiMatchQueryBuilder25.type = type36;
        float float38 = type36.tieBreaker();
        float float39 = type36.tieBreaker();
        multiMatchQueryBuilder8.settype(type36);
        java.util.List<java.lang.String> strList41 = multiMatchQueryBuilder8.fields;
        java.util.List<java.lang.String> strList42 = multiMatchQueryBuilder8.fields;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator43 = null;
        multiMatchQueryBuilder8.setoperator(operator43);
        java.util.List<java.lang.String> strList45 = multiMatchQueryBuilder8.getfields();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(zeroTermsQuery23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 0.0f + "'", float38 == 0.0f);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 0.0f + "'", float39 == 0.0f);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList45);
    }

    @Test
    public void test13233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13233");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.Integer int17 = multiMatchQueryBuilder11.getslop();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder11.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Object obj21 = multiMatchQueryBuilder20.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = null;
        multiMatchQueryBuilder20.type = type22;
        multiMatchQueryBuilder20.boost = 0.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = multiMatchQueryBuilder20.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder20.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : false,\n    \"lenient\" : false\n  }\n}", (float) 0L);
        multiMatchQueryBuilder29.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 97,\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 10.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + (-1.0f) + "'", obj21, (-1.0f));
        org.junit.Assert.assertNull(zeroTermsQuery26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test13234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13234");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.slop((int) (byte) 10);
        org.elasticsearch.common.unit.Fuzziness fuzziness17 = null;
        multiMatchQueryBuilder16.fuzziness = fuzziness17;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator21 = multiMatchQueryBuilder16.getoperator();
        java.lang.String str22 = multiMatchQueryBuilder16.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder16.cutoffFrequency((float) 52);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.useDisMax(false);
        java.lang.String str36 = multiMatchQueryBuilder35.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness37 = multiMatchQueryBuilder35.fuzziness;
        java.lang.String str38 = multiMatchQueryBuilder35.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery39 = null;
        multiMatchQueryBuilder35.zeroTermsQuery = zeroTermsQuery39;
        multiMatchQueryBuilder35.setqueryName("hi!");
        multiMatchQueryBuilder35.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder35.maxExpansions((-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder46.field("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"boost\" : -1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"max_expansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"_name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tie_breaker\\\" : 10.0\\n  }\\n}\"\n  }\n}", (float) (byte) 1);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray57);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery59 = multiMatchQueryBuilder58.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder58.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder58.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder58.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness66 = multiMatchQueryBuilder58.getfuzziness();
        multiMatchQueryBuilder58.maxExpansions = 1;
        java.lang.Boolean boolean69 = multiMatchQueryBuilder58.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder58.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        java.lang.String[] strArray73 = new java.lang.String[] { "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"prefixLength\" : 100,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder58, strArray73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder46, strArray73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder16, strArray73);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(operator21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(fuzziness37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(zeroTermsQuery59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNull(fuzziness66);
        org.junit.Assert.assertNull(boolean69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(strArray73);
    }

    @Test
    public void test13235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13235");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.field("hi!");
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 10.0f);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder24.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.boost((float) (short) 100);
        java.lang.Integer int28 = multiMatchQueryBuilder27.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder27.boost((float) '4');
        multiMatchQueryBuilder27.setfuzzyRewrite("");
        java.lang.Integer int33 = multiMatchQueryBuilder27.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder27.maxExpansions((int) (byte) 100);
        multiMatchQueryBuilder27.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder10.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator41 = null;
        multiMatchQueryBuilder40.operator = operator41;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"Name\" : \"hi!\"\n  }\n}");
        java.lang.String str45 = multiMatchQueryBuilder40.getminimumShouldMatch();
        multiMatchQueryBuilder40.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"phrase\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 0,\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}";
        java.lang.String str48 = multiMatchQueryBuilder40.getqueryName();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test13236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13236");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        multiMatchQueryBuilder14.setlenient((java.lang.Boolean) true);
        multiMatchQueryBuilder14.maxExpansions = 35;
        java.lang.Integer int21 = multiMatchQueryBuilder14.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        multiMatchQueryBuilder14.setzeroTermsQuery(zeroTermsQuery22);
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder14.fuzziness;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(fuzziness24);
    }

    @Test
    public void test13237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13237");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.type(type11);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = multiMatchQueryBuilder12.getfieldsBoosts();
        java.lang.Integer int14 = multiMatchQueryBuilder12.getprefixLength();
        java.lang.String str15 = null; // flaky: multiMatchQueryBuilder12.toString();
        java.lang.Float float16 = multiMatchQueryBuilder12.tieBreaker;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type11.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(strObjectFloatHashMap13);
        org.junit.Assert.assertNull(int14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"useDisMax\" : false\n  }\n}" + "'", str15, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"useDisMax\" : false\n  }\n}");
        org.junit.Assert.assertNull(float16);
    }

    @Test
    public void test13238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13238");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap11;
        multiMatchQueryBuilder8.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        multiMatchQueryBuilder8.setzeroTermsQuery(zeroTermsQuery15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder8.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        multiMatchQueryBuilder8.cutoffFrequency = 10.0f;
        java.lang.Object obj21 = multiMatchQueryBuilder8.gettext();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + (-1.0f) + "'", obj21, (-1.0f));
    }

    @Test
    public void test13239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13239");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder10.zeroTermsQuery;
        multiMatchQueryBuilder10.minimumShouldMatch = "";
        multiMatchQueryBuilder10.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.boost(0.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test13240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13240");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        multiMatchQueryBuilder12.minimumShouldMatch = "hi!";
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = null;
        multiMatchQueryBuilder12.setfieldsBoosts(strObjectFloatHashMap15);
        multiMatchQueryBuilder12.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"lenient\" : false\n  }\n}");
        java.lang.Integer int19 = multiMatchQueryBuilder12.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder12.useDisMax(false);
        java.lang.Integer int22 = multiMatchQueryBuilder12.getprefixLength();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(int22);
    }

    @Test
    public void test13241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13241");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.lang.Boolean boolean15 = multiMatchQueryBuilder10.lenient;
        multiMatchQueryBuilder10.setslop((java.lang.Integer) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator18 = multiMatchQueryBuilder10.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.field("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"type\" : \"best_fields\",\n    \"boost\" : 100.0,\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator21 = multiMatchQueryBuilder10.getoperator();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(operator18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(operator21);
    }

    @Test
    public void test13242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13242");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        java.lang.String str12 = multiMatchQueryBuilder8.fuzzyRewrite;
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder8.getfields();
        multiMatchQueryBuilder8.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        multiMatchQueryBuilder8.setoperator(operator16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.cutoffFrequency(35.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = multiMatchQueryBuilder8.operator;
        multiMatchQueryBuilder8.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0,\\n    \\\"slop\\\" : 10,\\n    \\\"max_expansions\\\" : 10\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}");
        multiMatchQueryBuilder8.boost = 0.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(operator20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test13243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13243");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray18);
        java.lang.String str20 = multiMatchQueryBuilder19.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.type((java.lang.Object) str20);
        java.lang.Boolean boolean22 = multiMatchQueryBuilder8.getuseDisMax();
        java.lang.String str23 = multiMatchQueryBuilder8.queryName;
        multiMatchQueryBuilder8.cutoffFrequency = 100.0f;
        java.lang.String str26 = multiMatchQueryBuilder8.getqueryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true\n  }\n}");
        multiMatchQueryBuilder28.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"slop\" : 35,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : false,\n    \"lenient\" : false\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test13244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13244");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder13.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder13.prefixLength(10);
        multiMatchQueryBuilder18.setqueryName("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"useDisMax\\\" : true\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false,\\n    \\\"lenient\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0\n  }\n}");
        multiMatchQueryBuilder18.maxExpansions = 32;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test13245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13245");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("");
        java.lang.Float float13 = multiMatchQueryBuilder10.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        java.lang.Integer int16 = multiMatchQueryBuilder15.maxExpansions;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator17 = multiMatchQueryBuilder15.operator;
        java.lang.Object obj18 = multiMatchQueryBuilder15.text;
        java.lang.Float float19 = multiMatchQueryBuilder15.gettieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder15.maxExpansions(52);
        java.lang.String str22 = multiMatchQueryBuilder15.queryName;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(operator17);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + '#' + "'", obj18, '#');
        org.junit.Assert.assertNull(float19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test13246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13246");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        java.util.List<java.lang.String> strList10 = multiMatchQueryBuilder8.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder8.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.queryName("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 52.0,\n    \"fuzzy_rewrite\" : \"\"\n  }\n}");
        multiMatchQueryBuilder13.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"prefixLength\\\" : 1,\\n    \\\"useDisMax\\\" : false,\\n    \\\"cutoffFrequency\\\" : 0.0\\n  }\\n}\" ],\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
    }

    @Test
    public void test13247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13247");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}";
        java.lang.Boolean boolean17 = multiMatchQueryBuilder10.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.queryName("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"Name\" : \"hi!\"\n  }\n}");
        java.lang.Integer int20 = multiMatchQueryBuilder19.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator21 = multiMatchQueryBuilder19.operator;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(operator21);
    }

    @Test
    public void test13248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13248");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        multiMatchQueryBuilder10.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}";
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap16 = multiMatchQueryBuilder10.fieldsBoosts;
        multiMatchQueryBuilder10.useDisMax = true;
        multiMatchQueryBuilder10.lenient = true;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(strObjectFloatHashMap16);
    }

    @Test
    public void test13249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13249");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.slop;
        java.lang.Integer int16 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        multiMatchQueryBuilder10.maxExpansions = 0;
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder10.getfuzziness();
        java.lang.String str22 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type23 = multiMatchQueryBuilder10.gettype();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(type23);
    }

    @Test
    public void test13250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13250");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        java.lang.Object obj15 = multiMatchQueryBuilder10.gettext();
        java.lang.Float float16 = multiMatchQueryBuilder10.getboost();
        java.lang.String str17 = multiMatchQueryBuilder10.analyzer;
        multiMatchQueryBuilder10.setprefixLength((java.lang.Integer) 100);
        java.lang.Object obj20 = multiMatchQueryBuilder10.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.prefixLength((int) (short) 0);
        multiMatchQueryBuilder10.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder10.cutoffFrequency((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.tieBreaker(10.0f);
        java.util.List<java.lang.String> strList29 = multiMatchQueryBuilder26.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder26.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}^10.0\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}", 100.0f);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + '#' + "'", obj15, '#');
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + '#' + "'", obj20, '#');
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
    }

    @Test
    public void test13251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13251");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.tieBreaker(0.0f);
        multiMatchQueryBuilder19.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        multiMatchQueryBuilder23.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}";
        java.lang.String str26 = multiMatchQueryBuilder23.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = multiMatchQueryBuilder23.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder23.lenient(true);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder23.operator(operator30);
        java.lang.Integer int32 = multiMatchQueryBuilder31.prefixLength;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}" + "'", str26, "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        org.junit.Assert.assertNull(type27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(int32);
    }

    @Test
    public void test13252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13252");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        java.lang.Object obj15 = multiMatchQueryBuilder10.gettext();
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder10.fields;
        multiMatchQueryBuilder10.tieBreaker = 1.0f;
        multiMatchQueryBuilder10.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"fuzzyRewrite\" : \"\"\n  }\n}";
        multiMatchQueryBuilder10.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery23);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + '#' + "'", obj15, '#');
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test13253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13253");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.lang.String str14 = multiMatchQueryBuilder10.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.field("hi!", (float) (byte) 1);
        java.lang.Boolean boolean18 = multiMatchQueryBuilder17.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder17.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"max_expansions\" : 0,\n    \"lenient\" : false\n  }\n}");
        java.lang.Object obj21 = multiMatchQueryBuilder17.text;
        java.lang.String str22 = multiMatchQueryBuilder17.fuzzyRewrite;
        multiMatchQueryBuilder17.setslop((java.lang.Integer) 32);
        multiMatchQueryBuilder17.lenient = true;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + '#' + "'", obj21, '#');
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test13254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13254");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = null;
        multiMatchQueryBuilder8.setfieldsBoosts(strObjectFloatHashMap12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type14 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder8.type = type14;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type16 = multiMatchQueryBuilder8.type;
        java.lang.String str17 = multiMatchQueryBuilder8.getqueryName();
        multiMatchQueryBuilder8.queryName = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"prefixLength\" : 32,\n    \"cutoffFrequency\" : 0.0\n  }\n}");
        java.lang.Integer int22 = multiMatchQueryBuilder21.slop;
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray30);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = multiMatchQueryBuilder31.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder31.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type35 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder34.settype(type35);
        float float37 = type35.tieBreaker();
        multiMatchQueryBuilder21.settype(type35);
        multiMatchQueryBuilder21.maxExpansions = 52;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type14.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type16.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNull(zeroTermsQuery32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type35.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 0.0f + "'", float37 == 0.0f);
    }

    @Test
    public void test13255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13255");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder8.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder8.getfuzziness();
        multiMatchQueryBuilder8.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 32);
        multiMatchQueryBuilder8.setuseDisMax((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(fuzziness16);
    }

    @Test
    public void test13256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13256");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.lenient(true);
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = null;
        multiMatchQueryBuilder12.fuzziness = fuzziness13;
        multiMatchQueryBuilder12.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder12.setmaxExpansions((java.lang.Integer) (-1));
        java.lang.Boolean boolean19 = multiMatchQueryBuilder12.useDisMax;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(boolean19);
    }

    @Test
    public void test13257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13257");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.lenient(true);
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = null;
        multiMatchQueryBuilder12.fuzziness = fuzziness13;
        multiMatchQueryBuilder12.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"prefixLength\" : 100,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}");
        java.lang.Boolean boolean19 = multiMatchQueryBuilder18.useDisMax;
        java.lang.String str20 = multiMatchQueryBuilder18.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"max_expansions\" : 0,\n    \"lenient\" : true,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\"\n  }\n}");
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray32);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery34 = multiMatchQueryBuilder33.getzeroTermsQuery();
        multiMatchQueryBuilder33.minimumShouldMatch = "hi!";
        java.lang.String str37 = multiMatchQueryBuilder33.fuzzyRewrite;
        java.util.List<java.lang.String> strList38 = multiMatchQueryBuilder33.getfields();
        multiMatchQueryBuilder33.minimumShouldMatch = "";
        java.util.List<java.lang.String> strList41 = multiMatchQueryBuilder33.getfields();
        multiMatchQueryBuilder33.queryName = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type44 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float45 = type44.tieBreaker();
        float float46 = type44.tieBreaker();
        org.elasticsearch.common.ParseField parseField47 = type44.parseField();
        float float48 = type44.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type49 = type44.matchQueryType();
        org.elasticsearch.common.ParseField parseField50 = type44.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder33.type(type44);
        multiMatchQueryBuilder24.type = type44;
        multiMatchQueryBuilder24.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"\" ],\n    \"boost\" : 100.0,\n    \"max_expansions\" : -1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false,\\n    \\\"lenient\\\" : false\\n  }\\n}\",\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 100.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNull(zeroTermsQuery34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type44.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + 0.0f + "'", float45 == 0.0f);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + 0.0f + "'", float46 == 0.0f);
        org.junit.Assert.assertNotNull(parseField47);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + 0.0f + "'", float48 == 0.0f);
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type49.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
    }

    @Test
    public void test13258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13258");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.useDisMax(false);
        java.lang.String str13 = multiMatchQueryBuilder12.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness14 = multiMatchQueryBuilder12.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        multiMatchQueryBuilder12.zeroTermsQuery = zeroTermsQuery15;
        java.lang.Integer int17 = multiMatchQueryBuilder12.getmaxExpansions();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator18 = null;
        multiMatchQueryBuilder12.operator = operator18;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap20 = null;
        multiMatchQueryBuilder12.fieldsBoosts = strObjectFloatHashMap20;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder12.maxExpansions((int) (byte) -1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        multiMatchQueryBuilder12.zeroTermsQuery = zeroTermsQuery24;
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.useDisMax(false);
        java.lang.String str37 = multiMatchQueryBuilder36.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness38 = multiMatchQueryBuilder36.fuzziness;
        java.lang.String str39 = multiMatchQueryBuilder36.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery40 = null;
        multiMatchQueryBuilder36.zeroTermsQuery = zeroTermsQuery40;
        multiMatchQueryBuilder36.setqueryName("hi!");
        multiMatchQueryBuilder36.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder36.maxExpansions((-1));
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator48 = null;
        multiMatchQueryBuilder36.operator = operator48;
        java.lang.String str50 = multiMatchQueryBuilder36.getanalyzer();
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder36, strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder12, strArray59);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder64 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(fuzziness14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(fuzziness38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(strArray59);
    }

    @Test
    public void test13259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13259");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0d, strArray9);
        multiMatchQueryBuilder12.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder12.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type16 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float17 = type16.tieBreaker();
        float float18 = type16.tieBreaker();
        org.elasticsearch.common.ParseField parseField19 = type16.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type20 = type16.matchQueryType();
        org.elasticsearch.common.ParseField parseField21 = type16.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder12.type(type16);
        multiMatchQueryBuilder22.setlenient((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.boost(0.0f);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray34);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = multiMatchQueryBuilder35.getzeroTermsQuery();
        multiMatchQueryBuilder35.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder35.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator43 = null;
        multiMatchQueryBuilder42.setoperator(operator43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.boost((float) 1);
        multiMatchQueryBuilder46.settieBreaker((java.lang.Float) 10.0f);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type60 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder57.type(type60);
        multiMatchQueryBuilder46.type = type60;
        multiMatchQueryBuilder26.type = type60;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder26.queryName("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 52.0,\n    \"fuzzyRewrite\" : \"\"\n  }\n}");
        multiMatchQueryBuilder65.setmaxExpansions((java.lang.Integer) 100);
        java.lang.Boolean boolean68 = multiMatchQueryBuilder65.getlenient();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type16.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertNotNull(parseField19);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNull(zeroTermsQuery36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertTrue("'" + type60 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type60.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertEquals("'" + boolean68 + "' != '" + true + "'", boolean68, true);
    }

    @Test
    public void test13260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13260");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.lenient = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.analyzer("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap16 = null;
        multiMatchQueryBuilder10.setfieldsBoosts(strObjectFloatHashMap16);
        java.lang.Float float18 = multiMatchQueryBuilder10.getboost();
        multiMatchQueryBuilder10.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0,\\n    \\\"slop\\\" : 10,\\n    \\\"max_expansions\\\" : 10\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}");
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : -1.0\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\" ],\n    \"max_expansions\" : 100,\n    \"use_dis_max\" : true\n  }\n}", 10.0f);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test13261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13261");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = multiMatchQueryBuilder12.type;
        java.lang.String str14 = multiMatchQueryBuilder12.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}", (float) '4');
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray25);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator27 = multiMatchQueryBuilder26.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder26.field("");
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray37);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery39 = multiMatchQueryBuilder38.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder38.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type42 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder41.settype(type42);
        float float44 = type42.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder29.type(type42);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder29.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 52.0,\n    \"fuzzyRewrite\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type48 = multiMatchQueryBuilder29.gettype();
        multiMatchQueryBuilder17.settype(type48);
        multiMatchQueryBuilder17.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"maxExpansions\\\" : 0,\\n    \\\"useDisMax\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(type13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNull(operator27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNull(zeroTermsQuery39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type42.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 0.0f + "'", float44 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type48.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
    }

    @Test
    public void test13262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13262");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder10.getfields();
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.maxExpansions((int) 'a');
        java.lang.String str16 = null; // flaky: multiMatchQueryBuilder10.toString();
        multiMatchQueryBuilder10.cutoffFrequency = 0.0f;
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.useDisMax(false);
        java.lang.String str30 = multiMatchQueryBuilder29.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder29.setzeroTermsQuery(zeroTermsQuery31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type33 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder29.type(type33);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder29.operator(operator35);
        java.lang.Integer int37 = multiMatchQueryBuilder29.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder10.type((java.lang.Object) int37);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator39 = multiMatchQueryBuilder10.getoperator();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 97,\n    \"useDisMax\" : false\n  }\n}" + "'", str16, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 97,\n    \"useDisMax\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type33.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(operator39);
    }

    @Test
    public void test13263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13263");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.maxExpansions = 0;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator11 = multiMatchQueryBuilder8.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 0,\n    \"useDisMax\" : false\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = multiMatchQueryBuilder8.getoperator();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = multiMatchQueryBuilder8.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.maxExpansions((int) 'a');
        java.lang.Float float18 = multiMatchQueryBuilder17.getcutoffFrequency();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(operator14);
        org.junit.Assert.assertNull(operator15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(float18);
    }

    @Test
    public void test13264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13264");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.lenient(true);
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = null;
        multiMatchQueryBuilder12.fuzziness = fuzziness13;
        multiMatchQueryBuilder12.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"prefixLength\" : 100,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}");
        java.lang.Boolean boolean19 = multiMatchQueryBuilder18.useDisMax;
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray27);
        multiMatchQueryBuilder28.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray38);
        java.lang.String str40 = multiMatchQueryBuilder39.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder28.type((java.lang.Object) str40);
        multiMatchQueryBuilder41.tieBreaker = 10.0f;
        multiMatchQueryBuilder41.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder41.fuzziness((java.lang.Object) 1.0d);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap59 = null;
        multiMatchQueryBuilder56.fieldsBoosts = strObjectFloatHashMap59;
        multiMatchQueryBuilder56.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery63 = null;
        multiMatchQueryBuilder56.setzeroTermsQuery(zeroTermsQuery63);
        multiMatchQueryBuilder56.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder75.useDisMax(false);
        java.lang.String str78 = multiMatchQueryBuilder77.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery79 = null;
        multiMatchQueryBuilder77.setzeroTermsQuery(zeroTermsQuery79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type81 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder77.type(type81);
        multiMatchQueryBuilder56.settype(type81);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder41.type(type81);
        multiMatchQueryBuilder18.type = type81;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder18.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type88 = multiMatchQueryBuilder18.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = multiMatchQueryBuilder18.boost((float) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = multiMatchQueryBuilder18.maxExpansions(1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery93 = multiMatchQueryBuilder18.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder95 = multiMatchQueryBuilder18.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"maxExpansions\" : 32,\n    \"useDisMax\" : false,\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 52.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + type81 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type81.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertTrue("'" + type88 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type88.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder90);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder92);
        org.junit.Assert.assertNull(zeroTermsQuery93);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder95);
    }

    @Test
    public void test13265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13265");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray18);
        java.lang.String str20 = multiMatchQueryBuilder19.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.type((java.lang.Object) str20);
        java.lang.String str22 = null; // flaky: multiMatchQueryBuilder8.toString();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray30);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = multiMatchQueryBuilder31.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder31.boost((float) (short) 100);
        java.lang.Integer int35 = multiMatchQueryBuilder31.getmaxExpansions();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = null;
        multiMatchQueryBuilder31.zeroTermsQuery = zeroTermsQuery36;
        multiMatchQueryBuilder31.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery40 = multiMatchQueryBuilder31.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type41 = multiMatchQueryBuilder31.type;
        java.lang.String str42 = null; // flaky: multiMatchQueryBuilder31.toString();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray50);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery52 = multiMatchQueryBuilder51.getzeroTermsQuery();
        multiMatchQueryBuilder51.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder51.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.useDisMax(false);
        java.lang.Float float59 = multiMatchQueryBuilder56.boost;
        multiMatchQueryBuilder56.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type62 = multiMatchQueryBuilder56.type;
        java.lang.String str63 = null; // flaky: multiMatchQueryBuilder56.toString();
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray71);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery73 = multiMatchQueryBuilder72.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder72.boost((float) (short) 100);
        multiMatchQueryBuilder75.queryName = "hi!";
        java.lang.Integer int78 = multiMatchQueryBuilder75.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder75.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder75.maxExpansions((int) (short) 0);
        java.lang.String str84 = multiMatchQueryBuilder75.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap85 = multiMatchQueryBuilder75.fieldsBoosts;
        multiMatchQueryBuilder56.fieldsBoosts = strObjectFloatHashMap85;
        multiMatchQueryBuilder31.fieldsBoosts = strObjectFloatHashMap85;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap85;
        multiMatchQueryBuilder8.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 100\n  }\n}" + "'", str22, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 100\n  }\n}");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNull(zeroTermsQuery32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNull(zeroTermsQuery40);
        org.junit.Assert.assertNull(type41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\"\n  }\n}" + "'", str42, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNull(zeroTermsQuery52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNull(float59);
        org.junit.Assert.assertNull(type62);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}" + "'", str63, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNull(zeroTermsQuery73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNull(int78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap85);
    }

    @Test
    public void test13266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13266");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.tieBreaker((float) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = multiMatchQueryBuilder17.getzeroTermsQuery();
        multiMatchQueryBuilder17.maxExpansions = 32;
        multiMatchQueryBuilder17.tieBreaker = 100.0f;
        java.lang.Integer int23 = multiMatchQueryBuilder17.getslop();
        java.lang.Boolean boolean24 = multiMatchQueryBuilder17.useDisMax;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        multiMatchQueryBuilder17.setzeroTermsQuery(zeroTermsQuery25);
        multiMatchQueryBuilder17.setboost((java.lang.Float) 10.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(zeroTermsQuery18);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNull(boolean24);
    }

    @Test
    public void test13267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13267");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.Integer int17 = multiMatchQueryBuilder11.getslop();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder11.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Object obj21 = multiMatchQueryBuilder20.text;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder20.slop((int) '#');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + (-1.0f) + "'", obj21, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test13268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13268");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0d, strArray9);
        multiMatchQueryBuilder12.maxExpansions = (-1);
        java.lang.Float float15 = multiMatchQueryBuilder12.cutoffFrequency;
        multiMatchQueryBuilder12.analyzer = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder12.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.Object obj22 = multiMatchQueryBuilder19.text;
        multiMatchQueryBuilder19.settieBreaker((java.lang.Float) 100.0f);
        java.lang.String str25 = multiMatchQueryBuilder19.getanalyzer();
        multiMatchQueryBuilder19.maxExpansions = 97;
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + 0.0d + "'", obj22, 0.0d);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}" + "'", str25, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
    }

    @Test
    public void test13269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13269");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.lang.String str14 = multiMatchQueryBuilder10.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.tieBreaker((float) 1);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray24);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = multiMatchQueryBuilder25.getzeroTermsQuery();
        multiMatchQueryBuilder25.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator29 = null;
        multiMatchQueryBuilder25.setoperator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = null; // flaky: multiMatchQueryBuilder16.fuzziness((java.lang.Object) multiMatchQueryBuilder25);
// flaky:         multiMatchQueryBuilder31.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"max_expansions\" : 0,\n    \"fuzzy_rewrite\" : \"\",\n    \"lenient\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNull(zeroTermsQuery26);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test13270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13270");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder15.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.boost((float) 10L);
        java.lang.String[] strArray23 = new java.lang.String[] { "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 0,\n    \"useDisMax\" : false\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder18, strArray23);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray33);
        java.lang.Integer int36 = multiMatchQueryBuilder35.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap37 = multiMatchQueryBuilder35.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = null;
        multiMatchQueryBuilder35.zeroTermsQuery = zeroTermsQuery38;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder35.boost((float) (short) 10);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray49);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery51 = multiMatchQueryBuilder50.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder50.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder50.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder50.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness58 = multiMatchQueryBuilder50.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder50.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type61 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float62 = type61.tieBreaker();
        float float63 = type61.tieBreaker();
        float float64 = type61.tieBreaker();
        multiMatchQueryBuilder50.type = type61;
        float float66 = type61.tieBreaker();
        org.elasticsearch.common.ParseField parseField67 = type61.parseField();
        multiMatchQueryBuilder41.settype(type61);
        org.elasticsearch.common.ParseField parseField69 = type61.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder24.type(type61);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder24.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 97.0,\n    \"fuzziness\" : \"[hi!, , hi!, hi!, hi!, ]\",\n    \"tieBreaker\" : 52.0,\n    \"Name\" : \"hi!\"\n  }\n}", (float) '4');
        java.lang.Object obj74 = multiMatchQueryBuilder24.gettext();
        java.lang.Integer int75 = multiMatchQueryBuilder24.slop;
        java.lang.Class<?> wildcardClass76 = multiMatchQueryBuilder24.getClass();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNull(strObjectFloatHashMap37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNull(zeroTermsQuery51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNull(fuzziness58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertTrue("'" + type61 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type61.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + 0.0f + "'", float62 == 0.0f);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + 0.0f + "'", float63 == 0.0f);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + 0.0f + "'", float64 == 0.0f);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + 0.0f + "'", float66 == 0.0f);
        org.junit.Assert.assertNotNull(parseField67);
        org.junit.Assert.assertNotNull(parseField69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(obj74);
// flaky:         org.junit.Assert.assertEquals(obj74.toString(), "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 10.0,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"tieBreaker\" : 100.0\n  }\n}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 10.0,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"tieBreaker\" : 100.0\n  }\n}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 10.0,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"tieBreaker\" : 100.0\n  }\n}");
        org.junit.Assert.assertNull(int75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test13271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13271");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.maxExpansions = 0;
        org.elasticsearch.common.unit.Fuzziness fuzziness11 = null;
        multiMatchQueryBuilder8.fuzziness = fuzziness11;
        multiMatchQueryBuilder8.boost = 10.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.operator(operator15);
        multiMatchQueryBuilder8.boost = 97.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder8.prefixLength(52);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test13272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13272");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        multiMatchQueryBuilder15.setoperator(operator16);
        java.lang.Object obj18 = multiMatchQueryBuilder15.text;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params20 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder15.doXContent(xContentBuilder19, params20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + (-1.0f) + "'", obj18, (-1.0f));
        org.junit.Assert.assertNotNull(params20);
    }

    @Test
    public void test13273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13273");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.field("hi!");
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 10.0f);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder24.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.boost((float) (short) 100);
        java.lang.Integer int28 = multiMatchQueryBuilder27.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder27.boost((float) '4');
        multiMatchQueryBuilder27.setfuzzyRewrite("");
        java.lang.Integer int33 = multiMatchQueryBuilder27.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder27.maxExpansions((int) (byte) 100);
        multiMatchQueryBuilder27.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder27);
        java.lang.String str39 = null; // flaky: multiMatchQueryBuilder38.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = null; // flaky: multiMatchQueryBuilder38.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0\n  }\n}");
// flaky:         multiMatchQueryBuilder41.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"class org.joda.time.format.DateTimeFormatter\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}^1.0\" ],\n    \"boost\" : 0.0,\n    \"useDisMax\" : true,\n    \"Name\" : \"hi!\"\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery44 = null; // flaky: multiMatchQueryBuilder41.getzeroTermsQuery();
// flaky:         multiMatchQueryBuilder41.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        org.elasticsearch.common.xcontent.XContentType xContentType47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference48 = null; // flaky: multiMatchQueryBuilder41.buildAsBytes(xContentType47);
// flaky:             org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}" + "'", str39, "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}");
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(zeroTermsQuery44);
    }

    @Test
    public void test13274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13274");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        multiMatchQueryBuilder11.setoperator(operator14);
        java.lang.Boolean boolean16 = multiMatchQueryBuilder11.getlenient();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator17 = null;
        multiMatchQueryBuilder11.setoperator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        multiMatchQueryBuilder20.setmaxExpansions((java.lang.Integer) 32);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.operator(operator23);
        java.lang.String str25 = multiMatchQueryBuilder20.getminimumShouldMatch();
        java.lang.Integer int26 = multiMatchQueryBuilder20.prefixLength;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(int26);
    }

    @Test
    public void test13275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13275");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.analyzer = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.cutoffFrequency((float) 'a');
        org.elasticsearch.common.unit.Fuzziness fuzziness20 = multiMatchQueryBuilder19.fuzziness;
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder19.getfuzziness();
        java.lang.Integer int22 = multiMatchQueryBuilder19.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder19.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"useDisMax\\\" : true\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false,\\n    \\\"lenient\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0\n  }\n}", (float) 97);
        java.lang.String str26 = multiMatchQueryBuilder25.fuzzyRewrite;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(fuzziness20);
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test13276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13276");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder10.getfields();
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = null;
        multiMatchQueryBuilder10.setfieldsBoosts(strObjectFloatHashMap14);
        multiMatchQueryBuilder10.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}";
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.boost((float) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.lenient(false);
        java.lang.Integer int23 = multiMatchQueryBuilder22.prefixLength;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(fuzziness18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(int23);
    }

    @Test
    public void test13277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13277");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder11.lenient;
        java.lang.Object obj19 = multiMatchQueryBuilder11.text;
        multiMatchQueryBuilder11.tieBreaker = 0.0f;
        multiMatchQueryBuilder11.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder11.useDisMax(true);
        java.lang.Integer int26 = multiMatchQueryBuilder11.getslop();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-1.0f) + "'", obj19, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(int26);
    }

    @Test
    public void test13278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13278");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder8.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.minimumShouldMatch("");
        multiMatchQueryBuilder14.maxExpansions = 100;
        java.lang.String str17 = multiMatchQueryBuilder14.getqueryName();
        multiMatchQueryBuilder14.setslop((java.lang.Integer) 35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"max_expansions\" : 0,\n    \"lenient\" : false\n  }\n}");
        java.lang.String str22 = multiMatchQueryBuilder21.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 52.0,\n    \"fuzzyRewrite\" : \"\"\n  }\n}", (float) ' ');
        org.elasticsearch.common.unit.Fuzziness fuzziness26 = multiMatchQueryBuilder21.fuzziness;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"max_expansions\" : 0,\n    \"lenient\" : false\n  }\n}" + "'", str22, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"max_expansions\" : 0,\n    \"lenient\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(fuzziness26);
    }

    @Test
    public void test13279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13279");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        java.lang.String str15 = multiMatchQueryBuilder11.queryName;
        java.lang.Integer int16 = multiMatchQueryBuilder11.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.tieBreaker((float) (short) 100);
        multiMatchQueryBuilder18.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder18.queryName;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test13280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13280");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"use_dis_max\" : false,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.lenient(false);
        multiMatchQueryBuilder20.prefixLength = 10;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test13281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13281");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder10.getfields();
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.tieBreaker((float) '4');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder17.setzeroTermsQuery(zeroTermsQuery18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.useDisMax(true);
        java.lang.Integer int22 = multiMatchQueryBuilder17.slop;
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray31);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery34 = null;
        multiMatchQueryBuilder33.setzeroTermsQuery(zeroTermsQuery34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder33.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder37.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder37.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder37.cutoffFrequency((float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type46 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type47 = type46.matchQueryType();
        multiMatchQueryBuilder37.type = type46;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery49 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder37.zeroTermsQuery(zeroTermsQuery49);
        java.lang.Float float51 = multiMatchQueryBuilder37.getboost();
        multiMatchQueryBuilder37.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 10.0,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"tie_breaker\" : 100.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type54 = multiMatchQueryBuilder37.type;
        multiMatchQueryBuilder17.type = type54;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder17.boost((float) '#');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type46.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type47.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(float51);
        org.junit.Assert.assertTrue("'" + type54 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type54.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
    }

    @Test
    public void test13282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13282");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.slop((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float18 = type17.tieBreaker();
        float float19 = type17.tieBreaker();
        org.elasticsearch.common.ParseField parseField20 = type17.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder11.type(type17);
        multiMatchQueryBuilder21.setboost((java.lang.Float) 0.0f);
        java.lang.String str24 = multiMatchQueryBuilder21.getminimumShouldMatch();
        java.lang.Integer int25 = multiMatchQueryBuilder21.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder21.useDisMax(true);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap28 = multiMatchQueryBuilder27.fieldsBoosts;
        java.lang.String str29 = multiMatchQueryBuilder27.getanalyzer();
        multiMatchQueryBuilder27.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 0.0,\n    \"minimum_should_match\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"use_dis_max\\\\\\\" : false\\\\n  }\\\\n}\\\",\\n    \\\"useDisMax\\\" : false\\n  }\\n}\",\n    \"cutoff_frequency\" : 0.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type17.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertNotNull(parseField20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(strObjectFloatHashMap28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}" + "'", str29, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
    }

    @Test
    public void test13283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13283");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder14.cutoffFrequency((float) (byte) 0);
        multiMatchQueryBuilder14.boost = 1.0f;
        java.lang.String str25 = multiMatchQueryBuilder14.getfuzzyRewrite();
        java.lang.String str26 = multiMatchQueryBuilder14.analyzer;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap27 = multiMatchQueryBuilder14.getfieldsBoosts();
        multiMatchQueryBuilder14.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"use_dis_max\" : false\n  }\n}";
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap30 = multiMatchQueryBuilder14.fieldsBoosts;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap31 = multiMatchQueryBuilder14.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(strObjectFloatHashMap27);
        org.junit.Assert.assertNull(strObjectFloatHashMap30);
        org.junit.Assert.assertNull(strObjectFloatHashMap31);
    }

    @Test
    public void test13284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13284");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.maxExpansions = 0;
        multiMatchQueryBuilder8.cutoffFrequency = (-1.0f);
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) 35.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = multiMatchQueryBuilder8.zeroTermsQuery;
        java.lang.Float float16 = multiMatchQueryBuilder8.gettieBreaker();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray24);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = multiMatchQueryBuilder25.getzeroTermsQuery();
        multiMatchQueryBuilder25.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder25.minimumShouldMatch("");
        java.lang.Object obj31 = multiMatchQueryBuilder25.gettext();
        java.lang.Integer int32 = multiMatchQueryBuilder25.getslop();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray40);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery42 = multiMatchQueryBuilder41.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder41.boost((float) (short) 100);
        java.lang.Integer int45 = multiMatchQueryBuilder44.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder44.boost((float) '4');
        multiMatchQueryBuilder44.setfuzzyRewrite("");
        java.lang.String str50 = multiMatchQueryBuilder44.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder44.tieBreaker(0.0f);
        multiMatchQueryBuilder52.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder52.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        java.lang.Integer int57 = multiMatchQueryBuilder56.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder56.slop((int) (short) 100);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray67);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator69 = multiMatchQueryBuilder68.getoperator();
        java.lang.Integer int70 = multiMatchQueryBuilder68.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator71 = null;
        multiMatchQueryBuilder68.setoperator(operator71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder68.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator75 = multiMatchQueryBuilder74.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type76 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type77 = type76.matchQueryType();
        multiMatchQueryBuilder74.type = type76;
        multiMatchQueryBuilder59.settype(type76);
        multiMatchQueryBuilder25.type = type76;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder8.type(type76);
        multiMatchQueryBuilder81.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"max_expansions\" : 0,\n    \"lenient\" : false\n  }\n}");
        java.lang.Boolean boolean84 = multiMatchQueryBuilder81.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNull(zeroTermsQuery26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertEquals("'" + obj31 + "' != '" + (-1.0f) + "'", obj31, (-1.0f));
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNull(zeroTermsQuery42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNull(operator69);
        org.junit.Assert.assertNull(int70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNull(operator75);
        org.junit.Assert.assertTrue("'" + type76 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type76.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type77 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type77.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNull(boolean84);
    }

    @Test
    public void test13285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13285");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.slop((int) '#');
        multiMatchQueryBuilder13.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.lenient(false);
        multiMatchQueryBuilder13.slop = 10;
        multiMatchQueryBuilder13.lenient = false;
        multiMatchQueryBuilder13.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder13.maxExpansions(0);
        multiMatchQueryBuilder25.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0,\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"lenient\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test13286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13286");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray18);
        java.lang.String str20 = multiMatchQueryBuilder19.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.type((java.lang.Object) str20);
        multiMatchQueryBuilder8.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder8.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}", (float) (-1L));
        multiMatchQueryBuilder26.lenient = true;
        multiMatchQueryBuilder26.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : true,\n    \"lenient\" : false\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder26.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        java.lang.Integer int33 = multiMatchQueryBuilder32.prefixLength;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap34 = multiMatchQueryBuilder32.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator35 = multiMatchQueryBuilder32.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder32.cutoffFrequency(35.0f);
        java.lang.String str38 = multiMatchQueryBuilder37.getminimumShouldMatch();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap34);
        org.junit.Assert.assertNull(operator35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test13287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13287");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.prefixLength((int) ' ');
        java.lang.Boolean boolean16 = multiMatchQueryBuilder15.useDisMax;
        java.lang.String str17 = multiMatchQueryBuilder15.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.useDisMax(true);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = multiMatchQueryBuilder15.toXContent(xContentBuilder20, params21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(params21);
    }

    @Test
    public void test13288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13288");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        java.lang.String str13 = multiMatchQueryBuilder12.analyzer;
        java.lang.String str14 = multiMatchQueryBuilder12.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type16 = type15.matchQueryType();
        multiMatchQueryBuilder12.settype(type15);
        org.elasticsearch.index.search.MatchQuery.Type type18 = type15.matchQueryType();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type15.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type16.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type18.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
    }

    @Test
    public void test13289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13289");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.slop((int) '#');
        multiMatchQueryBuilder13.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.lenient(false);
        multiMatchQueryBuilder13.slop = 10;
        multiMatchQueryBuilder13.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.String str22 = multiMatchQueryBuilder13.fuzzyRewrite;
        multiMatchQueryBuilder13.prefixLength = 35;
        java.lang.Object obj25 = multiMatchQueryBuilder13.gettext();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap26 = multiMatchQueryBuilder13.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder13.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"tie_breaker\" : 100.0,\n    \"lenient\" : false,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"maxExpansions\\\" : 97,\\n    \\\"useDisMax\\\" : false\\n  }\\n}\"\n  }\n}");
        java.lang.Float float29 = multiMatchQueryBuilder28.getboost();
        multiMatchQueryBuilder28.setboost((java.lang.Float) 32.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}" + "'", str22, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.junit.Assert.assertEquals("'" + obj25 + "' != '" + (-1.0f) + "'", obj25, (-1.0f));
        org.junit.Assert.assertNull(strObjectFloatHashMap26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(float29);
    }

    @Test
    public void test13290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13290");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Float float15 = multiMatchQueryBuilder10.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator18 = multiMatchQueryBuilder17.getoperator();
        java.lang.String str19 = multiMatchQueryBuilder17.getanalyzer();
        java.lang.String str20 = multiMatchQueryBuilder17.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        multiMatchQueryBuilder22.settieBreaker((java.lang.Float) (-1.0f));
        org.elasticsearch.common.unit.Fuzziness fuzziness25 = multiMatchQueryBuilder22.fuzziness;
        java.lang.Float float26 = multiMatchQueryBuilder22.cutoffFrequency;
        multiMatchQueryBuilder22.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"use_dis_max\" : false,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(operator18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(fuzziness25);
        org.junit.Assert.assertNull(float26);
    }

    @Test
    public void test13291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13291");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.useDisMax(false);
        java.lang.Boolean boolean16 = multiMatchQueryBuilder15.getuseDisMax();
        java.lang.Integer int17 = multiMatchQueryBuilder15.getmaxExpansions();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray25);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery27 = multiMatchQueryBuilder26.getzeroTermsQuery();
        multiMatchQueryBuilder26.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder26.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator34 = multiMatchQueryBuilder31.operator;
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray42);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type46 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.type(type46);
        org.elasticsearch.common.ParseField parseField48 = type46.parseField();
        multiMatchQueryBuilder31.type = type46;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder31.cutoffFrequency((-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : true,\n    \"lenient\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = null; // flaky: multiMatchQueryBuilder15.fuzziness((java.lang.Object) multiMatchQueryBuilder53);
        multiMatchQueryBuilder15.boost = 52.0f;
        java.lang.String str57 = multiMatchQueryBuilder15.minimumShouldMatch;
        multiMatchQueryBuilder15.prefixLength = (-1);
        multiMatchQueryBuilder15.setslop((java.lang.Integer) 1);
        multiMatchQueryBuilder15.lenient = false;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + false + "'", boolean16, false);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNull(zeroTermsQuery27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(operator34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type46.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(parseField48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test13292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13292");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0d, strArray9);
        multiMatchQueryBuilder12.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.prefixLength((int) (byte) 0);
        java.lang.Object obj17 = multiMatchQueryBuilder16.gettext();
        java.lang.Float float18 = multiMatchQueryBuilder16.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"max_expansions\" : 0,\n    \"lenient\" : true,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder16.getzeroTermsQuery();
        multiMatchQueryBuilder16.setboost((java.lang.Float) 100.0f);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + 0.0d + "'", obj17, 0.0d);
        org.junit.Assert.assertNull(float18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(zeroTermsQuery21);
    }

    @Test
    public void test13293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13293");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.queryName = "hi!";
        multiMatchQueryBuilder10.tieBreaker = 1.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        multiMatchQueryBuilder10.operator = operator16;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = multiMatchQueryBuilder10.getfieldsBoosts();
        java.lang.String str19 = multiMatchQueryBuilder10.getfuzzyRewrite();
        java.lang.Boolean boolean20 = multiMatchQueryBuilder10.useDisMax;
        multiMatchQueryBuilder10.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : -1\n  }\n}");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(strObjectFloatHashMap18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(boolean20);
    }

    @Test
    public void test13294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13294");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.Integer int17 = multiMatchQueryBuilder10.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(true);
        java.lang.String str20 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator21 = null;
        multiMatchQueryBuilder10.operator = operator21;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = multiMatchQueryBuilder10.zeroTermsQuery;
        java.lang.String str24 = multiMatchQueryBuilder10.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type25 = multiMatchQueryBuilder10.gettype();
        org.elasticsearch.common.unit.Fuzziness fuzziness26 = multiMatchQueryBuilder10.getfuzziness();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(zeroTermsQuery23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}" + "'", str24, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.junit.Assert.assertNull(type25);
        org.junit.Assert.assertNull(fuzziness26);
    }

    @Test
    public void test13295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13295");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder8.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        multiMatchQueryBuilder8.useDisMax = true;
        java.util.List<java.lang.String> strList18 = multiMatchQueryBuilder8.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float20 = type19.tieBreaker();
        float float21 = type19.tieBreaker();
        org.elasticsearch.common.ParseField parseField22 = type19.parseField();
        float float23 = type19.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type24 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder8.type(type19);
        java.lang.Integer int26 = multiMatchQueryBuilder8.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type28 = type27.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type29 = type27.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder8.type((java.lang.Object) type29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"boost\" : 100.0,\n    \"prefixLength\" : 1,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.lenient(true);
        multiMatchQueryBuilder32.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"use_dis_max\" : false\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertNotNull(parseField22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type24.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type29.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
    }

    @Test
    public void test13296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13296");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder8.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.minimumShouldMatch("");
        multiMatchQueryBuilder14.maxExpansions = 100;
        java.lang.String str17 = multiMatchQueryBuilder14.getqueryName();
        multiMatchQueryBuilder14.setslop((java.lang.Integer) 35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder14.field("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"type\" : \"best_fields\",\n    \"boost\" : 100.0,\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0,\n    \"cutoff_frequency\" : 100.0\n  }\n}", (float) (short) 1);
        java.lang.Object obj23 = multiMatchQueryBuilder14.gettext();
        multiMatchQueryBuilder14.setmaxExpansions((java.lang.Integer) 97);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap26 = multiMatchQueryBuilder14.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + (-1.0f) + "'", obj23, (-1.0f));
        org.junit.Assert.assertNotNull(strObjectFloatHashMap26);
    }

    @Test
    public void test13297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13297");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.Integer int17 = multiMatchQueryBuilder11.getslop();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder11.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = multiMatchQueryBuilder22.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(zeroTermsQuery23);
    }

    @Test
    public void test13298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13298");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        java.lang.String str12 = multiMatchQueryBuilder8.fuzzyRewrite;
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder8.getfields();
        multiMatchQueryBuilder8.minimumShouldMatch = "";
        java.lang.Integer int16 = multiMatchQueryBuilder8.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"phrase\",\n    \"boost\" : 100.0,\n    \"_name\" : \"hi!\"\n  }\n}", (float) 100);
        multiMatchQueryBuilder19.setlenient((java.lang.Boolean) false);
        java.lang.String str22 = multiMatchQueryBuilder19.queryName;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test13299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13299");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("hi!", (float) (-1L));
        multiMatchQueryBuilder17.slop = 0;
        multiMatchQueryBuilder17.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str22 = multiMatchQueryBuilder17.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.cutoffFrequency((float) (byte) 100);
        java.lang.Float float25 = multiMatchQueryBuilder24.tieBreaker;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(float25);
    }

    @Test
    public void test13300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13300");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Float float16 = multiMatchQueryBuilder15.tieBreaker;
        multiMatchQueryBuilder15.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder15.operator(operator19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type22 = type21.matchQueryType();
        org.elasticsearch.common.ParseField parseField23 = type21.parseField();
        float float24 = type21.tieBreaker();
        multiMatchQueryBuilder20.settype(type21);
        java.lang.Object obj26 = multiMatchQueryBuilder20.text;
        multiMatchQueryBuilder20.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0\n  }\n}");
        multiMatchQueryBuilder20.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"max_expansions\" : 10\n  }\n}");
        multiMatchQueryBuilder20.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator33 = null;
        multiMatchQueryBuilder20.operator = operator33;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type21.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type22.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(parseField23);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 0.0f + "'", float24 == 0.0f);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + '#' + "'", obj26, '#');
    }

    @Test
    public void test13301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13301");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("");
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder17.fuzziness;
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = multiMatchQueryBuilder29.type;
        java.lang.Boolean boolean31 = multiMatchQueryBuilder29.getuseDisMax();
        java.lang.Integer int32 = multiMatchQueryBuilder29.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type33 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder29.type = type33;
        float float35 = type33.tieBreaker();
        float float36 = type33.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder17.type(type33);
        float float38 = type33.tieBreaker();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(fuzziness18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(type30);
        org.junit.Assert.assertEquals("'" + boolean31 + "' != '" + false + "'", boolean31, false);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type33.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 1.0f + "'", float35 == 1.0f);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 1.0f + "'", float36 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 1.0f + "'", float38 == 1.0f);
    }

    @Test
    public void test13302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13302");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.Integer int17 = multiMatchQueryBuilder11.getslop();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder11.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Object obj21 = multiMatchQueryBuilder20.text;
        multiMatchQueryBuilder20.setprefixLength((java.lang.Integer) 100);
        multiMatchQueryBuilder20.setprefixLength((java.lang.Integer) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator26 = multiMatchQueryBuilder20.getoperator();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + (-1.0f) + "'", obj21, (-1.0f));
        org.junit.Assert.assertNull(operator26);
    }

    @Test
    public void test13303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13303");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder8.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder8.getfuzziness();
        multiMatchQueryBuilder8.maxExpansions = 1;
        java.lang.Boolean boolean19 = multiMatchQueryBuilder8.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder23.field("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"type\" : \"best_fields\",\n    \"boost\" : 100.0,\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0,\n    \"cutoffFrequency\" : 100.0\n  }\n}", (float) (-1L));
        org.elasticsearch.common.unit.Fuzziness fuzziness29 = multiMatchQueryBuilder28.getfuzziness();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(fuzziness29);
    }

    @Test
    public void test13304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13304");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        java.lang.Object obj15 = multiMatchQueryBuilder10.gettext();
        java.lang.Float float16 = multiMatchQueryBuilder10.getboost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.field("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.prefixLength((int) (short) 10);
        java.lang.Float float21 = multiMatchQueryBuilder10.cutoffFrequency;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + '#' + "'", obj15, '#');
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(float21);
    }

    @Test
    public void test13305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13305");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}");
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder15.getfields();
        multiMatchQueryBuilder15.boost = (-1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder15.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"tieBreaker\" : 0.0\n  }\n}");
        multiMatchQueryBuilder20.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"\" ],\n    \"fuzziness\" : \"[hi!, , hi!, hi!, hi!, ]\",\n    \"tie_breaker\" : -1.0,\n    \"lenient\" : false\n  }\n}";
        java.lang.Object obj23 = multiMatchQueryBuilder20.gettext();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + (-1.0f) + "'", obj23, (-1.0f));
    }

    @Test
    public void test13306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13306");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        multiMatchQueryBuilder10.queryName = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"boost\" : -1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"max_expansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"_name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tie_breaker\\\" : 10.0\\n  }\\n}\"\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
    }

    @Test
    public void test13307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13307");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder8.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.minimumShouldMatch("");
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder8.fuzziness;
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder24.getzeroTermsQuery();
        multiMatchQueryBuilder24.cutoffFrequency = 0.0f;
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.zeroTermsQuery(zeroTermsQuery39);
        java.lang.String str41 = multiMatchQueryBuilder40.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder24.type((java.lang.Object) str41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder8.type((java.lang.Object) str41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str46 = multiMatchQueryBuilder45.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder45.slop((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder48.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"Name\" : \"hi!\"\n  }\n}", (float) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator52 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder48.operator(operator52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray61);
        multiMatchQueryBuilder62.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder62.lenient(true);
        org.elasticsearch.common.unit.Fuzziness fuzziness67 = null;
        multiMatchQueryBuilder66.fuzziness = fuzziness67;
        multiMatchQueryBuilder66.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder66.field("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}", (float) 100);
        java.lang.Float float74 = multiMatchQueryBuilder73.getboost();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap75 = multiMatchQueryBuilder73.getfieldsBoosts();
        multiMatchQueryBuilder48.setfieldsBoosts(strObjectFloatHashMap75);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder48.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false,\\n    \\\"lenient\\\" : false\\n  }\\n}\",\n    \"max_expansions\" : 100,\n    \"lenient\" : true\n  }\n}");
        java.lang.Object obj79 = multiMatchQueryBuilder48.gettext();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(fuzziness15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNull(float74);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertEquals("'" + obj79 + "' != '" + (-1.0f) + "'", obj79, (-1.0f));
    }

    @Test
    public void test13308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13308");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder8.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        multiMatchQueryBuilder8.useDisMax = true;
        java.util.List<java.lang.String> strList18 = multiMatchQueryBuilder8.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float20 = type19.tieBreaker();
        float float21 = type19.tieBreaker();
        org.elasticsearch.common.ParseField parseField22 = type19.parseField();
        float float23 = type19.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type24 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder8.type(type19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        multiMatchQueryBuilder25.zeroTermsQuery = zeroTermsQuery26;
        multiMatchQueryBuilder25.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}";
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.useDisMax(false);
        java.lang.String str41 = multiMatchQueryBuilder40.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery42 = null;
        multiMatchQueryBuilder40.setzeroTermsQuery(zeroTermsQuery42);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type44 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder40.type(type44);
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray53);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator55 = multiMatchQueryBuilder54.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder54.field("");
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray65);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery67 = multiMatchQueryBuilder66.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder66.boost((float) (short) 100);
        multiMatchQueryBuilder69.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator72 = null;
        multiMatchQueryBuilder69.setoperator(operator72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder69.fuzzyRewrite("");
        java.util.List<java.lang.String> strList76 = multiMatchQueryBuilder69.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder57.fuzziness((java.lang.Object) strList76);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder57.boost(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness80 = multiMatchQueryBuilder79.fuzziness;
        multiMatchQueryBuilder40.setfuzziness(fuzziness80);
        multiMatchQueryBuilder25.setfuzziness(fuzziness80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder25.slop((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type85 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder84.type(type85);
        java.lang.Float float87 = multiMatchQueryBuilder86.gettieBreaker();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertNotNull(parseField22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type24.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type44.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNull(operator55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNull(zeroTermsQuery67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(fuzziness80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertNull(float87);
    }

    @Test
    public void test13309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13309");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        multiMatchQueryBuilder10.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str13 = null; // flaky: multiMatchQueryBuilder10.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery14);
        multiMatchQueryBuilder10.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(false);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray27);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = multiMatchQueryBuilder28.getzeroTermsQuery();
        multiMatchQueryBuilder28.cutoffFrequency = 0.0f;
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.zeroTermsQuery(zeroTermsQuery43);
        java.lang.String str45 = multiMatchQueryBuilder44.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder28.type((java.lang.Object) str45);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray55);
        java.lang.Integer int58 = multiMatchQueryBuilder57.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap59 = multiMatchQueryBuilder57.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery60 = null;
        multiMatchQueryBuilder57.zeroTermsQuery = zeroTermsQuery60;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder57.boost((float) (short) 10);
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray71);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery73 = multiMatchQueryBuilder72.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder72.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder72.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder72.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness80 = multiMatchQueryBuilder72.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder72.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type83 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float84 = type83.tieBreaker();
        float float85 = type83.tieBreaker();
        float float86 = type83.tieBreaker();
        multiMatchQueryBuilder72.type = type83;
        float float88 = type83.tieBreaker();
        org.elasticsearch.common.ParseField parseField89 = type83.parseField();
        multiMatchQueryBuilder63.settype(type83);
        org.elasticsearch.index.search.MatchQuery.Type type91 = type83.matchQueryType();
        multiMatchQueryBuilder46.type = type83;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = multiMatchQueryBuilder10.type(type83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder95 = multiMatchQueryBuilder10.lenient(false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNull(zeroTermsQuery29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNull(int58);
        org.junit.Assert.assertNull(strObjectFloatHashMap59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNull(zeroTermsQuery73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNull(fuzziness80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertTrue("'" + type83 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type83.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + 0.0f + "'", float84 == 0.0f);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + 0.0f + "'", float85 == 0.0f);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + 0.0f + "'", float86 == 0.0f);
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + 0.0f + "'", float88 == 0.0f);
        org.junit.Assert.assertNotNull(parseField89);
        org.junit.Assert.assertTrue("'" + type91 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type91.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder93);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder95);
    }

    @Test
    public void test13310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13310");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        java.lang.String str15 = multiMatchQueryBuilder11.queryName;
        java.lang.Integer int16 = multiMatchQueryBuilder11.getprefixLength();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator17 = multiMatchQueryBuilder11.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = multiMatchQueryBuilder11.gettype();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(operator17);
        org.junit.Assert.assertNull(type18);
    }

    @Test
    public void test13311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13311");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        java.lang.String str12 = multiMatchQueryBuilder8.fuzzyRewrite;
        java.lang.Integer int13 = multiMatchQueryBuilder8.prefixLength;
        multiMatchQueryBuilder8.useDisMax = true;
        multiMatchQueryBuilder8.settieBreaker((java.lang.Float) 52.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.tieBreaker((float) (byte) 0);
        multiMatchQueryBuilder19.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"fuzzyRewrite\" : \"hi!\"\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test13312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13312");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery14;
        multiMatchQueryBuilder10.setqueryName("hi!");
        multiMatchQueryBuilder10.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.maxExpansions((-1));
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = null;
        multiMatchQueryBuilder10.operator = operator22;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator24 = multiMatchQueryBuilder10.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder10.maxExpansions((int) (short) 100);
        java.lang.String str27 = multiMatchQueryBuilder10.analyzer;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = multiMatchQueryBuilder10.getzeroTermsQuery();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery29);
        multiMatchQueryBuilder10.tieBreaker = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder10.slop(52);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(operator24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(zeroTermsQuery28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
    }

    @Test
    public void test13313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13313");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator9 = multiMatchQueryBuilder8.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.field("");
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder20.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder23.settype(type24);
        float float26 = type24.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder11.type(type24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.field("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0\n  }\n}");
        multiMatchQueryBuilder27.maxExpansions = 32;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test13314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13314");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.Integer int17 = multiMatchQueryBuilder11.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.maxExpansions((int) (byte) 100);
        multiMatchQueryBuilder19.queryName = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type35 = multiMatchQueryBuilder34.type;
        multiMatchQueryBuilder34.slop = 0;
        multiMatchQueryBuilder34.useDisMax = true;
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray47);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery49 = multiMatchQueryBuilder48.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder48.boost((float) (short) 100);
        multiMatchQueryBuilder51.queryName = "hi!";
        java.lang.Integer int54 = multiMatchQueryBuilder51.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder51.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder51.maxExpansions((int) (short) 0);
        java.lang.String str60 = multiMatchQueryBuilder51.getanalyzer();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap61 = multiMatchQueryBuilder51.getfieldsBoosts();
        multiMatchQueryBuilder34.setfieldsBoosts(strObjectFloatHashMap61);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap63 = multiMatchQueryBuilder34.getfieldsBoosts();
        multiMatchQueryBuilder19.setfieldsBoosts(strObjectFloatHashMap63);
        multiMatchQueryBuilder19.lenient = false;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(type35);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNull(zeroTermsQuery49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap61);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap63);
    }

    @Test
    public void test13315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13315");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.useDisMax(false);
        java.lang.Boolean boolean16 = multiMatchQueryBuilder15.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float18 = type17.tieBreaker();
        float float19 = type17.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type20 = type17.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type17.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder15.fuzziness((java.lang.Object) type21);
        java.lang.Float float23 = multiMatchQueryBuilder15.tieBreaker;
        multiMatchQueryBuilder15.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"lenient\" : true\n  }\n}");
        java.lang.String str26 = multiMatchQueryBuilder15.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder15.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 0,\n    \"max_expansions\" : 1,\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + false + "'", boolean16, false);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type17.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(float23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test13316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13316");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.operator(operator14);
        multiMatchQueryBuilder13.setlenient((java.lang.Boolean) true);
        multiMatchQueryBuilder13.cutoffFrequency = 97.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test13317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13317");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Integer int16 = multiMatchQueryBuilder15.maxExpansions;
        multiMatchQueryBuilder15.setslop((java.lang.Integer) 1);
        multiMatchQueryBuilder15.boost = 100.0f;
        java.lang.String str21 = multiMatchQueryBuilder15.getanalyzer();
        multiMatchQueryBuilder15.setcutoffFrequency((java.lang.Float) 0.0f);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test13318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13318");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder14.cutoffFrequency((float) (byte) 0);
        multiMatchQueryBuilder14.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 97,\n    \"useDisMax\" : false\n  }\n}");
        multiMatchQueryBuilder14.analyzer = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder14.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"use_dis_max\\\\\\\" : false\\\\n  }\\\\n}\\\",\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"lenient\" : true,\n    \"cutoff_frequency\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = null;
        multiMatchQueryBuilder28.setzeroTermsQuery(zeroTermsQuery29);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test13319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13319");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("hi!", (float) (-1L));
        multiMatchQueryBuilder17.slop = 0;
        java.lang.String str20 = multiMatchQueryBuilder17.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}");
        java.lang.String str23 = multiMatchQueryBuilder22.getminimumShouldMatch();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}" + "'", str23, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}");
    }

    @Test
    public void test13320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13320");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.field("hi!");
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 10.0f);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder24.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.boost((float) (short) 100);
        java.lang.Integer int28 = multiMatchQueryBuilder27.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder27.boost((float) '4');
        multiMatchQueryBuilder27.setfuzzyRewrite("");
        java.lang.Integer int33 = multiMatchQueryBuilder27.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder27.maxExpansions((int) (byte) 100);
        multiMatchQueryBuilder27.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder10.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder40.settieBreaker((java.lang.Float) 35.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.boost((float) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.tieBreaker(10.0f);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.useDisMax(false);
        java.lang.String str58 = multiMatchQueryBuilder57.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness59 = multiMatchQueryBuilder57.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery60 = null;
        multiMatchQueryBuilder57.zeroTermsQuery = zeroTermsQuery60;
        java.lang.Float float62 = multiMatchQueryBuilder57.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder57.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        java.lang.String str65 = multiMatchQueryBuilder64.getminimumShouldMatch();
        multiMatchQueryBuilder64.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"lenient\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder64.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder64.boost((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = null; // flaky: multiMatchQueryBuilder46.fuzziness((java.lang.Object) multiMatchQueryBuilder71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder46.slop(10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap75 = multiMatchQueryBuilder46.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(fuzziness59);
        org.junit.Assert.assertNull(float62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNull(strObjectFloatHashMap75);
    }

    @Test
    public void test13321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13321");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.type(type11);
        multiMatchQueryBuilder12.tieBreaker = 1.0f;
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = null;
        multiMatchQueryBuilder12.setfuzziness(fuzziness15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        multiMatchQueryBuilder18.zeroTermsQuery = zeroTermsQuery19;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str23 = multiMatchQueryBuilder18.fuzzyRewrite;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery24);
        multiMatchQueryBuilder25.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 52.0\n  }\n}";
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder28 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params29 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder30 = multiMatchQueryBuilder25.toXContent(xContentBuilder28, params29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type11.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(params29);
    }

    @Test
    public void test13322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13322");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        multiMatchQueryBuilder8.setqueryName("hi!");
        java.lang.Integer int14 = multiMatchQueryBuilder8.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness17 = multiMatchQueryBuilder16.fuzziness;
        java.lang.Boolean boolean18 = multiMatchQueryBuilder16.useDisMax;
        multiMatchQueryBuilder16.boost = 52.0f;
        multiMatchQueryBuilder16.setcutoffFrequency((java.lang.Float) 97.0f);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params24 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = multiMatchQueryBuilder16.toXContent(xContentBuilder23, params24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(fuzziness17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(params24);
    }

    @Test
    public void test13323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13323");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator12 = null;
        multiMatchQueryBuilder8.setoperator(operator12);
        multiMatchQueryBuilder8.slop = 0;
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.type(type27);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap29 = multiMatchQueryBuilder28.getfieldsBoosts();
        multiMatchQueryBuilder28.setcutoffFrequency((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        multiMatchQueryBuilder28.setzeroTermsQuery(zeroTermsQuery32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder28.settype(type34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder8.type((java.lang.Object) type34);
        java.lang.String str37 = multiMatchQueryBuilder8.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder8.maxExpansions(0);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator40 = null;
        multiMatchQueryBuilder39.setoperator(operator40);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(strObjectFloatHashMap29);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
    }

    @Test
    public void test13324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13324");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        multiMatchQueryBuilder11.setoperator(operator14);
        java.lang.Boolean boolean16 = multiMatchQueryBuilder11.getlenient();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator17 = null;
        multiMatchQueryBuilder11.setoperator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray28);
        java.lang.String str30 = multiMatchQueryBuilder29.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder29.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type33 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float34 = type33.tieBreaker();
        float float35 = type33.tieBreaker();
        org.elasticsearch.common.ParseField parseField36 = type33.parseField();
        multiMatchQueryBuilder29.settype(type33);
        multiMatchQueryBuilder11.settype(type33);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap39 = null;
        multiMatchQueryBuilder11.setfieldsBoosts(strObjectFloatHashMap39);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder11.operator(operator41);
        multiMatchQueryBuilder11.prefixLength = 0;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type33.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 0.0f + "'", float34 == 0.0f);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.0f + "'", float35 == 0.0f);
        org.junit.Assert.assertNotNull(parseField36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
    }

    @Test
    public void test13325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13325");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.slop((int) '#');
        multiMatchQueryBuilder13.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.lenient(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery18);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray27);
        java.lang.String str29 = multiMatchQueryBuilder28.analyzer;
        multiMatchQueryBuilder28.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        multiMatchQueryBuilder28.zeroTermsQuery = zeroTermsQuery32;
        multiMatchQueryBuilder28.boost = 10.0f;
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.useDisMax(false);
        java.lang.String str47 = multiMatchQueryBuilder46.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery48 = null;
        multiMatchQueryBuilder46.setzeroTermsQuery(zeroTermsQuery48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type50 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder46.type(type50);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray59);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator61 = multiMatchQueryBuilder60.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder60.field("");
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray71);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery73 = multiMatchQueryBuilder72.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder72.boost((float) (short) 100);
        multiMatchQueryBuilder75.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator78 = null;
        multiMatchQueryBuilder75.setoperator(operator78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder75.fuzzyRewrite("");
        java.util.List<java.lang.String> strList82 = multiMatchQueryBuilder75.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder63.fuzziness((java.lang.Object) strList82);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder63.boost(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness86 = multiMatchQueryBuilder85.fuzziness;
        multiMatchQueryBuilder46.setfuzziness(fuzziness86);
        multiMatchQueryBuilder28.setfuzziness(fuzziness86);
        multiMatchQueryBuilder17.setfuzziness(fuzziness86);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = multiMatchQueryBuilder17.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = multiMatchQueryBuilder91.tieBreaker((float) (short) 0);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap94 = multiMatchQueryBuilder91.fieldsBoosts;
        org.elasticsearch.common.unit.Fuzziness fuzziness95 = multiMatchQueryBuilder91.getfuzziness();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type50.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNull(operator61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNull(zeroTermsQuery73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNotNull(fuzziness86);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder91);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder93);
        org.junit.Assert.assertNull(strObjectFloatHashMap94);
        org.junit.Assert.assertNotNull(fuzziness95);
    }

    @Test
    public void test13326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13326");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        multiMatchQueryBuilder16.setslop((java.lang.Integer) 52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.maxExpansions((int) (short) 10);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test13327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13327");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        java.lang.String str16 = multiMatchQueryBuilder11.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator17 = multiMatchQueryBuilder11.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.field("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}", (float) (byte) 0);
        multiMatchQueryBuilder11.maxExpansions = 0;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator23 = multiMatchQueryBuilder11.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder11.cutoffFrequency(1.0f);
        java.lang.Object obj26 = multiMatchQueryBuilder11.text;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(operator17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(operator23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + (-1.0f) + "'", obj26, (-1.0f));
    }

    @Test
    public void test13328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13328");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("", (float) 10);
        multiMatchQueryBuilder10.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = multiMatchQueryBuilder10.gettype();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray25);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery27 = multiMatchQueryBuilder26.getzeroTermsQuery();
        multiMatchQueryBuilder26.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder26.minimumShouldMatch("");
        java.lang.Float float32 = multiMatchQueryBuilder31.cutoffFrequency;
        org.elasticsearch.common.unit.Fuzziness fuzziness33 = multiMatchQueryBuilder31.fuzziness;
        multiMatchQueryBuilder31.boost = 100.0f;
        java.lang.Integer int36 = multiMatchQueryBuilder31.slop;
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type48 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.type(type48);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap50 = multiMatchQueryBuilder49.getfieldsBoosts();
        multiMatchQueryBuilder49.setcutoffFrequency((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery53 = null;
        multiMatchQueryBuilder49.setzeroTermsQuery(zeroTermsQuery53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type55 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder49.settype(type55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder31.type(type55);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray66);
        java.lang.Integer int69 = multiMatchQueryBuilder68.maxExpansions;
        multiMatchQueryBuilder68.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder68.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Float float74 = multiMatchQueryBuilder73.tieBreaker;
        java.lang.String str75 = multiMatchQueryBuilder73.analyzer;
        java.lang.String str76 = multiMatchQueryBuilder73.getanalyzer();
        java.lang.String[] strArray84 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray84);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder85.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap88 = null;
        multiMatchQueryBuilder85.fieldsBoosts = strObjectFloatHashMap88;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator90 = null;
        multiMatchQueryBuilder85.setoperator(operator90);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type92 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder85.type = type92;
        multiMatchQueryBuilder73.type = type92;
        multiMatchQueryBuilder31.settype(type92);
        org.elasticsearch.common.ParseField parseField96 = type92.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder97 = multiMatchQueryBuilder10.fuzziness((java.lang.Object) type92);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(type17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNull(zeroTermsQuery27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(float32);
        org.junit.Assert.assertNull(fuzziness33);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type48.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(strObjectFloatHashMap50);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type55.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNull(int69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNull(float74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertTrue("'" + type92 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type92.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(parseField96);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder97);
    }

    @Test
    public void test13329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13329");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.slop = 0;
        multiMatchQueryBuilder10.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder10.getoperator();
        java.lang.Float float17 = multiMatchQueryBuilder10.boost;
        multiMatchQueryBuilder10.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.String str20 = multiMatchQueryBuilder10.analyzer;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator21 = multiMatchQueryBuilder10.getoperator();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = multiMatchQueryBuilder10.operator;
        multiMatchQueryBuilder10.prefixLength = 35;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}" + "'", str20, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.junit.Assert.assertNull(operator21);
        org.junit.Assert.assertNull(operator22);
    }

    @Test
    public void test13330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13330");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder10.zeroTermsQuery;
        java.lang.String str15 = multiMatchQueryBuilder10.analyzer;
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"phrase\",\n    \"boost\" : 100.0,\n    \"Name\" : \"hi!\"\n  }\n}");
        multiMatchQueryBuilder10.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = multiMatchQueryBuilder10.getoperator();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(operator22);
    }

    @Test
    public void test13331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13331");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        multiMatchQueryBuilder15.setoperator(operator16);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator18 = null;
        multiMatchQueryBuilder15.operator = operator18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder15.prefixLength((-1));
        multiMatchQueryBuilder15.setuseDisMax((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test13332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13332");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator9 = multiMatchQueryBuilder8.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.field("");
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder20.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder23.settype(type24);
        float float26 = type24.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder11.type(type24);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray35);
        multiMatchQueryBuilder36.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray46);
        java.lang.String str48 = multiMatchQueryBuilder47.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder36.type((java.lang.Object) str48);
        multiMatchQueryBuilder49.tieBreaker = 10.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder27.fuzziness((java.lang.Object) 10.0f);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray60);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery62 = multiMatchQueryBuilder61.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder61.boost((float) (short) 100);
        java.lang.Integer int65 = multiMatchQueryBuilder64.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder64.boost((float) '4');
        multiMatchQueryBuilder64.setfuzzyRewrite("");
        java.lang.String str70 = multiMatchQueryBuilder64.getfuzzyRewrite();
        java.lang.Boolean boolean71 = multiMatchQueryBuilder64.lenient;
        java.lang.Object obj72 = multiMatchQueryBuilder64.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type73 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float74 = type73.tieBreaker();
        float float75 = type73.tieBreaker();
        multiMatchQueryBuilder64.settype(type73);
        org.elasticsearch.index.search.MatchQuery.Type type77 = type73.matchQueryType();
        multiMatchQueryBuilder52.settype(type73);
        java.lang.Boolean boolean79 = multiMatchQueryBuilder52.getlenient();
        multiMatchQueryBuilder52.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"max_expansions\" : 0,\n    \"lenient\" : true,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\"\n  }\n}";
        java.lang.Float float82 = multiMatchQueryBuilder52.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type83 = multiMatchQueryBuilder52.type;
        java.lang.Boolean boolean84 = multiMatchQueryBuilder52.getlenient();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNull(zeroTermsQuery62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNull(int65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNull(boolean71);
        org.junit.Assert.assertEquals("'" + obj72 + "' != '" + (-1.0f) + "'", obj72, (-1.0f));
        org.junit.Assert.assertTrue("'" + type73 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type73.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 0.0f + "'", float74 == 0.0f);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + 0.0f + "'", float75 == 0.0f);
        org.junit.Assert.assertTrue("'" + type77 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type77.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNull(boolean79);
        org.junit.Assert.assertNull(float82);
        org.junit.Assert.assertTrue("'" + type83 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type83.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNull(boolean84);
    }

    @Test
    public void test13333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13333");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.tieBreaker(0.0f);
        multiMatchQueryBuilder14.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder14.useDisMax(true);
        java.lang.Object obj25 = multiMatchQueryBuilder14.gettext();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertEquals("'" + obj25 + "' != '" + '#' + "'", obj25, '#');
    }

    @Test
    public void test13334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13334");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder11.gettype();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder11.operator;
        java.lang.Boolean boolean17 = multiMatchQueryBuilder11.useDisMax;
        multiMatchQueryBuilder11.boost = 1.0f;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNull(boolean17);
    }

    @Test
    public void test13335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13335");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        multiMatchQueryBuilder11.setoperator(operator14);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        multiMatchQueryBuilder11.setoperator(operator16);
        multiMatchQueryBuilder11.boost = 1.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder11.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"[hi!, , hi!, hi!, hi!, ]\",\n    \"maxExpansions\" : 32,\n    \"useDisMax\" : false\n  }\n}");
        java.lang.Float float22 = multiMatchQueryBuilder11.cutoffFrequency;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(float22);
    }

    @Test
    public void test13336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13336");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.lang.Boolean boolean15 = multiMatchQueryBuilder10.lenient;
        multiMatchQueryBuilder10.setslop((java.lang.Integer) 0);
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = null;
        multiMatchQueryBuilder10.setfuzziness(fuzziness18);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap20 = multiMatchQueryBuilder10.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.tieBreaker((float) 35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.slop(0);
        java.lang.Boolean boolean25 = multiMatchQueryBuilder22.lenient;
        java.lang.String str26 = multiMatchQueryBuilder22.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder22.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"prefixLength\" : 100,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}");
        java.lang.Boolean boolean29 = multiMatchQueryBuilder22.useDisMax;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(strObjectFloatHashMap20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(boolean25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertEquals("'" + boolean29 + "' != '" + false + "'", boolean29, false);
    }

    @Test
    public void test13337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13337");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.boost((float) ' ');
        java.lang.Integer int19 = multiMatchQueryBuilder18.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"lenient\" : false\n  }\n}", (float) 100L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.maxExpansions(52);
        java.lang.Boolean boolean27 = multiMatchQueryBuilder21.lenient;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + boolean27 + "' != '" + false + "'", boolean27, false);
    }

    @Test
    public void test13338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13338");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.field("hi!");
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 10.0f);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder24.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.boost((float) (short) 100);
        java.lang.Integer int28 = multiMatchQueryBuilder27.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder27.boost((float) '4');
        multiMatchQueryBuilder27.setfuzzyRewrite("");
        java.lang.Integer int33 = multiMatchQueryBuilder27.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder27.maxExpansions((int) (byte) 100);
        multiMatchQueryBuilder27.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder27);
        java.lang.String str39 = multiMatchQueryBuilder10.fuzzyRewrite;
        multiMatchQueryBuilder10.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type42 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type43 = type42.matchQueryType();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray51);
        multiMatchQueryBuilder52.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder52.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder52.minimumShouldMatch("");
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type43, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder10, strArray66);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder79.useDisMax(false);
        multiMatchQueryBuilder81.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str84 = null; // flaky: multiMatchQueryBuilder81.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type85 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float86 = type85.tieBreaker();
        float float87 = type85.tieBreaker();
        float float88 = type85.tieBreaker();
        multiMatchQueryBuilder81.settype(type85);
        multiMatchQueryBuilder10.type = type85;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = multiMatchQueryBuilder10.boost((float) (short) 100);
        java.lang.String str93 = null; // flaky: multiMatchQueryBuilder92.toString();
        java.lang.Object obj94 = multiMatchQueryBuilder92.gettext();
        java.lang.Integer int95 = multiMatchQueryBuilder92.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder97 = multiMatchQueryBuilder92.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"useDisMax\" : false\n  }\n}");
        java.lang.Integer int98 = multiMatchQueryBuilder92.prefixLength;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type42.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type43 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type43.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}" + "'", str84, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}");
        org.junit.Assert.assertTrue("'" + type85 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type85.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + 0.0f + "'", float86 == 0.0f);
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + 0.0f + "'", float87 == 0.0f);
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + 0.0f + "'", float88 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder92);
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"type\" : \"best_fields\",\n    \"boost\" : 100.0,\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0,\n    \"cutoffFrequency\" : 100.0\n  }\n}" + "'", str93, "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"type\" : \"best_fields\",\n    \"boost\" : 100.0,\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
        org.junit.Assert.assertEquals("'" + obj94 + "' != '" + '#' + "'", obj94, '#');
        org.junit.Assert.assertNull(int95);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder97);
        org.junit.Assert.assertNull(int98);
    }

    @Test
    public void test13339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13339");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = multiMatchQueryBuilder9.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder9.boost((float) (short) 100);
        java.lang.Integer int13 = multiMatchQueryBuilder12.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.boost((float) '4');
        multiMatchQueryBuilder12.setfuzzyRewrite("");
        java.lang.String str18 = multiMatchQueryBuilder12.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder12.tieBreaker(0.0f);
        multiMatchQueryBuilder20.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        java.lang.Integer int25 = multiMatchQueryBuilder24.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.slop((int) (short) 100);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray35);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = multiMatchQueryBuilder36.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder36.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder36.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder36.lenient(false);
        java.lang.Integer int44 = multiMatchQueryBuilder36.getslop();
        java.lang.Float float45 = multiMatchQueryBuilder36.tieBreaker;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder36.zeroTermsQuery(zeroTermsQuery46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder36.maxExpansions((int) (byte) 10);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray57);
        multiMatchQueryBuilder58.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray68);
        java.lang.String str70 = multiMatchQueryBuilder69.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder58.type((java.lang.Object) str70);
        multiMatchQueryBuilder58.setslop((java.lang.Integer) (-1));
        java.lang.Float float74 = multiMatchQueryBuilder58.getcutoffFrequency();
        java.lang.String[] strArray79 = new java.lang.String[] { "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"use_dis_max\" : true,\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder58, strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 10, strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder27, strArray79);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder83 = null; // flaky: org.elasticsearch.common.xcontent.XContentBuilder.builder(xContent0, strArray79);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(zeroTermsQuery10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNull(zeroTermsQuery37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNull(float45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNull(float74);
        org.junit.Assert.assertNotNull(strArray79);
    }

    @Test
    public void test13340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13340");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.cutoffFrequency = (-1.0f);
        multiMatchQueryBuilder10.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 97,\n    \"useDisMax\" : false\n  }\n}");
        multiMatchQueryBuilder20.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test13341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13341");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        multiMatchQueryBuilder11.setoperator(operator14);
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder11.getfields();
        java.util.List<java.lang.String> strList17 = multiMatchQueryBuilder11.getfields();
        java.lang.String str18 = multiMatchQueryBuilder11.fuzzyRewrite;
        java.lang.Integer int19 = multiMatchQueryBuilder11.slop;
        multiMatchQueryBuilder11.setmaxExpansions((java.lang.Integer) (-1));
        multiMatchQueryBuilder11.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\"\n  }\n}");
        java.lang.Float float24 = multiMatchQueryBuilder11.cutoffFrequency;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(float24);
    }

    @Test
    public void test13342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13342");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder11.lenient;
        java.lang.Object obj19 = multiMatchQueryBuilder11.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float21 = type20.tieBreaker();
        float float22 = type20.tieBreaker();
        multiMatchQueryBuilder11.settype(type20);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        multiMatchQueryBuilder11.zeroTermsQuery = zeroTermsQuery24;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder11.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : false\n  }\n}");
        multiMatchQueryBuilder27.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}";
        multiMatchQueryBuilder27.useDisMax = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder27.operator(operator32);
        multiMatchQueryBuilder33.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder33.lenient(true);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder33.zeroTermsQuery(zeroTermsQuery38);
        java.lang.Float float40 = multiMatchQueryBuilder33.tieBreaker;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-1.0f) + "'", obj19, (-1.0f));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type20.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 0.0f + "'", float22 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(float40);
    }

    @Test
    public void test13343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13343");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.minimumShouldMatch("");
        java.lang.Float float14 = multiMatchQueryBuilder13.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        multiMatchQueryBuilder16.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"type\" : \"best_fields\",\n    \"boost\" : 100.0,\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0,\n    \"cutoff_frequency\" : 100.0\n  }\n}");
        multiMatchQueryBuilder16.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}";
        multiMatchQueryBuilder16.setqueryName("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false,\\n    \\\"lenient\\\" : false\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"lenient\" : true\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test13344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13344");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("");
        java.lang.Float float13 = multiMatchQueryBuilder10.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        java.lang.Integer int16 = multiMatchQueryBuilder15.maxExpansions;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator17 = multiMatchQueryBuilder15.operator;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder15.setzeroTermsQuery(zeroTermsQuery18);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray27);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = multiMatchQueryBuilder28.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.boost((float) (short) 100);
        java.lang.Integer int32 = multiMatchQueryBuilder31.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder31.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder31.slop((int) (byte) 10);
        org.elasticsearch.common.unit.Fuzziness fuzziness37 = null;
        multiMatchQueryBuilder36.fuzziness = fuzziness37;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder36.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\"\n  }\n}");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray48);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery50 = multiMatchQueryBuilder49.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder49.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder49.lenient(false);
        java.lang.Integer int57 = multiMatchQueryBuilder49.getslop();
        java.lang.Object obj58 = multiMatchQueryBuilder49.gettext();
        java.lang.Boolean boolean59 = multiMatchQueryBuilder49.lenient;
        java.lang.Integer int60 = multiMatchQueryBuilder49.getprefixLength();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray68);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery70 = multiMatchQueryBuilder69.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder69.boost((float) (short) 100);
        multiMatchQueryBuilder72.queryName = "hi!";
        java.lang.Integer int75 = multiMatchQueryBuilder72.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder72.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder72.maxExpansions((int) (short) 0);
        java.lang.String str81 = multiMatchQueryBuilder72.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap82 = multiMatchQueryBuilder72.fieldsBoosts;
        multiMatchQueryBuilder49.setfieldsBoosts(strObjectFloatHashMap82);
        multiMatchQueryBuilder40.setfieldsBoosts(strObjectFloatHashMap82);
        multiMatchQueryBuilder15.fieldsBoosts = strObjectFloatHashMap82;
        multiMatchQueryBuilder15.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"hi!\"\n  }\n}";
        multiMatchQueryBuilder15.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 100\n  }\n}");
        multiMatchQueryBuilder15.lenient = false;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap92 = multiMatchQueryBuilder15.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(operator17);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNull(zeroTermsQuery29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNull(zeroTermsQuery50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertEquals("'" + obj58 + "' != '" + (-1.0f) + "'", obj58, (-1.0f));
        org.junit.Assert.assertEquals("'" + boolean59 + "' != '" + false + "'", boolean59, false);
        org.junit.Assert.assertNull(int60);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNull(zeroTermsQuery70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNull(int75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap82);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap92);
    }

    @Test
    public void test13345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13345");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multi_match\" : {\n    \"query\" : {\n      \"multi_match\" : {\n        \"query\" : -1.0,\n        \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n        \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n      }\n    },\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test13346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13346");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder14.cutoffFrequency((float) (byte) 0);
        multiMatchQueryBuilder14.boost = 1.0f;
        java.lang.String str25 = multiMatchQueryBuilder14.getfuzzyRewrite();
        multiMatchQueryBuilder14.queryName = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"useDisMax\" : true\n  }\n}";
        java.lang.String str28 = multiMatchQueryBuilder14.getminimumShouldMatch();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test13347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13347");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder11.gettype();
        java.lang.Integer int16 = multiMatchQueryBuilder11.prefixLength;
        java.lang.String str17 = null; // flaky: multiMatchQueryBuilder11.toString();
        multiMatchQueryBuilder11.setmaxExpansions((java.lang.Integer) 100);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNull(int16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"Name\" : \"hi!\"\n  }\n}" + "'", str17, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"Name\" : \"hi!\"\n  }\n}");
    }

    @Test
    public void test13348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13348");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        multiMatchQueryBuilder11.slop = 0;
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder11.fuzziness;
        java.lang.String str17 = multiMatchQueryBuilder11.analyzer;
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder11.getfuzziness();
        multiMatchQueryBuilder11.setlenient((java.lang.Boolean) false);
        multiMatchQueryBuilder11.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"\" ],\n    \"fuzziness\" : \"[hi!, , hi!, hi!, hi!, ]\"\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(fuzziness18);
    }

    @Test
    public void test13349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13349");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.prefixLength((int) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type16 = type15.matchQueryType();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray24);
        multiMatchQueryBuilder25.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder25.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder25.minimumShouldMatch("");
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type16, strArray39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder10, strArray39);
        multiMatchQueryBuilder10.setboost((java.lang.Float) (-1.0f));
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type15.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type16.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(strArray39);
    }

    @Test
    public void test13350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13350");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.tieBreaker((float) (short) 100);
        java.lang.Boolean boolean14 = multiMatchQueryBuilder13.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder13.cutoffFrequency((float) 0);
        multiMatchQueryBuilder16.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.lang.String str19 = null; // flaky: multiMatchQueryBuilder16.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : false,\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : -1.0\n  }\n}" + "'", str19, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : false,\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : -1.0\n  }\n}");
    }

    @Test
    public void test13351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13351");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.slop((int) '#');
        java.lang.String str14 = multiMatchQueryBuilder13.fuzzyRewrite;
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = null;
        multiMatchQueryBuilder13.fuzziness = fuzziness15;
        java.lang.Float float17 = multiMatchQueryBuilder13.cutoffFrequency;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder13.fieldsBoosts = strObjectFloatHashMap18;
        java.lang.Float float20 = multiMatchQueryBuilder13.getcutoffFrequency();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray28);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = multiMatchQueryBuilder29.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder29.boost((float) (short) 100);
        java.lang.Integer int33 = multiMatchQueryBuilder32.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery34 = multiMatchQueryBuilder32.zeroTermsQuery;
        org.elasticsearch.common.unit.Fuzziness fuzziness35 = null;
        multiMatchQueryBuilder32.fuzziness = fuzziness35;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder32.operator(operator37);
        multiMatchQueryBuilder38.setboost((java.lang.Float) 1.0f);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray48);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery50 = multiMatchQueryBuilder49.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.boost((float) (short) 100);
        multiMatchQueryBuilder52.queryName = "hi!";
        java.lang.Integer int55 = multiMatchQueryBuilder52.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder52.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder52.maxExpansions((int) (short) 0);
        java.lang.String str61 = multiMatchQueryBuilder52.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap62 = multiMatchQueryBuilder52.fieldsBoosts;
        multiMatchQueryBuilder38.setfieldsBoosts(strObjectFloatHashMap62);
        multiMatchQueryBuilder13.fieldsBoosts = strObjectFloatHashMap62;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder13.maxExpansions((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder13.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder13.boost(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness71 = multiMatchQueryBuilder70.fuzziness;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNull(float20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNull(zeroTermsQuery30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNull(zeroTermsQuery34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNull(zeroTermsQuery50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNull(fuzziness71);
    }

    @Test
    public void test13352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13352");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder10, strArray22);
        multiMatchQueryBuilder25.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.maxExpansions(0);
        java.lang.String str30 = multiMatchQueryBuilder29.getminimumShouldMatch();
        java.lang.Object obj31 = multiMatchQueryBuilder29.text;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(obj31);
// flaky:         org.junit.Assert.assertEquals(obj31.toString(), "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
    }

    @Test
    public void test13353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13353");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        java.lang.String str15 = multiMatchQueryBuilder11.queryName;
        java.lang.Boolean boolean16 = multiMatchQueryBuilder11.lenient;
        multiMatchQueryBuilder11.useDisMax = false;
        multiMatchQueryBuilder11.setlenient((java.lang.Boolean) true);
        multiMatchQueryBuilder11.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder11.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 0\n  }\n}");
        java.util.List<java.lang.String> strList25 = multiMatchQueryBuilder11.getfields();
        multiMatchQueryBuilder11.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 10.0,\n    \"slop\" : 35,\n    \"max_expansions\" : 32,\n    \"use_dis_max\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strList25);
    }

    @Test
    public void test13354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13354");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.slop((int) (short) 100);
        java.lang.Float float16 = multiMatchQueryBuilder10.getcutoffFrequency();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.operator(operator17);
        multiMatchQueryBuilder18.setmaxExpansions((java.lang.Integer) 35);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test13355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13355");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        java.lang.String str12 = multiMatchQueryBuilder8.fuzzyRewrite;
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder8.getfields();
        java.lang.String str14 = multiMatchQueryBuilder8.getminimumShouldMatch();
        java.lang.Float float15 = multiMatchQueryBuilder8.tieBreaker;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder8.operator;
        java.lang.String str17 = multiMatchQueryBuilder8.getanalyzer();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test13356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13356");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.tieBreaker((float) (short) 100);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.useDisMax(false);
        java.lang.String str25 = multiMatchQueryBuilder24.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.slop((int) '#');
        java.lang.Object obj28 = multiMatchQueryBuilder27.gettext();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type40 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder37.type(type40);
        org.elasticsearch.common.ParseField parseField42 = type40.parseField();
        multiMatchQueryBuilder27.type = type40;
        multiMatchQueryBuilder13.type = type40;
        java.util.List<java.lang.String> strList45 = multiMatchQueryBuilder13.fields;
        multiMatchQueryBuilder13.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : -1.0,\n    \"slop\" : 10,\n    \"prefix_length\" : 10,\n    \"use_dis_max\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertEquals("'" + obj28 + "' != '" + (-1.0f) + "'", obj28, (-1.0f));
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type40.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(parseField42);
        org.junit.Assert.assertNotNull(strList45);
    }

    @Test
    public void test13357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13357");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.Integer int17 = multiMatchQueryBuilder11.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.boost(10.0f);
        multiMatchQueryBuilder19.minimumShouldMatch = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder19.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}", (float) 1L);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.useDisMax(false);
        java.lang.String str36 = multiMatchQueryBuilder35.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness37 = multiMatchQueryBuilder35.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = null;
        multiMatchQueryBuilder35.zeroTermsQuery = zeroTermsQuery38;
        java.lang.Float float40 = multiMatchQueryBuilder35.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder35.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator43 = multiMatchQueryBuilder42.getoperator();
        multiMatchQueryBuilder42.useDisMax = false;
        multiMatchQueryBuilder42.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true\n  }\n}";
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray55);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery57 = multiMatchQueryBuilder56.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder56.boost((float) (short) 100);
        java.lang.Integer int60 = multiMatchQueryBuilder59.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder59.boost((float) '4');
        multiMatchQueryBuilder59.setfuzzyRewrite("");
        java.lang.String str65 = multiMatchQueryBuilder59.getfuzzyRewrite();
        java.lang.Boolean boolean66 = multiMatchQueryBuilder59.lenient;
        java.lang.Object obj67 = multiMatchQueryBuilder59.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type68 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float69 = type68.tieBreaker();
        float float70 = type68.tieBreaker();
        multiMatchQueryBuilder59.settype(type68);
        org.elasticsearch.common.ParseField parseField72 = type68.parseField();
        multiMatchQueryBuilder42.type = type68;
        multiMatchQueryBuilder24.settype(type68);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery75 = multiMatchQueryBuilder24.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type76 = multiMatchQueryBuilder24.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder24.tieBreaker((float) (short) 100);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(fuzziness37);
        org.junit.Assert.assertNull(float40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(operator43);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNull(zeroTermsQuery57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(int60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNull(boolean66);
        org.junit.Assert.assertEquals("'" + obj67 + "' != '" + (-1.0f) + "'", obj67, (-1.0f));
        org.junit.Assert.assertTrue("'" + type68 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type68.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + 0.0f + "'", float69 == 0.0f);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + 0.0f + "'", float70 == 0.0f);
        org.junit.Assert.assertNotNull(parseField72);
        org.junit.Assert.assertNull(zeroTermsQuery75);
        org.junit.Assert.assertTrue("'" + type76 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type76.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
    }

    @Test
    public void test13358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13358");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.minimumShouldMatch("");
        java.lang.Float float14 = multiMatchQueryBuilder13.cutoffFrequency;
        multiMatchQueryBuilder13.settieBreaker((java.lang.Float) 10.0f);
        multiMatchQueryBuilder13.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder13.queryName("{\n  \"multi_match\" : {\n    \"query\" : {\n      \"multi_match\" : {\n        \"query\" : -1.0,\n        \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n      }\n    },\n    \"fields\" : [ \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 0,\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\" ]\n  }\n}");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.useDisMax(false);
        java.lang.String str32 = multiMatchQueryBuilder31.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness33 = multiMatchQueryBuilder31.fuzziness;
        java.lang.String str34 = multiMatchQueryBuilder31.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = null;
        multiMatchQueryBuilder31.zeroTermsQuery = zeroTermsQuery35;
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery48 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.zeroTermsQuery(zeroTermsQuery48);
        java.lang.Integer int50 = multiMatchQueryBuilder49.slop;
        java.lang.Object obj51 = multiMatchQueryBuilder49.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type52 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float53 = type52.tieBreaker();
        float float54 = type52.tieBreaker();
        org.elasticsearch.common.ParseField parseField55 = type52.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder49.type(type52);
        float float57 = type52.tieBreaker();
        multiMatchQueryBuilder31.type = type52;
        org.elasticsearch.common.ParseField parseField59 = type52.parseField();
        org.elasticsearch.common.ParseField parseField60 = type52.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type61 = type52.matchQueryType();
        multiMatchQueryBuilder20.type = type52;
        org.elasticsearch.common.ParseField parseField63 = type52.parseField();
        java.lang.Class<?> wildcardClass64 = type52.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(fuzziness33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertEquals("'" + obj51 + "' != '" + (-1.0f) + "'", obj51, (-1.0f));
        org.junit.Assert.assertTrue("'" + type52 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type52.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 0.0f + "'", float54 == 0.0f);
        org.junit.Assert.assertNotNull(parseField55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + 0.0f + "'", float57 == 0.0f);
        org.junit.Assert.assertNotNull(parseField59);
        org.junit.Assert.assertNotNull(parseField60);
        org.junit.Assert.assertTrue("'" + type61 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type61.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test13359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13359");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 97,\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = multiMatchQueryBuilder16.zeroTermsQuery;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = multiMatchQueryBuilder16.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery19);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(zeroTermsQuery17);
        org.junit.Assert.assertNull(strObjectFloatHashMap18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test13360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13360");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.cutoffFrequency((float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = multiMatchQueryBuilder18.gettype();
        multiMatchQueryBuilder18.boost = 35.0f;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(type19);
    }

    @Test
    public void test13361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13361");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder8.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.minimumShouldMatch("");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.operator(operator15);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator17 = multiMatchQueryBuilder16.operator;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(operator17);
    }

    @Test
    public void test13362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13362");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.zeroTermsQuery(zeroTermsQuery14);
        java.lang.Integer int16 = multiMatchQueryBuilder15.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = multiMatchQueryBuilder15.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(zeroTermsQuery17);
    }

    @Test
    public void test13363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13363");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.lang.String str14 = multiMatchQueryBuilder10.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.tieBreaker((float) 1);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray24);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = multiMatchQueryBuilder25.getzeroTermsQuery();
        multiMatchQueryBuilder25.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator29 = null;
        multiMatchQueryBuilder25.setoperator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = null; // flaky: multiMatchQueryBuilder16.fuzziness((java.lang.Object) multiMatchQueryBuilder25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder16.cutoffFrequency((float) (short) 1);
        multiMatchQueryBuilder16.setmaxExpansions((java.lang.Integer) 10);
        java.lang.String str36 = multiMatchQueryBuilder16.getqueryName();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNull(zeroTermsQuery26);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test13364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13364");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder10, strArray22);
        multiMatchQueryBuilder10.maxExpansions = 1;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder10.operator(operator28);
        org.elasticsearch.common.unit.Fuzziness fuzziness30 = null;
        multiMatchQueryBuilder10.fuzziness = fuzziness30;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator32 = multiMatchQueryBuilder10.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder10.tieBreaker((float) (short) 0);
        multiMatchQueryBuilder10.setmaxExpansions((java.lang.Integer) 1);
        multiMatchQueryBuilder10.queryName = "";
        java.lang.Float float39 = multiMatchQueryBuilder10.boost;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(operator32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(float39);
    }

    @Test
    public void test13365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13365");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray18);
        java.lang.String str20 = multiMatchQueryBuilder19.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.type((java.lang.Object) str20);
        multiMatchQueryBuilder8.setslop((java.lang.Integer) (-1));
        java.lang.String str24 = multiMatchQueryBuilder8.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder8.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : true,\n    \"lenient\" : false\n  }\n}", (float) (byte) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator28 = null;
        multiMatchQueryBuilder8.operator = operator28;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test13366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13366");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        java.lang.Object obj15 = multiMatchQueryBuilder10.gettext();
        java.lang.Float float16 = multiMatchQueryBuilder10.getboost();
        java.lang.String str17 = multiMatchQueryBuilder10.analyzer;
        java.lang.String str18 = null; // flaky: multiMatchQueryBuilder10.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator19 = multiMatchQueryBuilder10.getoperator();
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!^-1.0\", \"\", \"hi!^-1.0\", \"hi!^-1.0\", \"hi!^-1.0\", \"\", \"hi!^-1.0\" ],\n    \"boost\" : 100.0,\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0,\\n    \\\"maxExpansions\\\" : -1\\n  }\\n}\",\n    \"maxExpansions\" : 0,\n    \"lenient\" : false,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\"\n  }\n}";
        java.lang.String str22 = multiMatchQueryBuilder10.fuzzyRewrite;
        java.lang.String[] strArray23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder10, strArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + '#' + "'", obj15, '#');
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(str17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true\n  }\n}" + "'", str18, "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true\n  }\n}");
        org.junit.Assert.assertNull(operator19);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test13367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13367");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery17;
        java.lang.Float float19 = multiMatchQueryBuilder10.gettieBreaker();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.operator(operator20);
        multiMatchQueryBuilder21.tieBreaker = 35.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator24 = multiMatchQueryBuilder21.operator;
        java.lang.Boolean boolean25 = multiMatchQueryBuilder21.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(float19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(operator24);
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + false + "'", boolean25, false);
    }

    @Test
    public void test13368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13368");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.tieBreaker(0.0f);
        multiMatchQueryBuilder19.setuseDisMax((java.lang.Boolean) true);
        java.lang.Integer int22 = multiMatchQueryBuilder19.getmaxExpansions();
        org.elasticsearch.common.unit.Fuzziness fuzziness23 = multiMatchQueryBuilder19.fuzziness;
        multiMatchQueryBuilder19.setcutoffFrequency((java.lang.Float) 100.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(fuzziness23);
    }

    @Test
    public void test13369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13369");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder10.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.maxExpansions((int) 'a');
        java.lang.Float float17 = multiMatchQueryBuilder16.gettieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.tieBreaker((float) (-1L));
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray28);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder30.setzeroTermsQuery(zeroTermsQuery31);
        java.util.List<java.lang.String> strList33 = multiMatchQueryBuilder30.fields;
        java.lang.String str34 = multiMatchQueryBuilder30.queryName;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder30.zeroTermsQuery(zeroTermsQuery35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type50 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder47.type(type50);
        org.elasticsearch.common.ParseField parseField52 = type50.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder38.type(type50);
        multiMatchQueryBuilder53.boost = (-1.0f);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type67 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder64.type(type67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder53.type(type67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type70 = multiMatchQueryBuilder69.gettype();
        org.elasticsearch.common.ParseField parseField71 = type70.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder16.fuzziness((java.lang.Object) type70);
        multiMatchQueryBuilder16.setslop((java.lang.Integer) (-1));
        org.elasticsearch.common.unit.Fuzziness fuzziness75 = multiMatchQueryBuilder16.getfuzziness();
        java.lang.String str76 = multiMatchQueryBuilder16.queryName;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type50.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(parseField52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + type67 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type67.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertTrue("'" + type70 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type70.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(fuzziness75);
        org.junit.Assert.assertNull(str76);
    }

    @Test
    public void test13370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13370");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        multiMatchQueryBuilder11.setmaxExpansions((java.lang.Integer) 35);
        java.lang.String str20 = multiMatchQueryBuilder11.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder11.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"maxExpansions\\\" : 0,\\n    \\\"useDisMax\\\" : false\\n  }\\n}\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"maxExpansions\" : 0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = null;
        multiMatchQueryBuilder11.setzeroTermsQuery(zeroTermsQuery23);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test13371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13371");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        java.lang.Object obj15 = multiMatchQueryBuilder10.gettext();
        java.lang.Float float16 = multiMatchQueryBuilder10.getboost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.field("hi!");
        multiMatchQueryBuilder18.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        multiMatchQueryBuilder18.setcutoffFrequency((java.lang.Float) 0.0f);
        java.lang.Float float23 = multiMatchQueryBuilder18.getboost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = multiMatchQueryBuilder18.gettype();
        java.lang.Float float25 = multiMatchQueryBuilder18.boost;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + '#' + "'", obj15, '#');
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(float23);
        org.junit.Assert.assertNull(type24);
        org.junit.Assert.assertNull(float25);
    }

    @Test
    public void test13372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13372");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator9 = multiMatchQueryBuilder8.getoperator();
        java.lang.Integer int10 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator11 = null;
        multiMatchQueryBuilder8.setoperator(operator11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = multiMatchQueryBuilder14.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type16 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type17 = type16.matchQueryType();
        multiMatchQueryBuilder14.type = type16;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.slop(1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder14.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder14.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder14.prefixLength((int) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap26 = multiMatchQueryBuilder14.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(operator15);
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type16.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type17.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(strObjectFloatHashMap26);
    }

    @Test
    public void test13373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13373");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.lenient(true);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder12.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.slop((int) (short) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator17 = multiMatchQueryBuilder12.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder12.maxExpansions(0);
        multiMatchQueryBuilder19.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 0,\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 97.0\n  }\n}");
        java.lang.Float float22 = multiMatchQueryBuilder19.gettieBreaker();
        java.lang.String str23 = multiMatchQueryBuilder19.queryName;
        multiMatchQueryBuilder19.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"lenient\" : true,\n    \"Name\" : \"hi!\"\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(operator17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(float22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test13374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13374");
        java.lang.Object obj0 = null;
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder9.useDisMax(false);
        java.lang.String str12 = multiMatchQueryBuilder11.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder11.zeroTermsQuery = zeroTermsQuery14;
        java.lang.Integer int16 = multiMatchQueryBuilder11.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.maxExpansions((int) (short) 0);
        java.lang.Float float19 = multiMatchQueryBuilder11.tieBreaker;
        java.lang.Object obj20 = multiMatchQueryBuilder11.text;
        java.lang.Boolean boolean21 = multiMatchQueryBuilder11.useDisMax;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        multiMatchQueryBuilder11.setzeroTermsQuery(zeroTermsQuery22);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray32);
        java.lang.Integer int35 = multiMatchQueryBuilder34.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap36 = multiMatchQueryBuilder34.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = null;
        multiMatchQueryBuilder34.zeroTermsQuery = zeroTermsQuery37;
        java.util.List<java.lang.String> strList39 = multiMatchQueryBuilder34.getfields();
        multiMatchQueryBuilder34.settieBreaker((java.lang.Float) (-1.0f));
        java.lang.Boolean boolean42 = multiMatchQueryBuilder34.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder11.type((java.lang.Object) boolean42);
        multiMatchQueryBuilder11.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : \"class org.joda.time.format.DateTimeFormatter\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.useDisMax(false);
        java.lang.String str57 = multiMatchQueryBuilder56.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness58 = multiMatchQueryBuilder56.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder56.prefixLength((int) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type61 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type62 = type61.matchQueryType();
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray70);
        multiMatchQueryBuilder71.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder71.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder71.minimumShouldMatch("");
        java.lang.String[] strArray85 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray85);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray85);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type62, strArray85);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder56, strArray85);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder11, strArray85);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj0, strArray85);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = multiMatchQueryBuilder91.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"use_dis_max\" : false\n  }\n}");
        multiMatchQueryBuilder91.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(fuzziness13);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(float19);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-1.0f) + "'", obj20, (-1.0f));
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + false + "'", boolean21, false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNull(strObjectFloatHashMap36);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNull(boolean42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(fuzziness58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertTrue("'" + type61 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type61.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type62 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type62.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder93);
    }

    @Test
    public void test13375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13375");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) 100);
        java.lang.Integer int17 = multiMatchQueryBuilder14.slop;
        multiMatchQueryBuilder14.setprefixLength((java.lang.Integer) 1);
        multiMatchQueryBuilder14.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.zeroTermsQuery(zeroTermsQuery33);
        multiMatchQueryBuilder34.minimumShouldMatch = "hi!";
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap37 = null;
        multiMatchQueryBuilder34.setfieldsBoosts(strObjectFloatHashMap37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder34.boost(100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type41 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float42 = type41.tieBreaker();
        float float43 = type41.tieBreaker();
        float float44 = type41.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder40.type(type41);
        multiMatchQueryBuilder14.type = type41;
        java.lang.String str47 = multiMatchQueryBuilder14.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type48 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float49 = type48.tieBreaker();
        float float50 = type48.tieBreaker();
        org.elasticsearch.common.ParseField parseField51 = type48.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type52 = type48.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type53 = type48.matchQueryType();
        float float54 = type48.tieBreaker();
        org.elasticsearch.common.ParseField parseField55 = type48.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type56 = type48.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder14.type(type48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!^-1.0\", \"\", \"hi!^-1.0\", \"hi!^-1.0\", \"hi!^-1.0\", \"\" ],\n    \"useDisMax\" : false,\n    \"lenient\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder59.prefixLength(0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery62 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder61.zeroTermsQuery(zeroTermsQuery62);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type41.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 0.0f + "'", float42 == 0.0f);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 0.0f + "'", float43 == 0.0f);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 0.0f + "'", float44 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type48.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + 0.0f + "'", float49 == 0.0f);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 0.0f + "'", float50 == 0.0f);
        org.junit.Assert.assertNotNull(parseField51);
        org.junit.Assert.assertTrue("'" + type52 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type52.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type53 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type53.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 0.0f + "'", float54 == 0.0f);
        org.junit.Assert.assertNotNull(parseField55);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type56.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
    }

    @Test
    public void test13376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13376");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.useDisMax(false);
        multiMatchQueryBuilder13.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type16 = multiMatchQueryBuilder13.gettype();
        multiMatchQueryBuilder13.boost = 97.0f;
        multiMatchQueryBuilder13.prefixLength = 32;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(type16);
    }

    @Test
    public void test13377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13377");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap11;
        multiMatchQueryBuilder8.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        multiMatchQueryBuilder8.setzeroTermsQuery(zeroTermsQuery15);
        java.lang.Float float17 = multiMatchQueryBuilder8.cutoffFrequency;
        multiMatchQueryBuilder8.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 10.0,\\n    \\\"minimum_should_match\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"tie_breaker\\\" : 100.0\\n  }\\n}\" ],\n    \"prefixLength\" : 32,\n    \"cutoffFrequency\" : 0.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(float17);
    }

    @Test
    public void test13378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13378");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        java.lang.String str12 = multiMatchQueryBuilder8.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.prefixLength((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.slop(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder8.lenient(true);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator19 = multiMatchQueryBuilder8.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = multiMatchQueryBuilder8.gettype();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(operator19);
        org.junit.Assert.assertNull(type20);
    }

    @Test
    public void test13379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13379");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("");
        java.lang.Float float13 = multiMatchQueryBuilder10.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = multiMatchQueryBuilder15.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.slop((int) (short) -1);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator19 = null;
        multiMatchQueryBuilder18.operator = operator19;
        java.lang.Integer int21 = multiMatchQueryBuilder18.getprefixLength();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(zeroTermsQuery16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(int21);
    }

    @Test
    public void test13380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13380");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.prefixLength((int) ' ');
        java.lang.String str16 = multiMatchQueryBuilder15.getminimumShouldMatch();
        multiMatchQueryBuilder15.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator19 = null;
        multiMatchQueryBuilder15.operator = operator19;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder15.slop((int) 'a');
        java.lang.Float float23 = multiMatchQueryBuilder22.tieBreaker;
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray31);
        multiMatchQueryBuilder32.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray42);
        java.lang.String str44 = multiMatchQueryBuilder43.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder32.type((java.lang.Object) str44);
        multiMatchQueryBuilder32.setslop((java.lang.Integer) (-1));
        java.lang.Float float48 = multiMatchQueryBuilder32.getcutoffFrequency();
        java.lang.String[] strArray53 = new java.lang.String[] { "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"use_dis_max\" : true,\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder32, strArray53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder22, strArray53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.maxExpansions((int) (short) 1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(float23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(float48);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
    }

    @Test
    public void test13381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13381");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap12;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.Float float16 = multiMatchQueryBuilder15.boost;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.field("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 10.0,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"tie_breaker\" : 100.0\n  }\n}");
        multiMatchQueryBuilder18.settieBreaker((java.lang.Float) 35.0f);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = multiMatchQueryBuilder18.toXContent(xContentBuilder21, params22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(params22);
    }

    @Test
    public void test13382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13382");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        java.lang.String str12 = multiMatchQueryBuilder8.fuzzyRewrite;
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder8.getfields();
        multiMatchQueryBuilder8.minimumShouldMatch = "";
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder8.getfields();
        multiMatchQueryBuilder8.queryName = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator19 = multiMatchQueryBuilder8.getoperator();
        java.lang.Integer int20 = multiMatchQueryBuilder8.getslop();
        multiMatchQueryBuilder8.lenient = false;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNull(operator19);
        org.junit.Assert.assertNull(int20);
    }

    @Test
    public void test13383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13383");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder10, strArray22);
        multiMatchQueryBuilder10.maxExpansions = 1;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder10.operator(operator28);
        multiMatchQueryBuilder10.slop = 100;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.useDisMax(true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
    }

    @Test
    public void test13384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13384");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder11.lenient;
        java.lang.Object obj19 = multiMatchQueryBuilder11.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float21 = type20.tieBreaker();
        float float22 = type20.tieBreaker();
        multiMatchQueryBuilder11.settype(type20);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        multiMatchQueryBuilder11.zeroTermsQuery = zeroTermsQuery24;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder11.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : false\n  }\n}");
        multiMatchQueryBuilder27.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}";
        multiMatchQueryBuilder27.useDisMax = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder27.operator(operator32);
        multiMatchQueryBuilder33.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder33.lenient(true);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder33.zeroTermsQuery(zeroTermsQuery38);
        java.lang.String str40 = multiMatchQueryBuilder33.getqueryName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-1.0f) + "'", obj19, (-1.0f));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type20.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 0.0f + "'", float22 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test13385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13385");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.Integer int17 = multiMatchQueryBuilder10.getslop();
        java.lang.Float float18 = multiMatchQueryBuilder10.getcutoffFrequency();
        java.lang.String str19 = multiMatchQueryBuilder10.getanalyzer();
        multiMatchQueryBuilder10.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str22 = multiMatchQueryBuilder10.analyzer;
        multiMatchQueryBuilder10.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 97,\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}";
        java.lang.Float float25 = multiMatchQueryBuilder10.boost;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(float18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(float25);
    }

    @Test
    public void test13386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13386");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.slop = 0;
        multiMatchQueryBuilder10.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder10.getoperator();
        java.lang.Float float17 = multiMatchQueryBuilder10.boost;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.useDisMax(false);
        multiMatchQueryBuilder10.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}";
        multiMatchQueryBuilder10.maxExpansions = 10;
        multiMatchQueryBuilder10.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder10.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.prefixLength(1);
        java.lang.String str30 = multiMatchQueryBuilder29.getminimumShouldMatch();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test13387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13387");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder10.getfields();
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.tieBreaker((float) '4');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder17.setzeroTermsQuery(zeroTermsQuery18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.useDisMax(true);
        java.lang.String str22 = multiMatchQueryBuilder17.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.boost(0.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test13388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13388");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.tieBreaker(0.0f);
        multiMatchQueryBuilder19.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        java.lang.Boolean boolean24 = multiMatchQueryBuilder23.lenient;
        multiMatchQueryBuilder23.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(boolean24);
    }

    @Test
    public void test13389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13389");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}");
        multiMatchQueryBuilder19.lenient = true;
        java.lang.String str22 = multiMatchQueryBuilder19.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder19.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"\" ],\n    \"fuzziness\" : \"[hi!, , hi!, hi!, hi!, ]\"\n  }\n}");
        multiMatchQueryBuilder24.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}^10.0\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test13390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13390");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.tieBreaker((float) (short) 100);
        java.lang.Boolean boolean14 = multiMatchQueryBuilder13.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float16 = type15.tieBreaker();
        float float17 = type15.tieBreaker();
        org.elasticsearch.common.ParseField parseField18 = type15.parseField();
        float float19 = type15.tieBreaker();
        org.elasticsearch.common.ParseField parseField20 = type15.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.type(type15);
        multiMatchQueryBuilder21.tieBreaker = 0.0f;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type15.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.0f + "'", float16 == 0.0f);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
        org.junit.Assert.assertNotNull(parseField18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertNotNull(parseField20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test13391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13391");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.Integer int17 = multiMatchQueryBuilder11.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.boost(10.0f);
        multiMatchQueryBuilder19.minimumShouldMatch = "";
        multiMatchQueryBuilder19.boost = 0.0f;
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray31);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = multiMatchQueryBuilder32.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder32.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder35.settype(type36);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = multiMatchQueryBuilder35.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type39 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float40 = type39.tieBreaker();
        float float41 = type39.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type42 = type39.matchQueryType();
        org.elasticsearch.common.ParseField parseField43 = type39.parseField();
        multiMatchQueryBuilder35.type = type39;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder19.type(type39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.field("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"boost\" : -1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"max_expansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"_name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tie_breaker\\\" : 10.0\\n  }\\n}\"\n  }\n}");
        multiMatchQueryBuilder45.useDisMax = false;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap50 = multiMatchQueryBuilder45.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder45.field("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 10.0,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"tie_breaker\" : 100.0\n  }\n}", (float) 100L);
        multiMatchQueryBuilder53.tieBreaker = 97.0f;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(zeroTermsQuery33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(zeroTermsQuery38);
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type39.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + 0.0f + "'", float40 == 0.0f);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 0.0f + "'", float41 == 0.0f);
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type42.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(strObjectFloatHashMap50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
    }

    @Test
    public void test13392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13392");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        java.lang.Boolean boolean12 = multiMatchQueryBuilder8.getuseDisMax();
        java.lang.String str13 = multiMatchQueryBuilder8.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.slop((int) (short) 1);
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder15.getfuzziness();
        org.elasticsearch.common.unit.Fuzziness fuzziness17 = multiMatchQueryBuilder15.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.prefixLength(32);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNull(fuzziness17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test13393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13393");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.Integer int17 = multiMatchQueryBuilder10.getslop();
        java.lang.Float float18 = multiMatchQueryBuilder10.getcutoffFrequency();
        java.lang.String str19 = multiMatchQueryBuilder10.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.Float float22 = multiMatchQueryBuilder21.cutoffFrequency;
        multiMatchQueryBuilder21.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.boost((float) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator27 = null;
        multiMatchQueryBuilder26.setoperator(operator27);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(float18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(float22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test13394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13394");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray18);
        java.lang.String str20 = multiMatchQueryBuilder19.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.type((java.lang.Object) str20);
        multiMatchQueryBuilder8.setslop((java.lang.Integer) (-1));
        java.lang.Float float24 = multiMatchQueryBuilder8.getcutoffFrequency();
        java.lang.String[] strArray29 = new java.lang.String[] { "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"use_dis_max\" : true,\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder8, strArray29);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.operator(operator31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.tieBreaker((float) ' ');
        java.lang.Boolean boolean35 = multiMatchQueryBuilder32.lenient;
        java.lang.Float float36 = multiMatchQueryBuilder32.getboost();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(float24);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(boolean35);
        org.junit.Assert.assertNull(float36);
    }

    @Test
    public void test13395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13395");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.tieBreaker(0.0f);
        multiMatchQueryBuilder11.boost = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        multiMatchQueryBuilder11.type = type22;
        multiMatchQueryBuilder11.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 52.0,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 0\\n  }\\n}\",\n    \"tie_breaker\" : 97.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type22.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
    }

    @Test
    public void test13396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13396");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}";
        java.lang.Boolean boolean17 = multiMatchQueryBuilder10.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.queryName("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"Name\" : \"hi!\"\n  }\n}");
        java.lang.Boolean boolean20 = multiMatchQueryBuilder19.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder19.useDisMax(false);
        multiMatchQueryBuilder22.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : true,\n    \"lenient\" : false\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test13397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13397");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.type(type11);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = multiMatchQueryBuilder12.getfieldsBoosts();
        java.lang.Integer int14 = multiMatchQueryBuilder12.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 32.0,\n    \"prefix_length\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multiMatch\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"maxExpansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzyRewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"Name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tieBreaker\\\" : 10.0\\n  }\\n}\",\n    \"tie_breaker\" : 52.0,\n    \"cutoff_frequency\" : 0.0\n  }\n}", 32.0f);
        multiMatchQueryBuilder21.setmaxExpansions((java.lang.Integer) 1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type11.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(strObjectFloatHashMap13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test13398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13398");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("");
        java.lang.String str18 = multiMatchQueryBuilder11.queryName;
        multiMatchQueryBuilder11.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"Name\" : \"hi!\"\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator21 = null;
        multiMatchQueryBuilder11.setoperator(operator21);
        multiMatchQueryBuilder11.setlenient((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test13399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13399");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = null;
        multiMatchQueryBuilder14.setfieldsBoosts(strObjectFloatHashMap17);
        multiMatchQueryBuilder14.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder14.type;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = multiMatchQueryBuilder14.getoperator();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertNull(operator22);
    }

    @Test
    public void test13400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13400");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator9 = multiMatchQueryBuilder8.getoperator();
        java.lang.Integer int10 = multiMatchQueryBuilder8.slop;
        multiMatchQueryBuilder8.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0\n  }\n}");
        java.lang.String str13 = null; // flaky: multiMatchQueryBuilder8.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.cutoffFrequency((float) 10L);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        multiMatchQueryBuilder8.operator = operator16;
        java.lang.String str18 = multiMatchQueryBuilder8.minimumShouldMatch;
        multiMatchQueryBuilder8.setboost((java.lang.Float) 32.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator9);
        org.junit.Assert.assertNull(int10);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : true,\\n    \\\"cutoff_frequency\\\" : 100.0\\n  }\\n}\"\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : true,\\n    \\\"cutoff_frequency\\\" : 100.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test13401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13401");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0d, strArray9);
        multiMatchQueryBuilder12.setmaxExpansions((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"use_dis_max\" : false,\n    \"lenient\" : true,\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.operator(operator17);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test13402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13402");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.slop = 0;
        multiMatchQueryBuilder10.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder10.getoperator();
        java.lang.Float float17 = multiMatchQueryBuilder10.boost;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.useDisMax(false);
        multiMatchQueryBuilder10.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}";
        multiMatchQueryBuilder10.maxExpansions = 10;
        multiMatchQueryBuilder10.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder10.cutoffFrequency((float) ' ');
        java.lang.Boolean boolean28 = multiMatchQueryBuilder27.getuseDisMax();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = null;
        multiMatchQueryBuilder27.setzeroTermsQuery(zeroTermsQuery29);
        multiMatchQueryBuilder27.setslop((java.lang.Integer) 52);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertEquals("'" + boolean28 + "' != '" + false + "'", boolean28, false);
    }

    @Test
    public void test13403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13403");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Integer int16 = multiMatchQueryBuilder8.getslop();
        java.lang.Float float17 = multiMatchQueryBuilder8.tieBreaker;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery18);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.analyzer("hi!");
        java.lang.String str33 = multiMatchQueryBuilder32.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder32.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness36 = multiMatchQueryBuilder32.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder32.tieBreaker((float) 32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = null; // flaky: multiMatchQueryBuilder8.fuzziness((java.lang.Object) multiMatchQueryBuilder38);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery40 = null;
// flaky:         multiMatchQueryBuilder39.setzeroTermsQuery(zeroTermsQuery40);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray49);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator51 = multiMatchQueryBuilder50.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder50.field("");
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray61);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery63 = multiMatchQueryBuilder62.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder62.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type66 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder65.settype(type66);
        float float68 = type66.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder53.type(type66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder53.field("", (float) (-1L));
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator73 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder72.operator(operator73);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap75 = multiMatchQueryBuilder74.getfieldsBoosts();
// flaky:         multiMatchQueryBuilder39.fieldsBoosts = strObjectFloatHashMap75;
        java.lang.Float float77 = null; // flaky: multiMatchQueryBuilder39.tieBreaker;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(fuzziness36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNull(operator51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(zeroTermsQuery63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertTrue("'" + type66 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type66.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + 0.0f + "'", float68 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap75);
        org.junit.Assert.assertNull(float77);
    }

    @Test
    public void test13404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13404");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.maxExpansions = 0;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator11 = multiMatchQueryBuilder8.getoperator();
        java.lang.String str12 = multiMatchQueryBuilder8.getfuzzyRewrite();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.useDisMax(false);
        java.lang.String str24 = multiMatchQueryBuilder23.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.slop((int) '#');
        java.lang.Object obj27 = multiMatchQueryBuilder26.gettext();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type39 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder36.type(type39);
        org.elasticsearch.common.ParseField parseField41 = type39.parseField();
        multiMatchQueryBuilder26.type = type39;
        org.elasticsearch.common.ParseField parseField43 = type39.parseField();
        multiMatchQueryBuilder8.settype(type39);
        multiMatchQueryBuilder8.setboost((java.lang.Float) 1.0f);
        multiMatchQueryBuilder8.setslop((java.lang.Integer) (-1));
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + (-1.0f) + "'", obj27, (-1.0f));
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type39.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(parseField41);
        org.junit.Assert.assertNotNull(parseField43);
    }

    @Test
    public void test13405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13405");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder8.getmaxExpansions();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder8.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = multiMatchQueryBuilder8.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.fuzzyRewrite("");
        multiMatchQueryBuilder8.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.Integer int20 = multiMatchQueryBuilder8.prefixLength;
        multiMatchQueryBuilder8.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"_name\" : \"hi!\"\n  }\n}";
        multiMatchQueryBuilder8.setprefixLength((java.lang.Integer) 0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(operator15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(int20);
    }

    @Test
    public void test13406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13406");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.slop((int) ' ');
        java.lang.Integer int15 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery16);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test13407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13407");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.Integer int17 = multiMatchQueryBuilder11.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.boost(10.0f);
        multiMatchQueryBuilder19.minimumShouldMatch = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder19.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}", (float) 1L);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator25 = null;
        multiMatchQueryBuilder24.operator = operator25;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.tieBreaker((float) 0);
        java.util.List<java.lang.String> strList29 = multiMatchQueryBuilder28.fields;
        java.lang.String str30 = null; // flaky: multiMatchQueryBuilder28.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(strList29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"prefix_length\\\" : 1,\\n    \\\"use_dis_max\\\" : false,\\n    \\\"cutoff_frequency\\\" : 0.0\\n  }\\n}^1.0\" ],\n    \"boost\" : 10.0,\n    \"minimumShouldMatch\" : \"\",\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0\n  }\n}" + "'", str30, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"prefix_length\\\" : 1,\\n    \\\"use_dis_max\\\" : false,\\n    \\\"cutoff_frequency\\\" : 0.0\\n  }\\n}^1.0\" ],\n    \"boost\" : 10.0,\n    \"minimumShouldMatch\" : \"\",\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0\n  }\n}");
    }

    @Test
    public void test13408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13408");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        multiMatchQueryBuilder12.minimumShouldMatch = "hi!";
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = null;
        multiMatchQueryBuilder12.setfieldsBoosts(strObjectFloatHashMap15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.boost(100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float20 = type19.tieBreaker();
        float float21 = type19.tieBreaker();
        float float22 = type19.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.type(type19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery24);
        java.lang.Integer int26 = multiMatchQueryBuilder25.slop;
        java.lang.Integer int27 = multiMatchQueryBuilder25.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 0.0f + "'", float22 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test13409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13409");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Float float15 = multiMatchQueryBuilder10.cutoffFrequency;
        java.lang.String str16 = multiMatchQueryBuilder10.getanalyzer();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder10.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        java.lang.Object obj20 = multiMatchQueryBuilder19.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder19.cutoffFrequency((float) 10);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray30);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = multiMatchQueryBuilder31.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder31.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder31.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder31.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness39 = multiMatchQueryBuilder31.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder31.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type42 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float43 = type42.tieBreaker();
        float float44 = type42.tieBreaker();
        float float45 = type42.tieBreaker();
        multiMatchQueryBuilder31.type = type42;
        float float47 = type42.tieBreaker();
        org.elasticsearch.common.ParseField parseField48 = type42.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder19.type(type42);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray57);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator59 = multiMatchQueryBuilder58.getoperator();
        java.lang.Integer int60 = multiMatchQueryBuilder58.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator61 = null;
        multiMatchQueryBuilder58.setoperator(operator61);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder58.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.Integer int65 = multiMatchQueryBuilder64.prefixLength;
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray73);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery75 = multiMatchQueryBuilder74.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder74.boost((float) (short) 100);
        java.lang.Integer int78 = multiMatchQueryBuilder77.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder77.boost((float) '4');
        multiMatchQueryBuilder77.setfuzzyRewrite("");
        java.lang.String str83 = multiMatchQueryBuilder77.getfuzzyRewrite();
        java.lang.Boolean boolean84 = multiMatchQueryBuilder77.lenient;
        java.lang.Object obj85 = multiMatchQueryBuilder77.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type86 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float87 = type86.tieBreaker();
        float float88 = type86.tieBreaker();
        multiMatchQueryBuilder77.settype(type86);
        org.elasticsearch.common.ParseField parseField90 = type86.parseField();
        multiMatchQueryBuilder64.settype(type86);
        org.elasticsearch.index.search.MatchQuery.Type type92 = type86.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = multiMatchQueryBuilder49.type(type86);
        float float94 = type86.tieBreaker();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-1.0f) + "'", obj20, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNull(zeroTermsQuery32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(fuzziness39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type42.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 0.0f + "'", float43 == 0.0f);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 0.0f + "'", float44 == 0.0f);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + 0.0f + "'", float45 == 0.0f);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.0f + "'", float47 == 0.0f);
        org.junit.Assert.assertNotNull(parseField48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(operator59);
        org.junit.Assert.assertNull(int60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNull(int65);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNull(zeroTermsQuery75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNull(int78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNull(boolean84);
        org.junit.Assert.assertEquals("'" + obj85 + "' != '" + (-1.0f) + "'", obj85, (-1.0f));
        org.junit.Assert.assertTrue("'" + type86 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type86.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + 0.0f + "'", float87 == 0.0f);
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + 0.0f + "'", float88 == 0.0f);
        org.junit.Assert.assertNotNull(parseField90);
        org.junit.Assert.assertTrue("'" + type92 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type92.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder93);
        org.junit.Assert.assertTrue("'" + float94 + "' != '" + 0.0f + "'", float94 == 0.0f);
    }

    @Test
    public void test13410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13410");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.boost((float) 32);
        multiMatchQueryBuilder17.tieBreaker = 52.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.cutoffFrequency(0.0f);
        java.lang.String str22 = null; // flaky: multiMatchQueryBuilder21.toString();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.useDisMax(false);
        java.lang.String str34 = multiMatchQueryBuilder33.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness35 = multiMatchQueryBuilder33.fuzziness;
        java.lang.String str36 = multiMatchQueryBuilder33.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = null;
        multiMatchQueryBuilder33.zeroTermsQuery = zeroTermsQuery37;
        multiMatchQueryBuilder33.setqueryName("hi!");
        multiMatchQueryBuilder33.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder33.maxExpansions((-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder44.field("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"boost\" : -1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"max_expansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"_name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tie_breaker\\\" : 10.0\\n  }\\n}\"\n  }\n}", (float) (byte) 1);
        java.lang.Float float48 = multiMatchQueryBuilder44.tieBreaker;
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.useDisMax(false);
        java.lang.String str60 = multiMatchQueryBuilder59.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery61 = null;
        multiMatchQueryBuilder59.setzeroTermsQuery(zeroTermsQuery61);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type63 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder59.type(type63);
        float float65 = type63.tieBreaker();
        float float66 = type63.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder44.type(type63);
        multiMatchQueryBuilder21.settype(type63);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 32.0,\n    \"prefixLength\" : 1,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multiMatch\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"maxExpansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzyRewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"Name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tieBreaker\\\" : 10.0\\n  }\\n}\",\n    \"tieBreaker\" : 52.0,\n    \"cutoffFrequency\" : 0.0\n  }\n}" + "'", str22, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 32.0,\n    \"prefixLength\" : 1,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multiMatch\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"maxExpansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzyRewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"Name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tieBreaker\\\" : 10.0\\n  }\\n}\",\n    \"tieBreaker\" : 52.0,\n    \"cutoffFrequency\" : 0.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(fuzziness35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(float48);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + type63 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type63.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + 0.0f + "'", float65 == 0.0f);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + 0.0f + "'", float66 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
    }

    @Test
    public void test13411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13411");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator18 = multiMatchQueryBuilder10.operator;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery19;
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.useDisMax(false);
        java.lang.String str32 = multiMatchQueryBuilder31.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder31.slop((int) '#');
        java.lang.Object obj35 = multiMatchQueryBuilder34.gettext();
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type47 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder44.type(type47);
        org.elasticsearch.common.ParseField parseField49 = type47.parseField();
        multiMatchQueryBuilder34.type = type47;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder10.type(type47);
        java.util.List<java.lang.String> strList52 = multiMatchQueryBuilder10.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder10.maxExpansions(32);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNull(operator18);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + (-1.0f) + "'", obj35, (-1.0f));
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type47.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(parseField49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
    }

    @Test
    public void test13412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13412");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        java.lang.String str9 = multiMatchQueryBuilder8.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.maxExpansions(10);
        multiMatchQueryBuilder11.lenient = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.useDisMax(false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test13413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13413");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = multiMatchQueryBuilder12.type;
        java.lang.String str14 = multiMatchQueryBuilder12.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}", (float) '4');
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray25);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator27 = multiMatchQueryBuilder26.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder26.field("");
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray37);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery39 = multiMatchQueryBuilder38.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder38.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type42 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder41.settype(type42);
        float float44 = type42.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder29.type(type42);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder29.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 52.0,\n    \"fuzzyRewrite\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type48 = multiMatchQueryBuilder29.gettype();
        multiMatchQueryBuilder17.settype(type48);
        org.elasticsearch.common.ParseField parseField50 = type48.parseField();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(type13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNull(operator27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNull(zeroTermsQuery39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type42.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 0.0f + "'", float44 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type48.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(parseField50);
    }

    @Test
    public void test13414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13414");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.minimumShouldMatch("");
        java.lang.Object obj14 = multiMatchQueryBuilder8.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder8.getslop();
        java.lang.String str16 = multiMatchQueryBuilder8.getfuzzyRewrite();
        java.lang.Float float17 = multiMatchQueryBuilder8.cutoffFrequency;
        multiMatchQueryBuilder8.setprefixLength((java.lang.Integer) 35);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + (-1.0f) + "'", obj14, (-1.0f));
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(float17);
    }

    @Test
    public void test13415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13415");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}");
        multiMatchQueryBuilder8.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"prefixLength\" : 100,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery18);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test13416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13416");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.lang.Boolean boolean15 = multiMatchQueryBuilder10.lenient;
        multiMatchQueryBuilder10.setslop((java.lang.Integer) 0);
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = null;
        multiMatchQueryBuilder10.setfuzziness(fuzziness18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.slop(10);
        multiMatchQueryBuilder21.setuseDisMax((java.lang.Boolean) true);
        multiMatchQueryBuilder21.settieBreaker((java.lang.Float) 52.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test13417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13417");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder8.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder8.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float20 = type19.tieBreaker();
        float float21 = type19.tieBreaker();
        float float22 = type19.tieBreaker();
        multiMatchQueryBuilder8.type = type19;
        java.util.List<java.lang.String> strList24 = multiMatchQueryBuilder8.getfields();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.lenient(false);
        org.elasticsearch.common.unit.Fuzziness fuzziness31 = multiMatchQueryBuilder30.fuzziness;
        java.lang.Float float32 = multiMatchQueryBuilder30.cutoffFrequency;
        java.lang.String str33 = multiMatchQueryBuilder30.getqueryName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 0.0f + "'", float22 == 0.0f);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(fuzziness31);
        org.junit.Assert.assertNull(float32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}" + "'", str33, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
    }

    @Test
    public void test13418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13418");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("");
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder17.fuzziness;
        java.lang.String str19 = multiMatchQueryBuilder17.minimumShouldMatch;
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder17.getfields();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(fuzziness18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strList20);
    }

    @Test
    public void test13419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13419");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray18);
        java.lang.String str20 = multiMatchQueryBuilder19.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.type((java.lang.Object) str20);
        multiMatchQueryBuilder8.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder8.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}", (float) (-1L));
        multiMatchQueryBuilder26.lenient = true;
        multiMatchQueryBuilder26.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.util.List<java.lang.String> strList31 = multiMatchQueryBuilder26.getfields();
        multiMatchQueryBuilder26.settieBreaker((java.lang.Float) 35.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(strList31);
    }

    @Test
    public void test13420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13420");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.slop = 0;
        multiMatchQueryBuilder10.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder10.getoperator();
        multiMatchQueryBuilder10.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        multiMatchQueryBuilder10.boost = 10.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery21;
        multiMatchQueryBuilder10.boost = 97.0f;
        org.elasticsearch.common.unit.Fuzziness fuzziness25 = multiMatchQueryBuilder10.getfuzziness();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNull(fuzziness25);
    }

    @Test
    public void test13421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13421");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.slop((int) ' ');
        multiMatchQueryBuilder12.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 100,\n    \"minimum_should_match\" : \"\",\n    \"lenient\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test13422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13422");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.prefixLength((int) ' ');
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder13.operator;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = null;
        multiMatchQueryBuilder13.fieldsBoosts = strObjectFloatHashMap17;
        java.lang.Float float19 = multiMatchQueryBuilder13.gettieBreaker();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = multiMatchQueryBuilder13.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder13.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type23 = multiMatchQueryBuilder13.type;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNull(float19);
        org.junit.Assert.assertNull(zeroTermsQuery20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(type23);
    }

    @Test
    public void test13423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13423");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap11;
        multiMatchQueryBuilder8.useDisMax = true;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = multiMatchQueryBuilder8.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.lenient(false);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.operator(operator20);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = multiMatchQueryBuilder30.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder30.boost((float) (short) 100);
        java.lang.Integer int34 = multiMatchQueryBuilder33.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = multiMatchQueryBuilder33.zeroTermsQuery;
        multiMatchQueryBuilder33.maxExpansions = (-1);
        java.lang.String str38 = multiMatchQueryBuilder33.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator39 = multiMatchQueryBuilder33.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder33.field("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}", (float) (byte) 0);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap43 = multiMatchQueryBuilder33.getfieldsBoosts();
        multiMatchQueryBuilder17.setfieldsBoosts(strObjectFloatHashMap43);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(strObjectFloatHashMap15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNull(zeroTermsQuery31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNull(zeroTermsQuery35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(operator39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap43);
    }

    @Test
    public void test13424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13424");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder15.getfuzziness();
        multiMatchQueryBuilder15.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder15.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}");
        java.lang.Integer int21 = multiMatchQueryBuilder15.getprefixLength();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(int21);
    }

    @Test
    public void test13425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13425");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder10.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder10.getfields();
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) (-1.0f));
        multiMatchQueryBuilder10.setslop((java.lang.Integer) 0);
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.lenient(false);
        java.util.List<java.lang.String> strList24 = multiMatchQueryBuilder23.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.field("");
        java.lang.String str29 = null; // flaky: multiMatchQueryBuilder26.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator30 = multiMatchQueryBuilder26.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder26.useDisMax(true);
        java.lang.String str33 = null; // flaky: multiMatchQueryBuilder32.toString();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"\" ],\n    \"slop\" : 0,\n    \"tieBreaker\" : -1.0,\n    \"lenient\" : false\n  }\n}" + "'", str29, "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"\" ],\n    \"slop\" : 0,\n    \"tieBreaker\" : -1.0,\n    \"lenient\" : false\n  }\n}");
        org.junit.Assert.assertNull(operator30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"\" ],\n    \"slop\" : 0,\n    \"useDisMax\" : true,\n    \"tieBreaker\" : -1.0,\n    \"lenient\" : false\n  }\n}" + "'", str33, "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"\" ],\n    \"slop\" : 0,\n    \"useDisMax\" : true,\n    \"tieBreaker\" : -1.0,\n    \"lenient\" : false\n  }\n}");
    }

    @Test
    public void test13426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13426");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        multiMatchQueryBuilder8.setqueryName("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 52.0,\n    \"fuzzyRewrite\" : \"\"\n  }\n}");
        java.lang.String str16 = multiMatchQueryBuilder8.getanalyzer();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 52.0,\n    \"fuzzyRewrite\" : \"\"\n  }\n}" + "'", str16, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 52.0,\n    \"fuzzyRewrite\" : \"\"\n  }\n}");
    }

    @Test
    public void test13427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13427");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.Integer int17 = multiMatchQueryBuilder11.getslop();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder11.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Object obj21 = multiMatchQueryBuilder20.text;
        multiMatchQueryBuilder20.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : -1\n  }\n}");
        multiMatchQueryBuilder20.prefixLength = 100;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + (-1.0f) + "'", obj21, (-1.0f));
    }

    @Test
    public void test13428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13428");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder8.getmaxExpansions();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder8.zeroTermsQuery = zeroTermsQuery13;
        multiMatchQueryBuilder8.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        multiMatchQueryBuilder8.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}";
        multiMatchQueryBuilder8.setboost((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder8.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        multiMatchQueryBuilder22.slop = 97;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test13429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13429");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder11.setzeroTermsQuery(zeroTermsQuery14);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder17.setzeroTermsQuery(zeroTermsQuery18);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test13430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13430");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0d, strArray9);
        multiMatchQueryBuilder12.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder12.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type16 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float17 = type16.tieBreaker();
        float float18 = type16.tieBreaker();
        org.elasticsearch.common.ParseField parseField19 = type16.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type20 = type16.matchQueryType();
        org.elasticsearch.common.ParseField parseField21 = type16.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder12.type(type16);
        java.lang.Float float23 = multiMatchQueryBuilder22.tieBreaker;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator24 = null;
        multiMatchQueryBuilder22.setoperator(operator24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder22.lenient(false);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray35);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = multiMatchQueryBuilder36.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder36.boost((float) (short) 100);
        java.lang.Integer int40 = multiMatchQueryBuilder36.getmaxExpansions();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery41 = null;
        multiMatchQueryBuilder36.zeroTermsQuery = zeroTermsQuery41;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator43 = multiMatchQueryBuilder36.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder36.fuzzyRewrite("");
        org.elasticsearch.common.unit.Fuzziness fuzziness46 = multiMatchQueryBuilder36.getfuzziness();
        multiMatchQueryBuilder36.maxExpansions = 100;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder36.slop((int) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap51 = multiMatchQueryBuilder50.getfieldsBoosts();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder27.fuzziness((java.lang.Object) strObjectFloatHashMap51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type16.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertNotNull(parseField19);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(float23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNull(zeroTermsQuery37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNull(operator43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(fuzziness46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(strObjectFloatHashMap51);
    }

    @Test
    public void test13431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13431");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator9 = multiMatchQueryBuilder8.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.field("");
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder20.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.boost((float) (short) 100);
        multiMatchQueryBuilder23.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator26 = null;
        multiMatchQueryBuilder23.setoperator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder23.fuzzyRewrite("");
        java.util.List<java.lang.String> strList30 = multiMatchQueryBuilder23.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder11.fuzziness((java.lang.Object) strList30);
        java.lang.String str32 = multiMatchQueryBuilder31.fuzzyRewrite;
        multiMatchQueryBuilder31.lenient = false;
        java.lang.Integer int35 = multiMatchQueryBuilder31.getslop();
        java.lang.Object obj36 = multiMatchQueryBuilder31.text;
        java.lang.String str37 = multiMatchQueryBuilder31.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = multiMatchQueryBuilder31.gettype();
        multiMatchQueryBuilder31.setslop((java.lang.Integer) 10);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + (-1.0f) + "'", obj36, (-1.0f));
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(type38);
    }

    @Test
    public void test13432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13432");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.tieBreaker(0.0f);
        multiMatchQueryBuilder14.setuseDisMax((java.lang.Boolean) false);
        multiMatchQueryBuilder14.maxExpansions = 1;
        multiMatchQueryBuilder14.maxExpansions = 1;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test13433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13433");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.Integer int17 = multiMatchQueryBuilder11.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.boost(10.0f);
        multiMatchQueryBuilder19.minimumShouldMatch = "";
        multiMatchQueryBuilder19.boost = 0.0f;
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray31);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = multiMatchQueryBuilder32.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder32.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder35.settype(type36);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = multiMatchQueryBuilder35.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type39 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float40 = type39.tieBreaker();
        float float41 = type39.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type42 = type39.matchQueryType();
        org.elasticsearch.common.ParseField parseField43 = type39.parseField();
        multiMatchQueryBuilder35.type = type39;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder19.type(type39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.field("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"boost\" : -1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"max_expansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"_name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tie_breaker\\\" : 10.0\\n  }\\n}\"\n  }\n}");
        java.lang.String str48 = multiMatchQueryBuilder47.fuzzyRewrite;
        multiMatchQueryBuilder47.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(zeroTermsQuery33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(zeroTermsQuery38);
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type39.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + 0.0f + "'", float40 == 0.0f);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 0.0f + "'", float41 == 0.0f);
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type42.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test13434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13434");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.lenient(false);
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder15.getfuzziness();
        java.lang.String str17 = multiMatchQueryBuilder15.fuzzyRewrite;
        java.lang.String str18 = multiMatchQueryBuilder15.getanalyzer();
        java.lang.Boolean boolean19 = multiMatchQueryBuilder15.getuseDisMax();
        java.lang.String str20 = multiMatchQueryBuilder15.minimumShouldMatch;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap21 = multiMatchQueryBuilder15.fieldsBoosts;
        java.lang.Float float22 = multiMatchQueryBuilder15.tieBreaker;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strObjectFloatHashMap21);
        org.junit.Assert.assertNull(float22);
    }

    @Test
    public void test13435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13435");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.slop;
        java.lang.Integer int16 = multiMatchQueryBuilder10.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.cutoffFrequency(10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"lenient\" : true,\n    \"cutoff_frequency\" : 97.0\n  }\n}");
        java.util.List<java.lang.String> strList21 = multiMatchQueryBuilder20.fields;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test13436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13436");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.slop((int) ' ');
        multiMatchQueryBuilder12.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.minimumShouldMatch("");
        multiMatchQueryBuilder12.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"hi!\"\n  }\n}";
        java.lang.String str19 = multiMatchQueryBuilder12.minimumShouldMatch;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder12.slop((int) '4');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test13437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13437");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions((int) (short) 0);
        java.lang.Float float18 = multiMatchQueryBuilder10.tieBreaker;
        java.lang.Object obj19 = multiMatchQueryBuilder10.text;
        java.lang.String str20 = multiMatchQueryBuilder10.fuzzyRewrite;
        multiMatchQueryBuilder10.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"class org.joda.time.format.DateTimeFormatter\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}^1.0\" ],\n    \"boost\" : 0.0,\n    \"useDisMax\" : true,\n    \"Name\" : \"hi!\"\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator23 = multiMatchQueryBuilder10.operator;
        multiMatchQueryBuilder10.maxExpansions = 35;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(float18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-1.0f) + "'", obj19, (-1.0f));
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(operator23);
    }

    @Test
    public void test13438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13438");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = multiMatchQueryBuilder12.type;
        java.lang.Float float14 = multiMatchQueryBuilder12.tieBreaker;
        java.lang.Float float15 = multiMatchQueryBuilder12.boost;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(type13);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNull(float15);
    }

    @Test
    public void test13439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13439");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Integer int16 = multiMatchQueryBuilder10.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.useDisMax(false);
        multiMatchQueryBuilder10.setmaxExpansions((java.lang.Integer) 32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.cutoffFrequency((float) 1L);
        multiMatchQueryBuilder10.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"tie_breaker\" : 10.0\n  }\n}");
        multiMatchQueryBuilder10.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"slop\" : 1,\n    \"max_expansions\" : 10,\n    \"lenient\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test13440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13440");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder10.getfields();
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.operator(operator16);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder15.setfieldsBoosts(strObjectFloatHashMap18);
        java.lang.Float float20 = multiMatchQueryBuilder15.gettieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder15.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        java.util.List<java.lang.String> strList23 = multiMatchQueryBuilder15.fields;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap24 = multiMatchQueryBuilder15.getfieldsBoosts();
        java.lang.Float float25 = multiMatchQueryBuilder15.gettieBreaker();
        java.lang.Integer int26 = multiMatchQueryBuilder15.getprefixLength();
        org.elasticsearch.common.xcontent.XContentType xContentType27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference28 = multiMatchQueryBuilder15.buildAsBytes(xContentType27);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(float20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNull(strObjectFloatHashMap24);
        org.junit.Assert.assertNull(float25);
        org.junit.Assert.assertNull(int26);
    }

    @Test
    public void test13441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13441");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder17.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = multiMatchQueryBuilder17.gettype();
        java.lang.String str20 = multiMatchQueryBuilder17.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder17.type;
        multiMatchQueryBuilder17.setanalyzer("");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(fuzziness18);
        org.junit.Assert.assertNull(type19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(type21);
    }

    @Test
    public void test13442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13442");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.type(type11);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = multiMatchQueryBuilder12.getfieldsBoosts();
        java.util.List<java.lang.String> strList14 = multiMatchQueryBuilder12.fields;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = multiMatchQueryBuilder12.getoperator();
        multiMatchQueryBuilder12.setcutoffFrequency((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder12.useDisMax(false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type11.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(strObjectFloatHashMap13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNull(operator15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test13443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13443");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.lang.Boolean boolean15 = multiMatchQueryBuilder10.lenient;
        multiMatchQueryBuilder10.setslop((java.lang.Integer) 0);
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = null;
        multiMatchQueryBuilder10.setfuzziness(fuzziness18);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap20 = null;
        multiMatchQueryBuilder10.setfieldsBoosts(strObjectFloatHashMap20);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder10.boost(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness26 = multiMatchQueryBuilder10.getfuzziness();
        multiMatchQueryBuilder10.maxExpansions = 32;
        java.util.List<java.lang.String> strList29 = multiMatchQueryBuilder10.getfields();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(fuzziness26);
        org.junit.Assert.assertNotNull(strList29);
    }

    @Test
    public void test13444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13444");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) 100);
        java.lang.Boolean boolean17 = multiMatchQueryBuilder14.getlenient();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder14.operator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.useDisMax(false);
        multiMatchQueryBuilder21.tieBreaker = 100.0f;
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray31);
        java.lang.String str33 = multiMatchQueryBuilder32.analyzer;
        multiMatchQueryBuilder32.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder32.tieBreaker((float) '#');
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray45);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery47 = multiMatchQueryBuilder46.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder46.boost((float) (short) 100);
        java.lang.Integer int50 = multiMatchQueryBuilder49.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.boost((float) '4');
        multiMatchQueryBuilder52.slop = (-1);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray63);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery66 = null;
        multiMatchQueryBuilder65.setzeroTermsQuery(zeroTermsQuery66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder65.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder69.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder69.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder69.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder69.cutoffFrequency((float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type78 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type79 = type78.matchQueryType();
        multiMatchQueryBuilder69.type = type78;
        float float81 = type78.tieBreaker();
        multiMatchQueryBuilder52.type = type78;
        multiMatchQueryBuilder37.settype(type78);
        org.elasticsearch.common.ParseField parseField84 = type78.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder21.type((java.lang.Object) type78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder21.slop((int) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = multiMatchQueryBuilder87.boost(52.0f);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNull(zeroTermsQuery47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertTrue("'" + type78 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type78.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type79 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type79.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + 0.0f + "'", float81 == 0.0f);
        org.junit.Assert.assertNotNull(parseField84);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
    }

    @Test
    public void test13445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13445");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder10.getfields();
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = null;
        multiMatchQueryBuilder10.setfieldsBoosts(strObjectFloatHashMap14);
        java.lang.Float float16 = multiMatchQueryBuilder10.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float18 = type17.tieBreaker();
        float float19 = type17.tieBreaker();
        org.elasticsearch.common.ParseField parseField20 = type17.parseField();
        float float21 = type17.tieBreaker();
        org.elasticsearch.common.ParseField parseField22 = type17.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.fuzziness((java.lang.Object) type17);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery24);
        java.lang.Float float26 = multiMatchQueryBuilder25.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder25.prefixLength((int) '#');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type17.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertNotNull(parseField20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertNotNull(parseField22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(float26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test13446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13446");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.boost((float) ' ');
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = null;
        multiMatchQueryBuilder11.setfuzziness(fuzziness19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder11.gettype();
        multiMatchQueryBuilder11.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 32.0,\n    \"prefix_length\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multiMatch\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"maxExpansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzyRewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"Name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tieBreaker\\\" : 10.0\\n  }\\n}\",\n    \"cutoff_frequency\" : 0.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder11.tieBreaker(35.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test13447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13447");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        multiMatchQueryBuilder10.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str13 = null; // flaky: multiMatchQueryBuilder10.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery14);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 1.0,\n    \"prefix_length\" : 1,\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}", (float) 32);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test13448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13448");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap12;
        multiMatchQueryBuilder8.boost = 1.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.tieBreaker((float) 52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) (short) 100);
        multiMatchQueryBuilder17.useDisMax = true;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test13449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13449");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray18);
        java.lang.String str20 = multiMatchQueryBuilder19.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.type((java.lang.Object) str20);
        multiMatchQueryBuilder21.tieBreaker = 10.0f;
        java.lang.Integer int24 = multiMatchQueryBuilder21.prefixLength;
        multiMatchQueryBuilder21.prefixLength = 32;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.type(type27);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test13450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13450");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.queryName = "hi!";
        multiMatchQueryBuilder10.tieBreaker = 1.0f;
        multiMatchQueryBuilder10.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        multiMatchQueryBuilder10.boost = 35.0f;
        multiMatchQueryBuilder10.setboost((java.lang.Float) 97.0f);
        multiMatchQueryBuilder10.setprefixLength((java.lang.Integer) 97);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
    }

    @Test
    public void test13451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13451");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.cutoffFrequency = (-1.0f);
        multiMatchQueryBuilder10.setmaxExpansions((java.lang.Integer) 100);
        java.lang.Boolean boolean19 = multiMatchQueryBuilder10.lenient;
        java.lang.String str20 = multiMatchQueryBuilder10.analyzer;
        java.lang.Boolean boolean21 = multiMatchQueryBuilder10.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.tieBreaker((float) 1);
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder10.getfuzziness();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(fuzziness24);
    }

    @Test
    public void test13452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13452");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder11.settype(type12);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder11.getzeroTermsQuery();
        multiMatchQueryBuilder11.setqueryName("");
        java.lang.Integer int17 = multiMatchQueryBuilder11.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"prefix_length\" : 32,\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder11.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 10.0,\n    \"fuzzy_rewrite\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = null;
        multiMatchQueryBuilder11.operator = operator22;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test13453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13453");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.tieBreaker((float) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.prefixLength((int) (byte) 0);
        multiMatchQueryBuilder13.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
        java.lang.Float float20 = multiMatchQueryBuilder13.cutoffFrequency;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(float20);
    }

    @Test
    public void test13454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13454");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0d, strArray9);
        multiMatchQueryBuilder12.maxExpansions = (-1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        multiMatchQueryBuilder12.setzeroTermsQuery(zeroTermsQuery15);
        java.lang.Float float17 = multiMatchQueryBuilder12.boost;
        java.lang.String str18 = multiMatchQueryBuilder12.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        multiMatchQueryBuilder12.zeroTermsQuery = zeroTermsQuery19;
        multiMatchQueryBuilder12.setcutoffFrequency((java.lang.Float) 0.0f);
        multiMatchQueryBuilder12.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder12.lenient(false);
        java.lang.String str27 = multiMatchQueryBuilder26.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test13455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13455");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        java.lang.Float float15 = multiMatchQueryBuilder14.cutoffFrequency;
        java.lang.Boolean boolean16 = multiMatchQueryBuilder14.useDisMax;
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap28 = null;
        multiMatchQueryBuilder25.fieldsBoosts = strObjectFloatHashMap28;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap30 = null;
        multiMatchQueryBuilder25.setfieldsBoosts(strObjectFloatHashMap30);
        java.lang.String str32 = multiMatchQueryBuilder25.getanalyzer();
        java.lang.Integer int33 = multiMatchQueryBuilder25.maxExpansions;
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray41);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery43 = multiMatchQueryBuilder42.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder42.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type46 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder45.settype(type46);
        float float48 = type46.tieBreaker();
        org.elasticsearch.common.ParseField parseField49 = type46.parseField();
        float float50 = type46.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder25.type(type46);
        org.elasticsearch.index.search.MatchQuery.Type type52 = type46.matchQueryType();
        multiMatchQueryBuilder14.type = type46;
        multiMatchQueryBuilder14.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"max_expansions\" : 10\n  }\n}";
        multiMatchQueryBuilder14.cutoffFrequency = 10.0f;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNull(zeroTermsQuery43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type46.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + 0.0f + "'", float48 == 0.0f);
        org.junit.Assert.assertNotNull(parseField49);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 0.0f + "'", float50 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertTrue("'" + type52 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type52.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
    }

    @Test
    public void test13456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13456");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        java.lang.Object obj15 = multiMatchQueryBuilder10.gettext();
        java.lang.Float float16 = multiMatchQueryBuilder10.getboost();
        java.lang.String str17 = multiMatchQueryBuilder10.minimumShouldMatch;
        java.lang.Boolean boolean18 = multiMatchQueryBuilder10.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 97,\n    \"useDisMax\" : false\n  }\n}", (float) 100);
        java.lang.String str22 = multiMatchQueryBuilder21.analyzer;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + '#' + "'", obj15, '#');
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test13457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13457");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        multiMatchQueryBuilder15.setoperator(operator16);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator18 = null;
        multiMatchQueryBuilder15.operator = operator18;
        multiMatchQueryBuilder15.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0,\\n    \\\"maxExpansions\\\" : 0,\\n    \\\"cutoffFrequency\\\" : 10.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}";
        multiMatchQueryBuilder15.settieBreaker((java.lang.Float) 0.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
    }

    @Test
    public void test13458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13458");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions((int) (short) 0);
        java.lang.Float float18 = multiMatchQueryBuilder10.tieBreaker;
        java.lang.Integer int19 = multiMatchQueryBuilder10.getslop();
        org.elasticsearch.common.unit.Fuzziness fuzziness20 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray28);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = multiMatchQueryBuilder29.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder29.boost((float) (short) 100);
        java.lang.Integer int33 = multiMatchQueryBuilder32.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery34 = multiMatchQueryBuilder32.zeroTermsQuery;
        multiMatchQueryBuilder32.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder32.field("");
        org.elasticsearch.common.unit.Fuzziness fuzziness39 = multiMatchQueryBuilder38.fuzziness;
        java.lang.Boolean boolean40 = multiMatchQueryBuilder38.lenient;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder38.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"use_dis_max\\\\\\\" : false\\\\n  }\\\\n}\\\",\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"lenient\" : true,\n    \"cutoff_frequency\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery43 = null;
        multiMatchQueryBuilder42.zeroTermsQuery = zeroTermsQuery43;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder42);
        java.lang.Object obj46 = multiMatchQueryBuilder10.gettext();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(float18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(fuzziness20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNull(zeroTermsQuery30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNull(zeroTermsQuery34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(fuzziness39);
        org.junit.Assert.assertNull(boolean40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertEquals("'" + obj46 + "' != '" + (-1.0f) + "'", obj46, (-1.0f));
    }

    @Test
    public void test13459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13459");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap11;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator13 = null;
        multiMatchQueryBuilder8.setoperator(operator13);
        java.lang.Float float15 = multiMatchQueryBuilder8.tieBreaker;
        multiMatchQueryBuilder8.boost = (-1.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(float15);
    }

    @Test
    public void test13460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13460");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        java.lang.Integer int13 = multiMatchQueryBuilder11.slop;
        java.lang.Integer int14 = multiMatchQueryBuilder11.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = null;
        multiMatchQueryBuilder11.setoperator(operator15);
        multiMatchQueryBuilder11.cutoffFrequency = 35.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.prefixLength((int) (short) -1);
        java.lang.Class<?> wildcardClass21 = multiMatchQueryBuilder20.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test13461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13461");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery14;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder10.lenient = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}", (float) (byte) 10);
        java.lang.Integer int25 = multiMatchQueryBuilder24.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type26 = multiMatchQueryBuilder24.gettype();
        java.lang.Boolean boolean27 = multiMatchQueryBuilder24.getuseDisMax();
        java.lang.Float float28 = multiMatchQueryBuilder24.tieBreaker;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNull(type26);
        org.junit.Assert.assertEquals("'" + boolean27 + "' != '" + false + "'", boolean27, false);
        org.junit.Assert.assertNull(float28);
    }

    @Test
    public void test13462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13462");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Float float15 = multiMatchQueryBuilder10.cutoffFrequency;
        multiMatchQueryBuilder10.lenient = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.prefixLength(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test13463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13463");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        java.lang.String str15 = multiMatchQueryBuilder14.queryName;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.operator(operator16);
        multiMatchQueryBuilder14.settieBreaker((java.lang.Float) 52.0f);
        java.lang.Integer int20 = multiMatchQueryBuilder14.getprefixLength();
        java.lang.Integer int21 = multiMatchQueryBuilder14.maxExpansions;
        java.lang.String str22 = multiMatchQueryBuilder14.getqueryName();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test13464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13464");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.slop;
        java.lang.Integer int16 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.useDisMax(false);
        java.lang.String str30 = multiMatchQueryBuilder29.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness31 = multiMatchQueryBuilder29.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder29.prefixLength((int) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type35 = type34.matchQueryType();
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray43);
        multiMatchQueryBuilder44.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder44.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder44.minimumShouldMatch("");
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray58);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray58);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type35, strArray58);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder29, strArray58);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 100, strArray58);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery64 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder63.zeroTermsQuery(zeroTermsQuery64);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator66 = null;
        multiMatchQueryBuilder63.setoperator(operator66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder63.slop((int) '4');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(fuzziness31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type35.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
    }

    @Test
    public void test13465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13465");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.field("hi!");
        java.util.List<java.lang.String> strList14 = multiMatchQueryBuilder10.getfields();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = multiMatchQueryBuilder10.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = multiMatchQueryBuilder10.getzeroTermsQuery();
        multiMatchQueryBuilder10.prefixLength = 1;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.tieBreaker((float) (byte) 100);
        multiMatchQueryBuilder20.settieBreaker((java.lang.Float) 1.0f);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNull(strObjectFloatHashMap15);
        org.junit.Assert.assertNull(zeroTermsQuery16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test13466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13466");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap11;
        multiMatchQueryBuilder8.useDisMax = true;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = multiMatchQueryBuilder8.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.lenient(false);
        multiMatchQueryBuilder17.slop = 52;
        java.lang.Integer int22 = multiMatchQueryBuilder17.maxExpansions;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(strObjectFloatHashMap15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(int22);
    }

    @Test
    public void test13467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13467");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions((int) (short) 0);
        java.lang.Float float18 = multiMatchQueryBuilder10.tieBreaker;
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = multiMatchQueryBuilder10.fuzziness;
        java.lang.Object obj20 = multiMatchQueryBuilder10.gettext();
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 32.0,\n    \"prefix_length\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multiMatch\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"maxExpansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzyRewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"Name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tieBreaker\\\" : 10.0\\n  }\\n}\",\n    \"cutoff_frequency\" : 0.0\n  }\n}";
        org.elasticsearch.common.unit.Fuzziness fuzziness23 = multiMatchQueryBuilder10.fuzziness;
        java.lang.Float float24 = multiMatchQueryBuilder10.boost;
        java.lang.Float float25 = multiMatchQueryBuilder10.gettieBreaker();
        java.lang.String str26 = multiMatchQueryBuilder10.getanalyzer();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(float18);
        org.junit.Assert.assertNull(fuzziness19);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-1.0f) + "'", obj20, (-1.0f));
        org.junit.Assert.assertNull(fuzziness23);
        org.junit.Assert.assertNull(float24);
        org.junit.Assert.assertNull(float25);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test13468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13468");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        java.lang.String str10 = null; // flaky: multiMatchQueryBuilder8.toString();
        java.lang.Object obj11 = multiMatchQueryBuilder8.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = multiMatchQueryBuilder8.type;
        multiMatchQueryBuilder8.boost = 35.0f;
        multiMatchQueryBuilder8.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"lenient\" : true\n  }\n}");
        org.elasticsearch.common.xcontent.XContentType xContentType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference18 = multiMatchQueryBuilder8.buildAsBytes(xContentType17);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}" + "'", str10, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + (-1.0f) + "'", obj11, (-1.0f));
        org.junit.Assert.assertNull(type12);
    }

    @Test
    public void test13469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13469");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.tieBreaker((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 0,\n    \"useDisMax\" : false\n  }\n}");
        multiMatchQueryBuilder13.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        multiMatchQueryBuilder13.setlenient((java.lang.Boolean) true);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder13.getlenient();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + boolean20 + "' != '" + true + "'", boolean20, true);
    }

    @Test
    public void test13470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13470");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder11.lenient;
        java.lang.Object obj19 = multiMatchQueryBuilder11.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder11.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.lenient(false);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type35 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.type(type35);
        org.elasticsearch.common.ParseField parseField37 = type35.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder21.fuzziness((java.lang.Object) type35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder21.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type41 = multiMatchQueryBuilder21.type;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-1.0f) + "'", obj19, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type35.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(parseField37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(type41);
    }

    @Test
    public void test13471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13471");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.slop = 0;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        multiMatchQueryBuilder10.operator = operator14;
        java.lang.Object obj16 = multiMatchQueryBuilder10.gettext();
        java.lang.String str17 = multiMatchQueryBuilder10.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(true);
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 0.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + (-1.0f) + "'", obj16, (-1.0f));
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test13472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13472");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.field("hi!");
        java.util.List<java.lang.String> strList14 = multiMatchQueryBuilder10.getfields();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = multiMatchQueryBuilder10.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = multiMatchQueryBuilder10.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"type\" : \"best_fields\",\n    \"boost\" : 100.0,\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0,\n    \"cutoff_frequency\" : 100.0\n  }\n}");
        java.util.List<java.lang.String> strList19 = multiMatchQueryBuilder18.fields;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNull(strObjectFloatHashMap15);
        org.junit.Assert.assertNull(zeroTermsQuery16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test13473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13473");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder10.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.tieBreaker((float) '#');
        java.lang.Integer int17 = multiMatchQueryBuilder10.getmaxExpansions();
        multiMatchQueryBuilder10.fuzzyRewrite = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.cutoffFrequency((float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"prefix_length\" : 100,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}");
        multiMatchQueryBuilder23.cutoffFrequency = 1.0f;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test13474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13474");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) 100);
        java.lang.String str17 = null; // flaky: multiMatchQueryBuilder14.toString();
        multiMatchQueryBuilder14.slop = (-1);
        java.lang.String str20 = multiMatchQueryBuilder14.fuzzyRewrite;
        java.lang.String str21 = multiMatchQueryBuilder14.getanalyzer();
        multiMatchQueryBuilder14.setqueryName("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}^10.0\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0,\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"slop\" : 1,\n    \"useDisMax\" : false,\n    \"lenient\" : false\n  }\n}");
        multiMatchQueryBuilder14.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}" + "'", str17, "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test13475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13475");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.lenient(true);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder12.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.slop((int) (short) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator17 = multiMatchQueryBuilder12.getoperator();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder12.zeroTermsQuery = zeroTermsQuery18;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(operator17);
    }

    @Test
    public void test13476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13476");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder10, strArray22);
        multiMatchQueryBuilder10.maxExpansions = 1;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator28 = null;
        multiMatchQueryBuilder10.setoperator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = null;
        multiMatchQueryBuilder10.type = type30;
        multiMatchQueryBuilder10.maxExpansions = 0;
        multiMatchQueryBuilder10.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder10.operator(operator36);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
    }

    @Test
    public void test13477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13477");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery14;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder10.lenient = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.operator(operator20);
        java.lang.Boolean boolean22 = multiMatchQueryBuilder10.lenient;
        java.lang.Object obj23 = multiMatchQueryBuilder10.text;
        multiMatchQueryBuilder10.fuzzyRewrite = "";
        java.lang.String str26 = multiMatchQueryBuilder10.analyzer;
        java.lang.Boolean boolean27 = multiMatchQueryBuilder10.useDisMax;
        java.lang.String str28 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + boolean22 + "' != '" + false + "'", boolean22, false);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + (-1.0f) + "'", obj23, (-1.0f));
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + boolean27 + "' != '" + false + "'", boolean27, false);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test13478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13478");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray18);
        java.lang.String str20 = multiMatchQueryBuilder19.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.type((java.lang.Object) str20);
        multiMatchQueryBuilder8.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder8.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}", (float) (-1L));
        multiMatchQueryBuilder26.lenient = true;
        multiMatchQueryBuilder26.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : true,\n    \"lenient\" : false\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder26.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        java.lang.String str33 = multiMatchQueryBuilder32.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder32.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\" ],\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"tie_breaker\\\" : 10.0\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : true,\n    \"lenient\" : false\n  }\n}" + "'", str33, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : true,\n    \"lenient\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
    }

    @Test
    public void test13479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13479");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) 100);
        java.lang.Boolean boolean17 = multiMatchQueryBuilder14.getlenient();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder14.operator(operator18);
        multiMatchQueryBuilder14.lenient = true;
        java.lang.String str22 = multiMatchQueryBuilder14.getminimumShouldMatch();
        multiMatchQueryBuilder14.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 52.0,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test13480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13480");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        multiMatchQueryBuilder12.minimumShouldMatch = "hi!";
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = null;
        multiMatchQueryBuilder12.setfieldsBoosts(strObjectFloatHashMap15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.boost(100.0f);
        java.lang.Integer int19 = multiMatchQueryBuilder12.getprefixLength();
        java.lang.Object obj20 = multiMatchQueryBuilder12.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder12.maxExpansions((int) (byte) 10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = multiMatchQueryBuilder22.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-1.0f) + "'", obj20, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(zeroTermsQuery23);
    }

    @Test
    public void test13481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13481");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("");
        java.lang.Float float13 = multiMatchQueryBuilder10.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        java.lang.Integer int16 = multiMatchQueryBuilder15.maxExpansions;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator17 = multiMatchQueryBuilder15.operator;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder15.setzeroTermsQuery(zeroTermsQuery18);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray27);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = multiMatchQueryBuilder28.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.boost((float) (short) 100);
        java.lang.Integer int32 = multiMatchQueryBuilder31.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder31.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder31.slop((int) (byte) 10);
        org.elasticsearch.common.unit.Fuzziness fuzziness37 = null;
        multiMatchQueryBuilder36.fuzziness = fuzziness37;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder36.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\"\n  }\n}");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray48);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery50 = multiMatchQueryBuilder49.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder49.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder49.lenient(false);
        java.lang.Integer int57 = multiMatchQueryBuilder49.getslop();
        java.lang.Object obj58 = multiMatchQueryBuilder49.gettext();
        java.lang.Boolean boolean59 = multiMatchQueryBuilder49.lenient;
        java.lang.Integer int60 = multiMatchQueryBuilder49.getprefixLength();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray68);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery70 = multiMatchQueryBuilder69.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder69.boost((float) (short) 100);
        multiMatchQueryBuilder72.queryName = "hi!";
        java.lang.Integer int75 = multiMatchQueryBuilder72.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder72.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder72.maxExpansions((int) (short) 0);
        java.lang.String str81 = multiMatchQueryBuilder72.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap82 = multiMatchQueryBuilder72.fieldsBoosts;
        multiMatchQueryBuilder49.setfieldsBoosts(strObjectFloatHashMap82);
        multiMatchQueryBuilder40.setfieldsBoosts(strObjectFloatHashMap82);
        multiMatchQueryBuilder15.fieldsBoosts = strObjectFloatHashMap82;
        multiMatchQueryBuilder15.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"hi!\"\n  }\n}";
        multiMatchQueryBuilder15.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"\",\n    \"use_dis_max\" : true,\n    \"lenient\" : true,\n    \"cutoff_frequency\" : 100.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = multiMatchQueryBuilder15.useDisMax(true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(operator17);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNull(zeroTermsQuery29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNull(zeroTermsQuery50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertEquals("'" + obj58 + "' != '" + (-1.0f) + "'", obj58, (-1.0f));
        org.junit.Assert.assertEquals("'" + boolean59 + "' != '" + false + "'", boolean59, false);
        org.junit.Assert.assertNull(int60);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNull(zeroTermsQuery70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNull(int75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder91);
    }

    @Test
    public void test13482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13482");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = null;
        multiMatchQueryBuilder10.fieldsBoosts = strObjectFloatHashMap14;
        multiMatchQueryBuilder10.queryName = "";
        multiMatchQueryBuilder10.prefixLength = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.slop((int) 'a');
        multiMatchQueryBuilder21.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"lenient\" : true\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test13483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13483");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder11.zeroTermsQuery;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = multiMatchQueryBuilder11.getfieldsBoosts();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap16 = multiMatchQueryBuilder11.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.tieBreaker((float) (short) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = multiMatchQueryBuilder18.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNull(strObjectFloatHashMap15);
        org.junit.Assert.assertNull(strObjectFloatHashMap16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(strObjectFloatHashMap19);
    }

    @Test
    public void test13484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13484");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.slop = 0;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        multiMatchQueryBuilder10.operator = operator14;
        java.lang.String str16 = multiMatchQueryBuilder10.getfuzzyRewrite();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery17;
        java.lang.Boolean boolean19 = multiMatchQueryBuilder10.getlenient();
        multiMatchQueryBuilder10.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        multiMatchQueryBuilder10.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 0.0,\n    \"slop\" : 35,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}";
        multiMatchQueryBuilder10.slop = 0;
        java.lang.Integer int26 = multiMatchQueryBuilder10.getmaxExpansions();
        java.util.List<java.lang.String> strList27 = multiMatchQueryBuilder10.getfields();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(strList27);
    }

    @Test
    public void test13485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13485");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray18);
        java.lang.String str20 = multiMatchQueryBuilder19.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.type((java.lang.Object) str20);
        multiMatchQueryBuilder21.tieBreaker = 10.0f;
        multiMatchQueryBuilder21.setlenient((java.lang.Boolean) true);
        multiMatchQueryBuilder21.settieBreaker((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder21.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        java.util.List<java.lang.String> strList30 = multiMatchQueryBuilder21.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder21.prefixLength((-1));
        multiMatchQueryBuilder21.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"use_dis_max\\\\\\\" : false\\\\n  }\\\\n}\\\",\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"lenient\" : true,\n    \"cutoff_frequency\" : 10.0\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator35 = multiMatchQueryBuilder21.getoperator();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(operator35);
    }

    @Test
    public void test13486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13486");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder10.getfields();
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = null;
        multiMatchQueryBuilder15.setfuzziness(fuzziness16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.useDisMax(true);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder15.getlenient();
        java.lang.Boolean boolean21 = multiMatchQueryBuilder15.useDisMax;
        multiMatchQueryBuilder15.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 0.0,\n    \"maxExpansions\" : 0,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0\n  }\n}";
        java.lang.Integer int24 = multiMatchQueryBuilder15.getslop();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + true + "'", boolean21, true);
        org.junit.Assert.assertNull(int24);
    }

    @Test
    public void test13487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13487");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Integer int16 = multiMatchQueryBuilder8.getslop();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator17 = null;
        multiMatchQueryBuilder8.setoperator(operator17);
        multiMatchQueryBuilder8.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"use_dis_max\" : false\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder8.slop((int) (short) 10);
        org.elasticsearch.common.unit.Fuzziness fuzziness23 = multiMatchQueryBuilder22.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder22.cutoffFrequency((float) (-1L));
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(fuzziness23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test13488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13488");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("hi!", (float) (-1L));
        java.lang.String str18 = multiMatchQueryBuilder17.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = multiMatchQueryBuilder17.zeroTermsQuery;
        java.lang.Boolean boolean20 = multiMatchQueryBuilder17.lenient;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator21 = multiMatchQueryBuilder17.operator;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(zeroTermsQuery19);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertNull(operator21);
    }

    @Test
    public void test13489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13489");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        java.lang.Float float15 = multiMatchQueryBuilder14.cutoffFrequency;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder14.setzeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator18 = null;
        multiMatchQueryBuilder14.setoperator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.maxExpansions((int) (short) 100);
        multiMatchQueryBuilder21.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"use_dis_max\" : false\n  }\n}");
        multiMatchQueryBuilder21.setcutoffFrequency((java.lang.Float) 97.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder21.cutoffFrequency(0.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test13490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13490");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness14 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.cutoffFrequency((float) '4');
        multiMatchQueryBuilder18.setuseDisMax((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(fuzziness14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test13491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13491");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = null;
        multiMatchQueryBuilder14.setfieldsBoosts(strObjectFloatHashMap17);
        multiMatchQueryBuilder14.useDisMax = false;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap21 = multiMatchQueryBuilder14.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder14.operator(operator22);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(strObjectFloatHashMap21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test13492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13492");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.slop((int) '#');
        java.lang.String str14 = multiMatchQueryBuilder13.fuzzyRewrite;
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = null;
        multiMatchQueryBuilder13.fuzziness = fuzziness15;
        java.lang.Float float17 = multiMatchQueryBuilder13.cutoffFrequency;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder13.fieldsBoosts = strObjectFloatHashMap18;
        java.lang.Float float20 = multiMatchQueryBuilder13.getcutoffFrequency();
        java.lang.Boolean boolean21 = multiMatchQueryBuilder13.getuseDisMax();
        java.lang.String str22 = multiMatchQueryBuilder13.getqueryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder13.prefixLength((int) (byte) 1);
        java.util.List<java.lang.String> strList25 = multiMatchQueryBuilder13.getfields();
        org.elasticsearch.common.unit.Fuzziness fuzziness26 = multiMatchQueryBuilder13.getfuzziness();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNull(float20);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + false + "'", boolean21, false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNull(fuzziness26);
    }

    @Test
    public void test13493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13493");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.String str14 = multiMatchQueryBuilder11.getqueryName();
        multiMatchQueryBuilder11.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}";
        multiMatchQueryBuilder11.setlenient((java.lang.Boolean) true);
        java.lang.Boolean boolean19 = multiMatchQueryBuilder11.getuseDisMax();
        multiMatchQueryBuilder11.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"useDisMax\\\" : true\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false,\\n    \\\"lenient\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(boolean19);
    }

    @Test
    public void test13494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13494");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.slop = 0;
        multiMatchQueryBuilder10.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder10.getoperator();
        java.lang.Float float17 = multiMatchQueryBuilder10.boost;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.useDisMax(false);
        multiMatchQueryBuilder10.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 32.0,\n    \"prefix_length\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multiMatch\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"maxExpansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzyRewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"Name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tieBreaker\\\" : 10.0\\n  }\\n}\",\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        java.lang.Float float24 = multiMatchQueryBuilder23.getboost();
        multiMatchQueryBuilder23.tieBreaker = 100.0f;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float24);
    }

    @Test
    public void test13495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13495");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap11;
        multiMatchQueryBuilder8.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        multiMatchQueryBuilder8.setzeroTermsQuery(zeroTermsQuery15);
        java.lang.Integer int17 = multiMatchQueryBuilder8.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.slop(32);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray27);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = multiMatchQueryBuilder28.getzeroTermsQuery();
        multiMatchQueryBuilder28.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder28.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.maxExpansions((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = null; // flaky: multiMatchQueryBuilder8.type((java.lang.Object) multiMatchQueryBuilder33);
// flaky:             org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multimatch\" : {?    \"query\" : -1.0,?    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],?    \"prefixlength\" : 1,?    \"maxexpansions\" : -1,?    \"cutofffrequency\" : 0.0?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNull(zeroTermsQuery29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
    }

    @Test
    public void test13496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13496");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.slop;
        java.lang.Integer int16 = multiMatchQueryBuilder10.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.cutoffFrequency(10.0f);
        java.lang.String str19 = multiMatchQueryBuilder10.analyzer;
        multiMatchQueryBuilder10.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 100\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test13497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13497");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.analyzer("hi!");
        java.lang.Boolean boolean13 = multiMatchQueryBuilder10.lenient;
        java.lang.Boolean boolean14 = multiMatchQueryBuilder10.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNull(boolean14);
    }

    @Test
    public void test13498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13498");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = multiMatchQueryBuilder11.getzeroTermsQuery();
        multiMatchQueryBuilder11.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.operator(operator15);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery17);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params20 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder18.doXContent(xContentBuilder19, params20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(zeroTermsQuery12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(params20);
    }

    @Test
    public void test13499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13499");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) (-1.0f));
        multiMatchQueryBuilder10.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery18;
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray27);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = multiMatchQueryBuilder28.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.boost((float) (short) 100);
        java.lang.Integer int32 = multiMatchQueryBuilder31.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = multiMatchQueryBuilder31.zeroTermsQuery;
        multiMatchQueryBuilder31.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder31.field("");
        java.lang.String str38 = multiMatchQueryBuilder31.queryName;
        multiMatchQueryBuilder31.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type41 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float42 = type41.tieBreaker();
        float float43 = type41.tieBreaker();
        multiMatchQueryBuilder31.type = type41;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder10.type(type41);
        java.lang.String str46 = multiMatchQueryBuilder10.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder10.maxExpansions(0);
        java.util.List<java.lang.String> strList49 = multiMatchQueryBuilder10.fields;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator50 = multiMatchQueryBuilder10.getoperator();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNull(zeroTermsQuery29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNull(zeroTermsQuery33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type41.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 0.0f + "'", float42 == 0.0f);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 0.0f + "'", float43 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNull(operator50);
    }

    @Test
    public void test13500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13500");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder10.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder10.getfields();
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) (-1.0f));
        multiMatchQueryBuilder10.setslop((java.lang.Integer) 0);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder10.lenient;
        java.lang.Integer int21 = multiMatchQueryBuilder10.getprefixLength();
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) 52.0f);
        multiMatchQueryBuilder10.prefixLength = 100;
        java.lang.String str26 = multiMatchQueryBuilder10.getminimumShouldMatch();
        multiMatchQueryBuilder10.setboost((java.lang.Float) 0.0f);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(str26);
    }
}
