import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest13 {

    public static boolean debug = false;

    @Test
    public void test06501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06501");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"\"\n  }\n}");
        java.lang.Integer int15 = multiMatchQueryBuilder4.maxExpansions;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int15);
    }

    @Test
    public void test06502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06502");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int16 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.QueryValidationException queryValidationException19 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap23 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap23;
        java.lang.String str25 = multiMatchQueryBuilder4.analyzer;
        java.lang.String str26 = multiMatchQueryBuilder4.getName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(queryValidationException19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "multi_match" + "'", str26, "multi_match");
    }

    @Test
    public void test06503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06503");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.useDisMax(false);
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap24 = multiMatchQueryBuilder23.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.zeroTermsQuery(zeroTermsQuery25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder23.lenient(false);
        java.lang.Object obj29 = multiMatchQueryBuilder28.gettext();
        java.lang.Integer int30 = multiMatchQueryBuilder28.getslop();
        multiMatchQueryBuilder28.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder28.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str35 = multiMatchQueryBuilder34.fuzzyRewrite;
        multiMatchQueryBuilder34.lenient = true;
        java.lang.Boolean boolean38 = multiMatchQueryBuilder34.lenient;
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        multiMatchQueryBuilder43.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator48 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder43.operator(operator48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.maxExpansions((int) (short) 10);
        java.lang.String[] strArray55 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray55);
        org.elasticsearch.index.query.Operator operator57 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.operator(operator57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder56.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder60.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder60.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness65 = multiMatchQueryBuilder60.getfuzziness();
        multiMatchQueryBuilder49.fuzziness = fuzziness65;
        multiMatchQueryBuilder34.fuzziness = fuzziness65;
        multiMatchQueryBuilder14.fuzziness = fuzziness65;
        multiMatchQueryBuilder14.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder14.prefixLength = 35;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "multi_match" + "'", str12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(strObjectFloatHashMap24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertEquals("'" + obj29 + "' != '" + "multi_match" + "'", obj29, "multi_match");
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + boolean38 + "' != '" + true + "'", boolean38, true);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(fuzziness65);
    }

    @Test
    public void test06504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06504");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder25.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder25.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = multiMatchQueryBuilder25.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField39 = type38.parseField();
        multiMatchQueryBuilder25.type = type38;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder20.type(type38);
        multiMatchQueryBuilder20.setrewrite("");
        org.elasticsearch.index.query.Operator operator44 = multiMatchQueryBuilder20.getoperator();
        java.lang.String[] strArray48 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray48);
        org.elasticsearch.index.query.Operator operator50 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.operator(operator50);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder49.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.fuzziness((java.lang.Object) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap56 = multiMatchQueryBuilder53.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder53.boost((float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder53.cutoffFrequency((float) 0);
        org.elasticsearch.common.unit.Fuzziness fuzziness61 = multiMatchQueryBuilder53.getfuzziness();
        multiMatchQueryBuilder20.setfuzziness(fuzziness61);
        java.util.List<java.lang.String> strList63 = multiMatchQueryBuilder20.getfields();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(type37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(operator44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNull(strObjectFloatHashMap56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(fuzziness61);
        org.junit.Assert.assertNotNull(strList63);
    }

    @Test
    public void test06505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06505");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str16 = multiMatchQueryBuilder4.minimumShouldMatch;
        multiMatchQueryBuilder4.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"analyzer\" : \"\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test06506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06506");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.Operator operator10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.operator(operator10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder11.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
    }

    @Test
    public void test06507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06507");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.lang.String[] strArray4 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder5 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray4);
        org.elasticsearch.index.query.Operator operator6 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder5.operator(operator6);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder5.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap10 = multiMatchQueryBuilder9.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder9.zeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder9.lenient(false);
        multiMatchQueryBuilder9.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder9.zeroTermsQuery(zeroTermsQuery17);
        java.lang.String str19 = multiMatchQueryBuilder18.fuzzyRewrite;
        java.lang.Boolean boolean20 = multiMatchQueryBuilder18.useDisMax;
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.operator(operator21);
        java.lang.Boolean boolean23 = multiMatchQueryBuilder18.getuseDisMax();
        java.lang.String str24 = multiMatchQueryBuilder18.getrewrite();
        java.lang.String str25 = multiMatchQueryBuilder18.rewrite;
        java.lang.String[] strArray29 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray29);
        org.elasticsearch.index.query.Operator operator31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.operator(operator31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder30.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException35 = multiMatchQueryBuilder30.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder30.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder30.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder30.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness42 = multiMatchQueryBuilder30.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder30.slop((int) 'a');
        java.lang.String[] strArray48 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray48);
        org.elasticsearch.index.query.Operator operator50 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.operator(operator50);
        java.lang.Boolean boolean52 = multiMatchQueryBuilder49.getlenient();
        multiMatchQueryBuilder49.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder49.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness57 = multiMatchQueryBuilder56.fuzziness;
        multiMatchQueryBuilder56.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder56.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery62 = multiMatchQueryBuilder61.zeroTermsQuery;
        java.lang.String[] strArray66 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray66);
        org.elasticsearch.index.query.Operator operator68 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.operator(operator68);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder67.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException72 = multiMatchQueryBuilder67.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder67.cutoffFrequency((float) (byte) 100);
        java.lang.String str75 = multiMatchQueryBuilder67.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder67.queryName("");
        multiMatchQueryBuilder77.setslop((java.lang.Integer) 0);
        java.lang.String[] strArray83 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder61, strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder30, strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str25, strArray83);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder89 = org.elasticsearch.common.xcontent.XContentBuilder.builder(xContent0, strArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNull(strObjectFloatHashMap10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(queryValidationException35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(fuzziness42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(boolean52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNull(fuzziness57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNull(zeroTermsQuery62);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNull(queryValidationException72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(strArray83);
    }

    @Test
    public void test06508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06508");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        multiMatchQueryBuilder13.prefixLength = 10;
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap25 = multiMatchQueryBuilder24.getfieldsBoosts();
        multiMatchQueryBuilder24.setprefixLength((java.lang.Integer) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder24.tieBreaker((float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.tieBreaker((float) (-1L));
        org.elasticsearch.index.query.Operator operator32 = null;
        multiMatchQueryBuilder31.operator = operator32;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder13.type((java.lang.Object) operator32);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = null;
        multiMatchQueryBuilder34.zeroTermsQuery = zeroTermsQuery35;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(strObjectFloatHashMap25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
    }

    @Test
    public void test06509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06509");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        java.lang.String str7 = multiMatchQueryBuilder4.rewrite;
        org.elasticsearch.index.query.Operator operator8 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder4.operator(operator8);
        multiMatchQueryBuilder9.tieBreaker = 0.0f;
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder9.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder9.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder9.cutoffFrequency((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder9.slop((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder9.prefixLength(10);
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder9.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strList20);
    }

    @Test
    public void test06510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06510");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = multiMatchQueryBuilder4.getzeroTermsQuery();
        float float16 = multiMatchQueryBuilder4.boost();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(zeroTermsQuery15);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 1.0f + "'", float16 == 1.0f);
    }

    @Test
    public void test06511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06511");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.common.unit.Fuzziness fuzziness9 = multiMatchQueryBuilder8.fuzziness;
        java.util.List<java.lang.String> strList10 = multiMatchQueryBuilder8.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) type11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(fuzziness9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type11.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test06512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06512");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.queryName("");
        multiMatchQueryBuilder14.maxExpansions = 0;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.prefixLength((int) (short) -1);
        multiMatchQueryBuilder18.lenient = false;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test06513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06513");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder12.setzeroTermsQuery(zeroTermsQuery13);
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException24 = multiMatchQueryBuilder19.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.cutoffFrequency((float) (byte) 100);
        float float27 = multiMatchQueryBuilder19.boost();
        multiMatchQueryBuilder19.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type31 = type30.matchQueryType();
        float float32 = type30.tieBreaker();
        float float33 = type30.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder19.fuzziness((java.lang.Object) type30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder12.type(type30);
        multiMatchQueryBuilder12.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder12.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder12.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}");
        java.lang.String str42 = multiMatchQueryBuilder12.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(queryValidationException24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type30.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type31.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 0.0f + "'", float32 == 0.0f);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test06514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06514");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.analyzer = "multi_match";
        org.elasticsearch.common.unit.Fuzziness fuzziness22 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.Boolean boolean23 = multiMatchQueryBuilder4.useDisMax;
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.field("");
        multiMatchQueryBuilder28.minimumShouldMatch = "hi!";
        java.lang.Float float35 = multiMatchQueryBuilder28.tieBreaker;
        java.lang.Object obj36 = multiMatchQueryBuilder28.text;
        java.lang.Float float37 = multiMatchQueryBuilder28.getcutoffFrequency();
        multiMatchQueryBuilder28.prefixLength = 100;
        multiMatchQueryBuilder28.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder28.cutoffFrequency((float) 1L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder28);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery45 = multiMatchQueryBuilder28.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(fuzziness22);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(float35);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + "multi_match" + "'", obj36, "multi_match");
        org.junit.Assert.assertNull(float37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(zeroTermsQuery45);
    }

    @Test
    public void test06515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06515");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.operator(operator13);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(zeroTermsQuery10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
    }

    @Test
    public void test06516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06516");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder4.getPROTOTYPE();
        multiMatchQueryBuilder4.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray15 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray15);
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException21 = multiMatchQueryBuilder16.validate();
        java.lang.Integer int22 = multiMatchQueryBuilder16.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = multiMatchQueryBuilder16.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder16.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder16.boost((float) 0);
        java.lang.String str31 = multiMatchQueryBuilder16.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap32 = multiMatchQueryBuilder16.fieldsBoosts;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap32;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder4.cutoffFrequency((float) 100);
        java.lang.Boolean boolean36 = multiMatchQueryBuilder35.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(queryValidationException21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(zeroTermsQuery23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(boolean36);
    }

    @Test
    public void test06517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06517");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String str16 = multiMatchQueryBuilder4.analyzer;
        multiMatchQueryBuilder4.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = multiMatchQueryBuilder4.getfieldsBoosts();
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(strObjectFloatHashMap19);
    }

    @Test
    public void test06518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06518");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.Float float9 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.Operator operator10 = null;
        multiMatchQueryBuilder4.setoperator(operator10);
        multiMatchQueryBuilder4.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float9);
    }

    @Test
    public void test06519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06519");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        multiMatchQueryBuilder4.setminimumShouldMatch("");
        java.lang.String str18 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.tieBreaker((float) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        float float23 = multiMatchQueryBuilder20.boost();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder20.zeroTermsQuery(zeroTermsQuery24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder25.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str30 = multiMatchQueryBuilder25.getfuzzyRewrite();
        java.lang.String str31 = multiMatchQueryBuilder25.fuzzyRewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 1.0f + "'", float23 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str30, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str31, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test06520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06520");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.useDisMax(true);
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        java.lang.String str22 = multiMatchQueryBuilder21.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type23 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type24 = type23.matchQueryType();
        float float25 = type23.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.type(type23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery27 = multiMatchQueryBuilder26.zeroTermsQuery;
        java.lang.Boolean boolean28 = multiMatchQueryBuilder26.useDisMax;
        java.lang.String str29 = multiMatchQueryBuilder26.rewrite;
        multiMatchQueryBuilder26.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder26.lenient = true;
        multiMatchQueryBuilder26.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder36.rewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"\\\"\\n  }\\n}\",\n    \"rewrite\" : \"\",\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type23.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type24.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(zeroTermsQuery27);
        org.junit.Assert.assertNull(boolean28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
    }

    @Test
    public void test06521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06521");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.maxExpansions((int) (short) 10);
        java.lang.Object obj13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.type(obj13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap28 = multiMatchQueryBuilder27.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder27.zeroTermsQuery(zeroTermsQuery29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder27.lenient(false);
        java.lang.Object obj33 = multiMatchQueryBuilder32.gettext();
        java.lang.Integer int34 = multiMatchQueryBuilder32.getslop();
        multiMatchQueryBuilder32.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder32.slop((int) (byte) 100);
        multiMatchQueryBuilder32.tieBreaker = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder18.fuzziness((java.lang.Object) multiMatchQueryBuilder32);
        java.lang.String str42 = multiMatchQueryBuilder41.getanalyzer();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(strObjectFloatHashMap28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + "multi_match" + "'", obj33, "multi_match");
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test06522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06522");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder17.setuseDisMax((java.lang.Boolean) true);
        multiMatchQueryBuilder17.setprefixLength((java.lang.Integer) 0);
        org.elasticsearch.common.xcontent.XContentType xContentType22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference23 = multiMatchQueryBuilder17.buildAsBytes(xContentType22);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test06523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06523");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.maxExpansions((int) (short) 10);
        java.lang.Float float13 = multiMatchQueryBuilder12.getcutoffFrequency();
        multiMatchQueryBuilder12.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.Operator operator16 = null;
        multiMatchQueryBuilder12.operator = operator16;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float13);
    }

    @Test
    public void test06524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06524");
        java.lang.Object obj0 = null;
        java.lang.String[] strArray4 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder5 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray4);
        org.elasticsearch.index.query.Operator operator6 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder5.operator(operator6);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder5.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap10 = multiMatchQueryBuilder9.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder9.zeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder9.lenient(false);
        multiMatchQueryBuilder9.setcutoffFrequency((java.lang.Float) 1.0f);
        java.lang.Integer int17 = multiMatchQueryBuilder9.maxExpansions;
        java.lang.String str18 = multiMatchQueryBuilder9.minimumShouldMatch;
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException28 = multiMatchQueryBuilder23.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.cutoffFrequency((float) (byte) 100);
        java.lang.String str31 = multiMatchQueryBuilder23.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder23.queryName("");
        multiMatchQueryBuilder33.setslop((java.lang.Integer) 0);
        java.lang.String[] strArray39 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder9, strArray39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj0, strArray39);
        org.elasticsearch.index.query.Operator operator44 = null;
        multiMatchQueryBuilder43.operator = operator44;
        java.lang.Boolean boolean46 = multiMatchQueryBuilder43.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type47 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        float float48 = type47.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type49 = type47.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder43.type(type47);
        multiMatchQueryBuilder43.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNull(strObjectFloatHashMap10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(queryValidationException28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNull(boolean46);
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type47.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + 1.0f + "'", float48 == 1.0f);
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type49.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
    }

    @Test
    public void test06525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06525");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery21);
        java.lang.Boolean boolean23 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder4.maxExpansions((int) (short) 0);
        org.elasticsearch.index.query.Operator operator26 = multiMatchQueryBuilder4.getoperator();
        java.lang.String str27 = multiMatchQueryBuilder4.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder4.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(operator26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "multi_match" + "'", str27, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test06526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06526");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type16 = type15.matchQueryType();
        float float17 = type15.tieBreaker();
        float float18 = type15.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) type15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) -1);
        multiMatchQueryBuilder21.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"slop\" : 0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str24 = multiMatchQueryBuilder21.minimumShouldMatch;
        multiMatchQueryBuilder21.settieBreaker((java.lang.Float) 52.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.slop((int) '#');
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap29 = multiMatchQueryBuilder28.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 10,\n    \"rewrite\" : \"\",\n    \"tieBreaker\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type15.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type16.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(strObjectFloatHashMap29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test06527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06527");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.String str9 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int12 = multiMatchQueryBuilder11.maxExpansions;
        multiMatchQueryBuilder11.settieBreaker((java.lang.Float) 100.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multi_match" + "'", str9, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test06528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06528");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery19);
        multiMatchQueryBuilder20.useDisMax = true;
        multiMatchQueryBuilder20.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str25 = multiMatchQueryBuilder20.getminimumShouldMatch();
        org.elasticsearch.index.query.Operator operator26 = null;
        multiMatchQueryBuilder20.setoperator(operator26);
        multiMatchQueryBuilder20.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder20.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList32 = multiMatchQueryBuilder20.getfields();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(strList32);
    }

    @Test
    public void test06529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06529");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap13;
        multiMatchQueryBuilder4.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = multiMatchQueryBuilder4.type;
        java.lang.Float float18 = multiMatchQueryBuilder4.tieBreaker;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(type17);
        org.junit.Assert.assertNull(float18);
    }

    @Test
    public void test06530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06530");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.boost((float) 10L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.rewrite("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness22 = multiMatchQueryBuilder8.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder8.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.elasticsearch.index.query.Operator operator26 = multiMatchQueryBuilder25.getoperator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(fuzziness22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(operator26);
    }

    @Test
    public void test06531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06531");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder8.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = multiMatchQueryBuilder8.getfuzziness();
        java.lang.String str14 = multiMatchQueryBuilder8.rewrite;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        multiMatchQueryBuilder8.zeroTermsQuery = zeroTermsQuery15;
        multiMatchQueryBuilder8.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str19 = multiMatchQueryBuilder8.getrewrite();
        java.lang.String str20 = multiMatchQueryBuilder8.getName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder8.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(fuzziness13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNull(zeroTermsQuery21);
    }

    @Test
    public void test06532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06532");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.common.unit.Fuzziness fuzziness10 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness10;
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.tieBreaker((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder14.setcutoffFrequency((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.tieBreaker((float) 'a');
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException32 = multiMatchQueryBuilder27.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder27.cutoffFrequency((float) (byte) 100);
        java.lang.String str35 = multiMatchQueryBuilder27.getanalyzer();
        multiMatchQueryBuilder27.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str38 = multiMatchQueryBuilder27.fuzzyRewrite;
        java.lang.Integer int39 = multiMatchQueryBuilder27.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder27.boost((float) (short) 1);
        java.lang.String[] strArray45 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray45);
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.operator(operator47);
        java.lang.Boolean boolean49 = multiMatchQueryBuilder46.getlenient();
        multiMatchQueryBuilder46.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder46.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness54 = multiMatchQueryBuilder53.fuzziness;
        multiMatchQueryBuilder53.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder53.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray62 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray62);
        org.elasticsearch.index.query.Operator operator64 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder63.operator(operator64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder63.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder67.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness72 = multiMatchQueryBuilder67.getfuzziness();
        multiMatchQueryBuilder53.fuzziness = fuzziness72;
        multiMatchQueryBuilder41.setfuzziness(fuzziness72);
        multiMatchQueryBuilder22.fuzziness = fuzziness72;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(queryValidationException32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNull(fuzziness54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(fuzziness72);
    }

    @Test
    public void test06533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06533");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.tieBreaker((-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField18 = type17.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type19 = type17.matchQueryType();
        org.elasticsearch.common.ParseField parseField20 = type17.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.type(type17);
        org.elasticsearch.common.ParseField parseField22 = type17.parseField();
        float float23 = type17.tieBreaker();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type17.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type19.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(parseField22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 1.0f + "'", float23 == 1.0f);
    }

    @Test
    public void test06534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06534");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        java.lang.Integer int21 = multiMatchQueryBuilder20.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.useDisMax(false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test06535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06535");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder17.settype(type20);
        float float22 = type20.tieBreaker();
        org.elasticsearch.common.ParseField parseField23 = type20.parseField();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type20.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 0.0f + "'", float22 == 0.0f);
        org.junit.Assert.assertNotNull(parseField23);
    }

    @Test
    public void test06536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06536");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        java.lang.Boolean boolean19 = multiMatchQueryBuilder4.lenient;
        java.lang.String str20 = multiMatchQueryBuilder4.rewrite;
        java.lang.String str21 = multiMatchQueryBuilder4.minimumShouldMatch;
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 0);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 10.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness26 = multiMatchQueryBuilder4.fuzziness;
        java.lang.String str27 = multiMatchQueryBuilder4.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(fuzziness26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test06537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06537");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        org.elasticsearch.index.query.Operator operator11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.operator(operator11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.prefixLength(100);
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder14.fields;
        multiMatchQueryBuilder14.setprefixLength((java.lang.Integer) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder14.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.slop((int) ' ');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.zeroTermsQuery(zeroTermsQuery22);
        java.lang.Boolean boolean24 = multiMatchQueryBuilder23.getuseDisMax();
        multiMatchQueryBuilder23.useDisMax = false;
        multiMatchQueryBuilder23.tieBreaker = 1.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(boolean24);
    }

    @Test
    public void test06538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06538");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder19.setcutoffFrequency((java.lang.Float) 97.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test06539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06539");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.String str9 = multiMatchQueryBuilder8.getWriteableName();
        multiMatchQueryBuilder8.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str12 = multiMatchQueryBuilder8.getWriteableName();
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = multiMatchQueryBuilder21.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.zeroTermsQuery(zeroTermsQuery23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.lenient(false);
        java.lang.Object obj27 = multiMatchQueryBuilder26.gettext();
        java.lang.Integer int28 = multiMatchQueryBuilder26.getslop();
        multiMatchQueryBuilder26.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder26.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException33 = multiMatchQueryBuilder32.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder32.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder32.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        multiMatchQueryBuilder37.type = type38;
        multiMatchQueryBuilder8.type = type38;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery41 = multiMatchQueryBuilder8.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multi_match" + "'", str9, "multi_match");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "multi_match" + "'", str12, "multi_match");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(strObjectFloatHashMap22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + "multi_match" + "'", obj27, "multi_match");
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(queryValidationException33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNull(zeroTermsQuery41);
    }

    @Test
    public void test06540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06540");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int16 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = multiMatchQueryBuilder4.getfieldsBoosts();
        java.lang.String str20 = multiMatchQueryBuilder4.getminimumShouldMatch();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(strObjectFloatHashMap19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}" + "'", str20, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test06541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06541");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.prefixLength = 10;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.setfieldsBoosts(strObjectFloatHashMap13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("", (float) (byte) 100);
        java.lang.String str18 = multiMatchQueryBuilder17.getminimumShouldMatch();
        org.elasticsearch.index.query.Operator operator19 = multiMatchQueryBuilder17.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.boost((float) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.fuzzyRewrite("multi_match");
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException33 = multiMatchQueryBuilder28.validate();
        java.lang.Integer int34 = multiMatchQueryBuilder28.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = multiMatchQueryBuilder28.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder28.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        float float39 = multiMatchQueryBuilder38.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder38.slop((int) (short) 10);
        multiMatchQueryBuilder38.setcutoffFrequency((java.lang.Float) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder23.type((java.lang.Object) multiMatchQueryBuilder38);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multimatch\" : {?    \"query\" : \"multi_match\",?    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],?    \"slop\" : 10,?    \"cutofffrequency\" : 100.0,?    \"boost\" : 1.0?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(operator19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(queryValidationException33);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNull(zeroTermsQuery35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 1.0f + "'", float39 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
    }

    @Test
    public void test06542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06542");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String str16 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.useDisMax(true);
        float float21 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) (-1));
        java.lang.String str24 = multiMatchQueryBuilder4.analyzer;
        java.lang.String str25 = multiMatchQueryBuilder4.queryName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 1.0f + "'", float21 == 1.0f);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test06543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06543");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str20 = multiMatchQueryBuilder19.rewrite;
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        multiMatchQueryBuilder25.operator = operator26;
        org.elasticsearch.common.unit.Fuzziness fuzziness28 = multiMatchQueryBuilder25.getfuzziness();
        multiMatchQueryBuilder25.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.Operator operator31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.operator(operator31);
        java.lang.String[] strArray36 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray36);
        org.elasticsearch.index.query.Operator operator38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.operator(operator38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder37.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException42 = multiMatchQueryBuilder37.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder37.cutoffFrequency((float) (byte) 100);
        float float45 = multiMatchQueryBuilder37.boost();
        multiMatchQueryBuilder37.setanalyzer("");
        java.lang.Boolean boolean48 = multiMatchQueryBuilder37.getuseDisMax();
        java.lang.String str49 = multiMatchQueryBuilder37.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder37.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray55 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray55);
        org.elasticsearch.index.query.Operator operator57 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.operator(operator57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder56.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder60.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder60.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness65 = multiMatchQueryBuilder60.getfuzziness();
        multiMatchQueryBuilder51.fuzziness = fuzziness65;
        multiMatchQueryBuilder25.fuzziness = fuzziness65;
        multiMatchQueryBuilder19.setfuzziness(fuzziness65);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder19.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str71 = multiMatchQueryBuilder19.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNull(fuzziness28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(queryValidationException42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + 1.0f + "'", float45 == 1.0f);
        org.junit.Assert.assertNull(boolean48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(fuzziness65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str71, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test06544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06544");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness22 = multiMatchQueryBuilder21.getfuzziness();
        java.lang.Integer int23 = multiMatchQueryBuilder21.getmaxExpansions();
        float float24 = multiMatchQueryBuilder21.boost();
        multiMatchQueryBuilder21.lenient = false;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(fuzziness22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 1.0f + "'", float24 == 1.0f);
    }

    @Test
    public void test06545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06545");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.tieBreaker((float) (short) 0);
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) true);
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        multiMatchQueryBuilder10.slop = 10;
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder10.tieBreaker = 52.0f;
        java.lang.Float float20 = multiMatchQueryBuilder10.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.slop((int) 'a');
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(float20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test06546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06546");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.lang.String[] strArray4 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder5 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray4);
        org.elasticsearch.index.query.Operator operator6 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder5.operator(operator6);
        multiMatchQueryBuilder5.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder5.operator(operator10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.maxExpansions((int) (short) 10);
        java.lang.Boolean boolean14 = multiMatchQueryBuilder13.getlenient();
        multiMatchQueryBuilder13.cutoffFrequency = 0.0f;
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean28 = multiMatchQueryBuilder25.useDisMax;
        java.lang.String[] strArray32 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray32);
        org.elasticsearch.index.query.Operator operator34 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.operator(operator34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder33.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException38 = multiMatchQueryBuilder33.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder33.cutoffFrequency((float) (byte) 100);
        java.lang.String str41 = multiMatchQueryBuilder33.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder33.queryName("");
        multiMatchQueryBuilder43.setslop((java.lang.Integer) 0);
        java.lang.String[] strArray49 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean28, strArray49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray49);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder54 = org.elasticsearch.common.xcontent.XContentBuilder.builder(xContent0, strArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(boolean28);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(queryValidationException38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray49);
    }

    @Test
    public void test06547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06547");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException25 = multiMatchQueryBuilder20.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap28 = multiMatchQueryBuilder27.getfieldsBoosts();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap29 = null;
        multiMatchQueryBuilder27.fieldsBoosts = strObjectFloatHashMap29;
        java.lang.Boolean boolean31 = multiMatchQueryBuilder27.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type32 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder27.settype(type32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder13.type(type32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder34.getPROTOTYPE();
        multiMatchQueryBuilder34.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder34.prefixLength((int) (byte) -1);
        java.lang.String[] strArray43 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray43);
        org.elasticsearch.index.query.Operator operator45 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.operator(operator45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder44.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException49 = multiMatchQueryBuilder44.validate();
        java.lang.Integer int50 = multiMatchQueryBuilder44.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery51 = multiMatchQueryBuilder44.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder44.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        multiMatchQueryBuilder44.maxExpansions = 100;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery57 = multiMatchQueryBuilder44.getzeroTermsQuery();
        java.lang.Boolean boolean58 = multiMatchQueryBuilder44.useDisMax;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap59 = multiMatchQueryBuilder44.fieldsBoosts;
        multiMatchQueryBuilder39.fieldsBoosts = strObjectFloatHashMap59;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(queryValidationException25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(strObjectFloatHashMap28);
        org.junit.Assert.assertNull(boolean31);
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type32.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNull(queryValidationException49);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNull(zeroTermsQuery51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(zeroTermsQuery57);
        org.junit.Assert.assertNull(boolean58);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap59);
    }

    @Test
    public void test06548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06548");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        java.lang.String str14 = multiMatchQueryBuilder12.getfuzzyRewrite();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        multiMatchQueryBuilder19.minimumShouldMatch = "hi!";
        java.lang.Float float26 = multiMatchQueryBuilder19.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type28 = type27.matchQueryType();
        float float29 = type27.tieBreaker();
        multiMatchQueryBuilder19.type = type27;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder12.type(type27);
        multiMatchQueryBuilder31.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str34 = multiMatchQueryBuilder31.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str34, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test06549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06549");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type8 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type9 = type8.matchQueryType();
        float float10 = type8.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}", (float) 100L);
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap24 = multiMatchQueryBuilder23.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.zeroTermsQuery(zeroTermsQuery25);
        multiMatchQueryBuilder23.setanalyzer("hi!");
        java.lang.Integer int29 = multiMatchQueryBuilder23.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder23.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder31.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.String str34 = multiMatchQueryBuilder33.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = multiMatchQueryBuilder33.zeroTermsQuery;
        java.lang.String[] strArray39 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray39);
        org.elasticsearch.index.query.Operator operator41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.operator(operator41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException45 = multiMatchQueryBuilder40.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder40.cutoffFrequency((float) (byte) 100);
        java.lang.String str48 = multiMatchQueryBuilder40.getanalyzer();
        multiMatchQueryBuilder40.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str51 = multiMatchQueryBuilder40.fuzzyRewrite;
        java.lang.Integer int52 = multiMatchQueryBuilder40.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder40.boost((float) (short) 1);
        java.lang.String[] strArray58 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray58);
        org.elasticsearch.index.query.Operator operator60 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder59.operator(operator60);
        java.lang.Boolean boolean62 = multiMatchQueryBuilder59.getlenient();
        multiMatchQueryBuilder59.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder59.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness67 = multiMatchQueryBuilder66.fuzziness;
        multiMatchQueryBuilder66.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder66.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray75 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray75);
        org.elasticsearch.index.query.Operator operator77 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder76.operator(operator77);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder76.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder80.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder80.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness85 = multiMatchQueryBuilder80.getfuzziness();
        multiMatchQueryBuilder66.fuzziness = fuzziness85;
        multiMatchQueryBuilder54.setfuzziness(fuzziness85);
        multiMatchQueryBuilder33.fuzziness = fuzziness85;
        multiMatchQueryBuilder32.setfuzziness(fuzziness85);
        multiMatchQueryBuilder14.fuzziness = fuzziness85;
        java.lang.Object obj91 = multiMatchQueryBuilder14.gettext();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type8.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type9.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(strObjectFloatHashMap24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}" + "'", str34, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.junit.Assert.assertNull(zeroTermsQuery35);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(queryValidationException45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNull(boolean62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNull(fuzziness67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNotNull(fuzziness85);
        org.junit.Assert.assertEquals("'" + obj91 + "' != '" + "multi_match" + "'", obj91, "multi_match");
    }

    @Test
    public void test06550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06550");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        multiMatchQueryBuilder11.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder25.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness30 = multiMatchQueryBuilder25.getfuzziness();
        multiMatchQueryBuilder11.fuzziness = fuzziness30;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap32 = multiMatchQueryBuilder11.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder11.slop(32);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(fuzziness30);
        org.junit.Assert.assertNull(strObjectFloatHashMap32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
    }

    @Test
    public void test06551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06551");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setrewrite("");
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        multiMatchQueryBuilder20.setzeroTermsQuery(zeroTermsQuery21);
        multiMatchQueryBuilder20.useDisMax = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder20.tieBreaker(0.0f);
        java.lang.String[] strArray30 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray30);
        org.elasticsearch.index.query.Operator operator32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.operator(operator32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException36 = multiMatchQueryBuilder31.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder31.cutoffFrequency((float) (byte) 100);
        java.lang.String str39 = multiMatchQueryBuilder31.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder31.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder31.tieBreaker((-1.0f));
        multiMatchQueryBuilder31.setminimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder20.fuzziness((java.lang.Object) multiMatchQueryBuilder31);
        multiMatchQueryBuilder20.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(queryValidationException36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
    }

    @Test
    public void test06552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06552");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder4.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.tieBreaker((float) (short) 10);
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder23.fuzziness;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(fuzziness24);
    }

    @Test
    public void test06553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06553");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.slop((int) (short) 1);
        multiMatchQueryBuilder23.lenient = false;
        java.util.List<java.lang.String> strList26 = multiMatchQueryBuilder23.getfields();
        java.lang.Integer int27 = multiMatchQueryBuilder23.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder23.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness30 = multiMatchQueryBuilder29.getfuzziness();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(fuzziness30);
    }

    @Test
    public void test06554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06554");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion15 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.CAMELCASE;
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion15);
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.fuzziness((java.lang.Object) fieldCaseConversion15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder20.getfuzzyRewrite();
        java.lang.Float float22 = multiMatchQueryBuilder20.tieBreaker;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + fieldCaseConversion15 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.CAMELCASE + "'", fieldCaseConversion15.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.CAMELCASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(float22);
    }

    @Test
    public void test06555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06555");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean21 = multiMatchQueryBuilder20.getlenient();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = multiMatchQueryBuilder20.getzeroTermsQuery();
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException32 = multiMatchQueryBuilder27.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder27.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder27.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder27.fuzzyRewrite("hi!");
        multiMatchQueryBuilder27.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery41 = null;
        multiMatchQueryBuilder27.zeroTermsQuery = zeroTermsQuery41;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder27.slop((int) (short) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery45 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder27.zeroTermsQuery(zeroTermsQuery45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder46.getPROTOTYPE();
        org.elasticsearch.common.unit.Fuzziness fuzziness48 = multiMatchQueryBuilder47.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder47.tieBreaker(52.0f);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap51 = multiMatchQueryBuilder50.getfieldsBoosts();
        multiMatchQueryBuilder20.setfieldsBoosts(strObjectFloatHashMap51);
        java.lang.String str53 = multiMatchQueryBuilder20.getanalyzer();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNull(zeroTermsQuery22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(queryValidationException32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(fuzziness48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
// flaky:         org.junit.Assert.assertNotNull(strObjectFloatHashMap51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str53, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test06556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06556");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setrewrite("");
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.lenient(false);
        java.lang.String str20 = multiMatchQueryBuilder19.minimumShouldMatch;
        multiMatchQueryBuilder19.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"fuzziness\" : \"BEST_FIELDS\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder19.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.boost((float) (-1));
        java.lang.String str27 = multiMatchQueryBuilder26.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"\\\",\\n    \\\"fuzziness\\\" : \\\"BEST_FIELDS\\\",\\n    \\\"cutoff_frequency\\\" : -1.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"useDisMax\\\" : true,\\n    \\\"cutoffFrequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : -1.0\n  }\n}" + "'", str27, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"\\\",\\n    \\\"fuzziness\\\" : \\\"BEST_FIELDS\\\",\\n    \\\"cutoff_frequency\\\" : -1.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"useDisMax\\\" : true,\\n    \\\"cutoffFrequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : -1.0\n  }\n}");
    }

    @Test
    public void test06557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06557");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField11 = type10.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type12 = type10.matchQueryType();
        multiMatchQueryBuilder4.type = type10;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery14);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type10.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type12.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
    }

    @Test
    public void test06558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06558");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.index.query.QueryValidationException queryValidationException21 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", (float) (-1));
        java.lang.Integer int25 = multiMatchQueryBuilder24.getmaxExpansions();
        java.lang.String[] strArray29 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray29);
        org.elasticsearch.index.query.Operator operator31 = null;
        multiMatchQueryBuilder30.operator = operator31;
        org.elasticsearch.common.unit.Fuzziness fuzziness33 = multiMatchQueryBuilder30.getfuzziness();
        multiMatchQueryBuilder30.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder30.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap39 = null;
        multiMatchQueryBuilder30.fieldsBoosts = strObjectFloatHashMap39;
        multiMatchQueryBuilder30.cutoffFrequency = (-1.0f);
        java.lang.String[] strArray46 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray46);
        org.elasticsearch.index.query.Operator operator48 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.operator(operator48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder47.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException52 = multiMatchQueryBuilder47.validate();
        java.lang.Integer int53 = multiMatchQueryBuilder47.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery54 = multiMatchQueryBuilder47.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder47.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder47.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder47.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder47.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean64 = multiMatchQueryBuilder63.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder63.boost((float) (-1));
        java.lang.String str67 = multiMatchQueryBuilder66.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder66.boost(0.0f);
        multiMatchQueryBuilder69.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery72 = multiMatchQueryBuilder69.getzeroTermsQuery();
        java.lang.String[] strArray76 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray76);
        org.elasticsearch.index.query.Operator operator78 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder77.operator(operator78);
        java.lang.Boolean boolean80 = multiMatchQueryBuilder77.getlenient();
        multiMatchQueryBuilder77.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder77.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder77.tieBreaker((float) (-1));
        java.lang.Integer int87 = multiMatchQueryBuilder86.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = multiMatchQueryBuilder86.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap91 = multiMatchQueryBuilder86.getfieldsBoosts();
        multiMatchQueryBuilder69.setfieldsBoosts(strObjectFloatHashMap91);
        multiMatchQueryBuilder30.setfieldsBoosts(strObjectFloatHashMap91);
        multiMatchQueryBuilder24.setfieldsBoosts(strObjectFloatHashMap91);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(queryValidationException21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNull(fuzziness33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(queryValidationException52);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNull(zeroTermsQuery54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNull(boolean64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNull(zeroTermsQuery72);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNull(boolean80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertNull(int87);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder90);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap91);
    }

    @Test
    public void test06559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06559");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        java.util.List<java.lang.String> strList21 = multiMatchQueryBuilder20.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentType xContentType24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference25 = multiMatchQueryBuilder20.buildAsBytes(xContentType24);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test06560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06560");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder20.fuzziness;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = multiMatchQueryBuilder20.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params26 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder24.doXContent(xContentBuilder25, params26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNull(strObjectFloatHashMap22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(params26);
    }

    @Test
    public void test06561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06561");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        java.lang.String str20 = multiMatchQueryBuilder17.fuzzyRewrite;
        multiMatchQueryBuilder17.minimumShouldMatch = "multi_match";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = multiMatchQueryBuilder17.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder17.type(type24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder17.useDisMax(true);
        java.lang.String str28 = multiMatchQueryBuilder17.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder17.getPROTOTYPE();
        multiMatchQueryBuilder29.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"prefixLength\" : 32,\n    \"maxExpansions\" : 10,\n    \"tieBreaker\" : 100.0,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(zeroTermsQuery23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "multi_match" + "'", str28, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test06562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06562");
        java.lang.String[] strArray4 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder5 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray4);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray4);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.String str8 = multiMatchQueryBuilder7.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder7.zeroTermsQuery;
        java.lang.String[] strArray13 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray13);
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.operator(operator15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException19 = multiMatchQueryBuilder14.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.cutoffFrequency((float) (byte) 100);
        java.lang.String str22 = multiMatchQueryBuilder14.getanalyzer();
        multiMatchQueryBuilder14.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str25 = multiMatchQueryBuilder14.fuzzyRewrite;
        java.lang.Integer int26 = multiMatchQueryBuilder14.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder14.boost((float) (short) 1);
        java.lang.String[] strArray32 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray32);
        org.elasticsearch.index.query.Operator operator34 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.operator(operator34);
        java.lang.Boolean boolean36 = multiMatchQueryBuilder33.getlenient();
        multiMatchQueryBuilder33.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder33.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness41 = multiMatchQueryBuilder40.fuzziness;
        multiMatchQueryBuilder40.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder40.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray49 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray49);
        org.elasticsearch.index.query.Operator operator51 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.operator(operator51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder50.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder54.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness59 = multiMatchQueryBuilder54.getfuzziness();
        multiMatchQueryBuilder40.fuzziness = fuzziness59;
        multiMatchQueryBuilder28.setfuzziness(fuzziness59);
        multiMatchQueryBuilder7.fuzziness = fuzziness59;
        multiMatchQueryBuilder6.fuzziness = fuzziness59;
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}" + "'", str8, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(queryValidationException19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(boolean36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(fuzziness41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(fuzziness59);
    }

    @Test
    public void test06563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06563");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.maxExpansions((-1));
        java.lang.String str16 = multiMatchQueryBuilder15.getNAME();
        java.lang.String str17 = multiMatchQueryBuilder15.fuzzyRewrite;
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        multiMatchQueryBuilder22.minimumShouldMatch = "hi!";
        java.lang.Float float29 = multiMatchQueryBuilder22.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type31 = type30.matchQueryType();
        float float32 = type30.tieBreaker();
        multiMatchQueryBuilder22.type = type30;
        org.elasticsearch.index.search.MatchQuery.Type type34 = type30.matchQueryType();
        org.elasticsearch.common.ParseField parseField35 = type30.parseField();
        multiMatchQueryBuilder15.settype(type30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder15.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "multi_match" + "'", str16, "multi_match");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(float29);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type30.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type31.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 0.0f + "'", float32 == 0.0f);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type34.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
    }

    @Test
    public void test06564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06564");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.operator(operator16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.rewrite("hi!");
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder19.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder19.useDisMax(false);
        multiMatchQueryBuilder19.setlenient((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test06565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06565");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        java.lang.Float float13 = multiMatchQueryBuilder4.getcutoffFrequency();
        org.elasticsearch.index.query.Operator operator14 = null;
        multiMatchQueryBuilder4.setoperator(operator14);
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type25 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type26 = type25.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder22.type(type25);
        org.elasticsearch.common.ParseField parseField28 = type25.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder4.type(type25);
        java.lang.Integer int30 = multiMatchQueryBuilder29.getslop();
        org.elasticsearch.common.unit.Fuzziness fuzziness31 = multiMatchQueryBuilder29.getfuzziness();
        multiMatchQueryBuilder29.setslop((java.lang.Integer) 0);
        java.lang.String str34 = multiMatchQueryBuilder29.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type25.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type26.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(parseField28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNull(fuzziness31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 0,\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str34, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 0,\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test06566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06566");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = null;
        multiMatchQueryBuilder13.fuzziness = fuzziness16;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.rewrite("");
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        java.lang.Integer int22 = multiMatchQueryBuilder21.slop;
        java.lang.Integer int23 = multiMatchQueryBuilder21.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(int23);
    }

    @Test
    public void test06567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06567");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.gettype();
        multiMatchQueryBuilder10.tieBreaker = 1.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.slop(1);
        java.lang.String str16 = multiMatchQueryBuilder10.getrewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test06568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06568");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setrewrite("");
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.operator(operator15);
        java.lang.String str17 = multiMatchQueryBuilder16.queryName();
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        java.lang.Boolean boolean25 = multiMatchQueryBuilder22.getlenient();
        org.elasticsearch.common.unit.Fuzziness fuzziness26 = multiMatchQueryBuilder22.getfuzziness();
        java.lang.String str27 = multiMatchQueryBuilder22.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray33 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray33);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder38.setanalyzer("multi_match");
        org.elasticsearch.index.query.QueryValidationException queryValidationException43 = multiMatchQueryBuilder38.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery44 = multiMatchQueryBuilder38.zeroTermsQuery;
        java.lang.String str45 = multiMatchQueryBuilder38.getrewrite();
        multiMatchQueryBuilder38.lenient = true;
        java.lang.String[] strArray51 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray51);
        org.elasticsearch.index.query.Operator operator53 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.operator(operator53);
        java.lang.String str55 = multiMatchQueryBuilder52.getWriteableName();
        java.lang.Boolean boolean56 = multiMatchQueryBuilder52.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder52.getPROTOTYPE();
        multiMatchQueryBuilder52.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray63 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray63);
        org.elasticsearch.index.query.Operator operator65 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.operator(operator65);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder64.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException69 = multiMatchQueryBuilder64.validate();
        java.lang.Integer int70 = multiMatchQueryBuilder64.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery71 = multiMatchQueryBuilder64.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder64.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder64.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder64.boost((float) 0);
        java.lang.String str79 = multiMatchQueryBuilder64.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap80 = multiMatchQueryBuilder64.fieldsBoosts;
        multiMatchQueryBuilder52.fieldsBoosts = strObjectFloatHashMap80;
        multiMatchQueryBuilder38.fieldsBoosts = strObjectFloatHashMap80;
        multiMatchQueryBuilder29.fieldsBoosts = strObjectFloatHashMap80;
        multiMatchQueryBuilder16.setfieldsBoosts(strObjectFloatHashMap80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder16.prefixLength((int) (short) 1);
        multiMatchQueryBuilder16.lenient = true;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(boolean25);
        org.junit.Assert.assertNull(fuzziness26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "multi_match" + "'", str27, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(queryValidationException43);
        org.junit.Assert.assertNull(zeroTermsQuery44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "multi_match" + "'", str55, "multi_match");
        org.junit.Assert.assertNull(boolean56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNull(queryValidationException69);
        org.junit.Assert.assertNull(int70);
        org.junit.Assert.assertNull(zeroTermsQuery71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
    }

    @Test
    public void test06569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06569");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.fuzzyRewrite("hi!");
        java.lang.Integer int18 = multiMatchQueryBuilder17.getslop();
        multiMatchQueryBuilder17.maxExpansions = 1;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(int18);
    }

    @Test
    public void test06570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06570");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Object obj10 = multiMatchQueryBuilder4.text;
        java.lang.String str11 = multiMatchQueryBuilder4.getminimumShouldMatch();
        multiMatchQueryBuilder4.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.slop((int) ' ');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.zeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder15.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"rewrite\" : \"multi_match\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "multi_match" + "'", obj10, "multi_match");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test06571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06571");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        java.lang.String str19 = multiMatchQueryBuilder18.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        multiMatchQueryBuilder18.zeroTermsQuery = zeroTermsQuery20;
        multiMatchQueryBuilder18.setprefixLength((java.lang.Integer) 100);
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder18.getfuzziness();
        multiMatchQueryBuilder18.setlenient((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder18.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder18.setlenient((java.lang.Boolean) false);
        multiMatchQueryBuilder18.setlenient((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str19, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(fuzziness24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test06572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06572");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"slop\" : 0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float24 = multiMatchQueryBuilder23.gettieBreaker();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float24);
    }

    @Test
    public void test06573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06573");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.boost((float) 10L);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.QueryValidationException queryValidationException21 = multiMatchQueryBuilder8.validate();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertNull(queryValidationException21);
    }

    @Test
    public void test06574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06574");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Object obj10 = multiMatchQueryBuilder4.text;
        float float11 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float14 = multiMatchQueryBuilder4.gettieBreaker();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException24 = multiMatchQueryBuilder19.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.cutoffFrequency((float) (byte) 100);
        float float27 = multiMatchQueryBuilder19.boost();
        multiMatchQueryBuilder19.setanalyzer("");
        java.lang.Boolean boolean30 = multiMatchQueryBuilder19.getuseDisMax();
        java.lang.String str31 = multiMatchQueryBuilder19.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder19.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray37 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray37);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.operator(operator39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder38.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder42.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness47 = multiMatchQueryBuilder42.getfuzziness();
        multiMatchQueryBuilder33.fuzziness = fuzziness47;
        multiMatchQueryBuilder4.setfuzziness(fuzziness47);
        java.lang.String[] strArray54 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray54);
        java.lang.String[] strArray60 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray54, strArray60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) fuzziness47, strArray60);
        org.elasticsearch.index.query.Operator operator64 = null;
        multiMatchQueryBuilder63.operator = operator64;
        java.util.List<java.lang.String> strList66 = multiMatchQueryBuilder63.getfields();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "multi_match" + "'", obj10, "multi_match");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 1.0f + "'", float11 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(queryValidationException24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(fuzziness47);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strList66);
    }

    @Test
    public void test06575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06575");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        org.elasticsearch.index.query.Operator operator11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.operator(operator11);
        java.lang.Float float13 = multiMatchQueryBuilder12.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.lenient(false);
        org.elasticsearch.common.xcontent.XContentType xContentType18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference19 = multiMatchQueryBuilder17.buildAsBytes(xContentType18);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test06576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06576");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        java.lang.String str9 = multiMatchQueryBuilder4.rewrite;
        java.lang.Boolean boolean10 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setrewrite("");
        multiMatchQueryBuilder4.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.slop((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"analyzer\" : \"\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test06577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06577");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.lang.Integer int8 = multiMatchQueryBuilder4.getmaxExpansions();
        multiMatchQueryBuilder4.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder4.getName();
        java.lang.Boolean boolean14 = multiMatchQueryBuilder4.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertEquals("'" + boolean14 + "' != '" + false + "'", boolean14, false);
    }

    @Test
    public void test06578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06578");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.String str17 = multiMatchQueryBuilder4.getminimumShouldMatch();
        multiMatchQueryBuilder4.slop = 1;
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = multiMatchQueryBuilder21.gettype();
        multiMatchQueryBuilder21.minimumShouldMatch = "multi_match";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(type22);
    }

    @Test
    public void test06579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06579");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder20.fuzziness;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = null;
        multiMatchQueryBuilder20.fieldsBoosts = strObjectFloatHashMap22;
        multiMatchQueryBuilder20.setprefixLength((java.lang.Integer) 0);
        java.lang.Object obj26 = multiMatchQueryBuilder20.gettext();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + "multi_match" + "'", obj26, "multi_match");
    }

    @Test
    public void test06580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06580");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        java.lang.Float float13 = multiMatchQueryBuilder4.gettieBreaker();
        java.lang.Integer int14 = multiMatchQueryBuilder4.getprefixLength();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test06581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06581");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        java.lang.Integer int14 = multiMatchQueryBuilder13.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder13.boost((float) 32);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test06582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06582");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Integer int15 = multiMatchQueryBuilder14.getprefixLength();
        java.lang.Object obj16 = null;
        boolean boolean17 = multiMatchQueryBuilder14.equals(obj16);
        java.lang.Boolean boolean18 = multiMatchQueryBuilder14.lenient;
        java.lang.Object obj19 = multiMatchQueryBuilder14.text;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + "multi_match" + "'", obj19, "multi_match");
    }

    @Test
    public void test06583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06583");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.String str16 = multiMatchQueryBuilder4.getWriteableName();
        multiMatchQueryBuilder4.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder4.maxExpansions = 1;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "multi_match" + "'", str16, "multi_match");
    }

    @Test
    public void test06584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06584");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder24.setoperator(operator29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder24.zeroTermsQuery = zeroTermsQuery31;
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        multiMatchQueryBuilder37.maxExpansions = 0;
        java.lang.Boolean boolean40 = multiMatchQueryBuilder37.lenient;
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap50 = multiMatchQueryBuilder49.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.minimumShouldMatch("multi_match");
        java.lang.String str53 = multiMatchQueryBuilder52.toString();
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.Operator operator59 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.operator(operator59);
        java.lang.String str61 = multiMatchQueryBuilder58.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness62 = multiMatchQueryBuilder58.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder58.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.cutoffFrequency((float) '4');
        boolean boolean67 = multiMatchQueryBuilder52.equals((java.lang.Object) multiMatchQueryBuilder64);
        multiMatchQueryBuilder64.setmaxExpansions((java.lang.Integer) (-1));
        multiMatchQueryBuilder64.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder37.fuzziness((java.lang.Object) multiMatchQueryBuilder64);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap73 = multiMatchQueryBuilder37.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(boolean40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(strObjectFloatHashMap50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str53, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "multi_match" + "'", str61, "multi_match");
        org.junit.Assert.assertNull(fuzziness62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNull(strObjectFloatHashMap73);
    }

    @Test
    public void test06585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06585");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.tieBreaker((float) (short) 0);
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) true);
        java.lang.String str13 = multiMatchQueryBuilder10.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.slop(0);
        java.lang.String str16 = multiMatchQueryBuilder15.getNAME();
        multiMatchQueryBuilder15.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "multi_match" + "'", str16, "multi_match");
    }

    @Test
    public void test06586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06586");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("hi!", (float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery17);
        java.lang.String str19 = multiMatchQueryBuilder18.minimumShouldMatch;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        multiMatchQueryBuilder18.zeroTermsQuery = zeroTermsQuery20;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test06587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06587");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("hi!");
        java.lang.String str12 = multiMatchQueryBuilder8.fuzzyRewrite;
        org.elasticsearch.index.query.QueryValidationException queryValidationException13 = multiMatchQueryBuilder8.validate();
        java.lang.String[] strArray17 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray17);
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.operator(operator19);
        multiMatchQueryBuilder18.setrewrite("");
        java.util.List<java.lang.String> strList23 = multiMatchQueryBuilder18.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.cutoffFrequency((float) (byte) 1);
        java.lang.String str26 = multiMatchQueryBuilder18.getName();
        multiMatchQueryBuilder18.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"fuzziness\" : \"BEST_FIELDS\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) multiMatchQueryBuilder18);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput30 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder8.writeTo(streamOutput30);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(queryValidationException13);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "multi_match" + "'", str26, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test06588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06588");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.String[] strArray5 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray5);
        org.elasticsearch.index.query.Operator operator7 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.operator(operator7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder6.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException11 = multiMatchQueryBuilder6.validate();
        java.lang.Integer int12 = multiMatchQueryBuilder6.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder6.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder6.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        float float17 = multiMatchQueryBuilder16.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.maxExpansions((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray25 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray25);
        org.elasticsearch.index.query.Operator operator27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.operator(operator27);
        multiMatchQueryBuilder26.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder26.operator(operator31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.maxExpansions((int) (short) 10);
        java.lang.Boolean boolean35 = multiMatchQueryBuilder34.getlenient();
        multiMatchQueryBuilder34.cutoffFrequency = 0.0f;
        java.lang.String[] strArray41 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray41);
        org.elasticsearch.index.query.Operator operator43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.operator(operator43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean49 = multiMatchQueryBuilder46.useDisMax;
        java.lang.String[] strArray53 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray53);
        org.elasticsearch.index.query.Operator operator55 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.operator(operator55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder54.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException59 = multiMatchQueryBuilder54.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder54.cutoffFrequency((float) (byte) 100);
        java.lang.String str62 = multiMatchQueryBuilder54.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder54.queryName("");
        multiMatchQueryBuilder64.setslop((java.lang.Integer) 0);
        java.lang.String[] strArray70 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray70);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray70);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean49, strArray70);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0f, strArray70);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}", strArray70);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder76 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(queryValidationException11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 1.0f + "'", float17 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(boolean35);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNull(queryValidationException59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(strArray70);
    }

    @Test
    public void test06589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06589");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.Integer int17 = multiMatchQueryBuilder16.getmaxExpansions();
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = null;
        multiMatchQueryBuilder16.setfuzziness(fuzziness18);
        multiMatchQueryBuilder16.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str22 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder16.prefixLength((int) '#');
        java.lang.String[] strArray28 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray28);
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.operator(operator30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder29.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap34 = multiMatchQueryBuilder33.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder33.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.Object obj40 = multiMatchQueryBuilder39.text;
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException50 = multiMatchQueryBuilder45.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder45.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder45.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder45.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type57 = multiMatchQueryBuilder45.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type58 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField59 = type58.parseField();
        multiMatchQueryBuilder45.type = type58;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder39.type(type58);
        org.elasticsearch.index.search.MatchQuery.Type type62 = type58.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder38.type(type58);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder38.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}", (float) 0L);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder24.type((java.lang.Object) multiMatchQueryBuilder66);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multimatch\" : {?    \"query\" : \"multi_match\",?    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}^0.0\" ],?    \"type\" : \"most_fields\",?    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",?    \"minimumshouldmatch\" : \"multi_match\",?    \"boost\" : 1.0?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(strObjectFloatHashMap34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(queryValidationException50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNull(type57);
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type58.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertTrue("'" + type62 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type62.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
    }

    @Test
    public void test06590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06590");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery19);
        multiMatchQueryBuilder20.rewrite = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.slop((int) 'a');
        multiMatchQueryBuilder24.cutoffFrequency = 10.0f;
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test06591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06591");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        multiMatchQueryBuilder11.setslop((java.lang.Integer) 100);
        multiMatchQueryBuilder11.slop = (-1);
        float float16 = multiMatchQueryBuilder11.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator21 = multiMatchQueryBuilder20.operator;
        java.lang.String str22 = multiMatchQueryBuilder20.getminimumShouldMatch();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 1.0f + "'", float16 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(operator21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str22, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test06592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06592");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Integer int10 = multiMatchQueryBuilder4.maxExpansions;
        org.elasticsearch.index.query.Operator operator11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.operator(operator11);
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = null;
        multiMatchQueryBuilder12.fuzziness = fuzziness13;
        multiMatchQueryBuilder12.setlenient((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
    }

    @Test
    public void test06593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06593");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.queryName("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException13 = multiMatchQueryBuilder12.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder12.zeroTermsQuery;
        java.lang.Boolean boolean15 = multiMatchQueryBuilder12.getlenient();
        java.lang.String str16 = multiMatchQueryBuilder12.getWriteableName();
        java.lang.Boolean boolean17 = multiMatchQueryBuilder12.getlenient();
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        java.lang.Integer int28 = multiMatchQueryBuilder22.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = multiMatchQueryBuilder22.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder22.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder22.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder22.boost((float) 0);
        java.lang.String str37 = multiMatchQueryBuilder22.fuzzyRewrite;
        java.lang.String[] strArray41 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray41);
        org.elasticsearch.index.query.Operator operator43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.operator(operator43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap47 = multiMatchQueryBuilder46.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery48 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder46.zeroTermsQuery(zeroTermsQuery48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder46.lenient(false);
        multiMatchQueryBuilder46.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery54 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder46.zeroTermsQuery(zeroTermsQuery54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type58 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder55.settype(type58);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder22.fuzziness((java.lang.Object) type58);
        org.elasticsearch.common.ParseField parseField61 = type58.parseField();
        multiMatchQueryBuilder12.type = type58;
        org.elasticsearch.common.ParseField parseField63 = type58.parseField();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(queryValidationException13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "multi_match" + "'", str16, "multi_match");
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNull(zeroTermsQuery29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNull(strObjectFloatHashMap47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type58.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(parseField61);
        org.junit.Assert.assertNotNull(parseField63);
    }

    @Test
    public void test06594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06594");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.queryName("");
        multiMatchQueryBuilder14.setslop((java.lang.Integer) 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray20);
        org.elasticsearch.index.query.Operator operator23 = multiMatchQueryBuilder22.getoperator();
        java.lang.String str24 = multiMatchQueryBuilder22.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder22.getPROTOTYPE();
        java.lang.Integer int26 = multiMatchQueryBuilder22.prefixLength;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNull(operator23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(int26);
    }

    @Test
    public void test06595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06595");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 10);
        java.lang.Integer int19 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = multiMatchQueryBuilder4.fieldsBoosts;
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap32 = multiMatchQueryBuilder31.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder31.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder36.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder36.minimumShouldMatch("");
        java.lang.String[] strArray43 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray43);
        org.elasticsearch.index.query.Operator operator45 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.operator(operator45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder44.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean51 = multiMatchQueryBuilder48.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder48.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator56 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder53.operator(operator56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder53.rewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder59.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str62 = multiMatchQueryBuilder59.toString();
        java.lang.String[] strArray66 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray66);
        org.elasticsearch.index.query.Operator operator68 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.operator(operator68);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder67.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder71.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder71.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness76 = multiMatchQueryBuilder71.getfuzziness();
        multiMatchQueryBuilder59.fuzziness = fuzziness76;
        multiMatchQueryBuilder36.fuzziness = fuzziness76;
        multiMatchQueryBuilder4.setfuzziness(fuzziness76);
        multiMatchQueryBuilder4.maxExpansions = 0;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(strObjectFloatHashMap22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(strObjectFloatHashMap32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}" + "'", str62, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(fuzziness76);
    }

    @Test
    public void test06596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06596");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.common.unit.Fuzziness fuzziness10 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness10;
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.tieBreaker((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder14.setcutoffFrequency((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.tieBreaker(0.0f);
        java.lang.Integer int21 = multiMatchQueryBuilder14.getmaxExpansions();
        java.lang.Integer int22 = multiMatchQueryBuilder14.slop;
        multiMatchQueryBuilder14.setfuzzyRewrite("");
        java.lang.Boolean boolean25 = multiMatchQueryBuilder14.getlenient();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(boolean25);
    }

    @Test
    public void test06597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06597");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.common.unit.Fuzziness fuzziness10 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness10;
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.tieBreaker((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder14.setcutoffFrequency((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder14.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness23 = multiMatchQueryBuilder22.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"tieBreaker\" : 100.0,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (short) -1);
        multiMatchQueryBuilder26.setlenient((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(fuzziness23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test06598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06598");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        multiMatchQueryBuilder12.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder12.maxExpansions((int) (short) 1);
        java.lang.String str20 = multiMatchQueryBuilder12.getanalyzer();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test06599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06599");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder8.tieBreaker = 10.0f;
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        multiMatchQueryBuilder24.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder24.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.maxExpansions((int) (short) 10);
        java.lang.String[] strArray36 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray36);
        org.elasticsearch.index.query.Operator operator38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.operator(operator38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder37.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder41.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness46 = multiMatchQueryBuilder41.getfuzziness();
        multiMatchQueryBuilder30.fuzziness = fuzziness46;
        multiMatchQueryBuilder8.setfuzziness(fuzziness46);
        multiMatchQueryBuilder8.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder8.setanalyzer("multi_match");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(fuzziness46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
    }

    @Test
    public void test06600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06600");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        org.elasticsearch.index.query.QueryValidationException queryValidationException8 = multiMatchQueryBuilder6.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder6.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder6.getzeroTermsQuery();
        java.lang.Boolean boolean12 = multiMatchQueryBuilder6.getlenient();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(queryValidationException8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNull(boolean12);
    }

    @Test
    public void test06601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06601");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder24.setoperator(operator29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder24.zeroTermsQuery = zeroTermsQuery31;
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        multiMatchQueryBuilder37.maxExpansions = 0;
        java.lang.Boolean boolean40 = multiMatchQueryBuilder37.lenient;
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap50 = multiMatchQueryBuilder49.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.minimumShouldMatch("multi_match");
        java.lang.String str53 = multiMatchQueryBuilder52.toString();
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.Operator operator59 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.operator(operator59);
        java.lang.String str61 = multiMatchQueryBuilder58.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness62 = multiMatchQueryBuilder58.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder58.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.cutoffFrequency((float) '4');
        boolean boolean67 = multiMatchQueryBuilder52.equals((java.lang.Object) multiMatchQueryBuilder64);
        multiMatchQueryBuilder64.setmaxExpansions((java.lang.Integer) (-1));
        multiMatchQueryBuilder64.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder37.fuzziness((java.lang.Object) multiMatchQueryBuilder64);
        java.lang.String str73 = multiMatchQueryBuilder64.getrewrite();
        java.lang.String str74 = multiMatchQueryBuilder64.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder64.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str77 = multiMatchQueryBuilder76.rewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(boolean40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(strObjectFloatHashMap50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str53, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "multi_match" + "'", str61, "multi_match");
        org.junit.Assert.assertNull(fuzziness62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str77, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test06602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06602");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder13.setuseDisMax((java.lang.Boolean) false);
        multiMatchQueryBuilder13.maxExpansions = 1;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = multiMatchQueryBuilder13.zeroTermsQuery;
        java.lang.Boolean boolean19 = multiMatchQueryBuilder13.lenient;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder13.tieBreaker(10.0f);
        java.util.List<java.lang.String> strList24 = multiMatchQueryBuilder13.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(zeroTermsQuery18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strList24);
    }

    @Test
    public void test06603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06603");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.common.unit.Fuzziness fuzziness9 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness9;
        java.lang.String str11 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str14 = multiMatchQueryBuilder13.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder13.tieBreaker((float) 10L);
        java.lang.Object obj17 = multiMatchQueryBuilder13.text;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
    }

    @Test
    public void test06604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06604");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.useDisMax(true);
        java.lang.Integer int18 = multiMatchQueryBuilder17.getslop();
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = multiMatchQueryBuilder17.fuzziness;
        java.lang.String str20 = multiMatchQueryBuilder17.getNAME();
        java.lang.String str21 = multiMatchQueryBuilder17.getNAME();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNull(fuzziness19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
    }

    @Test
    public void test06605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06605");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = null;
        multiMatchQueryBuilder4.type = type11;
        multiMatchQueryBuilder4.setcutoffFrequency((java.lang.Float) 0.0f);
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.fuzziness;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNull(fuzziness16);
    }

    @Test
    public void test06606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06606");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder21.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder21.analyzer = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder27.maxExpansions = 1;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test06607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06607");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        java.lang.String str9 = multiMatchQueryBuilder4.rewrite;
        java.lang.String[] strArray13 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray13);
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.operator(operator15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException19 = multiMatchQueryBuilder14.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.cutoffFrequency((float) (byte) 100);
        float float22 = multiMatchQueryBuilder14.boost();
        multiMatchQueryBuilder14.setanalyzer("");
        multiMatchQueryBuilder14.setcutoffFrequency((java.lang.Float) 0.0f);
        boolean boolean27 = multiMatchQueryBuilder4.equals((java.lang.Object) multiMatchQueryBuilder14);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder4.operator(operator28);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(queryValidationException19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 1.0f + "'", float22 == 1.0f);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test06608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06608");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        org.elasticsearch.index.query.QueryValidationException queryValidationException8 = multiMatchQueryBuilder6.validate();
        java.lang.String str9 = multiMatchQueryBuilder6.getminimumShouldMatch();
        java.lang.Boolean boolean10 = multiMatchQueryBuilder6.lenient;
        multiMatchQueryBuilder6.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder6.useDisMax(true);
        java.lang.Float float15 = multiMatchQueryBuilder14.gettieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.tieBreaker((float) (byte) 100);
        java.lang.String str18 = multiMatchQueryBuilder17.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(queryValidationException8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test06609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06609");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Object obj10 = multiMatchQueryBuilder4.text;
        float float11 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.boost(0.0f);
        org.elasticsearch.index.query.Operator operator14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.operator(operator14);
        java.lang.String str16 = multiMatchQueryBuilder13.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder13.slop((int) (byte) 10);
        java.lang.String str19 = multiMatchQueryBuilder18.minimumShouldMatch;
        multiMatchQueryBuilder18.setmaxExpansions((java.lang.Integer) 97);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "multi_match" + "'", obj10, "multi_match");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 1.0f + "'", float11 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test06610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06610");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.getPROTOTYPE();
        multiMatchQueryBuilder11.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.useDisMax(false);
        multiMatchQueryBuilder18.prefixLength = 1;
        java.lang.Integer int21 = multiMatchQueryBuilder18.getslop();
        org.elasticsearch.index.query.Operator operator22 = multiMatchQueryBuilder18.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(operator22);
    }

    @Test
    public void test06611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06611");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.useDisMax(false);
        org.elasticsearch.common.unit.Fuzziness fuzziness22 = multiMatchQueryBuilder21.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.boost((float) 100L);
        java.lang.String[] strArray28 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray28);
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.operator(operator30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder29.field("");
        multiMatchQueryBuilder29.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder29.lenient(true);
        java.lang.String str38 = multiMatchQueryBuilder37.toString();
        java.lang.Integer int39 = multiMatchQueryBuilder37.getslop();
        java.lang.String str40 = multiMatchQueryBuilder37.minimumShouldMatch;
        org.elasticsearch.common.unit.Fuzziness fuzziness41 = multiMatchQueryBuilder37.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder21.fuzziness((java.lang.Object) multiMatchQueryBuilder37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.prefixLength((int) (byte) 0);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap45 = multiMatchQueryBuilder44.getfieldsBoosts();
        org.elasticsearch.common.io.stream.StreamInput streamInput46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder44.readFrom(streamInput46);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(fuzziness22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str38, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNull(fuzziness41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(strObjectFloatHashMap45);
    }

    @Test
    public void test06612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06612");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        java.lang.String str12 = multiMatchQueryBuilder11.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"boost\" : 10.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder16.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
    }

    @Test
    public void test06613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06613");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray25 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray25);
        org.elasticsearch.index.query.Operator operator27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.operator(operator27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.field("");
        java.lang.String str31 = multiMatchQueryBuilder26.getrewrite();
        java.lang.Object obj32 = multiMatchQueryBuilder26.text;
        float float33 = multiMatchQueryBuilder26.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder26.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float36 = multiMatchQueryBuilder35.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder21.fuzziness((java.lang.Object) multiMatchQueryBuilder35);
        multiMatchQueryBuilder21.prefixLength = 0;
        multiMatchQueryBuilder21.settieBreaker((java.lang.Float) 32.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + "multi_match" + "'", obj32, "multi_match");
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 1.0f + "'", float33 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(float36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
    }

    @Test
    public void test06614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06614");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder16.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder16.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray29 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray29);
        org.elasticsearch.index.query.Operator operator31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.operator(operator31);
        java.lang.Boolean boolean33 = multiMatchQueryBuilder30.getlenient();
        multiMatchQueryBuilder30.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder30.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder30.tieBreaker((float) (-1));
        multiMatchQueryBuilder30.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder30.useDisMax(true);
        multiMatchQueryBuilder43.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray49 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray49);
        org.elasticsearch.index.query.Operator operator51 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.operator(operator51);
        java.lang.String str53 = multiMatchQueryBuilder50.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness54 = multiMatchQueryBuilder50.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder50.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type57 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder50.settype(type57);
        multiMatchQueryBuilder43.settype(type57);
        org.elasticsearch.index.search.MatchQuery.Type type60 = type57.matchQueryType();
        multiMatchQueryBuilder25.type = type57;
        org.elasticsearch.common.unit.Fuzziness fuzziness62 = multiMatchQueryBuilder25.fuzziness;
        java.lang.Integer int63 = multiMatchQueryBuilder25.getprefixLength();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(boolean33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "multi_match" + "'", str53, "multi_match");
        org.junit.Assert.assertNull(fuzziness54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertTrue("'" + type57 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type57.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + type60 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type60.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNull(fuzziness62);
        org.junit.Assert.assertNull(int63);
    }

    @Test
    public void test06615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06615");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder11.getfieldsBoosts();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder11.fieldsBoosts = strObjectFloatHashMap13;
        java.lang.Boolean boolean15 = multiMatchQueryBuilder11.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type16 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder11.settype(type16);
        multiMatchQueryBuilder11.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder11.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator22 = multiMatchQueryBuilder11.getoperator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type16.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(operator22);
    }

    @Test
    public void test06616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06616");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.maxExpansions((int) (short) 10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder12.getzeroTermsQuery();
        java.lang.Class<?> wildcardClass14 = multiMatchQueryBuilder12.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test06617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06617");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        multiMatchQueryBuilder13.tieBreaker = (-1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.cutoffFrequency((float) (short) 100);
        java.lang.Integer int20 = multiMatchQueryBuilder13.getslop();
        java.lang.Object obj21 = null;
        boolean boolean22 = multiMatchQueryBuilder13.equals(obj21);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test06618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06618");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.minimumShouldMatch("");
        java.lang.String str19 = multiMatchQueryBuilder14.getminimumShouldMatch();
        java.lang.String str20 = multiMatchQueryBuilder14.getWriteableName();
        java.lang.String str21 = multiMatchQueryBuilder14.getanalyzer();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test06619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06619");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.queryName("");
        java.lang.String[] strArray14 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray14);
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.operator(operator16);
        multiMatchQueryBuilder15.setrewrite("");
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder15.getfields();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder15.zeroTermsQuery(zeroTermsQuery21);
        multiMatchQueryBuilder22.maxExpansions = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str27 = multiMatchQueryBuilder26.getminimumShouldMatch();
        java.lang.Object obj28 = multiMatchQueryBuilder26.gettext();
        java.lang.Boolean boolean29 = multiMatchQueryBuilder26.getuseDisMax();
        java.lang.Object obj30 = null;
        java.lang.String[] strArray34 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray34);
        org.elasticsearch.index.query.Operator operator36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.operator(operator36);
        java.lang.Boolean boolean38 = multiMatchQueryBuilder35.getlenient();
        multiMatchQueryBuilder35.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder35.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder35.tieBreaker((float) (-1));
        multiMatchQueryBuilder35.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder35.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type49 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.common.ParseField parseField50 = type49.parseField();
        org.elasticsearch.common.ParseField parseField51 = type49.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder48.type(type49);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery53 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.zeroTermsQuery(zeroTermsQuery53);
        java.lang.String[] strArray58 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray58);
        org.elasticsearch.index.query.Operator operator60 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder59.operator(operator60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder59.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException64 = multiMatchQueryBuilder59.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder59.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder59.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder59.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness71 = multiMatchQueryBuilder59.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder59.slop((int) (short) 0);
        multiMatchQueryBuilder59.setslop((java.lang.Integer) 100);
        java.lang.Boolean boolean76 = multiMatchQueryBuilder59.getuseDisMax();
        java.lang.String str77 = multiMatchQueryBuilder59.fuzzyRewrite;
        java.lang.String[] strArray82 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray82);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray82);
        java.lang.String[] strArray88 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray88);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray82, strArray88);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str77, strArray82);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder54, strArray82);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj30, strArray82);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder94 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder26, strArray82);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder95 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder4, strArray82);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery96 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder97 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery96);
        multiMatchQueryBuilder4.tieBreaker = 32.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + obj28 + "' != '" + "multi_match" + "'", obj28, "multi_match");
        org.junit.Assert.assertNull(boolean29);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type49.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(parseField50);
        org.junit.Assert.assertNotNull(parseField51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNull(queryValidationException64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNull(fuzziness71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNull(boolean76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder97);
    }

    @Test
    public void test06620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06620");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int16 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.QueryValidationException queryValidationException19 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.maxExpansions((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str24 = multiMatchQueryBuilder23.getNAME();
        multiMatchQueryBuilder23.setlenient((java.lang.Boolean) false);
        java.lang.String[] strArray30 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray30);
        org.elasticsearch.index.query.Operator operator32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.operator(operator32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap36 = multiMatchQueryBuilder35.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder35.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.minimumShouldMatch("multi_match");
        java.lang.String[] strArray46 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray46);
        org.elasticsearch.index.query.Operator operator48 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.operator(operator48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder47.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException52 = multiMatchQueryBuilder47.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder47.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap55 = multiMatchQueryBuilder54.getfieldsBoosts();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap56 = null;
        multiMatchQueryBuilder54.fieldsBoosts = strObjectFloatHashMap56;
        java.lang.Boolean boolean58 = multiMatchQueryBuilder54.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type59 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder54.settype(type59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder40.type(type59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder23.fuzziness((java.lang.Object) multiMatchQueryBuilder61);
        org.elasticsearch.index.query.Operator operator63 = null;
        multiMatchQueryBuilder62.setoperator(operator63);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(queryValidationException19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(strObjectFloatHashMap36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(queryValidationException52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(strObjectFloatHashMap55);
        org.junit.Assert.assertNull(boolean58);
        org.junit.Assert.assertTrue("'" + type59 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type59.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
    }

    @Test
    public void test06621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06621");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder4.getminimumShouldMatch();
        java.lang.String str18 = multiMatchQueryBuilder4.queryName();
        multiMatchQueryBuilder4.prefixLength = 97;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.maxExpansions(52);
        multiMatchQueryBuilder4.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.String[] strArray28 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray28);
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.operator(operator30);
        org.elasticsearch.index.query.Operator operator32 = null;
        multiMatchQueryBuilder29.operator = operator32;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder29.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = multiMatchQueryBuilder29.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder29.prefixLength((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type39 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.common.ParseField parseField40 = type39.parseField();
        org.elasticsearch.common.ParseField parseField41 = type39.parseField();
        multiMatchQueryBuilder38.settype(type39);
        multiMatchQueryBuilder38.cutoffFrequency = 1.0f;
        org.elasticsearch.common.unit.Fuzziness fuzziness45 = multiMatchQueryBuilder38.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder38.tieBreaker((float) 97);
        java.lang.String[] strArray51 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray51);
        org.elasticsearch.index.query.Operator operator53 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.operator(operator53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder52.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException57 = multiMatchQueryBuilder52.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder52.cutoffFrequency((float) (byte) 100);
        java.lang.Float float60 = multiMatchQueryBuilder52.tieBreaker;
        java.lang.String str61 = multiMatchQueryBuilder52.getfuzzyRewrite();
        java.lang.String[] strArray65 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray65);
        org.elasticsearch.index.query.Operator operator67 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder66.operator(operator67);
        org.elasticsearch.index.query.Operator operator69 = null;
        multiMatchQueryBuilder66.operator = operator69;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder66.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery73 = multiMatchQueryBuilder66.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder66.prefixLength((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type76 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.common.ParseField parseField77 = type76.parseField();
        org.elasticsearch.common.ParseField parseField78 = type76.parseField();
        multiMatchQueryBuilder75.settype(type76);
        org.elasticsearch.common.ParseField parseField80 = type76.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type81 = type76.matchQueryType();
        multiMatchQueryBuilder52.settype(type76);
        org.elasticsearch.common.ParseField parseField83 = type76.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder38.type(type76);
        multiMatchQueryBuilder4.settype(type76);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(zeroTermsQuery36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type39.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(parseField40);
        org.junit.Assert.assertNotNull(parseField41);
        org.junit.Assert.assertNull(fuzziness45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNull(queryValidationException57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(float60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNull(zeroTermsQuery73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertTrue("'" + type76 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type76.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(parseField77);
        org.junit.Assert.assertNotNull(parseField78);
        org.junit.Assert.assertNotNull(parseField80);
        org.junit.Assert.assertTrue("'" + type81 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type81.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
    }

    @Test
    public void test06622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06622");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        java.lang.String str20 = multiMatchQueryBuilder17.toString();
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.operator(operator21);
        java.lang.String str23 = multiMatchQueryBuilder17.getWriteableName();
        java.lang.Integer int24 = multiMatchQueryBuilder17.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder17.getPROTOTYPE();
        java.lang.String str26 = multiMatchQueryBuilder17.getminimumShouldMatch();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str20, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "multi_match" + "'", str23, "multi_match");
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test06623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06623");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        java.lang.String str19 = multiMatchQueryBuilder4.fuzzyRewrite;
        multiMatchQueryBuilder4.setanalyzer("multi_match");
        multiMatchQueryBuilder4.setcutoffFrequency((java.lang.Float) 100.0f);
        java.lang.String str24 = multiMatchQueryBuilder4.getfuzzyRewrite();
        java.lang.String str25 = multiMatchQueryBuilder4.getNAME();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "multi_match" + "'", str25, "multi_match");
    }

    @Test
    public void test06624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06624");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        multiMatchQueryBuilder11.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = multiMatchQueryBuilder16.zeroTermsQuery;
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap30 = multiMatchQueryBuilder29.getfieldsBoosts();
        java.lang.String[] strArray34 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray34);
        org.elasticsearch.index.query.Operator operator36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.operator(operator36);
        java.lang.String str38 = multiMatchQueryBuilder35.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness39 = multiMatchQueryBuilder35.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder35.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type42 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder35.settype(type42);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder29.type(type42);
        org.elasticsearch.index.search.MatchQuery.Type type45 = type42.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type46 = type42.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder16.type(type42);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.lenient(true);
        java.lang.String str50 = multiMatchQueryBuilder47.getfuzzyRewrite();
        java.lang.Boolean boolean51 = multiMatchQueryBuilder47.useDisMax;
        multiMatchQueryBuilder47.setprefixLength((java.lang.Integer) (-1));
        multiMatchQueryBuilder47.slop = 10;
        multiMatchQueryBuilder47.slop = 35;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(zeroTermsQuery17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(strObjectFloatHashMap30);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "multi_match" + "'", str38, "multi_match");
        org.junit.Assert.assertNull(fuzziness39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type42.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type45.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type46.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(boolean51);
    }

    @Test
    public void test06625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06625");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        java.lang.String str12 = multiMatchQueryBuilder11.toString();
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.String str20 = multiMatchQueryBuilder17.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder17.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.cutoffFrequency((float) '4');
        boolean boolean26 = multiMatchQueryBuilder11.equals((java.lang.Object) multiMatchQueryBuilder23);
        multiMatchQueryBuilder23.setmaxExpansions((java.lang.Integer) (-1));
        multiMatchQueryBuilder23.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder23.cutoffFrequency((float) (byte) 10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.zeroTermsQuery(zeroTermsQuery33);
        multiMatchQueryBuilder34.prefixLength = 32;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str12, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
    }

    @Test
    public void test06626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06626");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.analyzer = "multi_match";
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 0);
        java.lang.Integer int26 = multiMatchQueryBuilder4.getslop();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(int26);
    }

    @Test
    public void test06627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06627");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        java.lang.Boolean boolean19 = multiMatchQueryBuilder4.lenient;
        java.lang.String str20 = multiMatchQueryBuilder4.rewrite;
        java.lang.String str21 = multiMatchQueryBuilder4.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.common.unit.Fuzziness fuzziness23 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder4.rewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str28 = multiMatchQueryBuilder25.getrewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(type22);
        org.junit.Assert.assertNull(fuzziness23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "multi_match" + "'", str28, "multi_match");
    }

    @Test
    public void test06628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06628");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        multiMatchQueryBuilder4.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException29 = multiMatchQueryBuilder24.validate();
        java.lang.Integer int30 = multiMatchQueryBuilder24.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = multiMatchQueryBuilder24.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder24.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        float float35 = multiMatchQueryBuilder34.boost();
        multiMatchQueryBuilder34.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}";
        boolean boolean38 = multiMatchQueryBuilder4.equals((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int39 = multiMatchQueryBuilder4.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(queryValidationException29);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNull(zeroTermsQuery31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 1.0f + "'", float35 == 1.0f);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(int39);
    }

    @Test
    public void test06629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06629");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder24.setoperator(operator29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder24.zeroTermsQuery = zeroTermsQuery31;
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        org.elasticsearch.index.query.QueryValidationException queryValidationException38 = multiMatchQueryBuilder24.validate();
        multiMatchQueryBuilder24.setlenient((java.lang.Boolean) true);
        multiMatchQueryBuilder24.setuseDisMax((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(queryValidationException38);
    }

    @Test
    public void test06630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06630");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str16 = multiMatchQueryBuilder15.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder18.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder18.lenient(false);
        float float25 = multiMatchQueryBuilder24.boost();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 1.0f + "'", float25 == 1.0f);
    }

    @Test
    public void test06631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06631");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.type(type15);
        org.elasticsearch.index.query.Operator operator17 = multiMatchQueryBuilder4.operator;
        org.elasticsearch.index.query.Operator operator18 = null;
        multiMatchQueryBuilder4.operator = operator18;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(operator17);
    }

    @Test
    public void test06632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06632");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder4.slop = (-1);
        float float19 = multiMatchQueryBuilder4.boost();
        java.lang.Boolean boolean20 = multiMatchQueryBuilder4.useDisMax;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 1.0f + "'", float19 == 1.0f);
        org.junit.Assert.assertNull(boolean20);
    }

    @Test
    public void test06633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06633");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int16 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.QueryValidationException queryValidationException19 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.maxExpansions((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean24 = multiMatchQueryBuilder21.getlenient();
        multiMatchQueryBuilder21.prefixLength = 0;
        java.lang.String str27 = multiMatchQueryBuilder21.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(queryValidationException19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"prefixLength\" : 0,\n    \"maxExpansions\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str27, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"prefixLength\" : 0,\n    \"maxExpansions\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test06634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06634");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder4.getPROTOTYPE();
        multiMatchQueryBuilder4.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"slop\" : 0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput15 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder4.writeTo(streamOutput15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
    }

    @Test
    public void test06635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06635");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        java.lang.String str14 = multiMatchQueryBuilder12.getfuzzyRewrite();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        multiMatchQueryBuilder19.minimumShouldMatch = "hi!";
        java.lang.Float float26 = multiMatchQueryBuilder19.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type28 = type27.matchQueryType();
        float float29 = type27.tieBreaker();
        multiMatchQueryBuilder19.type = type27;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder12.type(type27);
        multiMatchQueryBuilder12.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder12.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str36 = multiMatchQueryBuilder35.getName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = multiMatchQueryBuilder35.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = multiMatchQueryBuilder35.gettype();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "multi_match" + "'", str36, "multi_match");
        org.junit.Assert.assertNull(zeroTermsQuery37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
    }

    @Test
    public void test06636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06636");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder20.fuzziness;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = multiMatchQueryBuilder20.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder20.maxExpansions = 32;
        multiMatchQueryBuilder20.lenient = false;
        float float29 = multiMatchQueryBuilder20.boost();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNull(strObjectFloatHashMap22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 1.0f + "'", float29 == 1.0f);
    }

    @Test
    public void test06637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06637");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.minimumShouldMatch("");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test06638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06638");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean21 = multiMatchQueryBuilder20.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.boost((float) 1);
        java.lang.Boolean boolean24 = multiMatchQueryBuilder23.getlenient();
        multiMatchQueryBuilder23.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder23.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder28.settieBreaker((java.lang.Float) 0.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test06639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06639");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        float float7 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery8 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery8);
        multiMatchQueryBuilder4.slop = (-1);
        java.lang.String str12 = multiMatchQueryBuilder4.getrewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 1.0f + "'", float7 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test06640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06640");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness8;
        java.lang.String str10 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder4.getfuzzyRewrite();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test06641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06641");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        java.lang.String str11 = multiMatchQueryBuilder4.getminimumShouldMatch();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test06642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06642");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder20.fuzziness;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = null;
        multiMatchQueryBuilder20.fieldsBoosts = strObjectFloatHashMap22;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder20.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"maxExpansions\" : 1,\n    \"useDisMax\" : false,\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test06643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06643");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        java.lang.String str19 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Integer int20 = multiMatchQueryBuilder4.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.lenient(true);
        org.elasticsearch.common.unit.Fuzziness fuzziness23 = multiMatchQueryBuilder22.fuzziness;
        multiMatchQueryBuilder22.setcutoffFrequency((java.lang.Float) 32.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(fuzziness23);
    }

    @Test
    public void test06644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06644");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type8 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type9 = type8.matchQueryType();
        float float10 = type8.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = multiMatchQueryBuilder11.zeroTermsQuery;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery13);
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        java.lang.Boolean boolean22 = multiMatchQueryBuilder19.getlenient();
        multiMatchQueryBuilder19.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder19.tieBreaker((float) (-1));
        multiMatchQueryBuilder19.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder19.useDisMax(true);
        multiMatchQueryBuilder32.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray38 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray38);
        org.elasticsearch.index.query.Operator operator40 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.operator(operator40);
        java.lang.String str42 = multiMatchQueryBuilder39.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness43 = multiMatchQueryBuilder39.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder39.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type46 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder39.settype(type46);
        multiMatchQueryBuilder32.settype(type46);
        org.elasticsearch.index.search.MatchQuery.Type type49 = type46.matchQueryType();
        org.elasticsearch.common.ParseField parseField50 = type46.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder11.type(type46);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type8.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type9.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(zeroTermsQuery12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "multi_match" + "'", str42, "multi_match");
        org.junit.Assert.assertNull(fuzziness43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type46.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type49.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
    }

    @Test
    public void test06645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06645");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException20 = multiMatchQueryBuilder19.validate();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap21 = multiMatchQueryBuilder19.fieldsBoosts;
        multiMatchQueryBuilder19.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder19.setanalyzer("");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(queryValidationException20);
        org.junit.Assert.assertNull(strObjectFloatHashMap21);
    }

    @Test
    public void test06646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06646");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder13.rewrite = "multi_match";
        java.lang.Integer int20 = multiMatchQueryBuilder13.maxExpansions;
        java.lang.String str21 = multiMatchQueryBuilder13.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder13.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"hi!\\\",\\n    \\\"slop\\\" : 0,\\n    \\\"minimum_should_match\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : \\\\\\\"multi_match\\\\\\\",\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"multi_match\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"minimum_should_match\\\\\\\" : \\\\\\\"multi_match\\\\\\\",\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test06647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06647");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("hi!");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = multiMatchQueryBuilder18.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.prefixLength(1);
        java.lang.String str22 = multiMatchQueryBuilder21.analyzer;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(strObjectFloatHashMap19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
    }

    @Test
    public void test06648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06648");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        multiMatchQueryBuilder12.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Object obj15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.type(obj15);
        multiMatchQueryBuilder16.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"tieBreaker\" : 1.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test06649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06649");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        java.lang.Boolean boolean19 = multiMatchQueryBuilder4.lenient;
        java.lang.String str20 = multiMatchQueryBuilder4.rewrite;
        java.lang.String str21 = multiMatchQueryBuilder4.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.prefixLength = 0;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(type22);
    }

    @Test
    public void test06650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06650");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        java.lang.String str18 = multiMatchQueryBuilder17.fuzzyRewrite;
        java.lang.Boolean boolean19 = multiMatchQueryBuilder17.useDisMax;
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.operator(operator20);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = multiMatchQueryBuilder21.zeroTermsQuery;
        java.util.List<java.lang.String> strList23 = multiMatchQueryBuilder21.fields;
        java.lang.String str24 = multiMatchQueryBuilder21.getWriteableName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(zeroTermsQuery22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
    }

    @Test
    public void test06651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06651");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (byte) 0);
        org.elasticsearch.common.unit.Fuzziness fuzziness14 = multiMatchQueryBuilder8.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float17 = multiMatchQueryBuilder8.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 1,\n    \"max_expansions\" : 10,\n    \"rewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean22 = multiMatchQueryBuilder21.lenient;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(strObjectFloatHashMap11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(fuzziness14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + boolean22 + "' != '" + false + "'", boolean22, false);
    }

    @Test
    public void test06652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06652");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.boost(100.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = multiMatchQueryBuilder13.getzeroTermsQuery();
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder13.fuzziness;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(zeroTermsQuery20);
        org.junit.Assert.assertNull(fuzziness21);
    }

    @Test
    public void test06653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06653");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.prefixLength((int) (byte) 10);
        multiMatchQueryBuilder13.useDisMax = false;
        multiMatchQueryBuilder13.useDisMax = false;
        org.elasticsearch.index.query.Operator operator18 = multiMatchQueryBuilder13.getoperator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(operator18);
    }

    @Test
    public void test06654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06654");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int16 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.operator(operator20);
        java.lang.String str22 = multiMatchQueryBuilder21.getWriteableName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = multiMatchQueryBuilder21.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(fuzziness19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNull(zeroTermsQuery23);
    }

    @Test
    public void test06655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06655");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        java.lang.Object obj13 = multiMatchQueryBuilder4.gettext();
        java.lang.String str14 = multiMatchQueryBuilder4.rewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder4.type;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + "multi_match" + "'", obj13, "multi_match");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(type15);
    }

    @Test
    public void test06656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06656");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder8.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = null;
        multiMatchQueryBuilder8.setfuzziness(fuzziness13);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = multiMatchQueryBuilder8.zeroTermsQuery;
        multiMatchQueryBuilder8.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.tieBreaker((float) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.type((java.lang.Object) "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"multi_match\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multimatch\" : {?    \"query\" : \"multi_match\",?    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],?    \"type\" : \"best_fields\",?    \"analyzer\" : \"multi_match\",?    \"minimumshouldmatch\" : \"hi!\",?    \"fuzzyrewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",?    \"boost\" : 1.0?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(zeroTermsQuery15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test06657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06657");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness22 = multiMatchQueryBuilder21.getfuzziness();
        org.elasticsearch.index.query.Operator operator23 = null;
        multiMatchQueryBuilder21.setoperator(operator23);
        java.lang.Integer int25 = multiMatchQueryBuilder21.maxExpansions;
        multiMatchQueryBuilder21.setmaxExpansions((java.lang.Integer) (-1));
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(fuzziness22);
        org.junit.Assert.assertNull(int25);
    }

    @Test
    public void test06658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06658");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int16 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.QueryValidationException queryValidationException19 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.maxExpansions((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = multiMatchQueryBuilder4.type;
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        multiMatchQueryBuilder27.fuzzyRewrite = "hi!";
        java.lang.String str32 = multiMatchQueryBuilder27.rewrite;
        java.lang.String[] strArray36 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray36);
        org.elasticsearch.index.query.Operator operator38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.operator(operator38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder37.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException42 = multiMatchQueryBuilder37.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder37.cutoffFrequency((float) (byte) 100);
        float float45 = multiMatchQueryBuilder37.boost();
        multiMatchQueryBuilder37.setanalyzer("");
        multiMatchQueryBuilder37.setcutoffFrequency((java.lang.Float) 0.0f);
        boolean boolean50 = multiMatchQueryBuilder27.equals((java.lang.Object) multiMatchQueryBuilder37);
        java.lang.String[] strArray54 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray54);
        org.elasticsearch.index.query.Operator operator56 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.operator(operator56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder55.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder59.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean62 = multiMatchQueryBuilder59.useDisMax;
        java.lang.String[] strArray66 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray66);
        org.elasticsearch.index.query.Operator operator68 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.operator(operator68);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder67.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException72 = multiMatchQueryBuilder67.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder67.cutoffFrequency((float) (byte) 100);
        java.lang.String str75 = multiMatchQueryBuilder67.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder67.queryName("");
        multiMatchQueryBuilder77.setslop((java.lang.Integer) 0);
        java.lang.String[] strArray83 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean62, strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean50, strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type22, strArray83);
        java.lang.Object obj89 = multiMatchQueryBuilder88.gettext();
        java.lang.Float float90 = multiMatchQueryBuilder88.gettieBreaker();
        multiMatchQueryBuilder88.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!^97.0\", \"\", \"hi!^97.0\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        java.lang.Integer int93 = multiMatchQueryBuilder88.maxExpansions;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(queryValidationException19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(type22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(queryValidationException42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + 1.0f + "'", float45 == 1.0f);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNull(boolean62);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNull(queryValidationException72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNull(float90);
        org.junit.Assert.assertNull(int93);
    }

    @Test
    public void test06659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06659");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.useDisMax(true);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder19.getlenient();
        java.lang.String str21 = multiMatchQueryBuilder19.rewrite;
        org.elasticsearch.index.query.QueryValidationException queryValidationException22 = multiMatchQueryBuilder19.validate();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
        org.junit.Assert.assertNull(queryValidationException22);
    }

    @Test
    public void test06660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06660");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.Object obj17 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.tieBreaker = (-1.0f);
        java.lang.String str20 = multiMatchQueryBuilder4.getName();
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.operator(operator21);
        java.lang.String str23 = multiMatchQueryBuilder22.getrewrite();
        org.elasticsearch.index.query.Operator operator24 = multiMatchQueryBuilder22.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.minimumShouldMatch("");
        org.elasticsearch.index.query.QueryShardContext queryShardContext27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query28 = multiMatchQueryBuilder22.toFilter(queryShardContext27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(operator24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test06661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06661");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        multiMatchQueryBuilder4.setcutoffFrequency((java.lang.Float) 0.0f);
        multiMatchQueryBuilder4.setcutoffFrequency((java.lang.Float) 1.0f);
        org.elasticsearch.index.query.Operator operator19 = null;
        multiMatchQueryBuilder4.operator = operator19;
        java.lang.String str21 = multiMatchQueryBuilder4.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test06662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06662");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        java.lang.String str19 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap29 = multiMatchQueryBuilder28.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.zeroTermsQuery(zeroTermsQuery30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder28.lenient(false);
        multiMatchQueryBuilder28.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder28.zeroTermsQuery(zeroTermsQuery36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type40 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder37.settype(type40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) type40);
        java.lang.String str43 = multiMatchQueryBuilder42.getfuzzyRewrite();
        multiMatchQueryBuilder42.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"slop\" : 10,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder42.maxExpansions = 10;
        org.elasticsearch.index.query.Operator operator48 = multiMatchQueryBuilder42.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder42.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"useDisMax\" : true,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 0);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap52 = multiMatchQueryBuilder42.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(strObjectFloatHashMap29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type40.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(operator48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap52);
    }

    @Test
    public void test06663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06663");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap17;
        org.elasticsearch.index.query.Operator operator19 = null;
        multiMatchQueryBuilder16.setoperator(operator19);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        java.lang.Boolean boolean28 = multiMatchQueryBuilder25.getlenient();
        java.lang.String str29 = multiMatchQueryBuilder25.getfuzzyRewrite();
        multiMatchQueryBuilder25.lenient = true;
        boolean boolean32 = multiMatchQueryBuilder16.equals((java.lang.Object) multiMatchQueryBuilder25);
        java.lang.String str33 = multiMatchQueryBuilder25.rewrite;
        multiMatchQueryBuilder25.slop = 1;
        multiMatchQueryBuilder25.setcutoffFrequency((java.lang.Float) 10.0f);
        multiMatchQueryBuilder25.setcutoffFrequency((java.lang.Float) 97.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(boolean28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test06664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06664");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.Integer int17 = multiMatchQueryBuilder16.getmaxExpansions();
        multiMatchQueryBuilder16.settieBreaker((java.lang.Float) 1.0f);
        multiMatchQueryBuilder16.slop = 35;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test06665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06665");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("hi!", (float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = multiMatchQueryBuilder4.zeroTermsQuery;
        org.elasticsearch.index.query.Operator operator18 = multiMatchQueryBuilder4.operator;
        java.lang.String str19 = multiMatchQueryBuilder4.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(zeroTermsQuery17);
        org.junit.Assert.assertNull(operator18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test06666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06666");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.prefixLength((-1));
        multiMatchQueryBuilder23.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}";
        multiMatchQueryBuilder23.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.QueryValidationException queryValidationException28 = multiMatchQueryBuilder23.validate();
        java.util.List<java.lang.String> strList29 = multiMatchQueryBuilder23.getfields();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(queryValidationException28);
        org.junit.Assert.assertNotNull(strList29);
    }

    @Test
    public void test06667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06667");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("hi!");
        org.elasticsearch.index.query.Operator operator19 = null;
        multiMatchQueryBuilder16.operator = operator19;
        java.lang.String str21 = multiMatchQueryBuilder16.getanalyzer();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test06668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06668");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.fuzzyRewrite("");
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) true);
        multiMatchQueryBuilder4.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder4.prefixLength = 35;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
    }

    @Test
    public void test06669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06669");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int16 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.QueryValidationException queryValidationException19 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.maxExpansions((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str24 = multiMatchQueryBuilder21.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder21.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"boost\" : 1.0\n  }\n}", (float) 1);
        java.util.List<java.lang.String> strList28 = multiMatchQueryBuilder27.getfields();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(queryValidationException19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strList28);
    }

    @Test
    public void test06670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06670");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean20 = multiMatchQueryBuilder19.getuseDisMax();
        java.lang.String str21 = multiMatchQueryBuilder19.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.useDisMax(false);
        org.elasticsearch.common.xcontent.XContentType xContentType24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference25 = multiMatchQueryBuilder23.buildAsBytes(xContentType24);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test06671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06671");
        java.lang.String[] strArray4 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder5 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray4);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray4);
        java.lang.Float float7 = multiMatchQueryBuilder6.getcutoffFrequency();
        org.elasticsearch.index.query.Operator operator8 = multiMatchQueryBuilder6.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.field("", (float) 100L);
        multiMatchQueryBuilder6.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}";
        java.lang.String[] strArray17 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray17);
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.operator(operator19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException23 = multiMatchQueryBuilder18.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.cutoffFrequency((float) (byte) 100);
        java.lang.String str26 = multiMatchQueryBuilder18.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder18.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness29 = multiMatchQueryBuilder18.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder18.getPROTOTYPE();
        java.lang.String[] strArray34 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder30, strArray34);
        boolean boolean37 = multiMatchQueryBuilder6.equals((java.lang.Object) multiMatchQueryBuilder30);
        multiMatchQueryBuilder30.useDisMax = false;
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNull(float7);
        org.junit.Assert.assertNull(operator8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(queryValidationException23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(fuzziness29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test06672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06672");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        multiMatchQueryBuilder12.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Object obj15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.type(obj15);
        java.lang.String str17 = multiMatchQueryBuilder12.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder12.maxExpansions((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.boost((float) (byte) 100);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test06673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06673");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.lang.Integer int9 = multiMatchQueryBuilder4.getmaxExpansions();
        org.elasticsearch.common.unit.Fuzziness fuzziness10 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.common.unit.Fuzziness fuzziness11 = multiMatchQueryBuilder4.fuzziness;
        java.lang.String[] strArray15 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray15);
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap21 = multiMatchQueryBuilder20.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.zeroTermsQuery(zeroTermsQuery22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder20.lenient(false);
        multiMatchQueryBuilder20.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder20.zeroTermsQuery(zeroTermsQuery28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.cutoffFrequency((float) 10);
        java.lang.String str32 = multiMatchQueryBuilder29.fuzzyRewrite;
        multiMatchQueryBuilder29.minimumShouldMatch = "multi_match";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = multiMatchQueryBuilder29.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder29.type(type36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder29.useDisMax(true);
        java.util.List<java.lang.String> strList40 = multiMatchQueryBuilder39.getfields();
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException50 = multiMatchQueryBuilder45.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder45.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery53 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.zeroTermsQuery(zeroTermsQuery53);
        multiMatchQueryBuilder54.tieBreaker = (-1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder54.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder54.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type61 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField62 = type61.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type63 = type61.matchQueryType();
        org.elasticsearch.common.ParseField parseField64 = type61.parseField();
        float float65 = type61.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder54.type(type61);
        multiMatchQueryBuilder39.settype(type61);
        boolean boolean68 = multiMatchQueryBuilder4.equals((java.lang.Object) multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(fuzziness10);
        org.junit.Assert.assertNull(fuzziness11);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(strObjectFloatHashMap21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(zeroTermsQuery35);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(queryValidationException50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertTrue("'" + type61 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type61.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField62);
        org.junit.Assert.assertTrue("'" + type63 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type63.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField64);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + 1.0f + "'", float65 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test06674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06674");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        java.lang.String str14 = multiMatchQueryBuilder12.getfuzzyRewrite();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        multiMatchQueryBuilder19.minimumShouldMatch = "hi!";
        java.lang.Float float26 = multiMatchQueryBuilder19.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type28 = type27.matchQueryType();
        float float29 = type27.tieBreaker();
        multiMatchQueryBuilder19.type = type27;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder12.type(type27);
        multiMatchQueryBuilder31.maxExpansions = 100;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.prefixLength((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = multiMatchQueryBuilder35.gettype();
        java.lang.String[] strArray40 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray40);
        org.elasticsearch.index.query.Operator operator42 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.operator(operator42);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder41.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException46 = multiMatchQueryBuilder41.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder41.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery49 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.zeroTermsQuery(zeroTermsQuery49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder48.getPROTOTYPE();
        multiMatchQueryBuilder51.settieBreaker((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery54 = multiMatchQueryBuilder51.zeroTermsQuery;
        java.lang.Object obj55 = multiMatchQueryBuilder51.gettext();
        java.lang.String[] strArray59 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray59);
        org.elasticsearch.index.query.Operator operator61 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder60.operator(operator61);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder60.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException65 = multiMatchQueryBuilder60.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder60.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder60.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder60.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness72 = multiMatchQueryBuilder60.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder60.slop((int) (short) 0);
        multiMatchQueryBuilder60.setslop((java.lang.Integer) 100);
        java.lang.Boolean boolean77 = multiMatchQueryBuilder60.getuseDisMax();
        java.lang.String str78 = multiMatchQueryBuilder60.fuzzyRewrite;
        java.lang.String[] strArray83 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray83);
        java.lang.String[] strArray89 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray89);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray83, strArray89);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str78, strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj55, strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder94 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type36, strArray83);
        java.lang.String str95 = multiMatchQueryBuilder94.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(queryValidationException46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(zeroTermsQuery54);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNull(queryValidationException65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNull(fuzziness72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNull(boolean77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNull(str95);
    }

    @Test
    public void test06675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06675");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.Object obj17 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.tieBreaker = (-1.0f);
        java.lang.String str20 = multiMatchQueryBuilder4.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}", (float) (byte) -1);
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder23.fuzziness;
        org.elasticsearch.index.query.Operator operator25 = multiMatchQueryBuilder23.operator;
        org.elasticsearch.index.query.Operator operator26 = multiMatchQueryBuilder23.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(fuzziness24);
        org.junit.Assert.assertNull(operator25);
        org.junit.Assert.assertNull(operator26);
    }

    @Test
    public void test06676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06676");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type16 = multiMatchQueryBuilder4.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.prefixLength((int) (short) 10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery19);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(type16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test06677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06677");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        multiMatchQueryBuilder24.minimumShouldMatch = "hi!";
        java.lang.Float float31 = multiMatchQueryBuilder24.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type32 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type33 = type32.matchQueryType();
        float float34 = type32.tieBreaker();
        multiMatchQueryBuilder24.type = type32;
        multiMatchQueryBuilder4.type = type32;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder4.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"tieBreaker\" : 52.0,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", 32.0f);
        java.lang.String[] strArray43 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray43);
        org.elasticsearch.index.query.Operator operator45 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.operator(operator45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder44.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException49 = multiMatchQueryBuilder44.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder44.cutoffFrequency((float) (byte) 100);
        java.lang.String str52 = multiMatchQueryBuilder44.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder44.useDisMax(false);
        multiMatchQueryBuilder44.prefixLength = 10;
        org.elasticsearch.common.unit.Fuzziness fuzziness57 = multiMatchQueryBuilder44.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder44.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder39.type((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multi_match\" : {?    \"query\" : \"multi_match\",?    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],?    \"minimum_should_match\" : \"multi_match\",?    \"boost\" : 1.0,?    \"_name\" : \"multi_match\"?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(float31);
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type32.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type33.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 0.0f + "'", float34 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNull(queryValidationException49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "multi_match" + "'", str52, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(fuzziness57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
    }

    @Test
    public void test06678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06678");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.String str9 = multiMatchQueryBuilder4.getWriteableName();
        multiMatchQueryBuilder4.maxExpansions = 100;
        multiMatchQueryBuilder4.lenient = false;
        java.lang.String str14 = multiMatchQueryBuilder4.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multi_match" + "'", str9, "multi_match");
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test06679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06679");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder16.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder16.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder23.tieBreaker = (-1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.slop((int) (byte) 100);
        multiMatchQueryBuilder27.lenient = true;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test06680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06680");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.Operator operator10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.operator(operator10);
        java.lang.String str12 = multiMatchQueryBuilder4.minimumShouldMatch;
        java.lang.String str13 = multiMatchQueryBuilder4.getrewrite();
        multiMatchQueryBuilder4.useDisMax = false;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test06681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06681");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.Operator operator12 = null;
        multiMatchQueryBuilder11.operator = operator12;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder11.zeroTermsQuery = zeroTermsQuery14;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.prefixLength((int) (short) 0);
        java.lang.String str18 = multiMatchQueryBuilder11.getrewrite();
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.QueryValidationException queryValidationException20 = multiMatchQueryBuilder11.validate();
        java.lang.Integer int21 = multiMatchQueryBuilder11.getslop();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(fuzziness19);
        org.junit.Assert.assertNull(queryValidationException20);
        org.junit.Assert.assertNull(int21);
    }

    @Test
    public void test06682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06682");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Boolean boolean15 = multiMatchQueryBuilder11.lenient;
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        java.lang.String str25 = multiMatchQueryBuilder20.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder20.field("hi!", (float) (byte) 0);
        boolean boolean31 = multiMatchQueryBuilder11.equals((java.lang.Object) multiMatchQueryBuilder30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder11.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!^97.0\", \"\", \"hi!^97.0\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder33.tieBreaker = (-1.0f);
        java.lang.Integer int36 = multiMatchQueryBuilder33.getslop();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(int36);
    }

    @Test
    public void test06683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06683");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        multiMatchQueryBuilder21.setzeroTermsQuery(zeroTermsQuery22);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test06684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06684");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap17;
        java.lang.String str19 = multiMatchQueryBuilder16.getNAME();
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder16.fields;
        multiMatchQueryBuilder16.slop = 0;
        java.lang.String str23 = multiMatchQueryBuilder16.getanalyzer();
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder16.operator(operator24);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test06685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06685");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        java.lang.String str20 = multiMatchQueryBuilder17.toString();
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.operator(operator21);
        multiMatchQueryBuilder22.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList25 = multiMatchQueryBuilder22.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder22.useDisMax(false);
        multiMatchQueryBuilder22.setslop((java.lang.Integer) (-1));
        java.util.List<java.lang.String> strList30 = multiMatchQueryBuilder22.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str20, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strList30);
    }

    @Test
    public void test06686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06686");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        java.lang.String str12 = multiMatchQueryBuilder8.fuzzyRewrite;
        java.lang.Integer int13 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.Operator operator14 = multiMatchQueryBuilder8.getoperator();
        java.lang.Integer int15 = multiMatchQueryBuilder8.prefixLength;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(operator14);
        org.junit.Assert.assertNull(int15);
    }

    @Test
    public void test06687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06687");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        java.lang.String str14 = multiMatchQueryBuilder12.getfuzzyRewrite();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        multiMatchQueryBuilder19.minimumShouldMatch = "hi!";
        java.lang.Float float26 = multiMatchQueryBuilder19.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type28 = type27.matchQueryType();
        float float29 = type27.tieBreaker();
        multiMatchQueryBuilder19.type = type27;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder12.type(type27);
        multiMatchQueryBuilder31.maxExpansions = 100;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.prefixLength((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = multiMatchQueryBuilder31.type;
        org.elasticsearch.common.ParseField parseField37 = type36.parseField();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(parseField37);
    }

    @Test
    public void test06688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06688");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder20.fuzziness;
        multiMatchQueryBuilder20.tieBreaker = 0.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(fuzziness21);
    }

    @Test
    public void test06689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06689");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setrewrite("");
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder18.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.boost((float) (-1));
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException33 = multiMatchQueryBuilder28.validate();
        java.lang.Integer int34 = multiMatchQueryBuilder28.slop;
        multiMatchQueryBuilder28.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder28.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder38.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder38.getPROTOTYPE();
        boolean boolean44 = multiMatchQueryBuilder18.equals((java.lang.Object) multiMatchQueryBuilder43);
        java.util.List<java.lang.String> strList45 = multiMatchQueryBuilder43.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str21, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(queryValidationException33);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strList45);
    }

    @Test
    public void test06690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06690");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder10.getzeroTermsQuery();
        java.lang.Boolean boolean12 = multiMatchQueryBuilder10.getuseDisMax();
        multiMatchQueryBuilder10.setanalyzer("");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNull(boolean12);
    }

    @Test
    public void test06691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06691");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder4.getPROTOTYPE();
        multiMatchQueryBuilder4.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"slop\" : 0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.setcutoffFrequency((java.lang.Float) 1.0f);
        org.elasticsearch.index.query.QueryShardContext queryShardContext16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query17 = multiMatchQueryBuilder4.toFilter(queryShardContext16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
    }

    @Test
    public void test06692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06692");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        org.elasticsearch.index.query.QueryValidationException queryValidationException8 = multiMatchQueryBuilder6.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder6.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField14 = type13.parseField();
        multiMatchQueryBuilder10.type = type13;
        java.lang.String str16 = multiMatchQueryBuilder10.analyzer;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(queryValidationException8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField14);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test06693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06693");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField1 = type0.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type2 = type0.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type3 = type0.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type4 = type0.matchQueryType();
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type0.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField1);
        org.junit.Assert.assertTrue("'" + type2 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type2.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type3.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type4.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test06694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06694");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str20 = multiMatchQueryBuilder19.fuzzyRewrite;
        java.lang.String str21 = multiMatchQueryBuilder19.fuzzyRewrite;
        multiMatchQueryBuilder19.prefixLength = 10;
        multiMatchQueryBuilder19.rewrite = "";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        multiMatchQueryBuilder19.zeroTermsQuery = zeroTermsQuery26;
        multiMatchQueryBuilder19.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder19.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"fuzziness\" : \"BOOLEAN\",\n    \"prefixLength\" : 10,\n    \"maxExpansions\" : 32,\n    \"useDisMax\" : false,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 52.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test06695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06695");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap28 = multiMatchQueryBuilder27.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder27.zeroTermsQuery(zeroTermsQuery29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder27.lenient(false);
        java.lang.Object obj33 = multiMatchQueryBuilder32.gettext();
        java.lang.Integer int34 = multiMatchQueryBuilder32.getslop();
        multiMatchQueryBuilder32.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder32.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException39 = multiMatchQueryBuilder38.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder38.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder38.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type44 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        multiMatchQueryBuilder43.type = type44;
        float float46 = type44.tieBreaker();
        float float47 = type44.tieBreaker();
        float float48 = type44.tieBreaker();
        org.elasticsearch.common.ParseField parseField49 = type44.parseField();
        multiMatchQueryBuilder18.type = type44;
        org.elasticsearch.index.query.Operator operator51 = multiMatchQueryBuilder18.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(strObjectFloatHashMap28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + "multi_match" + "'", obj33, "multi_match");
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(queryValidationException39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type44.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + 0.0f + "'", float46 == 0.0f);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.0f + "'", float47 == 0.0f);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + 0.0f + "'", float48 == 0.0f);
        org.junit.Assert.assertNotNull(parseField49);
        org.junit.Assert.assertNull(operator51);
    }

    @Test
    public void test06696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06696");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder8.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = null;
        multiMatchQueryBuilder8.setfuzziness(fuzziness13);
        multiMatchQueryBuilder8.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.Operator operator17 = multiMatchQueryBuilder8.getoperator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(operator17);
    }

    @Test
    public void test06697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06697");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        multiMatchQueryBuilder4.setcutoffFrequency((java.lang.Float) 0.0f);
        java.lang.String str17 = multiMatchQueryBuilder4.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.cutoffFrequency((float) 1);
        multiMatchQueryBuilder19.cutoffFrequency = 100.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test06698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06698");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        java.lang.String[] strArray11 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray11);
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder16.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.lenient(false);
        multiMatchQueryBuilder16.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery24);
        boolean boolean26 = multiMatchQueryBuilder6.equals((java.lang.Object) multiMatchQueryBuilder25);
        multiMatchQueryBuilder6.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder6.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"max_expansions\" : -1,\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str31 = multiMatchQueryBuilder6.getWriteableName();
        multiMatchQueryBuilder6.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.common.io.stream.StreamInput streamInput34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder6.readFrom(streamInput34);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "multi_match" + "'", str31, "multi_match");
    }

    @Test
    public void test06699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06699");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean21 = multiMatchQueryBuilder20.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder20.useDisMax(true);
        java.lang.Float float26 = multiMatchQueryBuilder20.gettieBreaker();
        java.lang.String[] strArray30 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray30);
        org.elasticsearch.index.query.Operator operator32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.operator(operator32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap36 = multiMatchQueryBuilder35.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder35.zeroTermsQuery(zeroTermsQuery37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder35.lenient(false);
        multiMatchQueryBuilder35.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder35.zeroTermsQuery(zeroTermsQuery43);
        multiMatchQueryBuilder35.tieBreaker = 10.0f;
        java.lang.String[] strArray50 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray50);
        org.elasticsearch.index.query.Operator operator52 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.operator(operator52);
        multiMatchQueryBuilder51.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator56 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder51.operator(operator56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.maxExpansions((int) (short) 10);
        java.lang.String[] strArray63 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray63);
        org.elasticsearch.index.query.Operator operator65 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.operator(operator65);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder64.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder68.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder68.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness73 = multiMatchQueryBuilder68.getfuzziness();
        multiMatchQueryBuilder57.fuzziness = fuzziness73;
        multiMatchQueryBuilder35.setfuzziness(fuzziness73);
        multiMatchQueryBuilder20.fuzziness = fuzziness73;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder20.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness79 = multiMatchQueryBuilder78.fuzziness;
        java.lang.Boolean boolean80 = multiMatchQueryBuilder78.getlenient();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(float26);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(strObjectFloatHashMap36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(fuzziness73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(fuzziness79);
        org.junit.Assert.assertNull(boolean80);
    }

    @Test
    public void test06700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06700");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        multiMatchQueryBuilder8.setanalyzer("hi!");
        java.lang.String[] strArray17 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray17);
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.operator(operator19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException23 = multiMatchQueryBuilder18.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.cutoffFrequency((float) (byte) 100);
        java.lang.String str26 = multiMatchQueryBuilder18.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder18.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder18.tieBreaker((-1.0f));
        org.elasticsearch.index.query.Operator operator31 = null;
        multiMatchQueryBuilder18.operator = operator31;
        java.util.List<java.lang.String> strList33 = multiMatchQueryBuilder18.getfields();
        java.lang.String str34 = multiMatchQueryBuilder18.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type35 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type36 = type35.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder18.type(type35);
        multiMatchQueryBuilder8.type = type35;
        org.elasticsearch.common.ParseField parseField39 = type35.parseField();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(queryValidationException23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str34, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type35.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type36.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(parseField39);
    }

    @Test
    public void test06701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06701");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = multiMatchQueryBuilder12.getfuzziness();
        java.lang.Integer int14 = multiMatchQueryBuilder12.getmaxExpansions();
        multiMatchQueryBuilder12.tieBreaker = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.prefixLength(52);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput19 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder18.writeTo(streamOutput19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(fuzziness13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test06702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06702");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.maxExpansions((-1));
        java.lang.String str16 = multiMatchQueryBuilder15.getNAME();
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        java.lang.Boolean boolean24 = multiMatchQueryBuilder21.getlenient();
        multiMatchQueryBuilder21.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.cutoffFrequency(0.0f);
        java.lang.String str29 = multiMatchQueryBuilder28.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder28.maxExpansions = 100;
        java.lang.String[] strArray37 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray37);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.operator(operator39);
        multiMatchQueryBuilder38.setrewrite("");
        java.util.List<java.lang.String> strList43 = multiMatchQueryBuilder38.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type44 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField45 = type44.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type46 = type44.matchQueryType();
        multiMatchQueryBuilder38.type = type44;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder28.type(type44);
        multiMatchQueryBuilder15.type = type44;
        float float50 = type44.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type51 = type44.matchQueryType();
        float float52 = type44.tieBreaker();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "multi_match" + "'", str16, "multi_match");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type44.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField45);
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type46.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 1.0f + "'", float50 == 1.0f);
        org.junit.Assert.assertTrue("'" + type51 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type51.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + 1.0f + "'", float52 == 1.0f);
    }

    @Test
    public void test06703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06703");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.type;
        java.lang.Integer int11 = multiMatchQueryBuilder4.slop;
        java.lang.Boolean boolean12 = multiMatchQueryBuilder4.useDisMax;
        java.lang.Boolean boolean13 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.Object obj14 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.tieBreaker = 1.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
    }

    @Test
    public void test06704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06704");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        java.lang.String str12 = multiMatchQueryBuilder11.toString();
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.String str20 = multiMatchQueryBuilder17.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder17.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.cutoffFrequency((float) '4');
        boolean boolean26 = multiMatchQueryBuilder11.equals((java.lang.Object) multiMatchQueryBuilder23);
        multiMatchQueryBuilder23.setmaxExpansions((java.lang.Integer) (-1));
        multiMatchQueryBuilder23.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder23.prefixLength((int) (byte) 10);
        java.lang.String str33 = multiMatchQueryBuilder23.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = multiMatchQueryBuilder23.type;
        java.lang.String str35 = multiMatchQueryBuilder23.getName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str12, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "multi_match" + "'", str35, "multi_match");
    }

    @Test
    public void test06705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06705");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder12.setzeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 1,\n    \"max_expansions\" : 100,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}", 52.0f);
        multiMatchQueryBuilder19.maxExpansions = 35;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test06706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06706");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.analyzer = "multi_match";
        multiMatchQueryBuilder4.setcutoffFrequency((java.lang.Float) (-1.0f));
        multiMatchQueryBuilder4.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type14 = multiMatchQueryBuilder4.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder16.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : 10,\n    \"maxExpansions\" : -1,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"maxExpansions\" : 1,\n    \"useDisMax\" : false,\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test06707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06707");
        java.lang.String[] strArray4 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder5 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray4);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray4);
        java.lang.Integer int7 = multiMatchQueryBuilder6.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder6.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
    }

    @Test
    public void test06708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06708");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap13;
        multiMatchQueryBuilder4.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery17);
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = null;
        multiMatchQueryBuilder18.fuzziness = fuzziness19;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery21);
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        java.lang.Boolean boolean30 = multiMatchQueryBuilder27.getlenient();
        multiMatchQueryBuilder27.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder27.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness35 = multiMatchQueryBuilder34.fuzziness;
        java.lang.Integer int36 = multiMatchQueryBuilder34.slop;
        multiMatchQueryBuilder34.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder34.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder18.fuzziness((java.lang.Object) multiMatchQueryBuilder40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder18.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str44 = multiMatchQueryBuilder43.analyzer;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(fuzziness35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}" + "'", str44, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test06709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06709");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.tieBreaker((float) 10);
        java.lang.Object obj17 = multiMatchQueryBuilder16.gettext();
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder22.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder22.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness34 = multiMatchQueryBuilder22.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder22.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder22.zeroTermsQuery(zeroTermsQuery37);
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException48 = multiMatchQueryBuilder43.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder43.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder43.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder43.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type55 = multiMatchQueryBuilder43.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type56 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField57 = type56.parseField();
        multiMatchQueryBuilder43.type = type56;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder38.type(type56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder16.fuzziness((java.lang.Object) multiMatchQueryBuilder59);
        java.lang.String str61 = multiMatchQueryBuilder59.toString();
        org.elasticsearch.index.query.Operator operator62 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder59.operator(operator62);
        java.lang.String str64 = multiMatchQueryBuilder63.getWriteableName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(fuzziness34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(queryValidationException48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(type55);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type56.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str61, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "multi_match" + "'", str64, "multi_match");
    }

    @Test
    public void test06710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06710");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        multiMatchQueryBuilder13.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.prefixLength((int) (short) 100);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder17.useDisMax;
        org.elasticsearch.common.io.stream.StreamOutput streamOutput21 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder17.writeTo(streamOutput21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean20);
    }

    @Test
    public void test06711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06711");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.common.unit.Fuzziness fuzziness9 = multiMatchQueryBuilder8.fuzziness;
        java.util.List<java.lang.String> strList10 = multiMatchQueryBuilder8.getfields();
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 10);
        multiMatchQueryBuilder8.cutoffFrequency = 10.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 10,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str17 = multiMatchQueryBuilder8.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(fuzziness9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test06712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06712");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.fuzzyRewrite("");
        multiMatchQueryBuilder14.slop = (-1);
        java.lang.Boolean boolean17 = multiMatchQueryBuilder14.lenient;
        multiMatchQueryBuilder14.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 10,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(boolean17);
    }

    @Test
    public void test06713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06713");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.Boolean boolean17 = multiMatchQueryBuilder4.getuseDisMax();
        org.elasticsearch.index.query.Operator operator18 = null;
        multiMatchQueryBuilder4.operator = operator18;
        org.elasticsearch.common.unit.Fuzziness fuzziness20 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness20;
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = multiMatchQueryBuilder4.zeroTermsQuery;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder4.getzeroTermsQuery();
        java.lang.String str26 = multiMatchQueryBuilder4.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNull(zeroTermsQuery24);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str26, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test06714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06714");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.text;
        java.lang.String str15 = multiMatchQueryBuilder13.getfuzzyRewrite();
        java.lang.Float float16 = multiMatchQueryBuilder13.cutoffFrequency;
        java.lang.Object obj17 = multiMatchQueryBuilder13.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException29 = multiMatchQueryBuilder24.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder24.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder24.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder24.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness36 = multiMatchQueryBuilder24.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder24.slop((int) (short) 0);
        java.lang.String str39 = multiMatchQueryBuilder24.getrewrite();
        java.lang.Integer int40 = multiMatchQueryBuilder24.maxExpansions;
        org.elasticsearch.index.query.Operator operator41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder24.operator(operator41);
        java.lang.String[] strArray46 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray46);
        org.elasticsearch.index.query.Operator operator48 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.operator(operator48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder47.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException52 = multiMatchQueryBuilder47.validate();
        java.lang.Integer int53 = multiMatchQueryBuilder47.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery54 = multiMatchQueryBuilder47.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder47.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder47.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder47.boost((float) 0);
        java.lang.String str62 = multiMatchQueryBuilder47.fuzzyRewrite;
        java.lang.String[] strArray66 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray66);
        org.elasticsearch.index.query.Operator operator68 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.operator(operator68);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder67.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap72 = multiMatchQueryBuilder71.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery73 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder71.zeroTermsQuery(zeroTermsQuery73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder71.lenient(false);
        multiMatchQueryBuilder71.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery79 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder71.zeroTermsQuery(zeroTermsQuery79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder80.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type83 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder80.settype(type83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder47.fuzziness((java.lang.Object) type83);
        java.lang.String str86 = multiMatchQueryBuilder85.getfuzzyRewrite();
        multiMatchQueryBuilder85.slop = 0;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap89 = multiMatchQueryBuilder85.getfieldsBoosts();
        multiMatchQueryBuilder42.setfieldsBoosts(strObjectFloatHashMap89);
        multiMatchQueryBuilder19.setfieldsBoosts(strObjectFloatHashMap89);
        java.lang.Float float92 = multiMatchQueryBuilder19.cutoffFrequency;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(queryValidationException29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(fuzziness36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(queryValidationException52);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNull(zeroTermsQuery54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNull(strObjectFloatHashMap72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertTrue("'" + type83 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type83.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap89);
        org.junit.Assert.assertNull(float92);
    }

    @Test
    public void test06715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06715");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.slop((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.tieBreaker(0.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = multiMatchQueryBuilder17.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(zeroTermsQuery18);
    }

    @Test
    public void test06716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06716");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Object obj15 = multiMatchQueryBuilder4.gettext();
        java.lang.Object obj16 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = multiMatchQueryBuilder4.type;
        java.lang.Integer int18 = multiMatchQueryBuilder4.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "multi_match" + "'", obj15, "multi_match");
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "multi_match" + "'", obj16, "multi_match");
        org.junit.Assert.assertNull(type17);
        org.junit.Assert.assertNull(int18);
    }

    @Test
    public void test06717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06717");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.queryName("");
        java.util.List<java.lang.String> strList18 = multiMatchQueryBuilder4.fields;
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"\"\n  }\n}");
        java.lang.Integer int21 = multiMatchQueryBuilder4.getslop();
        multiMatchQueryBuilder4.setfuzzyRewrite("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder4.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"useDisMax\" : true,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(fuzziness24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test06718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06718");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder24.setoperator(operator29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder24.zeroTermsQuery = zeroTermsQuery31;
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        multiMatchQueryBuilder37.maxExpansions = 0;
        java.lang.Boolean boolean40 = multiMatchQueryBuilder37.lenient;
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap50 = multiMatchQueryBuilder49.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.minimumShouldMatch("multi_match");
        java.lang.String str53 = multiMatchQueryBuilder52.toString();
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.Operator operator59 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.operator(operator59);
        java.lang.String str61 = multiMatchQueryBuilder58.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness62 = multiMatchQueryBuilder58.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder58.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.cutoffFrequency((float) '4');
        boolean boolean67 = multiMatchQueryBuilder52.equals((java.lang.Object) multiMatchQueryBuilder64);
        multiMatchQueryBuilder64.setmaxExpansions((java.lang.Integer) (-1));
        multiMatchQueryBuilder64.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder37.fuzziness((java.lang.Object) multiMatchQueryBuilder64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder64.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder73.boost((float) (short) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery76 = multiMatchQueryBuilder73.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(boolean40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(strObjectFloatHashMap50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str53, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "multi_match" + "'", str61, "multi_match");
        org.junit.Assert.assertNull(fuzziness62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNull(zeroTermsQuery76);
    }

    @Test
    public void test06719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06719");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        multiMatchQueryBuilder12.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Object obj15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.type(obj15);
        org.elasticsearch.index.query.Operator operator17 = null;
        multiMatchQueryBuilder12.operator = operator17;
        multiMatchQueryBuilder12.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder12.analyzer;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test06720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06720");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.slop(1);
        java.lang.String str18 = multiMatchQueryBuilder17.minimumShouldMatch;
        java.lang.String str19 = multiMatchQueryBuilder17.rewrite;
        java.lang.String str20 = multiMatchQueryBuilder17.getWriteableName();
        multiMatchQueryBuilder17.setcutoffFrequency((java.lang.Float) 10.0f);
        java.util.List<java.lang.String> strList23 = multiMatchQueryBuilder17.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = multiMatchQueryBuilder17.type;
        multiMatchQueryBuilder17.tieBreaker = 1.0f;
        multiMatchQueryBuilder17.maxExpansions = (-1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "multi_match" + "'", str18, "multi_match");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNull(type24);
    }

    @Test
    public void test06721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06721");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.Object obj17 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str20 = multiMatchQueryBuilder19.fuzzyRewrite;
        multiMatchQueryBuilder19.setprefixLength((java.lang.Integer) 32);
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap32 = multiMatchQueryBuilder31.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder31.lenient(false);
        java.lang.Object obj37 = multiMatchQueryBuilder36.gettext();
        java.lang.Integer int38 = multiMatchQueryBuilder36.getslop();
        multiMatchQueryBuilder36.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder36.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException43 = multiMatchQueryBuilder42.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder42.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder42.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type48 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        multiMatchQueryBuilder47.type = type48;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder19.type(type48);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(strObjectFloatHashMap32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertEquals("'" + obj37 + "' != '" + "multi_match" + "'", obj37, "multi_match");
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(queryValidationException43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type48.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
    }

    @Test
    public void test06722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06722");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.maxExpansions((-1));
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder15.getfuzziness();
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        java.lang.Boolean boolean24 = multiMatchQueryBuilder21.getlenient();
        multiMatchQueryBuilder21.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder21.tieBreaker((float) (-1));
        java.lang.Integer int31 = multiMatchQueryBuilder30.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder30.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap35 = multiMatchQueryBuilder30.getfieldsBoosts();
        multiMatchQueryBuilder15.setfieldsBoosts(strObjectFloatHashMap35);
        multiMatchQueryBuilder15.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap35);
    }

    @Test
    public void test06723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06723");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        java.lang.Object obj5 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder4.tieBreaker((float) (byte) 10);
        java.lang.String str8 = multiMatchQueryBuilder4.minimumShouldMatch;
        multiMatchQueryBuilder4.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 1,\n    \"maxExpansions\" : -1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + "multi_match" + "'", obj5, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
    }

    @Test
    public void test06724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06724");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Integer int15 = multiMatchQueryBuilder14.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.maxExpansions((int) (byte) 100);
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = multiMatchQueryBuilder22.getzeroTermsQuery();
        java.lang.Object obj29 = multiMatchQueryBuilder22.text;
        java.lang.String[] strArray33 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray33);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException39 = multiMatchQueryBuilder34.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder34.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap42 = multiMatchQueryBuilder41.getfieldsBoosts();
        java.lang.String[] strArray46 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray46);
        org.elasticsearch.index.query.Operator operator48 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.operator(operator48);
        java.lang.String str50 = multiMatchQueryBuilder47.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness51 = multiMatchQueryBuilder47.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder47.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type54 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder47.settype(type54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder41.type(type54);
        org.elasticsearch.index.search.MatchQuery.Type type57 = type54.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type58 = type54.matchQueryType();
        multiMatchQueryBuilder22.settype(type54);
        multiMatchQueryBuilder14.type = type54;
        org.elasticsearch.common.ParseField parseField61 = type54.parseField();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNull(zeroTermsQuery28);
        org.junit.Assert.assertEquals("'" + obj29 + "' != '" + "multi_match" + "'", obj29, "multi_match");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(queryValidationException39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(strObjectFloatHashMap42);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "multi_match" + "'", str50, "multi_match");
        org.junit.Assert.assertNull(fuzziness51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertTrue("'" + type54 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type54.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertTrue("'" + type57 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type57.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type58.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField61);
    }

    @Test
    public void test06725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06725");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder8.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = null;
        multiMatchQueryBuilder8.setfuzziness(fuzziness13);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = multiMatchQueryBuilder8.zeroTermsQuery;
        multiMatchQueryBuilder8.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.tieBreaker((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Object obj24 = multiMatchQueryBuilder23.text;
        multiMatchQueryBuilder23.tieBreaker = 0.0f;
        java.lang.Integer int27 = multiMatchQueryBuilder23.getprefixLength();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = multiMatchQueryBuilder23.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(zeroTermsQuery15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + "multi_match" + "'", obj24, "multi_match");
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNull(zeroTermsQuery28);
    }

    @Test
    public void test06726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06726");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness8;
        java.lang.String str10 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder4.getfuzzyRewrite();
        multiMatchQueryBuilder4.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzziness\" : \"FALSE\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 0.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test06727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06727");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.analyzer = "multi_match";
        org.elasticsearch.common.unit.Fuzziness fuzziness22 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.Boolean boolean23 = multiMatchQueryBuilder4.useDisMax;
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.field("");
        multiMatchQueryBuilder28.minimumShouldMatch = "hi!";
        java.lang.Float float35 = multiMatchQueryBuilder28.tieBreaker;
        java.lang.Object obj36 = multiMatchQueryBuilder28.text;
        java.lang.Float float37 = multiMatchQueryBuilder28.getcutoffFrequency();
        multiMatchQueryBuilder28.prefixLength = 100;
        multiMatchQueryBuilder28.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder28.cutoffFrequency((float) 1L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder28);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery45 = null;
        multiMatchQueryBuilder44.zeroTermsQuery = zeroTermsQuery45;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(fuzziness22);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(float35);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + "multi_match" + "'", obj36, "multi_match");
        org.junit.Assert.assertNull(float37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
    }

    @Test
    public void test06728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06728");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder4.fields;
        java.lang.Boolean boolean21 = multiMatchQueryBuilder4.useDisMax;
        multiMatchQueryBuilder4.tieBreaker = 0.0f;
        java.lang.String str24 = multiMatchQueryBuilder4.getWriteableName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
    }

    @Test
    public void test06729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06729");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder4.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.boost((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder19.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : 10,\n    \"maxExpansions\" : -1,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}", (float) 10);
        multiMatchQueryBuilder22.tieBreaker = (-1.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test06730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06730");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.Operator operator10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.operator(operator10);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) (-1.0f));
        java.lang.String[] strArray17 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray17);
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.operator(operator19);
        java.lang.Boolean boolean21 = multiMatchQueryBuilder18.getlenient();
        multiMatchQueryBuilder18.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder18.tieBreaker((float) (-1));
        java.lang.Integer int28 = multiMatchQueryBuilder27.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type29 = multiMatchQueryBuilder27.gettype();
        java.lang.String[] strArray33 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray33);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        java.lang.String str37 = multiMatchQueryBuilder34.getWriteableName();
        java.lang.Boolean boolean38 = multiMatchQueryBuilder34.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder34.getPROTOTYPE();
        multiMatchQueryBuilder34.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray45 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray45);
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.operator(operator47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder46.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException51 = multiMatchQueryBuilder46.validate();
        java.lang.Integer int52 = multiMatchQueryBuilder46.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery53 = multiMatchQueryBuilder46.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder46.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder46.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder46.boost((float) 0);
        java.lang.String str61 = multiMatchQueryBuilder46.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap62 = multiMatchQueryBuilder46.fieldsBoosts;
        multiMatchQueryBuilder34.fieldsBoosts = strObjectFloatHashMap62;
        multiMatchQueryBuilder27.setfieldsBoosts(strObjectFloatHashMap62);
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap62;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.Operator operator70 = multiMatchQueryBuilder4.getoperator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNull(type29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "multi_match" + "'", str37, "multi_match");
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(queryValidationException51);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNull(zeroTermsQuery53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNull(operator70);
    }

    @Test
    public void test06731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06731");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = multiMatchQueryBuilder4.getfieldsBoosts();
        java.lang.String str14 = multiMatchQueryBuilder4.getfuzzyRewrite();
        multiMatchQueryBuilder4.setfuzzyRewrite("");
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.operator(operator17);
        multiMatchQueryBuilder4.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzziness\" : \"FALSE\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 0.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(strObjectFloatHashMap13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test06732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06732");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type16 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        float float17 = type16.tieBreaker();
        float float18 = type16.tieBreaker();
        org.elasticsearch.common.ParseField parseField19 = type16.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.type(type16);
        org.elasticsearch.common.xcontent.XContentType xContentType21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference22 = multiMatchQueryBuilder20.buildAsBytes(xContentType21);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type16.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertNotNull(parseField19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test06733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06733");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        java.lang.String str9 = multiMatchQueryBuilder4.rewrite;
        java.lang.String[] strArray13 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray13);
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.operator(operator15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException19 = multiMatchQueryBuilder14.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.cutoffFrequency((float) (byte) 100);
        float float22 = multiMatchQueryBuilder14.boost();
        multiMatchQueryBuilder14.setanalyzer("");
        multiMatchQueryBuilder14.setcutoffFrequency((java.lang.Float) 0.0f);
        boolean boolean27 = multiMatchQueryBuilder4.equals((java.lang.Object) multiMatchQueryBuilder14);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery28);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        multiMatchQueryBuilder14.zeroTermsQuery = zeroTermsQuery30;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(queryValidationException19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 1.0f + "'", float22 == 1.0f);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test06734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06734");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder16.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder16.type;
        multiMatchQueryBuilder16.settieBreaker((java.lang.Float) (-1.0f));
        float float24 = multiMatchQueryBuilder16.boost();
        java.lang.String[] strArray28 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray28);
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.operator(operator30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.lenient(false);
        java.lang.Integer int34 = multiMatchQueryBuilder33.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder33.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str37 = multiMatchQueryBuilder33.minimumShouldMatch;
        java.lang.String[] strArray41 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray41);
        org.elasticsearch.index.query.Operator operator43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.operator(operator43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException47 = multiMatchQueryBuilder42.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder42.cutoffFrequency((float) (byte) 100);
        java.lang.String str50 = multiMatchQueryBuilder42.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder42.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness53 = multiMatchQueryBuilder42.getfuzziness();
        org.elasticsearch.common.unit.Fuzziness fuzziness54 = null;
        multiMatchQueryBuilder42.fuzziness = fuzziness54;
        java.lang.Integer int56 = multiMatchQueryBuilder42.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery57 = multiMatchQueryBuilder42.zeroTermsQuery;
        boolean boolean58 = multiMatchQueryBuilder33.equals((java.lang.Object) zeroTermsQuery57);
        java.lang.String[] strArray63 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray63);
        java.lang.String[] strArray69 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray69);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray63, strArray69);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean58, strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder16.fuzziness((java.lang.Object) multiMatchQueryBuilder72);
        multiMatchQueryBuilder16.maxExpansions = 1;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 1.0f + "'", float24 == 1.0f);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNull(queryValidationException47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(fuzziness53);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNull(zeroTermsQuery57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
    }

    @Test
    public void test06735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06735");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        java.lang.String str14 = multiMatchQueryBuilder4.getrewrite();
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.prefixLength((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder18.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(zeroTermsQuery21);
    }

    @Test
    public void test06736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06736");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder24.setoperator(operator29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder24.zeroTermsQuery = zeroTermsQuery31;
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        multiMatchQueryBuilder4.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery40 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery40;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type42 = multiMatchQueryBuilder4.gettype();
        java.lang.String str43 = multiMatchQueryBuilder4.rewrite;
        org.elasticsearch.index.query.QueryValidationException queryValidationException44 = multiMatchQueryBuilder4.validate();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type42.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str43, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(queryValidationException44);
    }

    @Test
    public void test06737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06737");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery18;
        java.lang.Integer int20 = multiMatchQueryBuilder4.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        multiMatchQueryBuilder22.zeroTermsQuery = zeroTermsQuery25;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test06738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06738");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder8.setanalyzer("multi_match");
        org.elasticsearch.index.query.QueryValidationException queryValidationException13 = multiMatchQueryBuilder8.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder8.zeroTermsQuery;
        java.lang.String str15 = multiMatchQueryBuilder8.getrewrite();
        multiMatchQueryBuilder8.lenient = true;
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        java.lang.String str25 = multiMatchQueryBuilder22.getWriteableName();
        java.lang.Boolean boolean26 = multiMatchQueryBuilder22.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder22.getPROTOTYPE();
        multiMatchQueryBuilder22.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray33 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray33);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException39 = multiMatchQueryBuilder34.validate();
        java.lang.Integer int40 = multiMatchQueryBuilder34.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery41 = multiMatchQueryBuilder34.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder34.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder34.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder34.boost((float) 0);
        java.lang.String str49 = multiMatchQueryBuilder34.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap50 = multiMatchQueryBuilder34.fieldsBoosts;
        multiMatchQueryBuilder22.fieldsBoosts = strObjectFloatHashMap50;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap50;
        multiMatchQueryBuilder8.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(queryValidationException13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "multi_match" + "'", str25, "multi_match");
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(queryValidationException39);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNull(zeroTermsQuery41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap50);
    }

    @Test
    public void test06739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06739");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        java.lang.String str19 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.getPROTOTYPE();
        java.lang.Object obj21 = multiMatchQueryBuilder20.gettext();
        multiMatchQueryBuilder20.lenient = true;
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = null;
        multiMatchQueryBuilder20.setfuzziness(fuzziness24);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test06740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06740");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("");
        java.lang.String str26 = multiMatchQueryBuilder21.getrewrite();
        java.lang.Object obj27 = multiMatchQueryBuilder21.text;
        float float28 = multiMatchQueryBuilder21.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder21.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float31 = multiMatchQueryBuilder21.gettieBreaker();
        java.lang.String[] strArray35 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray35);
        org.elasticsearch.index.query.Operator operator37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.operator(operator37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder36.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException41 = multiMatchQueryBuilder36.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder36.cutoffFrequency((float) (byte) 100);
        float float44 = multiMatchQueryBuilder36.boost();
        multiMatchQueryBuilder36.setanalyzer("");
        java.lang.Boolean boolean47 = multiMatchQueryBuilder36.getuseDisMax();
        java.lang.String str48 = multiMatchQueryBuilder36.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder36.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray54 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray54);
        org.elasticsearch.index.query.Operator operator56 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.operator(operator56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder55.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder59.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder59.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness64 = multiMatchQueryBuilder59.getfuzziness();
        multiMatchQueryBuilder50.fuzziness = fuzziness64;
        multiMatchQueryBuilder21.setfuzziness(fuzziness64);
        multiMatchQueryBuilder16.fuzziness = fuzziness64;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder16.tieBreaker((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder16.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + "multi_match" + "'", obj27, "multi_match");
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 1.0f + "'", float28 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(float31);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(queryValidationException41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 1.0f + "'", float44 == 1.0f);
        org.junit.Assert.assertNull(boolean47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(fuzziness64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
    }

    @Test
    public void test06741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06741");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder8.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = null;
        multiMatchQueryBuilder8.setfuzziness(fuzziness13);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = multiMatchQueryBuilder8.zeroTermsQuery;
        multiMatchQueryBuilder8.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.tieBreaker((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Object obj24 = multiMatchQueryBuilder23.text;
        multiMatchQueryBuilder23.tieBreaker = 0.0f;
        java.lang.Integer int27 = multiMatchQueryBuilder23.getprefixLength();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = multiMatchQueryBuilder23.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(zeroTermsQuery15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + "multi_match" + "'", obj24, "multi_match");
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNull(zeroTermsQuery28);
    }

    @Test
    public void test06742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06742");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder8.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = null;
        multiMatchQueryBuilder8.setfuzziness(fuzziness13);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = multiMatchQueryBuilder8.zeroTermsQuery;
        multiMatchQueryBuilder8.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.tieBreaker((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.maxExpansions(32);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(zeroTermsQuery15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test06743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06743");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setrewrite("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap15;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder4.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(52);
        java.lang.Integer int20 = multiMatchQueryBuilder4.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"useDisMax\\\" : true,\\n    \\\"cutoffFrequency\\\" : 52.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : false,\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test06744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06744");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.minimumShouldMatch("");
        java.lang.Integer int17 = multiMatchQueryBuilder4.maxExpansions;
        java.lang.Boolean boolean18 = multiMatchQueryBuilder4.getlenient();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = multiMatchQueryBuilder4.getzeroTermsQuery();
        multiMatchQueryBuilder4.tieBreaker = 52.0f;
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNull(zeroTermsQuery19);
    }

    @Test
    public void test06745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06745");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        java.lang.String str13 = multiMatchQueryBuilder4.getName();
        multiMatchQueryBuilder4.tieBreaker = 52.0f;
        multiMatchQueryBuilder4.lenient = true;
        org.elasticsearch.index.query.Operator operator18 = null;
        multiMatchQueryBuilder4.setoperator(operator18);
        java.lang.String str20 = multiMatchQueryBuilder4.getrewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test06746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06746");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder20.fuzziness;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = multiMatchQueryBuilder20.fieldsBoosts;
        org.elasticsearch.index.query.QueryValidationException queryValidationException23 = multiMatchQueryBuilder20.validate();
        java.lang.Boolean boolean24 = multiMatchQueryBuilder20.getlenient();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNull(strObjectFloatHashMap22);
        org.junit.Assert.assertNull(queryValidationException23);
        org.junit.Assert.assertNull(boolean24);
    }

    @Test
    public void test06747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06747");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        java.lang.String str12 = multiMatchQueryBuilder11.toString();
        java.lang.String str13 = multiMatchQueryBuilder11.getrewrite();
        java.lang.String str14 = multiMatchQueryBuilder11.rewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.maxExpansions((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.maxExpansions((int) (short) 100);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str12, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test06748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06748");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        float float7 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"\"\n  }\n}");
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) 97);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 1.0f + "'", float7 == 1.0f);
        org.junit.Assert.assertNull(fuzziness8);
    }

    @Test
    public void test06749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06749");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.minimumShouldMatch("");
        multiMatchQueryBuilder16.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}";
        java.lang.Boolean boolean19 = multiMatchQueryBuilder16.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = multiMatchQueryBuilder16.gettype();
        multiMatchQueryBuilder16.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNull(type20);
    }

    @Test
    public void test06750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06750");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.useDisMax(true);
        java.lang.Integer int18 = multiMatchQueryBuilder17.getslop();
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException28 = multiMatchQueryBuilder23.validate();
        java.lang.Integer int29 = multiMatchQueryBuilder23.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = multiMatchQueryBuilder23.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder23.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder23.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder23.boost((float) 0);
        java.lang.String str38 = multiMatchQueryBuilder23.fuzzyRewrite;
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap48 = multiMatchQueryBuilder47.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery49 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder47.zeroTermsQuery(zeroTermsQuery49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder47.lenient(false);
        multiMatchQueryBuilder47.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery55 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder47.zeroTermsQuery(zeroTermsQuery55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type59 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder56.settype(type59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder23.fuzziness((java.lang.Object) type59);
        float float62 = type59.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type63 = type59.matchQueryType();
        multiMatchQueryBuilder17.settype(type59);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput65 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder17.writeTo(streamOutput65);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(queryValidationException28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNull(zeroTermsQuery30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(strObjectFloatHashMap48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertTrue("'" + type59 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type59.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + 0.0f + "'", float62 == 0.0f);
        org.junit.Assert.assertTrue("'" + type63 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type63.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test06751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06751");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Integer int15 = multiMatchQueryBuilder14.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.maxExpansions((int) (byte) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder14.tieBreaker((float) (short) 100);
        multiMatchQueryBuilder19.settieBreaker((java.lang.Float) 97.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test06752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06752");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.tieBreaker((float) (short) 0);
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) true);
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        multiMatchQueryBuilder10.slop = 10;
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = multiMatchQueryBuilder10.type;
        java.lang.String str19 = multiMatchQueryBuilder10.getName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
    }

    @Test
    public void test06753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06753");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.tieBreaker((-1.0f));
        multiMatchQueryBuilder16.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        multiMatchQueryBuilder16.zeroTermsQuery = zeroTermsQuery19;
        java.lang.Integer int21 = multiMatchQueryBuilder16.prefixLength;
        java.lang.String str22 = multiMatchQueryBuilder16.queryName();
        java.util.List<java.lang.String> strList23 = multiMatchQueryBuilder16.getfields();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strList23);
    }

    @Test
    public void test06754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06754");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        multiMatchQueryBuilder4.maxExpansions = 100;
        org.elasticsearch.index.query.Operator operator17 = multiMatchQueryBuilder4.operator;
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder26.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness31 = multiMatchQueryBuilder26.getfuzziness();
        multiMatchQueryBuilder4.fuzziness = fuzziness31;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder4.cutoffFrequency(100.0f);
        multiMatchQueryBuilder34.settieBreaker((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.slop(0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(operator17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(fuzziness31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
    }

    @Test
    public void test06755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06755");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.useDisMax(true);
        multiMatchQueryBuilder18.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.String[] strArray28 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray28);
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.operator(operator30);
        java.lang.Boolean boolean32 = multiMatchQueryBuilder29.getlenient();
        multiMatchQueryBuilder29.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder29.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder29.tieBreaker((float) (-1));
        multiMatchQueryBuilder29.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder29.getPROTOTYPE();
        java.lang.Integer int42 = multiMatchQueryBuilder29.prefixLength;
        java.lang.String[] strArray46 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray46);
        org.elasticsearch.index.query.Operator operator48 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.operator(operator48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder47.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException52 = multiMatchQueryBuilder47.validate();
        java.lang.Integer int53 = multiMatchQueryBuilder47.slop;
        multiMatchQueryBuilder47.prefixLength = 10;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap56 = null;
        multiMatchQueryBuilder47.setfieldsBoosts(strObjectFloatHashMap56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder47.field("", (float) (byte) 100);
        java.lang.String str61 = multiMatchQueryBuilder60.getminimumShouldMatch();
        org.elasticsearch.index.query.Operator operator62 = multiMatchQueryBuilder60.getoperator();
        boolean boolean63 = multiMatchQueryBuilder29.equals((java.lang.Object) multiMatchQueryBuilder60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.Object obj65 = multiMatchQueryBuilder64.text;
        java.lang.String[] strArray69 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray69);
        org.elasticsearch.index.query.Operator operator71 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder70.operator(operator71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder70.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException75 = multiMatchQueryBuilder70.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder70.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder70.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder70.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type82 = multiMatchQueryBuilder70.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type83 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField84 = type83.parseField();
        multiMatchQueryBuilder70.type = type83;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder64.type(type83);
        org.elasticsearch.common.ParseField parseField87 = type83.parseField();
        org.elasticsearch.common.ParseField parseField88 = type83.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = multiMatchQueryBuilder29.type(type83);
        multiMatchQueryBuilder18.type = type83;
        float float91 = type83.tieBreaker();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(boolean32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(queryValidationException52);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(operator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNull(queryValidationException75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNull(type82);
        org.junit.Assert.assertTrue("'" + type83 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type83.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField84);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertNotNull(parseField87);
        org.junit.Assert.assertNotNull(parseField88);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + 1.0f + "'", float91 == 1.0f);
    }

    @Test
    public void test06756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06756");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder12.setprefixLength((java.lang.Integer) 100);
        multiMatchQueryBuilder12.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.prefixLength((int) ' ');
        java.lang.String str19 = multiMatchQueryBuilder18.queryName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(zeroTermsQuery10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str19, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test06757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06757");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder24.setoperator(operator29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder24.zeroTermsQuery = zeroTermsQuery31;
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        multiMatchQueryBuilder37.maxExpansions = 0;
        java.lang.Boolean boolean40 = multiMatchQueryBuilder37.lenient;
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap50 = multiMatchQueryBuilder49.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.minimumShouldMatch("multi_match");
        java.lang.String str53 = multiMatchQueryBuilder52.toString();
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.Operator operator59 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.operator(operator59);
        java.lang.String str61 = multiMatchQueryBuilder58.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness62 = multiMatchQueryBuilder58.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder58.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.cutoffFrequency((float) '4');
        boolean boolean67 = multiMatchQueryBuilder52.equals((java.lang.Object) multiMatchQueryBuilder64);
        multiMatchQueryBuilder64.setmaxExpansions((java.lang.Integer) (-1));
        multiMatchQueryBuilder64.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder37.fuzziness((java.lang.Object) multiMatchQueryBuilder64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder64.maxExpansions((int) (byte) 100);
        multiMatchQueryBuilder74.settieBreaker((java.lang.Float) (-1.0f));
        java.lang.String str77 = multiMatchQueryBuilder74.rewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(boolean40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(strObjectFloatHashMap50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str53, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "multi_match" + "'", str61, "multi_match");
        org.junit.Assert.assertNull(fuzziness62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test06758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06758");
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion0 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE;
        java.lang.Class<?> wildcardClass1 = fieldCaseConversion0.getClass();
        java.lang.String[] strArray5 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray5);
        org.elasticsearch.index.query.Operator operator7 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.operator(operator7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder6.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException11 = multiMatchQueryBuilder6.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder6.cutoffFrequency((float) (byte) 100);
        java.lang.String str14 = multiMatchQueryBuilder6.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder6.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness17 = multiMatchQueryBuilder6.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder6.getPROTOTYPE();
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder18, strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass1, strArray22);
        float float26 = multiMatchQueryBuilder25.boost();
        java.lang.String str27 = multiMatchQueryBuilder25.getrewrite();
        java.util.List<java.lang.String> strList28 = multiMatchQueryBuilder25.fields;
        java.lang.Boolean boolean29 = multiMatchQueryBuilder25.lenient;
        org.junit.Assert.assertTrue("'" + fieldCaseConversion0 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE + "'", fieldCaseConversion0.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE));
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(queryValidationException11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(fuzziness17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 1.0f + "'", float26 == 1.0f);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNull(boolean29);
    }

    @Test
    public void test06759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06759");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        java.lang.Object obj11 = multiMatchQueryBuilder10.gettext();
        multiMatchQueryBuilder10.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}";
        java.lang.String[] strArray17 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray17);
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.operator(operator19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException23 = multiMatchQueryBuilder18.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.zeroTermsQuery(zeroTermsQuery26);
        multiMatchQueryBuilder27.tieBreaker = (-1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder27.cutoffFrequency((float) (short) 100);
        java.lang.String[] strArray37 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray37);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.operator(operator39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder38.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException43 = multiMatchQueryBuilder38.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder38.cutoffFrequency((float) (byte) 100);
        float float46 = multiMatchQueryBuilder38.boost();
        multiMatchQueryBuilder38.setanalyzer("");
        java.lang.Boolean boolean49 = multiMatchQueryBuilder38.getuseDisMax();
        java.lang.String str50 = multiMatchQueryBuilder38.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder38.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray56 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray56);
        org.elasticsearch.index.query.Operator operator58 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.operator(operator58);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder57.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder61.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder61.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness66 = multiMatchQueryBuilder61.getfuzziness();
        multiMatchQueryBuilder52.fuzziness = fuzziness66;
        multiMatchQueryBuilder33.setfuzziness(fuzziness66);
        multiMatchQueryBuilder10.setfuzziness(fuzziness66);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "multi_match" + "'", obj11, "multi_match");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(queryValidationException23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(queryValidationException43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + 1.0f + "'", float46 == 1.0f);
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(fuzziness66);
    }

    @Test
    public void test06760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06760");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        multiMatchQueryBuilder10.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}";
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException22 = multiMatchQueryBuilder17.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.cutoffFrequency((float) (byte) 100);
        java.lang.String str25 = multiMatchQueryBuilder17.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder17.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder17.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        float float31 = type30.tieBreaker();
        multiMatchQueryBuilder17.settype(type30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder10.type(type30);
        java.lang.Object obj34 = multiMatchQueryBuilder33.gettext();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap35 = null;
        multiMatchQueryBuilder33.fieldsBoosts = strObjectFloatHashMap35;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(queryValidationException22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type30.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 1.0f + "'", float31 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "multi_match" + "'", obj34, "multi_match");
    }

    @Test
    public void test06761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06761");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.lang.Integer int8 = multiMatchQueryBuilder4.getmaxExpansions();
        multiMatchQueryBuilder4.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder12.getNAME();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery14);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
    }

    @Test
    public void test06762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06762");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        java.lang.Object obj16 = multiMatchQueryBuilder15.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = multiMatchQueryBuilder18.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.lenient(true);
        java.lang.Integer int22 = multiMatchQueryBuilder18.getprefixLength();
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException32 = multiMatchQueryBuilder27.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder27.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.zeroTermsQuery(zeroTermsQuery35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.maxExpansions((-1));
        java.util.List<java.lang.String> strList39 = multiMatchQueryBuilder34.getfields();
        multiMatchQueryBuilder34.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder34.useDisMax(true);
        java.lang.String[] strArray47 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray47);
        org.elasticsearch.index.query.Operator operator49 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.operator(operator49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder48.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException53 = multiMatchQueryBuilder48.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder48.cutoffFrequency((float) (byte) 100);
        java.lang.String str56 = multiMatchQueryBuilder48.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder48.queryName("");
        multiMatchQueryBuilder58.setslop((java.lang.Integer) 0);
        java.lang.String[] strArray64 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) true, strArray64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder18, strArray64);
        java.lang.Float float69 = multiMatchQueryBuilder68.cutoffFrequency;
        org.elasticsearch.index.query.Operator operator70 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder68.operator(operator70);
        multiMatchQueryBuilder68.maxExpansions = 0;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "multi_match" + "'", obj16, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(strObjectFloatHashMap19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(queryValidationException32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(queryValidationException53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNull(float69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
    }

    @Test
    public void test06763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06763");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.Operator operator16 = multiMatchQueryBuilder4.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(operator16);
    }

    @Test
    public void test06764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06764");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.Object obj17 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.tieBreaker = (-1.0f);
        java.lang.Integer int20 = multiMatchQueryBuilder4.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        java.lang.Object obj24 = multiMatchQueryBuilder4.gettext();
        org.elasticsearch.common.io.stream.StreamInput streamInput25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder4.readFrom(streamInput25);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + "multi_match" + "'", obj24, "multi_match");
    }

    @Test
    public void test06765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06765");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int16 = multiMatchQueryBuilder4.slop;
        java.lang.Boolean boolean17 = multiMatchQueryBuilder4.lenient;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.useDisMax(true);
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"useDisMax\" : true,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test06766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06766");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        float float15 = multiMatchQueryBuilder14.boost();
        java.lang.Float float16 = multiMatchQueryBuilder14.cutoffFrequency;
        java.util.List<java.lang.String> strList17 = multiMatchQueryBuilder14.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test06767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06767");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("hi!");
        java.lang.String str12 = multiMatchQueryBuilder8.fuzzyRewrite;
        org.elasticsearch.index.query.QueryValidationException queryValidationException13 = multiMatchQueryBuilder8.validate();
        java.lang.String[] strArray17 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray17);
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.operator(operator19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.field("");
        java.lang.String str23 = multiMatchQueryBuilder18.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = multiMatchQueryBuilder18.type;
        java.lang.Boolean boolean25 = multiMatchQueryBuilder18.getuseDisMax();
        java.lang.Boolean boolean26 = multiMatchQueryBuilder18.getlenient();
        boolean boolean27 = multiMatchQueryBuilder8.equals((java.lang.Object) boolean26);
        multiMatchQueryBuilder8.setprefixLength((java.lang.Integer) 97);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(queryValidationException13);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(type24);
        org.junit.Assert.assertNull(boolean25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test06768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06768");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        multiMatchQueryBuilder4.setcutoffFrequency((java.lang.Float) (-1.0f));
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test06769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06769");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.cutoffFrequency((float) 0);
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 10);
        multiMatchQueryBuilder8.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"slop\" : 10,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        multiMatchQueryBuilder8.setzeroTermsQuery(zeroTermsQuery20);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(strObjectFloatHashMap11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
    }

    @Test
    public void test06770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06770");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        float float7 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery8 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder9.prefixLength(0);
        java.lang.Boolean boolean12 = multiMatchQueryBuilder11.lenient;
        org.elasticsearch.index.query.Operator operator13 = null;
        multiMatchQueryBuilder11.operator = operator13;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 1.0f + "'", float7 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(boolean12);
    }

    @Test
    public void test06771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06771");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.Integer int15 = multiMatchQueryBuilder11.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.getPROTOTYPE();
        multiMatchQueryBuilder11.setcutoffFrequency((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.Operator operator19 = multiMatchQueryBuilder11.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(operator19);
    }

    @Test
    public void test06772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06772");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.Object obj15 = multiMatchQueryBuilder14.text;
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException25 = multiMatchQueryBuilder20.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder20.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder20.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type32 = multiMatchQueryBuilder20.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type33 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField34 = type33.parseField();
        multiMatchQueryBuilder20.type = type33;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder14.type(type33);
        org.elasticsearch.index.search.MatchQuery.Type type37 = type33.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder13.type(type33);
        float float39 = type33.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type40 = type33.matchQueryType();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(queryValidationException25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(type32);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type33.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type37.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 1.0f + "'", float39 == 1.0f);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type40.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test06773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06773");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type8 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type9 = type8.matchQueryType();
        float float10 = type8.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type8);
        org.elasticsearch.index.query.Operator operator12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder6.operator(operator12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.slop((int) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.zeroTermsQuery(zeroTermsQuery16);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type8.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type9.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test06774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06774");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        java.lang.String str13 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.String str14 = multiMatchQueryBuilder4.queryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery15;
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.maxExpansions((int) (short) 100);
        multiMatchQueryBuilder20.setrewrite("");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = null;
        multiMatchQueryBuilder20.setzeroTermsQuery(zeroTermsQuery23);
        multiMatchQueryBuilder20.tieBreaker = 0.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test06775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06775");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.maxExpansions((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = multiMatchQueryBuilder10.type;
        java.lang.Float float14 = multiMatchQueryBuilder10.getcutoffFrequency();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(type13);
        org.junit.Assert.assertNull(float14);
    }

    @Test
    public void test06776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06776");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        java.lang.String str14 = multiMatchQueryBuilder4.getrewrite();
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.prefixLength((int) ' ');
        java.lang.Boolean boolean19 = multiMatchQueryBuilder18.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.maxExpansions(10);
        multiMatchQueryBuilder18.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params25 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = multiMatchQueryBuilder18.toXContent(xContentBuilder24, params25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(params25);
    }

    @Test
    public void test06777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06777");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        java.lang.String str19 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap29 = multiMatchQueryBuilder28.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.zeroTermsQuery(zeroTermsQuery30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder28.lenient(false);
        multiMatchQueryBuilder28.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder28.zeroTermsQuery(zeroTermsQuery36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type40 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder37.settype(type40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) type40);
        java.lang.String str43 = multiMatchQueryBuilder42.getfuzzyRewrite();
        java.lang.String str44 = multiMatchQueryBuilder42.fuzzyRewrite;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery45 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.zeroTermsQuery(zeroTermsQuery45);
        multiMatchQueryBuilder42.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder42.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder49.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : -1,\n    \"maxExpansions\" : 100,\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str54 = multiMatchQueryBuilder53.fuzzyRewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(strObjectFloatHashMap29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type40.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str54, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test06778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06778");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery10);
        multiMatchQueryBuilder4.tieBreaker = 1.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : {\n      \"multiMatch\" : {\n        \"query\" : \"multi_match\",\n        \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n        \"minimumShouldMatch\" : \"multi_match\",\n        \"lenient\" : true,\n        \"boost\" : 1.0,\n        \"Name\" : \"multi_match\"\n      }\n    },\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"tie_breaker\" : -1.0,\n    \"cutoff_frequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test06779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06779");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.lang.Integer int9 = multiMatchQueryBuilder4.getmaxExpansions();
        org.elasticsearch.common.unit.Fuzziness fuzziness10 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.Operator operator11 = multiMatchQueryBuilder4.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(fuzziness10);
        org.junit.Assert.assertNull(operator11);
    }

    @Test
    public void test06780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06780");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.tieBreaker((float) 10);
        multiMatchQueryBuilder14.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}", (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.maxExpansions(1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test06781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06781");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type18 = type17.matchQueryType();
        multiMatchQueryBuilder4.type = type17;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap20 = multiMatchQueryBuilder4.getfieldsBoosts();
        java.lang.String str21 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        multiMatchQueryBuilder4.setzeroTermsQuery(zeroTermsQuery22);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(fuzziness15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type17.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type18.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNull(strObjectFloatHashMap20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test06782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06782");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) false);
        multiMatchQueryBuilder4.minimumShouldMatch = "";
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        multiMatchQueryBuilder17.operator = operator18;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        multiMatchQueryBuilder17.zeroTermsQuery = zeroTermsQuery20;
        boolean boolean22 = multiMatchQueryBuilder4.equals((java.lang.Object) multiMatchQueryBuilder17);
        org.elasticsearch.index.query.QueryShardContext queryShardContext23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query24 = multiMatchQueryBuilder17.toQuery(queryShardContext23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test06783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06783");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = multiMatchQueryBuilder4.fuzziness;
        java.lang.Float float14 = multiMatchQueryBuilder4.gettieBreaker();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(fuzziness13);
        org.junit.Assert.assertNull(float14);
    }

    @Test
    public void test06784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06784");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        float float33 = multiMatchQueryBuilder25.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type35 = type34.matchQueryType();
        multiMatchQueryBuilder25.settype(type34);
        multiMatchQueryBuilder4.type = type34;
        java.lang.String str38 = multiMatchQueryBuilder4.fuzzyRewrite;
        multiMatchQueryBuilder4.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException50 = multiMatchQueryBuilder45.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder45.cutoffFrequency((float) (byte) 100);
        java.lang.String str53 = multiMatchQueryBuilder45.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder45.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder45.tieBreaker((-1.0f));
        multiMatchQueryBuilder57.setlenient((java.lang.Boolean) false);
        boolean boolean60 = multiMatchQueryBuilder4.equals((java.lang.Object) multiMatchQueryBuilder57);
        multiMatchQueryBuilder57.prefixLength = 100;
        multiMatchQueryBuilder57.setcutoffFrequency((java.lang.Float) 10.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 1.0f + "'", float33 == 1.0f);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type35.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(queryValidationException50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test06785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06785");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        multiMatchQueryBuilder13.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        multiMatchQueryBuilder19.zeroTermsQuery = zeroTermsQuery20;
        java.lang.Object obj22 = multiMatchQueryBuilder19.gettext();
        org.elasticsearch.index.query.QueryShardContext queryShardContext23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query24 = multiMatchQueryBuilder19.toFilter(queryShardContext23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + "multi_match" + "'", obj22, "multi_match");
    }

    @Test
    public void test06786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06786");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        java.lang.String str12 = multiMatchQueryBuilder8.fuzzyRewrite;
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) 52.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test06787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06787");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery10);
        java.lang.Float float12 = multiMatchQueryBuilder4.getcutoffFrequency();
        java.lang.Object obj13 = multiMatchQueryBuilder4.gettext();
        java.lang.String str14 = multiMatchQueryBuilder4.analyzer;
        multiMatchQueryBuilder4.tieBreaker = 1.0f;
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.operator(operator17);
        java.lang.Integer int19 = multiMatchQueryBuilder4.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + "multi_match" + "'", obj13, "multi_match");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(int19);
    }

    @Test
    public void test06788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06788");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        multiMatchQueryBuilder8.slop = 0;
        org.elasticsearch.index.query.Operator operator14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.operator(operator14);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder8.zeroTermsQuery = zeroTermsQuery16;
        java.lang.Integer int18 = multiMatchQueryBuilder8.getprefixLength();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int18);
    }

    @Test
    public void test06789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06789");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"\"\n  }\n}");
        multiMatchQueryBuilder14.setslop((java.lang.Integer) 10);
        multiMatchQueryBuilder14.prefixLength = 52;
        java.lang.String str19 = multiMatchQueryBuilder14.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
    }

    @Test
    public void test06790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06790");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.Operator operator14 = null;
        multiMatchQueryBuilder4.setoperator(operator14);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type16 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type17 = type16.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.type(type16);
        org.elasticsearch.index.query.Operator operator19 = null;
        multiMatchQueryBuilder18.setoperator(operator19);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        java.lang.String[] strArray31 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray31);
        org.elasticsearch.index.query.Operator operator33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.operator(operator33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException37 = multiMatchQueryBuilder32.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder32.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery40 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.zeroTermsQuery(zeroTermsQuery40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder39.getPROTOTYPE();
        multiMatchQueryBuilder42.settieBreaker((java.lang.Float) 0.0f);
        multiMatchQueryBuilder42.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder42.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness49 = multiMatchQueryBuilder48.getfuzziness();
        multiMatchQueryBuilder25.setfuzziness(fuzziness49);
        multiMatchQueryBuilder18.setfuzziness(fuzziness49);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type16.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type17.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(queryValidationException37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNull(fuzziness49);
    }

    @Test
    public void test06791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06791");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.analyzer("hi!");
        java.lang.String str25 = multiMatchQueryBuilder20.getName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "multi_match" + "'", str25, "multi_match");
    }

    @Test
    public void test06792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06792");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        java.lang.String str19 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap29 = multiMatchQueryBuilder28.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.zeroTermsQuery(zeroTermsQuery30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder28.lenient(false);
        multiMatchQueryBuilder28.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder28.zeroTermsQuery(zeroTermsQuery36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type40 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder37.settype(type40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) type40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type43 = multiMatchQueryBuilder42.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder42.prefixLength((-1));
        java.util.List<java.lang.String> strList46 = multiMatchQueryBuilder42.getfields();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(strObjectFloatHashMap29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type40.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(type43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(strList46);
    }

    @Test
    public void test06793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06793");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder11.getfieldsBoosts();
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.String str20 = multiMatchQueryBuilder17.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder17.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder17.settype(type24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder11.type(type24);
        multiMatchQueryBuilder26.settieBreaker((java.lang.Float) 100.0f);
        java.lang.Integer int29 = multiMatchQueryBuilder26.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder26.zeroTermsQuery(zeroTermsQuery30);
        org.elasticsearch.index.query.Operator operator32 = multiMatchQueryBuilder26.operator;
        java.lang.String str33 = multiMatchQueryBuilder26.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(operator32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str33, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test06794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06794");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        java.lang.String str14 = multiMatchQueryBuilder4.getrewrite();
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.prefixLength((int) ' ');
        java.lang.Boolean boolean19 = multiMatchQueryBuilder18.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.maxExpansions(10);
        multiMatchQueryBuilder18.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 97,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"lenient\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.Operator operator26 = null;
        multiMatchQueryBuilder18.operator = operator26;
        java.lang.Boolean boolean28 = multiMatchQueryBuilder18.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(boolean28);
    }

    @Test
    public void test06795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06795");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        float float15 = multiMatchQueryBuilder14.boost();
        java.lang.Float float16 = multiMatchQueryBuilder14.cutoffFrequency;
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.lenient(false);
        java.lang.Integer int26 = multiMatchQueryBuilder25.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder25.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap29 = null;
        multiMatchQueryBuilder28.setfieldsBoosts(strObjectFloatHashMap29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder14.type((java.lang.Object) strObjectFloatHashMap29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery34 = null;
        multiMatchQueryBuilder14.zeroTermsQuery = zeroTermsQuery34;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params37 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder14.doXContent(xContentBuilder36, params37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(params37);
    }

    @Test
    public void test06796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06796");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder17.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.QueryValidationException queryValidationException20 = multiMatchQueryBuilder17.validate();
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder25.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder25.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness37 = multiMatchQueryBuilder25.getfuzziness();
        java.lang.Object obj38 = multiMatchQueryBuilder25.text;
        multiMatchQueryBuilder25.tieBreaker = (-1.0f);
        java.lang.String str41 = multiMatchQueryBuilder25.getName();
        org.elasticsearch.index.query.Operator operator42 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder25.operator(operator42);
        java.lang.String[] strArray47 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray47);
        org.elasticsearch.index.query.Operator operator49 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.operator(operator49);
        java.lang.Boolean boolean51 = multiMatchQueryBuilder48.getlenient();
        multiMatchQueryBuilder48.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type54 = multiMatchQueryBuilder48.gettype();
        multiMatchQueryBuilder48.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder48.minimumShouldMatch("");
        java.lang.String[] strArray63 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder48, strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) operator42, strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) queryValidationException20, strArray63);
        java.lang.Integer int69 = multiMatchQueryBuilder68.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(queryValidationException20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(fuzziness37);
        org.junit.Assert.assertEquals("'" + obj38 + "' != '" + "multi_match" + "'", obj38, "multi_match");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multi_match" + "'", str41, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertNull(type54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNull(int69);
    }

    @Test
    public void test06797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06797");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean21 = multiMatchQueryBuilder20.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.boost((float) 1);
        java.lang.Boolean boolean24 = multiMatchQueryBuilder23.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type25 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type26 = type25.matchQueryType();
        float float27 = type25.tieBreaker();
        float float28 = type25.tieBreaker();
        float float29 = type25.tieBreaker();
        org.elasticsearch.common.ParseField parseField30 = type25.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder23.type(type25);
        float float32 = type25.tieBreaker();
        float float33 = type25.tieBreaker();
        org.elasticsearch.common.ParseField parseField34 = type25.parseField();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type25.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type26.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 0.0f + "'", float27 == 0.0f);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 0.0f + "'", float28 == 0.0f);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(parseField30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 0.0f + "'", float32 == 0.0f);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(parseField34);
    }

    @Test
    public void test06798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06798");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        multiMatchQueryBuilder12.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float15 = multiMatchQueryBuilder12.gettieBreaker();
        java.lang.String str16 = multiMatchQueryBuilder12.fuzzyRewrite;
        multiMatchQueryBuilder12.slop = 100;
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        java.lang.String str26 = multiMatchQueryBuilder25.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type28 = type27.matchQueryType();
        float float29 = type27.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder25.type(type27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder30.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}", (float) 100L);
        java.lang.String[] strArray37 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray37);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.operator(operator39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder38.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder42.setanalyzer("multi_match");
        org.elasticsearch.index.query.QueryValidationException queryValidationException47 = multiMatchQueryBuilder42.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery48 = multiMatchQueryBuilder42.zeroTermsQuery;
        java.lang.String str49 = multiMatchQueryBuilder42.getrewrite();
        multiMatchQueryBuilder42.lenient = true;
        java.lang.String[] strArray55 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray55);
        org.elasticsearch.index.query.Operator operator57 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.operator(operator57);
        java.lang.String str59 = multiMatchQueryBuilder56.getWriteableName();
        java.lang.Boolean boolean60 = multiMatchQueryBuilder56.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder56.getPROTOTYPE();
        multiMatchQueryBuilder56.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray67 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray67);
        org.elasticsearch.index.query.Operator operator69 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder68.operator(operator69);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder68.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException73 = multiMatchQueryBuilder68.validate();
        java.lang.Integer int74 = multiMatchQueryBuilder68.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery75 = multiMatchQueryBuilder68.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder68.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder68.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder68.boost((float) 0);
        java.lang.String str83 = multiMatchQueryBuilder68.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap84 = multiMatchQueryBuilder68.fieldsBoosts;
        multiMatchQueryBuilder56.fieldsBoosts = strObjectFloatHashMap84;
        multiMatchQueryBuilder42.fieldsBoosts = strObjectFloatHashMap84;
        multiMatchQueryBuilder30.setfieldsBoosts(strObjectFloatHashMap84);
        java.lang.Integer int88 = multiMatchQueryBuilder30.getprefixLength();
        boolean boolean89 = multiMatchQueryBuilder12.equals((java.lang.Object) int88);
        org.elasticsearch.index.query.Operator operator90 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = multiMatchQueryBuilder12.operator(operator90);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = multiMatchQueryBuilder91.prefixLength((int) (short) 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}" + "'", str16, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "multi_match" + "'", str26, "multi_match");
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(queryValidationException47);
        org.junit.Assert.assertNull(zeroTermsQuery48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "multi_match" + "'", str59, "multi_match");
        org.junit.Assert.assertNull(boolean60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNull(queryValidationException73);
        org.junit.Assert.assertNull(int74);
        org.junit.Assert.assertNull(zeroTermsQuery75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap84);
        org.junit.Assert.assertNull(int88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder91);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder93);
    }

    @Test
    public void test06799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06799");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.queryName("multi_match");
        multiMatchQueryBuilder18.prefixLength = 97;
        java.lang.Boolean boolean21 = multiMatchQueryBuilder18.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"tieBreaker\" : 52.0,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException33 = multiMatchQueryBuilder28.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder28.cutoffFrequency((float) (byte) 100);
        float float36 = multiMatchQueryBuilder28.boost();
        multiMatchQueryBuilder28.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder28.rewrite("multi_match");
        java.lang.String str41 = multiMatchQueryBuilder40.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap42 = null;
        multiMatchQueryBuilder40.fieldsBoosts = strObjectFloatHashMap42;
        java.util.List<java.lang.String> strList44 = multiMatchQueryBuilder40.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type45 = multiMatchQueryBuilder40.type;
        multiMatchQueryBuilder40.settieBreaker((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type48 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float49 = type48.tieBreaker();
        org.elasticsearch.common.ParseField parseField50 = type48.parseField();
        float float51 = type48.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder40.type(type48);
        multiMatchQueryBuilder23.type = type48;
        org.elasticsearch.common.ParseField parseField54 = type48.parseField();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(queryValidationException33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 1.0f + "'", float36 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNull(type45);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type48.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + 0.0f + "'", float49 == 0.0f);
        org.junit.Assert.assertNotNull(parseField50);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 0.0f + "'", float51 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(parseField54);
    }

    @Test
    public void test06800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06800");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String str10 = multiMatchQueryBuilder4.analyzer;
        java.lang.Float float11 = multiMatchQueryBuilder4.gettieBreaker();
        java.lang.Boolean boolean12 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.Integer int13 = multiMatchQueryBuilder4.prefixLength;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertNull(int13);
    }

    @Test
    public void test06801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06801");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String str16 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.boost(10.0f);
        float float24 = multiMatchQueryBuilder23.boost();
        float float25 = multiMatchQueryBuilder23.boost();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap26 = multiMatchQueryBuilder23.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 10.0f + "'", float24 == 10.0f);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 10.0f + "'", float25 == 10.0f);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap26);
    }

    @Test
    public void test06802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06802");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        java.lang.Float float16 = multiMatchQueryBuilder15.cutoffFrequency;
        multiMatchQueryBuilder15.useDisMax = true;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = null;
        multiMatchQueryBuilder15.setfieldsBoosts(strObjectFloatHashMap19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder15.getzeroTermsQuery();
        org.elasticsearch.common.xcontent.XContentType xContentType22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference23 = multiMatchQueryBuilder15.buildAsBytes(xContentType22);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(zeroTermsQuery21);
    }

    @Test
    public void test06803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06803");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 10);
        java.lang.Integer int19 = multiMatchQueryBuilder4.prefixLength;
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.cutoffFrequency(52.0f);
        java.lang.Integer int24 = multiMatchQueryBuilder4.prefixLength;
        java.lang.Object obj25 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.Operator operator26 = null;
        multiMatchQueryBuilder4.operator = operator26;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertEquals("'" + obj25 + "' != '" + "multi_match" + "'", obj25, "multi_match");
    }

    @Test
    public void test06804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06804");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery19);
        multiMatchQueryBuilder20.useDisMax = true;
        java.lang.String str23 = multiMatchQueryBuilder20.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder20.useDisMax(false);
        multiMatchQueryBuilder20.useDisMax = true;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test06805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06805");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        java.lang.String str14 = multiMatchQueryBuilder4.getrewrite();
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.prefixLength((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder20.gettype();
        org.elasticsearch.index.query.Operator operator22 = null;
        multiMatchQueryBuilder20.operator = operator22;
        java.lang.Boolean boolean24 = multiMatchQueryBuilder20.useDisMax;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertNull(boolean24);
    }

    @Test
    public void test06806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06806");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.getfuzziness();
        org.elasticsearch.index.query.Operator operator13 = null;
        multiMatchQueryBuilder11.setoperator(operator13);
        java.lang.Boolean boolean15 = multiMatchQueryBuilder11.lenient;
        multiMatchQueryBuilder11.setslop((java.lang.Integer) 1);
        multiMatchQueryBuilder11.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"slop\" : 0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder11.operator(operator20);
        org.elasticsearch.common.unit.Fuzziness fuzziness22 = multiMatchQueryBuilder11.fuzziness;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(fuzziness22);
    }

    @Test
    public void test06807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06807");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.field("hi!", (float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.slop(1);
        java.lang.Boolean boolean21 = multiMatchQueryBuilder20.lenient;
        java.lang.String[] strArray25 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray25);
        org.elasticsearch.index.query.Operator operator27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.operator(operator27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException31 = multiMatchQueryBuilder26.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder26.cutoffFrequency((float) (byte) 100);
        float float34 = multiMatchQueryBuilder26.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type35 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type36 = type35.matchQueryType();
        multiMatchQueryBuilder26.settype(type35);
        org.elasticsearch.index.search.MatchQuery.Type type38 = type35.matchQueryType();
        org.elasticsearch.common.ParseField parseField39 = type35.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type40 = type35.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder20.type(type35);
        multiMatchQueryBuilder20.rewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(queryValidationException31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 1.0f + "'", float34 == 1.0f);
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type35.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type36.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type38.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type40.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
    }

    @Test
    public void test06808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06808");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type1 = type0.matchQueryType();
        org.elasticsearch.common.ParseField parseField2 = type0.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type3 = type0.matchQueryType();
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type0.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + type1 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type1.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField2);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type3.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test06809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06809");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        java.lang.Float float14 = multiMatchQueryBuilder8.getcutoffFrequency();
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.operator(operator15);
        java.lang.String str17 = multiMatchQueryBuilder8.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.slop((int) ' ');
        multiMatchQueryBuilder19.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"analyzer\" : \"\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray26);
        java.lang.String[] strArray32 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray26, strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder19, strArray32);
        org.elasticsearch.common.unit.Fuzziness fuzziness36 = multiMatchQueryBuilder19.fuzziness;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multi_match" + "'", str17, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNull(fuzziness36);
    }

    @Test
    public void test06810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06810");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.operator(operator16);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder17.setzeroTermsQuery(zeroTermsQuery18);
        multiMatchQueryBuilder17.useDisMax = false;
        java.lang.String str22 = multiMatchQueryBuilder17.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"boost\" : 10.0\n  }\n}" + "'", str22, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"boost\" : 10.0\n  }\n}");
    }

    @Test
    public void test06811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06811");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder16.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder16.type;
        multiMatchQueryBuilder16.settieBreaker((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder16.slop((int) '4');
        java.lang.String str26 = multiMatchQueryBuilder16.getWriteableName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "multi_match" + "'", str26, "multi_match");
    }

    @Test
    public void test06812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06812");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap16 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder8.lenient(true);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = multiMatchQueryBuilder18.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(strObjectFloatHashMap19);
    }

    @Test
    public void test06813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06813");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("");
        java.lang.String str26 = multiMatchQueryBuilder21.getrewrite();
        java.lang.Object obj27 = multiMatchQueryBuilder21.text;
        float float28 = multiMatchQueryBuilder21.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder21.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float31 = multiMatchQueryBuilder21.gettieBreaker();
        java.lang.String[] strArray35 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray35);
        org.elasticsearch.index.query.Operator operator37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.operator(operator37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder36.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException41 = multiMatchQueryBuilder36.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder36.cutoffFrequency((float) (byte) 100);
        float float44 = multiMatchQueryBuilder36.boost();
        multiMatchQueryBuilder36.setanalyzer("");
        java.lang.Boolean boolean47 = multiMatchQueryBuilder36.getuseDisMax();
        java.lang.String str48 = multiMatchQueryBuilder36.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder36.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray54 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray54);
        org.elasticsearch.index.query.Operator operator56 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.operator(operator56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder55.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder59.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder59.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness64 = multiMatchQueryBuilder59.getfuzziness();
        multiMatchQueryBuilder50.fuzziness = fuzziness64;
        multiMatchQueryBuilder21.setfuzziness(fuzziness64);
        multiMatchQueryBuilder16.fuzziness = fuzziness64;
        org.elasticsearch.index.query.Operator operator68 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder16.operator(operator68);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap70 = multiMatchQueryBuilder69.getfieldsBoosts();
        java.lang.Boolean boolean71 = multiMatchQueryBuilder69.lenient;
        org.elasticsearch.index.query.Operator operator72 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder69.operator(operator72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder69.prefixLength((int) '#');
        java.lang.String str76 = multiMatchQueryBuilder69.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder69.useDisMax(true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + "multi_match" + "'", obj27, "multi_match");
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 1.0f + "'", float28 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(float31);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(queryValidationException41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 1.0f + "'", float44 == 1.0f);
        org.junit.Assert.assertNull(boolean47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(fuzziness64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNull(strObjectFloatHashMap70);
        org.junit.Assert.assertNull(boolean71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}" + "'", str76, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
    }

    @Test
    public void test06814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06814");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        java.lang.String str12 = multiMatchQueryBuilder11.toString();
        multiMatchQueryBuilder11.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int15 = multiMatchQueryBuilder11.prefixLength;
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException25 = multiMatchQueryBuilder20.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = multiMatchQueryBuilder20.getzeroTermsQuery();
        java.lang.Object obj27 = multiMatchQueryBuilder20.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder20.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray33 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray33);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap39 = multiMatchQueryBuilder38.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery40 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder38.zeroTermsQuery(zeroTermsQuery40);
        java.lang.String str42 = multiMatchQueryBuilder38.fuzzyRewrite;
        java.lang.String[] strArray46 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray46);
        org.elasticsearch.index.query.Operator operator48 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.operator(operator48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder47.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap52 = multiMatchQueryBuilder51.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery53 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder51.zeroTermsQuery(zeroTermsQuery53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder51.lenient(false);
        multiMatchQueryBuilder51.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery59 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder51.zeroTermsQuery(zeroTermsQuery59);
        multiMatchQueryBuilder60.setuseDisMax((java.lang.Boolean) true);
        multiMatchQueryBuilder60.setprefixLength((java.lang.Integer) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder60.tieBreaker((float) 100);
        java.lang.String[] strArray70 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray70);
        org.elasticsearch.index.query.Operator operator72 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder71.operator(operator72);
        multiMatchQueryBuilder71.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator76 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder71.operator(operator76);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder71.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder71.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder66.fuzziness((java.lang.Object) multiMatchQueryBuilder81);
        org.elasticsearch.common.unit.Fuzziness fuzziness83 = multiMatchQueryBuilder82.getfuzziness();
        multiMatchQueryBuilder38.setfuzziness(fuzziness83);
        multiMatchQueryBuilder20.setfuzziness(fuzziness83);
        multiMatchQueryBuilder11.fuzziness = fuzziness83;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str12, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(queryValidationException25);
        org.junit.Assert.assertNull(zeroTermsQuery26);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + "multi_match" + "'", obj27, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(strObjectFloatHashMap39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(strObjectFloatHashMap52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNotNull(fuzziness83);
    }

    @Test
    public void test06815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06815");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.tieBreaker((-1.0f));
        java.lang.Object obj17 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) true);
        java.lang.String str22 = multiMatchQueryBuilder4.getNAME();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
    }

    @Test
    public void test06816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06816");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.queryName("");
        multiMatchQueryBuilder14.setrewrite("");
        java.lang.Integer int17 = multiMatchQueryBuilder14.maxExpansions;
        multiMatchQueryBuilder14.useDisMax = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder21.lenient = false;
        java.lang.String str24 = multiMatchQueryBuilder21.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.tieBreaker(97.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}" + "'", str24, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test06817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06817");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type8 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type9 = type8.matchQueryType();
        float float10 = type8.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type8);
        multiMatchQueryBuilder11.useDisMax = false;
        multiMatchQueryBuilder11.useDisMax = false;
        java.lang.String str16 = multiMatchQueryBuilder11.getNAME();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.prefixLength((int) 'a');
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params20 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = multiMatchQueryBuilder11.toXContent(xContentBuilder19, params20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type8.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type9.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "multi_match" + "'", str16, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(params20);
    }

    @Test
    public void test06818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06818");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder6.maxExpansions = 1;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder6.useDisMax(true);
        org.elasticsearch.index.query.Operator operator11 = multiMatchQueryBuilder6.getoperator();
        java.lang.String[] strArray15 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray15);
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        java.lang.String str19 = multiMatchQueryBuilder18.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery20);
        multiMatchQueryBuilder21.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}";
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.operator(operator24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder21.maxExpansions((-1));
        multiMatchQueryBuilder27.tieBreaker = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder31.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder31.getPROTOTYPE();
        boolean boolean35 = multiMatchQueryBuilder6.equals((java.lang.Object) multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(operator11);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test06819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06819");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str12 = multiMatchQueryBuilder8.minimumShouldMatch;
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException22 = multiMatchQueryBuilder17.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.cutoffFrequency((float) (byte) 100);
        java.lang.String str25 = multiMatchQueryBuilder17.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder17.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness28 = multiMatchQueryBuilder17.getfuzziness();
        org.elasticsearch.common.unit.Fuzziness fuzziness29 = null;
        multiMatchQueryBuilder17.fuzziness = fuzziness29;
        java.lang.Integer int31 = multiMatchQueryBuilder17.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = multiMatchQueryBuilder17.zeroTermsQuery;
        boolean boolean33 = multiMatchQueryBuilder8.equals((java.lang.Object) zeroTermsQuery32);
        java.lang.String[] strArray38 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray38);
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray38, strArray44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean33, strArray38);
        java.lang.Integer int48 = multiMatchQueryBuilder47.slop;
        org.elasticsearch.index.query.Operator operator49 = multiMatchQueryBuilder47.getoperator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(queryValidationException22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(fuzziness28);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(zeroTermsQuery32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNull(int48);
        org.junit.Assert.assertNull(operator49);
    }

    @Test
    public void test06820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06820");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        java.lang.Object obj16 = multiMatchQueryBuilder15.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = multiMatchQueryBuilder18.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.lenient(true);
        java.lang.Integer int22 = multiMatchQueryBuilder18.getprefixLength();
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException32 = multiMatchQueryBuilder27.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder27.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.zeroTermsQuery(zeroTermsQuery35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.maxExpansions((-1));
        java.util.List<java.lang.String> strList39 = multiMatchQueryBuilder34.getfields();
        multiMatchQueryBuilder34.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder34.useDisMax(true);
        java.lang.String[] strArray47 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray47);
        org.elasticsearch.index.query.Operator operator49 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.operator(operator49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder48.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException53 = multiMatchQueryBuilder48.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder48.cutoffFrequency((float) (byte) 100);
        java.lang.String str56 = multiMatchQueryBuilder48.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder48.queryName("");
        multiMatchQueryBuilder58.setslop((java.lang.Integer) 0);
        java.lang.String[] strArray64 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) true, strArray64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder18, strArray64);
        java.lang.Float float69 = multiMatchQueryBuilder68.cutoffFrequency;
        org.elasticsearch.index.query.Operator operator70 = multiMatchQueryBuilder68.getoperator();
        java.lang.String str71 = multiMatchQueryBuilder68.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder68.lenient(false);
        java.lang.Float float74 = multiMatchQueryBuilder73.cutoffFrequency;
        multiMatchQueryBuilder73.minimumShouldMatch = "";
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder77 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params78 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder73.doXContent(xContentBuilder77, params78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "multi_match" + "'", obj16, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(strObjectFloatHashMap19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(queryValidationException32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(queryValidationException53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNull(float69);
        org.junit.Assert.assertNull(operator70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNull(float74);
        org.junit.Assert.assertNotNull(params78);
    }

    @Test
    public void test06821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06821");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        java.lang.String str20 = multiMatchQueryBuilder17.toString();
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.lenient(false);
        java.lang.Class<?> wildcardClass25 = multiMatchQueryBuilder22.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str20, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test06822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06822");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.rewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder22.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"prefixLength\" : 10,\n    \"minimumShouldMatch\" : \"\",\n    \"fuzzyRewrite\" : \"\",\n    \"cutoffFrequency\" : 32.0,\n    \"boost\" : 1.0\n  }\n}", (float) 1L);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test06823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06823");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.boost((float) (short) 0);
        java.lang.Object obj22 = multiMatchQueryBuilder21.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) 10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder21.zeroTermsQuery(zeroTermsQuery26);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = null;
        multiMatchQueryBuilder27.zeroTermsQuery = zeroTermsQuery28;
        java.lang.String str30 = multiMatchQueryBuilder27.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + "multi_match" + "'", obj22, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"tieBreaker\\\" : 100.0,\\n    \\\"cutoffFrequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 0.0\n  }\n}" + "'", str30, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"tieBreaker\\\" : 100.0,\\n    \\\"cutoffFrequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 0.0\n  }\n}");
    }

    @Test
    public void test06824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06824");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.tieBreaker((float) 100);
        multiMatchQueryBuilder4.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String str23 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.Operator operator24 = null;
        multiMatchQueryBuilder4.setoperator(operator24);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str23, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test06825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06825");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.text;
        java.lang.String str15 = multiMatchQueryBuilder13.getfuzzyRewrite();
        java.lang.Float float16 = multiMatchQueryBuilder13.cutoffFrequency;
        java.lang.Float float17 = multiMatchQueryBuilder13.gettieBreaker();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder13.zeroTermsQuery = zeroTermsQuery18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : -1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Object obj22 = multiMatchQueryBuilder13.gettext();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + "multi_match" + "'", obj22, "multi_match");
    }

    @Test
    public void test06826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06826");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.cutoffFrequency((float) (-1L));
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) true);
        java.lang.String str20 = multiMatchQueryBuilder4.analyzer;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str20, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test06827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06827");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.maxExpansions((-1));
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder11.fuzziness;
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap26 = multiMatchQueryBuilder25.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder25.zeroTermsQuery(zeroTermsQuery27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder25.lenient(false);
        multiMatchQueryBuilder25.setcutoffFrequency((java.lang.Float) 1.0f);
        multiMatchQueryBuilder25.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray38 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray38);
        org.elasticsearch.index.query.Operator operator40 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.operator(operator40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder39.field("");
        java.lang.String str44 = multiMatchQueryBuilder39.getrewrite();
        java.lang.Object obj45 = multiMatchQueryBuilder39.text;
        float float46 = multiMatchQueryBuilder39.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder39.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float49 = multiMatchQueryBuilder39.gettieBreaker();
        java.lang.String[] strArray53 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray53);
        org.elasticsearch.index.query.Operator operator55 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.operator(operator55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder54.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException59 = multiMatchQueryBuilder54.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder54.cutoffFrequency((float) (byte) 100);
        float float62 = multiMatchQueryBuilder54.boost();
        multiMatchQueryBuilder54.setanalyzer("");
        java.lang.Boolean boolean65 = multiMatchQueryBuilder54.getuseDisMax();
        java.lang.String str66 = multiMatchQueryBuilder54.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder54.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray72 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray72);
        org.elasticsearch.index.query.Operator operator74 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder73.operator(operator74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder73.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder77.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder77.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness82 = multiMatchQueryBuilder77.getfuzziness();
        multiMatchQueryBuilder68.fuzziness = fuzziness82;
        multiMatchQueryBuilder39.setfuzziness(fuzziness82);
        multiMatchQueryBuilder25.fuzziness = fuzziness82;
        multiMatchQueryBuilder11.fuzziness = fuzziness82;
        org.elasticsearch.common.unit.Fuzziness fuzziness87 = multiMatchQueryBuilder11.getfuzziness();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap88 = multiMatchQueryBuilder11.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(strObjectFloatHashMap26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + obj45 + "' != '" + "multi_match" + "'", obj45, "multi_match");
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + 1.0f + "'", float46 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNull(float49);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNull(queryValidationException59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + 1.0f + "'", float62 == 1.0f);
        org.junit.Assert.assertNull(boolean65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(fuzziness82);
        org.junit.Assert.assertNotNull(fuzziness87);
        org.junit.Assert.assertNull(strObjectFloatHashMap88);
    }

    @Test
    public void test06828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06828");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder13.setuseDisMax((java.lang.Boolean) false);
        multiMatchQueryBuilder13.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder13.slop = 100;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder13.boost(100.0f);
        java.lang.Integer int26 = multiMatchQueryBuilder25.getprefixLength();
        java.lang.Boolean boolean27 = multiMatchQueryBuilder25.useDisMax;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertEquals("'" + boolean27 + "' != '" + false + "'", boolean27, false);
    }

    @Test
    public void test06829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06829");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList18 = multiMatchQueryBuilder4.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.rewrite("hi!");
        java.lang.String str21 = multiMatchQueryBuilder20.getfuzzyRewrite();
        java.lang.Boolean boolean22 = multiMatchQueryBuilder20.getlenient();
        org.elasticsearch.index.query.Operator operator23 = null;
        multiMatchQueryBuilder20.operator = operator23;
        multiMatchQueryBuilder20.setuseDisMax((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(boolean22);
    }

    @Test
    public void test06830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06830");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.useDisMax(true);
        multiMatchQueryBuilder16.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String str22 = multiMatchQueryBuilder16.rewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder16.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type25 = multiMatchQueryBuilder16.gettype();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(type25);
    }

    @Test
    public void test06831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06831");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        java.lang.String str19 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap29 = multiMatchQueryBuilder28.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.zeroTermsQuery(zeroTermsQuery30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder28.lenient(false);
        multiMatchQueryBuilder28.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder28.zeroTermsQuery(zeroTermsQuery36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type40 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder37.settype(type40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) type40);
        multiMatchQueryBuilder4.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"\\\"\\n  }\\n}\",\n    \"rewrite\" : \"\",\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type47 = multiMatchQueryBuilder4.gettype();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(strObjectFloatHashMap29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type40.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(type47);
    }

    @Test
    public void test06832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06832");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        multiMatchQueryBuilder4.setcutoffFrequency((java.lang.Float) 0.0f);
        multiMatchQueryBuilder4.slop = 0;
        java.lang.Boolean boolean22 = multiMatchQueryBuilder4.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.boost((float) 1);
        java.lang.String str26 = multiMatchQueryBuilder25.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = multiMatchQueryBuilder25.gettype();
        float float28 = type27.tieBreaker();
        multiMatchQueryBuilder4.type = type27;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str26, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 1.0f + "'", float28 == 1.0f);
        org.junit.Assert.assertNull(zeroTermsQuery30);
    }

    @Test
    public void test06833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06833");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.lang.Integer int8 = multiMatchQueryBuilder4.getmaxExpansions();
        multiMatchQueryBuilder4.useDisMax = false;
        java.lang.Integer int11 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker(0.0f);
        multiMatchQueryBuilder13.lenient = false;
        java.lang.String str16 = multiMatchQueryBuilder13.getrewrite();
        org.elasticsearch.common.unit.Fuzziness fuzziness17 = multiMatchQueryBuilder13.getfuzziness();
        java.lang.String str18 = multiMatchQueryBuilder13.getWriteableName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder13.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput21 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder20.writeTo(streamOutput21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(fuzziness17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "multi_match" + "'", str18, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test06834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06834");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery19);
        java.lang.Integer int21 = multiMatchQueryBuilder18.slop;
        java.lang.Integer int22 = multiMatchQueryBuilder18.getmaxExpansions();
        java.lang.String str23 = multiMatchQueryBuilder18.getName();
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.operator(operator24);
        java.lang.String str26 = multiMatchQueryBuilder18.getNAME();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = multiMatchQueryBuilder18.type;
        java.lang.String str28 = multiMatchQueryBuilder18.queryName();
        multiMatchQueryBuilder18.setcutoffFrequency((java.lang.Float) 100.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "multi_match" + "'", str23, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "multi_match" + "'", str26, "multi_match");
        org.junit.Assert.assertNull(type27);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test06835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06835");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.operator(operator16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.rewrite("hi!");
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder19.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder19.useDisMax(false);
        org.elasticsearch.index.query.Operator operator23 = null;
        multiMatchQueryBuilder19.operator = operator23;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test06836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06836");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) false);
        multiMatchQueryBuilder4.minimumShouldMatch = "";
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.elasticsearch.index.query.Operator operator20 = null;
        multiMatchQueryBuilder17.operator = operator20;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.fuzzyRewrite("multi_match");
        multiMatchQueryBuilder23.tieBreaker = 0.0f;
        java.lang.String str26 = multiMatchQueryBuilder23.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder4.type((java.lang.Object) str26);
        java.lang.String str28 = multiMatchQueryBuilder27.fuzzyRewrite;
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder27.operator = operator29;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder27.maxExpansions((int) (short) -1);
        java.lang.Object obj33 = multiMatchQueryBuilder27.gettext();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params35 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder27.doXContent(xContentBuilder34, params35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + "multi_match" + "'", obj33, "multi_match");
        org.junit.Assert.assertNotNull(params35);
    }

    @Test
    public void test06837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06837");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Object obj10 = multiMatchQueryBuilder4.text;
        float float11 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.boost(0.0f);
        org.elasticsearch.index.query.Operator operator14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.operator(operator14);
        java.lang.String str16 = multiMatchQueryBuilder13.fuzzyRewrite;
        java.lang.String str17 = multiMatchQueryBuilder13.fuzzyRewrite;
        org.elasticsearch.index.query.Operator operator18 = multiMatchQueryBuilder13.getoperator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "multi_match" + "'", obj10, "multi_match");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 1.0f + "'", float11 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(operator18);
    }

    @Test
    public void test06838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06838");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        java.lang.Integer int14 = multiMatchQueryBuilder13.getslop();
        java.lang.String str15 = multiMatchQueryBuilder13.minimumShouldMatch;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder13.zeroTermsQuery = zeroTermsQuery16;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test06839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06839");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        java.lang.Object obj16 = multiMatchQueryBuilder15.text;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder15.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.boost((float) (byte) -1);
        multiMatchQueryBuilder19.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "multi_match" + "'", obj16, "multi_match");
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test06840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06840");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean21 = multiMatchQueryBuilder20.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.boost((float) (-1));
        java.lang.String str24 = multiMatchQueryBuilder23.queryName();
        multiMatchQueryBuilder23.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.Operator operator27 = multiMatchQueryBuilder23.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder23.maxExpansions((int) '4');
        multiMatchQueryBuilder23.setcutoffFrequency((java.lang.Float) 52.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(operator27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test06841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06841");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder8.type = type18;
        java.lang.Integer int20 = multiMatchQueryBuilder8.getslop();
        java.lang.Integer int21 = multiMatchQueryBuilder8.getprefixLength();
        java.lang.String str22 = multiMatchQueryBuilder8.fuzzyRewrite;
        multiMatchQueryBuilder8.minimumShouldMatch = "multi_match";
        java.lang.String str25 = multiMatchQueryBuilder8.getminimumShouldMatch();
        java.lang.String str26 = multiMatchQueryBuilder8.rewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder8.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : {\n      \"multiMatch\" : {\n        \"query\" : \"multi_match\",\n        \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n        \"minimumShouldMatch\" : \"multi_match\",\n        \"lenient\" : true,\n        \"boost\" : 1.0,\n        \"Name\" : \"multi_match\"\n      }\n    },\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "multi_match" + "'", str25, "multi_match");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test06842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06842");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Integer int10 = multiMatchQueryBuilder4.maxExpansions;
        org.elasticsearch.index.query.Operator operator11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.operator(operator11);
        multiMatchQueryBuilder4.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"tieBreaker\" : 100.0,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.Operator operator15 = null;
        multiMatchQueryBuilder4.setoperator(operator15);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
    }

    @Test
    public void test06843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06843");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        float float33 = multiMatchQueryBuilder25.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type35 = type34.matchQueryType();
        multiMatchQueryBuilder25.settype(type34);
        multiMatchQueryBuilder4.type = type34;
        java.lang.String str38 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.String str39 = multiMatchQueryBuilder4.minimumShouldMatch;
        multiMatchQueryBuilder4.slop = 0;
        multiMatchQueryBuilder4.setcutoffFrequency((java.lang.Float) 52.0f);
        java.lang.String str44 = multiMatchQueryBuilder4.analyzer;
        java.lang.Integer int45 = multiMatchQueryBuilder4.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder4.tieBreaker((float) '4');
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder48 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params49 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder50 = multiMatchQueryBuilder4.toXContent(xContentBuilder48, params49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 1.0f + "'", float33 == 1.0f);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type35.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(params49);
    }

    @Test
    public void test06844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06844");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.type;
        org.elasticsearch.index.query.Operator operator11 = null;
        multiMatchQueryBuilder4.setoperator(operator11);
        java.lang.String str13 = multiMatchQueryBuilder4.toString();
        multiMatchQueryBuilder4.cutoffFrequency = 10.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str18 = multiMatchQueryBuilder17.analyzer;
        multiMatchQueryBuilder17.setcutoffFrequency((java.lang.Float) 0.0f);
        java.lang.Float float21 = multiMatchQueryBuilder17.tieBreaker;
        multiMatchQueryBuilder17.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"analyzer\" : \"\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder17.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder25.setlenient((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(float21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test06845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06845");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 1);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder4.fieldsBoosts;
        multiMatchQueryBuilder4.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.Operator operator17 = null;
        multiMatchQueryBuilder16.operator = operator17;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.getPROTOTYPE();
        multiMatchQueryBuilder19.setuseDisMax((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test06846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06846");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        java.lang.String str20 = multiMatchQueryBuilder17.toString();
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.operator(operator21);
        multiMatchQueryBuilder22.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList25 = multiMatchQueryBuilder22.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder22.useDisMax(false);
        java.lang.String str28 = multiMatchQueryBuilder22.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str20, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str28, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test06847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06847");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder4.queryName();
        multiMatchQueryBuilder4.minimumShouldMatch = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 1,\n    \"max_expansions\" : 10,\n    \"rewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap26 = multiMatchQueryBuilder4.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}" + "'", str21, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(strObjectFloatHashMap26);
    }

    @Test
    public void test06848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06848");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.Operator operator9 = null;
        multiMatchQueryBuilder4.setoperator(operator9);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder4.getlenient();
        java.lang.String[] strArray15 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray15);
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException21 = multiMatchQueryBuilder16.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.cutoffFrequency((float) (byte) 100);
        java.lang.String str24 = multiMatchQueryBuilder16.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery25);
        multiMatchQueryBuilder16.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder16.setmaxExpansions((java.lang.Integer) 10);
        java.lang.Integer int31 = multiMatchQueryBuilder16.prefixLength;
        multiMatchQueryBuilder16.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder16.cutoffFrequency(52.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) 52.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder4.cutoffFrequency((float) 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(queryValidationException21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
    }

    @Test
    public void test06849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06849");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        multiMatchQueryBuilder20.setrewrite("");
        java.util.List<java.lang.String> strList25 = multiMatchQueryBuilder20.getfields();
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.operator(operator26);
        multiMatchQueryBuilder20.settieBreaker((java.lang.Float) (-1.0f));
        java.lang.String[] strArray33 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray33);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        java.lang.Boolean boolean37 = multiMatchQueryBuilder34.getlenient();
        multiMatchQueryBuilder34.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder34.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder34.tieBreaker((float) (-1));
        java.lang.Integer int44 = multiMatchQueryBuilder43.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type45 = multiMatchQueryBuilder43.gettype();
        java.lang.String[] strArray49 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray49);
        org.elasticsearch.index.query.Operator operator51 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.operator(operator51);
        java.lang.String str53 = multiMatchQueryBuilder50.getWriteableName();
        java.lang.Boolean boolean54 = multiMatchQueryBuilder50.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder50.getPROTOTYPE();
        multiMatchQueryBuilder50.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray61 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray61);
        org.elasticsearch.index.query.Operator operator63 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.operator(operator63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder62.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException67 = multiMatchQueryBuilder62.validate();
        java.lang.Integer int68 = multiMatchQueryBuilder62.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery69 = multiMatchQueryBuilder62.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder62.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder62.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder62.boost((float) 0);
        java.lang.String str77 = multiMatchQueryBuilder62.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap78 = multiMatchQueryBuilder62.fieldsBoosts;
        multiMatchQueryBuilder50.fieldsBoosts = strObjectFloatHashMap78;
        multiMatchQueryBuilder43.setfieldsBoosts(strObjectFloatHashMap78);
        multiMatchQueryBuilder20.fieldsBoosts = strObjectFloatHashMap78;
        multiMatchQueryBuilder4.setfieldsBoosts(strObjectFloatHashMap78);
        java.util.List<java.lang.String> strList83 = multiMatchQueryBuilder4.fields;
        java.lang.String str84 = multiMatchQueryBuilder4.fuzzyRewrite;
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(boolean37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNull(type45);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "multi_match" + "'", str53, "multi_match");
        org.junit.Assert.assertNull(boolean54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNull(queryValidationException67);
        org.junit.Assert.assertNull(int68);
        org.junit.Assert.assertNull(zeroTermsQuery69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap78);
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertNull(str84);
    }

    @Test
    public void test06850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06850");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery10);
        multiMatchQueryBuilder11.maxExpansions = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str16 = multiMatchQueryBuilder15.getminimumShouldMatch();
        java.lang.Object obj17 = multiMatchQueryBuilder15.gettext();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder15.getuseDisMax();
        java.lang.Object obj19 = null;
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        java.lang.Boolean boolean27 = multiMatchQueryBuilder24.getlenient();
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder24.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder24.tieBreaker((float) (-1));
        multiMatchQueryBuilder24.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder24.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.common.ParseField parseField39 = type38.parseField();
        org.elasticsearch.common.ParseField parseField40 = type38.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder37.type(type38);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery42 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.zeroTermsQuery(zeroTermsQuery42);
        java.lang.String[] strArray47 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray47);
        org.elasticsearch.index.query.Operator operator49 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.operator(operator49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder48.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException53 = multiMatchQueryBuilder48.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder48.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder48.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder48.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness60 = multiMatchQueryBuilder48.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder48.slop((int) (short) 0);
        multiMatchQueryBuilder48.setslop((java.lang.Integer) 100);
        java.lang.Boolean boolean65 = multiMatchQueryBuilder48.getuseDisMax();
        java.lang.String str66 = multiMatchQueryBuilder48.fuzzyRewrite;
        java.lang.String[] strArray71 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray71);
        java.lang.String[] strArray77 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray77);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray71, strArray77);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str66, strArray71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder43, strArray71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj19, strArray71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder15, strArray71);
        java.lang.Boolean boolean84 = multiMatchQueryBuilder15.getlenient();
        org.elasticsearch.common.xcontent.XContentType xContentType85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference86 = multiMatchQueryBuilder15.buildAsBytes(xContentType85);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(boolean27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(parseField39);
        org.junit.Assert.assertNotNull(parseField40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(queryValidationException53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(fuzziness60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNull(boolean65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNull(boolean84);
    }

    @Test
    public void test06851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06851");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.Operator operator10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.operator(operator10);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) (-1.0f));
        java.lang.String[] strArray17 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray17);
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.operator(operator19);
        java.lang.Boolean boolean21 = multiMatchQueryBuilder18.getlenient();
        multiMatchQueryBuilder18.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder18.tieBreaker((float) (-1));
        java.lang.Integer int28 = multiMatchQueryBuilder27.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type29 = multiMatchQueryBuilder27.gettype();
        java.lang.String[] strArray33 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray33);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        java.lang.String str37 = multiMatchQueryBuilder34.getWriteableName();
        java.lang.Boolean boolean38 = multiMatchQueryBuilder34.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder34.getPROTOTYPE();
        multiMatchQueryBuilder34.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray45 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray45);
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.operator(operator47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder46.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException51 = multiMatchQueryBuilder46.validate();
        java.lang.Integer int52 = multiMatchQueryBuilder46.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery53 = multiMatchQueryBuilder46.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder46.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder46.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder46.boost((float) 0);
        java.lang.String str61 = multiMatchQueryBuilder46.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap62 = multiMatchQueryBuilder46.fieldsBoosts;
        multiMatchQueryBuilder34.fieldsBoosts = strObjectFloatHashMap62;
        multiMatchQueryBuilder27.setfieldsBoosts(strObjectFloatHashMap62);
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap62;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder67.getPROTOTYPE();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery69 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder67.zeroTermsQuery(zeroTermsQuery69);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNull(type29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "multi_match" + "'", str37, "multi_match");
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(queryValidationException51);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNull(zeroTermsQuery53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
    }

    @Test
    public void test06852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06852");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) true);
        java.lang.String str18 = multiMatchQueryBuilder4.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.tieBreaker((float) (byte) 100);
        java.lang.Integer int21 = multiMatchQueryBuilder20.getprefixLength();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(int21);
    }

    @Test
    public void test06853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06853");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        multiMatchQueryBuilder13.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.prefixLength((int) (short) 100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException29 = multiMatchQueryBuilder24.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder24.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder24.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder24.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = multiMatchQueryBuilder24.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField38 = type37.parseField();
        multiMatchQueryBuilder24.type = type37;
        boolean boolean40 = multiMatchQueryBuilder17.equals((java.lang.Object) multiMatchQueryBuilder24);
        java.lang.String str41 = multiMatchQueryBuilder17.analyzer;
        java.lang.Object obj42 = multiMatchQueryBuilder17.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder17.boost((float) 10);
        java.lang.String[] strArray48 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray48);
        org.elasticsearch.index.query.Operator operator50 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.operator(operator50);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder49.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap54 = multiMatchQueryBuilder53.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery55 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder53.zeroTermsQuery(zeroTermsQuery55);
        multiMatchQueryBuilder53.setanalyzer("hi!");
        multiMatchQueryBuilder53.tieBreaker = (-1.0f);
        multiMatchQueryBuilder53.prefixLength = 1;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder44.fuzziness((java.lang.Object) multiMatchQueryBuilder53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder53.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"Name\" : \"multi_match\"\n  }\n}");
        java.lang.Float float66 = multiMatchQueryBuilder53.cutoffFrequency;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(queryValidationException29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(type36);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type37.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multi_match" + "'", str41, "multi_match");
        org.junit.Assert.assertEquals("'" + obj42 + "' != '" + "multi_match" + "'", obj42, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNull(strObjectFloatHashMap54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNull(float66);
    }

    @Test
    public void test06854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06854");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder8.setanalyzer("multi_match");
        org.elasticsearch.index.query.QueryValidationException queryValidationException13 = multiMatchQueryBuilder8.validate();
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.cutoffFrequency(0.0f);
        multiMatchQueryBuilder8.lenient = false;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(queryValidationException13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test06855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06855");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.getPROTOTYPE();
        multiMatchQueryBuilder14.settieBreaker((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = multiMatchQueryBuilder14.zeroTermsQuery;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder14.setzeroTermsQuery(zeroTermsQuery18);
        multiMatchQueryBuilder14.cutoffFrequency = (-1.0f);
        java.lang.Class<?> wildcardClass22 = multiMatchQueryBuilder14.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(zeroTermsQuery17);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test06856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06856");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06857");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder11.getfieldsBoosts();
        java.lang.String str13 = multiMatchQueryBuilder11.getWriteableName();
        java.lang.Integer int14 = multiMatchQueryBuilder11.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test06858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06858");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        org.elasticsearch.index.query.QueryValidationException queryValidationException8 = multiMatchQueryBuilder6.validate();
        java.lang.String str9 = multiMatchQueryBuilder6.getminimumShouldMatch();
        java.lang.Boolean boolean10 = multiMatchQueryBuilder6.lenient;
        multiMatchQueryBuilder6.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder6.useDisMax(true);
        java.lang.Object obj15 = multiMatchQueryBuilder14.text;
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.operator(operator16);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(queryValidationException8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "multi_match" + "'", obj15, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test06859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06859");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str22 = multiMatchQueryBuilder21.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder24.setslop((java.lang.Integer) 32);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params28 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder29 = multiMatchQueryBuilder24.toXContent(xContentBuilder27, params28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str22, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(params28);
    }

    @Test
    public void test06860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06860");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        multiMatchQueryBuilder19.cutoffFrequency = 0.0f;
        multiMatchQueryBuilder19.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.Operator operator24 = null;
        multiMatchQueryBuilder19.setoperator(operator24);
        multiMatchQueryBuilder19.settieBreaker((java.lang.Float) (-1.0f));
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test06861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06861");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.common.unit.Fuzziness fuzziness9 = multiMatchQueryBuilder8.fuzziness;
        multiMatchQueryBuilder8.maxExpansions = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String[] strArray17 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray17);
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.operator(operator19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException23 = multiMatchQueryBuilder18.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.cutoffFrequency((float) (byte) 100);
        java.lang.String str26 = multiMatchQueryBuilder18.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder18.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder18.tieBreaker((-1.0f));
        multiMatchQueryBuilder30.setlenient((java.lang.Boolean) false);
        multiMatchQueryBuilder30.slop = 100;
        multiMatchQueryBuilder30.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"prefixLength\" : 0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        boolean boolean37 = multiMatchQueryBuilder13.equals((java.lang.Object) "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"prefixLength\" : 0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(fuzziness9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(queryValidationException23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test06862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06862");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        java.lang.String str18 = multiMatchQueryBuilder17.fuzzyRewrite;
        java.lang.Boolean boolean19 = multiMatchQueryBuilder17.useDisMax;
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.operator(operator20);
        multiMatchQueryBuilder21.rewrite = "";
        multiMatchQueryBuilder21.settieBreaker((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder21.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder27.setlenient((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test06863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06863");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.slop(1);
        java.lang.Object obj18 = multiMatchQueryBuilder8.text;
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        multiMatchQueryBuilder8.zeroTermsQuery = zeroTermsQuery21;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + "multi_match" + "'", obj18, "multi_match");
    }

    @Test
    public void test06864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06864");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06865");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder4.setcutoffFrequency((java.lang.Float) 1.0f);
        java.lang.Integer int13 = multiMatchQueryBuilder4.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery14);
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.operator(operator16);
        multiMatchQueryBuilder15.tieBreaker = 100.0f;
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.Operator operator27 = null;
        multiMatchQueryBuilder24.operator = operator27;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder24.fuzzyRewrite("multi_match");
        multiMatchQueryBuilder24.maxExpansions = 1;
        java.lang.String[] strArray36 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray36);
        org.elasticsearch.index.query.Operator operator38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.operator(operator38);
        java.lang.Boolean boolean40 = multiMatchQueryBuilder37.getlenient();
        multiMatchQueryBuilder37.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder24.fuzziness((java.lang.Object) 100);
        java.lang.Object obj44 = multiMatchQueryBuilder43.text;
        org.elasticsearch.index.query.Operator operator45 = null;
        multiMatchQueryBuilder43.setoperator(operator45);
        java.lang.String[] strArray50 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray50);
        org.elasticsearch.index.query.Operator operator52 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.operator(operator52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder51.field("");
        org.elasticsearch.common.unit.Fuzziness fuzziness56 = multiMatchQueryBuilder55.fuzziness;
        java.util.List<java.lang.String> strList57 = multiMatchQueryBuilder55.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type58 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder55.fuzziness((java.lang.Object) type58);
        org.elasticsearch.index.query.Operator operator60 = null;
        multiMatchQueryBuilder59.operator = operator60;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder43.type((java.lang.Object) operator60);
        boolean boolean63 = multiMatchQueryBuilder15.equals((java.lang.Object) multiMatchQueryBuilder62);
        org.elasticsearch.index.query.Operator operator64 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder15.operator(operator64);
        java.lang.String str66 = multiMatchQueryBuilder65.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(boolean40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertEquals("'" + obj44 + "' != '" + "multi_match" + "'", obj44, "multi_match");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNull(fuzziness56);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type58.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str66, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test06866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06866");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str12 = multiMatchQueryBuilder8.minimumShouldMatch;
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException22 = multiMatchQueryBuilder17.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.cutoffFrequency((float) (byte) 100);
        java.lang.String str25 = multiMatchQueryBuilder17.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder17.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness28 = multiMatchQueryBuilder17.getfuzziness();
        org.elasticsearch.common.unit.Fuzziness fuzziness29 = null;
        multiMatchQueryBuilder17.fuzziness = fuzziness29;
        java.lang.Integer int31 = multiMatchQueryBuilder17.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = multiMatchQueryBuilder17.zeroTermsQuery;
        boolean boolean33 = multiMatchQueryBuilder8.equals((java.lang.Object) zeroTermsQuery32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder8.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.io.stream.StreamInput streamInput37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.readFrom(streamInput37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(queryValidationException22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(fuzziness28);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(zeroTermsQuery32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
    }

    @Test
    public void test06867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06867");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder13.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder23.maxExpansions = 0;
        java.lang.Integer int26 = multiMatchQueryBuilder23.prefixLength;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(int26);
    }

    @Test
    public void test06868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06868");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder4.toString();
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap25 = multiMatchQueryBuilder24.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder24.lenient(false);
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery32);
        multiMatchQueryBuilder24.tieBreaker = 10.0f;
        java.util.List<java.lang.String> strList36 = multiMatchQueryBuilder24.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder4.cutoffFrequency((float) (-1L));
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap40 = multiMatchQueryBuilder39.getfieldsBoosts();
        java.lang.Boolean boolean41 = multiMatchQueryBuilder39.lenient;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(strObjectFloatHashMap25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(strObjectFloatHashMap40);
        org.junit.Assert.assertNull(boolean41);
    }

    @Test
    public void test06869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06869");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Integer int15 = multiMatchQueryBuilder14.getprefixLength();
        java.lang.Object obj16 = null;
        boolean boolean17 = multiMatchQueryBuilder14.equals(obj16);
        java.lang.String str18 = multiMatchQueryBuilder14.getWriteableName();
        java.lang.Class<?> wildcardClass19 = multiMatchQueryBuilder14.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "multi_match" + "'", str18, "multi_match");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test06870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06870");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.Operator operator9 = null;
        multiMatchQueryBuilder4.setoperator(operator9);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder4.getlenient();
        java.lang.String[] strArray15 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray15);
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException21 = multiMatchQueryBuilder16.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.cutoffFrequency((float) (byte) 100);
        java.lang.String str24 = multiMatchQueryBuilder16.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery25);
        multiMatchQueryBuilder16.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder16.setmaxExpansions((java.lang.Integer) 10);
        java.lang.Integer int31 = multiMatchQueryBuilder16.prefixLength;
        multiMatchQueryBuilder16.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder16.cutoffFrequency(52.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) 52.0f);
        multiMatchQueryBuilder4.lenient = false;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery39 = null;
        multiMatchQueryBuilder4.setzeroTermsQuery(zeroTermsQuery39);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(queryValidationException21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
    }

    @Test
    public void test06871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06871");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.slop((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.tieBreaker(0.0f);
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder22.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder22.fuzzyRewrite("hi!");
        multiMatchQueryBuilder22.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = null;
        multiMatchQueryBuilder22.zeroTermsQuery = zeroTermsQuery36;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder22.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.prefixLength((-1));
        multiMatchQueryBuilder41.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder41.lenient(true);
        java.lang.String[] strArray49 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray49);
        org.elasticsearch.index.query.Operator operator51 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.operator(operator51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder50.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder54.setanalyzer("multi_match");
        org.elasticsearch.index.query.QueryValidationException queryValidationException59 = multiMatchQueryBuilder54.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery60 = multiMatchQueryBuilder54.zeroTermsQuery;
        java.lang.String str61 = multiMatchQueryBuilder54.getrewrite();
        multiMatchQueryBuilder54.lenient = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder54.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap67 = multiMatchQueryBuilder54.fieldsBoosts;
        multiMatchQueryBuilder45.fieldsBoosts = strObjectFloatHashMap67;
        multiMatchQueryBuilder15.setfieldsBoosts(strObjectFloatHashMap67);
        org.elasticsearch.index.query.QueryValidationException queryValidationException70 = multiMatchQueryBuilder15.validate();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNull(queryValidationException59);
        org.junit.Assert.assertNull(zeroTermsQuery60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap67);
        org.junit.Assert.assertNull(queryValidationException70);
    }

    @Test
    public void test06872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06872");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.useDisMax(true);
        org.elasticsearch.index.query.Operator operator15 = null;
        multiMatchQueryBuilder4.operator = operator15;
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"type\" : \"most_fields\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str19 = multiMatchQueryBuilder4.minimumShouldMatch;
        multiMatchQueryBuilder4.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"slop\" : 0,\n    \"useDisMax\" : false,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test06873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06873");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.fields;
        multiMatchQueryBuilder4.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.useDisMax(true);
        java.lang.Integer int14 = multiMatchQueryBuilder13.getprefixLength();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        java.lang.String str16 = multiMatchQueryBuilder13.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test06874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06874");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.fuzzyRewrite("hi!");
        java.util.List<java.lang.String> strList19 = multiMatchQueryBuilder18.getfields();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        multiMatchQueryBuilder18.zeroTermsQuery = zeroTermsQuery20;
        java.lang.Boolean boolean22 = multiMatchQueryBuilder18.lenient;
        multiMatchQueryBuilder18.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : -1,\n    \"maxExpansions\" : 100,\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder18.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNull(boolean22);
    }

    @Test
    public void test06875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06875");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder17.setuseDisMax((java.lang.Boolean) true);
        multiMatchQueryBuilder17.setprefixLength((java.lang.Integer) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.tieBreaker((float) 100);
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        multiMatchQueryBuilder28.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder28.operator(operator33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder28.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder28.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder23.fuzziness((java.lang.Object) multiMatchQueryBuilder38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type40 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        float float41 = type40.tieBreaker();
        multiMatchQueryBuilder23.type = type40;
        java.lang.Object obj43 = multiMatchQueryBuilder23.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder23.cutoffFrequency((float) 0L);
        java.lang.Object obj46 = multiMatchQueryBuilder23.text;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type40.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 0.0f + "'", float41 == 0.0f);
        org.junit.Assert.assertEquals("'" + obj43 + "' != '" + "multi_match" + "'", obj43, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertEquals("'" + obj46 + "' != '" + "multi_match" + "'", obj46, "multi_match");
    }

    @Test
    public void test06876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06876");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        multiMatchQueryBuilder4.maxExpansions = 52;
        org.elasticsearch.common.unit.Fuzziness fuzziness11 = multiMatchQueryBuilder4.fuzziness;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(fuzziness11);
    }

    @Test
    public void test06877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06877");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.text;
        java.lang.String str15 = multiMatchQueryBuilder13.getfuzzyRewrite();
        java.lang.Float float16 = multiMatchQueryBuilder13.cutoffFrequency;
        java.lang.Float float17 = multiMatchQueryBuilder13.getcutoffFrequency();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(float17);
    }

    @Test
    public void test06878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06878");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.Boolean boolean16 = multiMatchQueryBuilder12.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder12.operator(operator19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"type\" : \"most_fields\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str23 = multiMatchQueryBuilder22.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
    }

    @Test
    public void test06879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06879");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        multiMatchQueryBuilder6.prefixLength = 10;
        java.lang.String[] strArray13 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray13);
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.operator(operator15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException19 = multiMatchQueryBuilder14.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder14.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness26 = multiMatchQueryBuilder14.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder14.slop((int) (short) 0);
        multiMatchQueryBuilder14.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray34 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray34);
        org.elasticsearch.index.query.Operator operator36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.operator(operator36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder35.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException40 = multiMatchQueryBuilder35.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder35.cutoffFrequency((float) (byte) 100);
        float float43 = multiMatchQueryBuilder35.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type44 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type45 = type44.matchQueryType();
        multiMatchQueryBuilder35.settype(type44);
        multiMatchQueryBuilder14.type = type44;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder6.fuzziness((java.lang.Object) type44);
        java.lang.String str49 = multiMatchQueryBuilder48.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder48.boost((-1.0f));
        multiMatchQueryBuilder51.setprefixLength((java.lang.Integer) 100);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(queryValidationException19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(fuzziness26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(queryValidationException40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 1.0f + "'", float43 == 1.0f);
        org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type44.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type45.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
    }

    @Test
    public void test06880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06880");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        java.lang.String str19 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap29 = multiMatchQueryBuilder28.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.zeroTermsQuery(zeroTermsQuery30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder28.lenient(false);
        multiMatchQueryBuilder28.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder28.zeroTermsQuery(zeroTermsQuery36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type40 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder37.settype(type40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) type40);
        java.lang.String str43 = multiMatchQueryBuilder42.getfuzzyRewrite();
        java.lang.Boolean boolean44 = multiMatchQueryBuilder42.getuseDisMax();
        multiMatchQueryBuilder42.setcutoffFrequency((java.lang.Float) 97.0f);
        java.lang.String str47 = multiMatchQueryBuilder42.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(strObjectFloatHashMap29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type40.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test06881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06881");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder4.queryName();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params23 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = multiMatchQueryBuilder4.toXContent(xContentBuilder22, params23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}" + "'", str21, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.junit.Assert.assertNotNull(params23);
    }

    @Test
    public void test06882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06882");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        java.lang.String str9 = multiMatchQueryBuilder4.rewrite;
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = multiMatchQueryBuilder4.type;
        java.lang.String str13 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test06883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06883");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        java.lang.String str19 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap29 = multiMatchQueryBuilder28.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.zeroTermsQuery(zeroTermsQuery30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder28.lenient(false);
        multiMatchQueryBuilder28.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder28.zeroTermsQuery(zeroTermsQuery36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type40 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder37.settype(type40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) type40);
        java.lang.String str43 = multiMatchQueryBuilder42.getfuzzyRewrite();
        java.lang.Boolean boolean44 = multiMatchQueryBuilder42.getuseDisMax();
        java.lang.Float float45 = multiMatchQueryBuilder42.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder42.maxExpansions(10);
        java.lang.String str48 = multiMatchQueryBuilder42.getfuzzyRewrite();
        java.lang.Integer int49 = multiMatchQueryBuilder42.prefixLength;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(strObjectFloatHashMap29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type40.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertNull(float45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(int49);
    }

    @Test
    public void test06884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06884");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        java.lang.Object obj11 = multiMatchQueryBuilder10.gettext();
        java.lang.String[] strArray15 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray15);
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap21 = multiMatchQueryBuilder20.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.zeroTermsQuery(zeroTermsQuery22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder20.lenient(false);
        java.lang.Object obj26 = multiMatchQueryBuilder25.gettext();
        java.lang.Integer int27 = multiMatchQueryBuilder25.getslop();
        multiMatchQueryBuilder25.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder25.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder25.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder25.prefixLength((int) '#');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = multiMatchQueryBuilder35.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = multiMatchQueryBuilder35.type;
        boolean boolean38 = multiMatchQueryBuilder10.equals((java.lang.Object) multiMatchQueryBuilder35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder35.slop(0);
        java.lang.String str41 = multiMatchQueryBuilder40.toString();
        java.lang.String str42 = multiMatchQueryBuilder40.fuzzyRewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "multi_match" + "'", obj11, "multi_match");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(strObjectFloatHashMap21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + "multi_match" + "'", obj26, "multi_match");
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(zeroTermsQuery36);
        org.junit.Assert.assertNull(type37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 0,\n    \"prefixLength\" : 35,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str41, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 0,\n    \"prefixLength\" : 35,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test06885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06885");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder24.setoperator(operator29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder24.zeroTermsQuery = zeroTermsQuery31;
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        multiMatchQueryBuilder37.maxExpansions = 0;
        java.lang.Boolean boolean40 = multiMatchQueryBuilder37.lenient;
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap50 = multiMatchQueryBuilder49.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.minimumShouldMatch("multi_match");
        java.lang.String str53 = multiMatchQueryBuilder52.toString();
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.Operator operator59 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.operator(operator59);
        java.lang.String str61 = multiMatchQueryBuilder58.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness62 = multiMatchQueryBuilder58.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder58.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.cutoffFrequency((float) '4');
        boolean boolean67 = multiMatchQueryBuilder52.equals((java.lang.Object) multiMatchQueryBuilder64);
        multiMatchQueryBuilder64.setmaxExpansions((java.lang.Integer) (-1));
        multiMatchQueryBuilder64.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder37.fuzziness((java.lang.Object) multiMatchQueryBuilder64);
        java.lang.String str73 = multiMatchQueryBuilder64.getrewrite();
        java.lang.Object obj74 = multiMatchQueryBuilder64.text;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(boolean40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(strObjectFloatHashMap50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str53, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "multi_match" + "'", str61, "multi_match");
        org.junit.Assert.assertNull(fuzziness62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertEquals("'" + obj74 + "' != '" + "multi_match" + "'", obj74, "multi_match");
    }

    @Test
    public void test06886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06886");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap17;
        org.elasticsearch.index.query.Operator operator19 = null;
        multiMatchQueryBuilder16.setoperator(operator19);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        java.lang.Boolean boolean28 = multiMatchQueryBuilder25.getlenient();
        java.lang.String str29 = multiMatchQueryBuilder25.getfuzzyRewrite();
        multiMatchQueryBuilder25.lenient = true;
        boolean boolean32 = multiMatchQueryBuilder16.equals((java.lang.Object) multiMatchQueryBuilder25);
        java.lang.String[] strArray36 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray36);
        org.elasticsearch.index.query.Operator operator38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.operator(operator38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder37.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException42 = multiMatchQueryBuilder37.validate();
        java.lang.Integer int43 = multiMatchQueryBuilder37.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery44 = multiMatchQueryBuilder37.getzeroTermsQuery();
        org.elasticsearch.index.query.QueryValidationException queryValidationException45 = multiMatchQueryBuilder37.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type46 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type47 = type46.matchQueryType();
        multiMatchQueryBuilder37.settype(type46);
        multiMatchQueryBuilder16.type = type46;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder16.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder16.useDisMax(true);
        java.lang.String str53 = multiMatchQueryBuilder52.getWriteableName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(boolean28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(queryValidationException42);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNull(zeroTermsQuery44);
        org.junit.Assert.assertNull(queryValidationException45);
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type46.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type47.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "multi_match" + "'", str53, "multi_match");
    }

    @Test
    public void test06887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06887");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.tieBreaker((-1.0f));
        multiMatchQueryBuilder16.setlenient((java.lang.Boolean) false);
        multiMatchQueryBuilder16.slop = 100;
        multiMatchQueryBuilder16.setlenient((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test06888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06888");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean16 = multiMatchQueryBuilder15.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.useDisMax(false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test06889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06889");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("hi!", (float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"Name\" : \"multi_match\"\n  }\n}");
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder20.getNAME();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
    }

    @Test
    public void test06890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06890");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type8 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type9 = type8.matchQueryType();
        float float10 = type8.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type8);
        org.elasticsearch.index.query.Operator operator12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder6.operator(operator12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.boost((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.useDisMax(true);
        java.lang.String str18 = multiMatchQueryBuilder13.fuzzyRewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type8.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type9.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test06891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06891");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder20.fuzziness;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = multiMatchQueryBuilder20.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList25 = multiMatchQueryBuilder24.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type26 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField27 = type26.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type28 = type26.matchQueryType();
        org.elasticsearch.common.ParseField parseField29 = type26.parseField();
        org.elasticsearch.common.ParseField parseField30 = type26.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type31 = type26.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type32 = type26.matchQueryType();
        multiMatchQueryBuilder24.settype(type26);
        float float34 = type26.tieBreaker();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNull(strObjectFloatHashMap22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type26.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField27);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField29);
        org.junit.Assert.assertNotNull(parseField30);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type31.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type32.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 1.0f + "'", float34 == 1.0f);
    }

    @Test
    public void test06892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06892");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        java.lang.String str19 = multiMatchQueryBuilder18.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        multiMatchQueryBuilder18.zeroTermsQuery = zeroTermsQuery20;
        multiMatchQueryBuilder18.setprefixLength((java.lang.Integer) 100);
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder18.getfuzziness();
        multiMatchQueryBuilder18.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder18.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : {\n      \"multiMatch\" : {\n        \"query\" : \"multi_match\",\n        \"fields\" : [ \"multi_match\", \"hi!\" ],\n        \"slop\" : -1,\n        \"minimumShouldMatch\" : \"\",\n        \"fuzzyRewrite\" : \"hi!\",\n        \"boost\" : 1.0\n      }\n    },\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"cutoff_frequency\\\" : -1.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str19, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(fuzziness24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test06893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06893");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean21 = multiMatchQueryBuilder20.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.boost((float) 1);
        java.lang.Boolean boolean24 = multiMatchQueryBuilder23.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type25 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type26 = type25.matchQueryType();
        float float27 = type25.tieBreaker();
        float float28 = type25.tieBreaker();
        float float29 = type25.tieBreaker();
        org.elasticsearch.common.ParseField parseField30 = type25.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder23.type(type25);
        org.elasticsearch.index.query.Operator operator32 = null;
        multiMatchQueryBuilder23.operator = operator32;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type25.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type26.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 0.0f + "'", float27 == 0.0f);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 0.0f + "'", float28 == 0.0f);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(parseField30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test06894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06894");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.String str10 = multiMatchQueryBuilder4.getNAME();
        org.elasticsearch.common.unit.Fuzziness fuzziness11 = multiMatchQueryBuilder4.fuzziness;
        java.lang.String[] strArray15 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray15);
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        java.lang.Boolean boolean19 = multiMatchQueryBuilder16.getlenient();
        org.elasticsearch.common.unit.Fuzziness fuzziness20 = multiMatchQueryBuilder16.getfuzziness();
        java.lang.String str21 = multiMatchQueryBuilder16.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder32.setanalyzer("multi_match");
        org.elasticsearch.index.query.QueryValidationException queryValidationException37 = multiMatchQueryBuilder32.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = multiMatchQueryBuilder32.zeroTermsQuery;
        java.lang.String str39 = multiMatchQueryBuilder32.getrewrite();
        multiMatchQueryBuilder32.lenient = true;
        java.lang.String[] strArray45 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray45);
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.operator(operator47);
        java.lang.String str49 = multiMatchQueryBuilder46.getWriteableName();
        java.lang.Boolean boolean50 = multiMatchQueryBuilder46.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder46.getPROTOTYPE();
        multiMatchQueryBuilder46.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.Operator operator59 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.operator(operator59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder58.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException63 = multiMatchQueryBuilder58.validate();
        java.lang.Integer int64 = multiMatchQueryBuilder58.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery65 = multiMatchQueryBuilder58.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder58.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder58.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder58.boost((float) 0);
        java.lang.String str73 = multiMatchQueryBuilder58.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap74 = multiMatchQueryBuilder58.fieldsBoosts;
        multiMatchQueryBuilder46.fieldsBoosts = strObjectFloatHashMap74;
        multiMatchQueryBuilder32.fieldsBoosts = strObjectFloatHashMap74;
        multiMatchQueryBuilder23.fieldsBoosts = strObjectFloatHashMap74;
        multiMatchQueryBuilder4.setfieldsBoosts(strObjectFloatHashMap74);
        java.lang.String str79 = multiMatchQueryBuilder4.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "multi_match" + "'", str10, "multi_match");
        org.junit.Assert.assertNull(fuzziness11);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNull(fuzziness20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(queryValidationException37);
        org.junit.Assert.assertNull(zeroTermsQuery38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "multi_match" + "'", str49, "multi_match");
        org.junit.Assert.assertNull(boolean50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNull(queryValidationException63);
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNull(zeroTermsQuery65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap74);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
    }

    @Test
    public void test06895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06895");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.slop(1);
        java.lang.String str18 = multiMatchQueryBuilder17.getName();
        multiMatchQueryBuilder17.tieBreaker = 1.0f;
        java.lang.Float float21 = multiMatchQueryBuilder17.cutoffFrequency;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = multiMatchQueryBuilder17.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "multi_match" + "'", str18, "multi_match");
        org.junit.Assert.assertNull(float21);
        org.junit.Assert.assertNull(zeroTermsQuery22);
    }

    @Test
    public void test06896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06896");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.queryName("");
        float float13 = multiMatchQueryBuilder12.boost();
        java.lang.String str14 = multiMatchQueryBuilder12.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.useDisMax(true);
        multiMatchQueryBuilder16.setuseDisMax((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "multi_match" + "'", str14, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test06897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06897");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.Object obj17 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.cutoffFrequency((float) 10);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder19.doXContent(xContentBuilder20, params21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(params21);
    }

    @Test
    public void test06898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06898");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        java.lang.Object obj16 = multiMatchQueryBuilder15.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = multiMatchQueryBuilder18.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.lenient(true);
        java.lang.Integer int22 = multiMatchQueryBuilder18.getprefixLength();
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException32 = multiMatchQueryBuilder27.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder27.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.zeroTermsQuery(zeroTermsQuery35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.maxExpansions((-1));
        java.util.List<java.lang.String> strList39 = multiMatchQueryBuilder34.getfields();
        multiMatchQueryBuilder34.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder34.useDisMax(true);
        java.lang.String[] strArray47 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray47);
        org.elasticsearch.index.query.Operator operator49 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.operator(operator49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder48.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException53 = multiMatchQueryBuilder48.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder48.cutoffFrequency((float) (byte) 100);
        java.lang.String str56 = multiMatchQueryBuilder48.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder48.queryName("");
        multiMatchQueryBuilder58.setslop((java.lang.Integer) 0);
        java.lang.String[] strArray64 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) true, strArray64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder18, strArray64);
        java.lang.Float float69 = multiMatchQueryBuilder68.cutoffFrequency;
        org.elasticsearch.common.unit.Fuzziness fuzziness70 = multiMatchQueryBuilder68.fuzziness;
        java.lang.Boolean boolean71 = multiMatchQueryBuilder68.useDisMax;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "multi_match" + "'", obj16, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(strObjectFloatHashMap19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(queryValidationException32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(queryValidationException53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNull(float69);
        org.junit.Assert.assertNull(fuzziness70);
        org.junit.Assert.assertNull(boolean71);
    }

    @Test
    public void test06899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06899");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.String[] strArray5 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray5);
        org.elasticsearch.index.query.Operator operator7 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.operator(operator7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder6.field("");
        multiMatchQueryBuilder6.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder6.lenient(true);
        java.lang.String str15 = multiMatchQueryBuilder14.toString();
        java.lang.String str16 = multiMatchQueryBuilder14.getfuzzyRewrite();
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("");
        multiMatchQueryBuilder21.minimumShouldMatch = "hi!";
        java.lang.Float float28 = multiMatchQueryBuilder21.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type29 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type30 = type29.matchQueryType();
        float float31 = type29.tieBreaker();
        multiMatchQueryBuilder21.type = type29;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder14.type(type29);
        multiMatchQueryBuilder33.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str36 = multiMatchQueryBuilder33.getNAME();
        java.lang.String[] strArray40 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str36, strArray40);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder43 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str15, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(float28);
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type29.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type30.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 0.0f + "'", float31 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "multi_match" + "'", str36, "multi_match");
        org.junit.Assert.assertNotNull(strArray40);
    }

    @Test
    public void test06900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06900");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.tieBreaker((float) (byte) -1);
        org.elasticsearch.index.query.Operator operator16 = null;
        multiMatchQueryBuilder15.setoperator(operator16);
        java.lang.String str18 = multiMatchQueryBuilder15.getWriteableName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "multi_match" + "'", str18, "multi_match");
    }

    @Test
    public void test06901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06901");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String str16 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.useDisMax(true);
        float float21 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) (-1));
        java.util.List<java.lang.String> strList24 = multiMatchQueryBuilder4.getfields();
        multiMatchQueryBuilder4.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder4.boost((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.slop((int) (short) 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 1.0f + "'", float21 == 1.0f);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
    }

    @Test
    public void test06902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06902");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.boost((float) 10L);
        multiMatchQueryBuilder8.maxExpansions = 52;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test06903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06903");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.tieBreaker((float) 52);
        java.lang.Boolean boolean19 = multiMatchQueryBuilder18.getlenient();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean19);
    }

    @Test
    public void test06904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06904");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean21 = multiMatchQueryBuilder20.useDisMax;
        java.lang.String[] strArray25 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray25);
        org.elasticsearch.index.query.Operator operator27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.operator(operator27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException31 = multiMatchQueryBuilder26.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder26.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder26.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder26.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness38 = multiMatchQueryBuilder26.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder26.slop((int) (short) 0);
        multiMatchQueryBuilder26.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray46 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray46);
        org.elasticsearch.index.query.Operator operator48 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.operator(operator48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder47.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException52 = multiMatchQueryBuilder47.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder47.cutoffFrequency((float) (byte) 100);
        float float55 = multiMatchQueryBuilder47.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type56 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type57 = type56.matchQueryType();
        multiMatchQueryBuilder47.settype(type56);
        multiMatchQueryBuilder26.type = type56;
        java.lang.String str60 = multiMatchQueryBuilder26.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder26.cutoffFrequency((float) 100L);
        java.lang.Boolean boolean63 = multiMatchQueryBuilder26.lenient;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type64 = multiMatchQueryBuilder26.type;
        org.elasticsearch.index.search.MatchQuery.Type type65 = type64.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder20.type(type64);
        java.lang.String str67 = multiMatchQueryBuilder66.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder66.boost(1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder69.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 1,\n    \"maxExpansions\" : 100,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(queryValidationException31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(fuzziness38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(queryValidationException52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + 1.0f + "'", float55 == 1.0f);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type56.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type57 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type57.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNull(boolean63);
        org.junit.Assert.assertTrue("'" + type64 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type64.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type65 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type65.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "multi_match" + "'", str67, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
    }

    @Test
    public void test06905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06905");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.common.unit.Fuzziness fuzziness10 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness10;
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.tieBreaker((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder14.setcutoffFrequency((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder14.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder14.setmaxExpansions((java.lang.Integer) 97);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder14.getPROTOTYPE();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test06906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06906");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        java.lang.String str21 = multiMatchQueryBuilder4.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap24 = multiMatchQueryBuilder4.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(strObjectFloatHashMap24);
    }

    @Test
    public void test06907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06907");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder6.maxExpansions = 1;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder6.slop((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.useDisMax(false);
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder12.fuzziness;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(fuzziness15);
    }

    @Test
    public void test06908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06908");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        java.lang.String str13 = multiMatchQueryBuilder4.getName();
        java.lang.String str14 = multiMatchQueryBuilder4.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField16 = type15.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type17 = type15.matchQueryType();
        org.elasticsearch.common.ParseField parseField18 = type15.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type19 = type15.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.type(type15);
        org.elasticsearch.index.query.Operator operator21 = null;
        multiMatchQueryBuilder20.operator = operator21;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type15.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField16);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type17.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type19.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test06909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06909");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        java.lang.Float float16 = multiMatchQueryBuilder15.cutoffFrequency;
        multiMatchQueryBuilder15.useDisMax = true;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = null;
        multiMatchQueryBuilder15.setfieldsBoosts(strObjectFloatHashMap19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder15.getzeroTermsQuery();
        java.lang.Boolean boolean22 = multiMatchQueryBuilder15.getuseDisMax();
        java.lang.String str23 = multiMatchQueryBuilder15.getrewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertEquals("'" + boolean22 + "' != '" + true + "'", boolean22, true);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test06910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06910");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Boolean boolean15 = multiMatchQueryBuilder11.lenient;
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        java.lang.String str25 = multiMatchQueryBuilder20.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder20.field("hi!", (float) (byte) 0);
        boolean boolean31 = multiMatchQueryBuilder11.equals((java.lang.Object) multiMatchQueryBuilder30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder11.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!^97.0\", \"\", \"hi!^97.0\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery34 = multiMatchQueryBuilder11.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(zeroTermsQuery34);
    }

    @Test
    public void test06911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06911");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        float float33 = multiMatchQueryBuilder25.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type35 = type34.matchQueryType();
        multiMatchQueryBuilder25.settype(type34);
        multiMatchQueryBuilder4.type = type34;
        java.lang.String str38 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder4.cutoffFrequency((float) 100L);
        float float41 = multiMatchQueryBuilder40.boost();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 1.0f + "'", float33 == 1.0f);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type35.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 1.0f + "'", float41 == 1.0f);
    }

    @Test
    public void test06912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06912");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int16 = multiMatchQueryBuilder4.slop;
        java.lang.Object obj17 = multiMatchQueryBuilder4.gettext();
        java.lang.Float float18 = multiMatchQueryBuilder4.tieBreaker;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNull(float18);
    }

    @Test
    public void test06913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06913");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        org.elasticsearch.index.query.QueryValidationException queryValidationException14 = multiMatchQueryBuilder13.validate();
        java.lang.String str15 = multiMatchQueryBuilder13.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder13.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap21 = multiMatchQueryBuilder13.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = multiMatchQueryBuilder13.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(queryValidationException14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap21);
        org.junit.Assert.assertNull(zeroTermsQuery22);
    }

    @Test
    public void test06914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06914");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap13;
        multiMatchQueryBuilder4.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery17);
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = null;
        multiMatchQueryBuilder18.fuzziness = fuzziness19;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery21);
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        java.lang.Boolean boolean30 = multiMatchQueryBuilder27.getlenient();
        multiMatchQueryBuilder27.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder27.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness35 = multiMatchQueryBuilder34.fuzziness;
        java.lang.Integer int36 = multiMatchQueryBuilder34.slop;
        multiMatchQueryBuilder34.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder34.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder18.fuzziness((java.lang.Object) multiMatchQueryBuilder40);
        multiMatchQueryBuilder18.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery44);
        org.elasticsearch.index.query.QueryValidationException queryValidationException46 = multiMatchQueryBuilder45.validate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass47 = queryValidationException46.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(fuzziness35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(queryValidationException46);
    }

    @Test
    public void test06915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06915");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.useDisMax(false);
        org.elasticsearch.common.unit.Fuzziness fuzziness22 = multiMatchQueryBuilder21.fuzziness;
        multiMatchQueryBuilder21.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.String str26 = multiMatchQueryBuilder25.getminimumShouldMatch();
        multiMatchQueryBuilder25.maxExpansions = 100;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = null;
        multiMatchQueryBuilder25.zeroTermsQuery = zeroTermsQuery29;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.slop((int) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap33 = multiMatchQueryBuilder25.getfieldsBoosts();
        multiMatchQueryBuilder21.setfieldsBoosts(strObjectFloatHashMap33);
        java.lang.String str35 = multiMatchQueryBuilder21.getanalyzer();
        java.lang.String[] strArray39 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray39);
        org.elasticsearch.index.query.Operator operator41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.operator(operator41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException45 = multiMatchQueryBuilder40.validate();
        java.lang.Integer int46 = multiMatchQueryBuilder40.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery47 = multiMatchQueryBuilder40.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder40.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        float float51 = multiMatchQueryBuilder50.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder50.slop((int) (short) 10);
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.Operator operator59 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.operator(operator59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder58.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException63 = multiMatchQueryBuilder58.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder58.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap66 = multiMatchQueryBuilder65.getfieldsBoosts();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap67 = null;
        multiMatchQueryBuilder65.fieldsBoosts = strObjectFloatHashMap67;
        java.lang.Boolean boolean69 = multiMatchQueryBuilder65.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type70 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder65.settype(type70);
        multiMatchQueryBuilder53.type = type70;
        org.elasticsearch.common.ParseField parseField73 = type70.parseField();
        org.elasticsearch.common.ParseField parseField74 = type70.parseField();
        multiMatchQueryBuilder21.settype(type70);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(fuzziness22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str26, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
// flaky:         org.junit.Assert.assertNotNull(strObjectFloatHashMap33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}" + "'", str35, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(queryValidationException45);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNull(zeroTermsQuery47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 1.0f + "'", float51 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNull(queryValidationException63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNull(strObjectFloatHashMap66);
        org.junit.Assert.assertNull(boolean69);
        org.junit.Assert.assertTrue("'" + type70 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type70.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField73);
        org.junit.Assert.assertNotNull(parseField74);
    }

    @Test
    public void test06916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06916");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        multiMatchQueryBuilder13.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder22.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder22.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness34 = multiMatchQueryBuilder22.getfuzziness();
        java.lang.Object obj35 = multiMatchQueryBuilder22.text;
        java.lang.String str36 = multiMatchQueryBuilder22.minimumShouldMatch;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = null;
        multiMatchQueryBuilder22.setzeroTermsQuery(zeroTermsQuery37);
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException48 = multiMatchQueryBuilder43.validate();
        java.lang.Integer int49 = multiMatchQueryBuilder43.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery50 = multiMatchQueryBuilder43.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder43.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder43.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder43.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder43.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean60 = multiMatchQueryBuilder59.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder59.boost((float) 1);
        java.lang.Boolean boolean63 = multiMatchQueryBuilder62.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type64 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type65 = type64.matchQueryType();
        float float66 = type64.tieBreaker();
        float float67 = type64.tieBreaker();
        float float68 = type64.tieBreaker();
        org.elasticsearch.common.ParseField parseField69 = type64.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder62.type(type64);
        float float71 = type64.tieBreaker();
        multiMatchQueryBuilder22.settype(type64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder13.type(type64);
        org.elasticsearch.index.search.MatchQuery.Type type74 = type64.matchQueryType();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(fuzziness34);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + "multi_match" + "'", obj35, "multi_match");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(queryValidationException48);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNull(zeroTermsQuery50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(boolean60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNull(boolean63);
        org.junit.Assert.assertTrue("'" + type64 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type64.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type65 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type65.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + 0.0f + "'", float66 == 0.0f);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + 0.0f + "'", float67 == 0.0f);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + 0.0f + "'", float68 == 0.0f);
        org.junit.Assert.assertNotNull(parseField69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + 0.0f + "'", float71 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertTrue("'" + type74 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type74.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test06917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06917");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type8 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type9 = type8.matchQueryType();
        float float10 = type8.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type8);
        multiMatchQueryBuilder11.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.common.unit.Fuzziness fuzziness14 = multiMatchQueryBuilder11.fuzziness;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type8.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type9.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness14);
    }

    @Test
    public void test06918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06918");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.slop(1);
        java.lang.Object obj18 = multiMatchQueryBuilder8.text;
        multiMatchQueryBuilder8.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + "multi_match" + "'", obj18, "multi_match");
    }

    @Test
    public void test06919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06919");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String str16 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.prefixLength((int) (short) -1);
        java.lang.Boolean boolean21 = multiMatchQueryBuilder4.lenient;
        java.lang.Boolean boolean22 = multiMatchQueryBuilder4.getlenient();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNull(boolean22);
    }

    @Test
    public void test06920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06920");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.common.unit.Fuzziness fuzziness10 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness10;
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.tieBreaker((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int17 = multiMatchQueryBuilder14.getslop();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test06921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06921");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        org.elasticsearch.index.query.QueryValidationException queryValidationException8 = multiMatchQueryBuilder6.validate();
        java.lang.String str9 = multiMatchQueryBuilder6.getminimumShouldMatch();
        java.lang.Boolean boolean10 = multiMatchQueryBuilder6.lenient;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder6.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.boost((float) (byte) 100);
        java.lang.Boolean boolean15 = multiMatchQueryBuilder14.getlenient();
        org.elasticsearch.index.query.Operator operator16 = multiMatchQueryBuilder14.operator;
        java.lang.String str17 = multiMatchQueryBuilder14.getWriteableName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(queryValidationException8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multi_match" + "'", str17, "multi_match");
    }

    @Test
    public void test06922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06922");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) false);
        multiMatchQueryBuilder4.minimumShouldMatch = "";
        multiMatchQueryBuilder4.rewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String str15 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Class<?> wildcardClass16 = multiMatchQueryBuilder4.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str15, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test06923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06923");
        java.lang.String[] strArray4 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder5 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray4);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray4);
        java.lang.Float float7 = multiMatchQueryBuilder6.getcutoffFrequency();
        org.elasticsearch.index.query.Operator operator8 = multiMatchQueryBuilder6.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.field("", (float) 100L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder6.slop((int) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder6.getPROTOTYPE();
        multiMatchQueryBuilder14.setmaxExpansions((java.lang.Integer) 52);
        multiMatchQueryBuilder14.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNull(float7);
        org.junit.Assert.assertNull(operator8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
    }

    @Test
    public void test06924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06924");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder8.type = type18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.slop(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder8.boost((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.cutoffFrequency((float) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder29.slop = 0;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = multiMatchQueryBuilder29.getzeroTermsQuery();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        multiMatchQueryBuilder29.zeroTermsQuery = zeroTermsQuery33;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(zeroTermsQuery32);
    }

    @Test
    public void test06925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06925");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery8 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder6.zeroTermsQuery(zeroTermsQuery8);
        multiMatchQueryBuilder9.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}";
        org.elasticsearch.index.query.Operator operator12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder9.operator(operator12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder9.maxExpansions((-1));
        multiMatchQueryBuilder15.tieBreaker = 0.0f;
        java.lang.String str18 = multiMatchQueryBuilder15.getfuzzyRewrite();
        multiMatchQueryBuilder15.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder15.getWriteableName();
        java.lang.String str22 = multiMatchQueryBuilder15.queryName();
        java.lang.String str23 = multiMatchQueryBuilder15.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder15.slop(35);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test06926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06926");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        java.lang.Float float14 = multiMatchQueryBuilder8.getcutoffFrequency();
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.operator(operator15);
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        java.lang.Boolean boolean24 = multiMatchQueryBuilder21.getlenient();
        multiMatchQueryBuilder21.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness29 = multiMatchQueryBuilder28.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion32 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.CAMELCASE;
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion32);
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder28.fuzziness((java.lang.Object) fieldCaseConversion32);
        boolean boolean36 = multiMatchQueryBuilder16.equals((java.lang.Object) multiMatchQueryBuilder35);
        java.lang.String str37 = multiMatchQueryBuilder35.getrewrite();
        org.elasticsearch.index.query.Operator operator38 = multiMatchQueryBuilder35.getoperator();
        multiMatchQueryBuilder35.setprefixLength((java.lang.Integer) 100);
        java.lang.Boolean boolean41 = multiMatchQueryBuilder35.getuseDisMax();
        java.lang.String str42 = multiMatchQueryBuilder35.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(fuzziness29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertTrue("'" + fieldCaseConversion32 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.CAMELCASE + "'", fieldCaseConversion32.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.CAMELCASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(operator38);
        org.junit.Assert.assertNull(boolean41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"fuzziness\" : \"CAMELCASE\",\n    \"prefixLength\" : 100,\n    \"maxExpansions\" : 100,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str42, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"fuzziness\" : \"CAMELCASE\",\n    \"prefixLength\" : 100,\n    \"maxExpansions\" : 100,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test06927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06927");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        java.lang.Float float19 = multiMatchQueryBuilder4.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.prefixLength(97);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.getPROTOTYPE();
        java.lang.String str23 = multiMatchQueryBuilder22.getName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(float19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "multi_match" + "'", str23, "multi_match");
    }

    @Test
    public void test06928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06928");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        multiMatchQueryBuilder13.tieBreaker = (-1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.boost(52.0f);
        multiMatchQueryBuilder21.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"Name\" : \"multi_match\"\n  }\n}";
        java.lang.String str24 = multiMatchQueryBuilder21.queryName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test06929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06929");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder21.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder21.analyzer = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder21.setuseDisMax((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test06930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06930");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.field("hi!", (float) 'a');
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        java.lang.String str26 = multiMatchQueryBuilder23.getWriteableName();
        java.lang.Boolean boolean27 = multiMatchQueryBuilder23.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder23.getPROTOTYPE();
        multiMatchQueryBuilder23.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray34 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray34);
        org.elasticsearch.index.query.Operator operator36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.operator(operator36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder35.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException40 = multiMatchQueryBuilder35.validate();
        java.lang.Integer int41 = multiMatchQueryBuilder35.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery42 = multiMatchQueryBuilder35.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder35.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder35.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder35.boost((float) 0);
        java.lang.String str50 = multiMatchQueryBuilder35.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap51 = multiMatchQueryBuilder35.fieldsBoosts;
        multiMatchQueryBuilder23.fieldsBoosts = strObjectFloatHashMap51;
        multiMatchQueryBuilder18.setfieldsBoosts(strObjectFloatHashMap51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}", (float) (short) -1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery57 = multiMatchQueryBuilder56.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "multi_match" + "'", str26, "multi_match");
        org.junit.Assert.assertNull(boolean27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(queryValidationException40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNull(zeroTermsQuery42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNull(zeroTermsQuery57);
    }

    @Test
    public void test06931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06931");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder18.type;
        java.lang.Boolean boolean22 = multiMatchQueryBuilder18.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type23 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField24 = type23.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type25 = type23.matchQueryType();
        float float26 = type23.tieBreaker();
        float float27 = type23.tieBreaker();
        multiMatchQueryBuilder18.type = type23;
        multiMatchQueryBuilder18.prefixLength = 97;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type23.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField24);
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type25.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 1.0f + "'", float26 == 1.0f);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
    }

    @Test
    public void test06932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06932");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        java.lang.Float float12 = multiMatchQueryBuilder11.cutoffFrequency;
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder17.getlenient();
        multiMatchQueryBuilder17.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.cutoffFrequency(0.0f);
        java.lang.String str25 = multiMatchQueryBuilder24.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder24.maxExpansions = 100;
        java.lang.String[] strArray33 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray33);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        multiMatchQueryBuilder34.setrewrite("");
        java.util.List<java.lang.String> strList39 = multiMatchQueryBuilder34.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type40 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField41 = type40.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type42 = type40.matchQueryType();
        multiMatchQueryBuilder34.type = type40;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder24.type(type40);
        org.elasticsearch.common.ParseField parseField45 = type40.parseField();
        org.elasticsearch.common.ParseField parseField46 = type40.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder11.type(type40);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput48 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder11.writeTo(streamOutput48);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type40.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField41);
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type42.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(parseField45);
        org.junit.Assert.assertNotNull(parseField46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
    }

    @Test
    public void test06933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06933");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder4.getPROTOTYPE();
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("hi!", (float) (-1L));
        multiMatchQueryBuilder4.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}";
        java.lang.Object obj17 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = multiMatchQueryBuilder4.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNull(zeroTermsQuery18);
    }

    @Test
    public void test06934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06934");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = multiMatchQueryBuilder21.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.zeroTermsQuery(zeroTermsQuery23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.lenient(false);
        multiMatchQueryBuilder21.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder21.zeroTermsQuery(zeroTermsQuery29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.cutoffFrequency((float) 10);
        java.lang.String str33 = multiMatchQueryBuilder30.fuzzyRewrite;
        java.lang.String str34 = multiMatchQueryBuilder30.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder30.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray40 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray40);
        org.elasticsearch.index.query.Operator operator42 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.operator(operator42);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder41.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException46 = multiMatchQueryBuilder41.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder41.cutoffFrequency((float) (byte) 100);
        java.lang.String str49 = multiMatchQueryBuilder41.getanalyzer();
        multiMatchQueryBuilder41.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str52 = multiMatchQueryBuilder41.fuzzyRewrite;
        java.lang.Integer int53 = multiMatchQueryBuilder41.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder41.boost((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.cutoffFrequency((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder57.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.Object obj60 = multiMatchQueryBuilder59.text;
        java.lang.String[] strArray64 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray64);
        org.elasticsearch.index.query.Operator operator66 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder65.operator(operator66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder65.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException70 = multiMatchQueryBuilder65.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder65.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder65.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder65.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type77 = multiMatchQueryBuilder65.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type78 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField79 = type78.parseField();
        multiMatchQueryBuilder65.type = type78;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder59.type(type78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder58.type(type78);
        float float83 = type78.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type84 = type78.matchQueryType();
        multiMatchQueryBuilder30.settype(type78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder12.type(type78);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(strObjectFloatHashMap22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "multi_match" + "'", str34, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(queryValidationException46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNull(queryValidationException70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNull(type77);
        org.junit.Assert.assertTrue("'" + type78 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type78.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + 1.0f + "'", float83 == 1.0f);
        org.junit.Assert.assertTrue("'" + type84 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type84.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
    }

    @Test
    public void test06935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06935");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06936");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList18 = multiMatchQueryBuilder4.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"fuzziness\" : \"BEST_FIELDS\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.getPROTOTYPE();
        java.lang.String str22 = multiMatchQueryBuilder4.getName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
    }

    @Test
    public void test06937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06937");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.maxExpansions((int) (short) 10);
        org.elasticsearch.index.query.Operator operator13 = multiMatchQueryBuilder10.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.slop((int) 'a');
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        java.lang.String str30 = multiMatchQueryBuilder22.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder22.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness33 = multiMatchQueryBuilder22.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder22.getPROTOTYPE();
        java.lang.Integer int35 = multiMatchQueryBuilder22.slop;
        java.lang.String[] strArray39 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray39);
        org.elasticsearch.index.query.Operator operator41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.operator(operator41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException45 = multiMatchQueryBuilder40.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder40.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder40.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder40.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness52 = multiMatchQueryBuilder40.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder40.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder40.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        java.util.List<java.lang.String> strList57 = multiMatchQueryBuilder56.getfields();
        java.lang.String[] strArray61 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray61);
        org.elasticsearch.index.query.Operator operator63 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.operator(operator63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder62.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException67 = multiMatchQueryBuilder62.validate();
        java.lang.Integer int68 = multiMatchQueryBuilder62.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery69 = multiMatchQueryBuilder62.getzeroTermsQuery();
        org.elasticsearch.index.query.QueryValidationException queryValidationException70 = multiMatchQueryBuilder62.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type71 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type72 = type71.matchQueryType();
        multiMatchQueryBuilder62.settype(type71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder56.type(type71);
        org.elasticsearch.index.search.MatchQuery.Type type75 = type71.matchQueryType();
        multiMatchQueryBuilder22.type = type71;
        org.elasticsearch.common.ParseField parseField77 = type71.parseField();
        boolean boolean78 = multiMatchQueryBuilder17.equals((java.lang.Object) type71);
        org.elasticsearch.index.search.MatchQuery.Type type79 = type71.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type80 = type71.matchQueryType();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(operator13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(fuzziness33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(queryValidationException45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(fuzziness52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNull(queryValidationException67);
        org.junit.Assert.assertNull(int68);
        org.junit.Assert.assertNull(zeroTermsQuery69);
        org.junit.Assert.assertNull(queryValidationException70);
        org.junit.Assert.assertTrue("'" + type71 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type71.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type72 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type72.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertTrue("'" + type75 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type75.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + type79 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type79.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type80 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type80.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test06938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06938");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        multiMatchQueryBuilder4.setminimumShouldMatch("");
        java.lang.String str18 = multiMatchQueryBuilder4.rewrite;
        java.lang.String str19 = multiMatchQueryBuilder4.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.getPROTOTYPE();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap21 = multiMatchQueryBuilder20.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
// flaky:         org.junit.Assert.assertNotNull(strObjectFloatHashMap21);
    }

    @Test
    public void test06939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06939");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder25.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder25.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = multiMatchQueryBuilder25.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField39 = type38.parseField();
        multiMatchQueryBuilder25.type = type38;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder20.type(type38);
        multiMatchQueryBuilder20.setrewrite("");
        java.lang.String str44 = multiMatchQueryBuilder20.getfuzzyRewrite();
        org.elasticsearch.index.query.Operator operator45 = null;
        multiMatchQueryBuilder20.operator = operator45;
        java.lang.Integer int47 = multiMatchQueryBuilder20.getprefixLength();
        multiMatchQueryBuilder20.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 0,\n    \"prefix_length\" : 35,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder20.lenient = true;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(type37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNull(int47);
    }

    @Test
    public void test06940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06940");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        java.lang.Float float12 = multiMatchQueryBuilder11.cutoffFrequency;
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder17.getlenient();
        multiMatchQueryBuilder17.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder17.tieBreaker((float) (-1));
        multiMatchQueryBuilder17.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder17.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder11.fuzziness((java.lang.Object) multiMatchQueryBuilder17);
        org.elasticsearch.index.query.Operator operator32 = null;
        multiMatchQueryBuilder11.operator = operator32;
        org.elasticsearch.index.query.Operator operator34 = multiMatchQueryBuilder11.operator;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = multiMatchQueryBuilder11.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(operator34);
        org.junit.Assert.assertNull(zeroTermsQuery35);
    }

    @Test
    public void test06941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06941");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder24.setoperator(operator29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder24.zeroTermsQuery = zeroTermsQuery31;
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        multiMatchQueryBuilder4.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float40 = multiMatchQueryBuilder4.getcutoffFrequency();
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"max_expansions\" : -1,\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator43 = null;
        multiMatchQueryBuilder4.operator = operator43;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(float40);
    }

    @Test
    public void test06942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06942");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder4.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.tieBreaker((float) (short) 10);
        java.lang.Boolean boolean24 = multiMatchQueryBuilder4.useDisMax;
        java.lang.String str25 = multiMatchQueryBuilder4.rewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test06943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06943");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        java.lang.String str12 = multiMatchQueryBuilder11.toString();
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.String str20 = multiMatchQueryBuilder17.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder17.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.cutoffFrequency((float) '4');
        boolean boolean26 = multiMatchQueryBuilder11.equals((java.lang.Object) multiMatchQueryBuilder23);
        multiMatchQueryBuilder23.setmaxExpansions((java.lang.Integer) (-1));
        multiMatchQueryBuilder23.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder23.prefixLength((int) (byte) 10);
        multiMatchQueryBuilder23.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"slop\" : 0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder23.tieBreaker((float) '#');
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str12, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
    }

    @Test
    public void test06944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06944");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        org.elasticsearch.index.query.QueryValidationException queryValidationException14 = multiMatchQueryBuilder13.validate();
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder13.operator(operator15);
        org.elasticsearch.index.query.Operator operator17 = multiMatchQueryBuilder13.operator;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder13.zeroTermsQuery = zeroTermsQuery18;
        multiMatchQueryBuilder13.slop = 1;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(queryValidationException14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(operator17);
    }

    @Test
    public void test06945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06945");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.getPROTOTYPE();
        multiMatchQueryBuilder14.settieBreaker((java.lang.Float) 0.0f);
        multiMatchQueryBuilder14.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.tieBreaker((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder20.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray30 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray30);
        org.elasticsearch.index.query.Operator operator32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.operator(operator32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException36 = multiMatchQueryBuilder31.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder31.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder31.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder31.fuzzyRewrite("hi!");
        multiMatchQueryBuilder31.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery45 = null;
        multiMatchQueryBuilder31.zeroTermsQuery = zeroTermsQuery45;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder31.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.prefixLength((-1));
        multiMatchQueryBuilder50.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder50.lenient(true);
        java.lang.String[] strArray58 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray58);
        org.elasticsearch.index.query.Operator operator60 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder59.operator(operator60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder59.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder63.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder63.setanalyzer("multi_match");
        org.elasticsearch.index.query.QueryValidationException queryValidationException68 = multiMatchQueryBuilder63.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery69 = multiMatchQueryBuilder63.zeroTermsQuery;
        java.lang.String str70 = multiMatchQueryBuilder63.getrewrite();
        multiMatchQueryBuilder63.lenient = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder63.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap76 = multiMatchQueryBuilder63.fieldsBoosts;
        multiMatchQueryBuilder54.fieldsBoosts = strObjectFloatHashMap76;
        multiMatchQueryBuilder26.setfieldsBoosts(strObjectFloatHashMap76);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(queryValidationException36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNull(queryValidationException68);
        org.junit.Assert.assertNull(zeroTermsQuery69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap76);
    }

    @Test
    public void test06946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06946");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder13.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder13.minimumShouldMatch("");
        java.lang.Integer int17 = multiMatchQueryBuilder13.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test06947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06947");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder13.setuseDisMax((java.lang.Boolean) false);
        multiMatchQueryBuilder13.maxExpansions = 1;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = multiMatchQueryBuilder13.zeroTermsQuery;
        java.lang.Boolean boolean19 = multiMatchQueryBuilder13.lenient;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.useDisMax(false);
        java.lang.Object obj22 = multiMatchQueryBuilder21.text;
        multiMatchQueryBuilder21.slop = (-1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(zeroTermsQuery18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + "multi_match" + "'", obj22, "multi_match");
    }

    @Test
    public void test06948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06948");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.Object obj1 = multiMatchQueryBuilder0.text;
        java.lang.String[] strArray5 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray5);
        org.elasticsearch.index.query.Operator operator7 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.operator(operator7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder6.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException11 = multiMatchQueryBuilder6.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder6.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder6.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder6.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = multiMatchQueryBuilder6.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField20 = type19.parseField();
        multiMatchQueryBuilder6.type = type19;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder0.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder0.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.tieBreaker(1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.lenient(true);
        org.elasticsearch.index.query.QueryValidationException queryValidationException29 = multiMatchQueryBuilder26.validate();
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder0);
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(queryValidationException11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(type18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(queryValidationException29);
    }

    @Test
    public void test06949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06949");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        java.lang.Float float14 = multiMatchQueryBuilder8.getcutoffFrequency();
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.operator(operator15);
        java.lang.String str17 = multiMatchQueryBuilder8.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = multiMatchQueryBuilder8.gettype();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = multiMatchQueryBuilder8.getfieldsBoosts();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder8.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder8.tieBreaker((float) 97);
        org.elasticsearch.index.query.Operator operator26 = null;
        multiMatchQueryBuilder25.setoperator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"prefixLength\" : -1,\n    \"maxExpansions\" : 100,\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder25.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"max_expansions\" : -1,\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str32 = multiMatchQueryBuilder31.getanalyzer();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multi_match" + "'", str17, "multi_match");
        org.junit.Assert.assertNull(type18);
        org.junit.Assert.assertNull(strObjectFloatHashMap19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test06950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06950");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        java.lang.String str14 = multiMatchQueryBuilder4.getrewrite();
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.prefixLength((int) ' ');
        java.lang.Boolean boolean19 = multiMatchQueryBuilder18.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.maxExpansions(10);
        java.lang.String str22 = multiMatchQueryBuilder18.toString();
        float float23 = multiMatchQueryBuilder18.boost();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"prefixLength\" : 32,\n    \"maxExpansions\" : 10,\n    \"tieBreaker\" : 100.0,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str22, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"prefixLength\" : 32,\n    \"maxExpansions\" : 10,\n    \"tieBreaker\" : 100.0,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 1.0f + "'", float23 == 1.0f);
    }

    @Test
    public void test06951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06951");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        float float15 = multiMatchQueryBuilder14.boost();
        java.lang.Float float16 = multiMatchQueryBuilder14.cutoffFrequency;
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.lenient(false);
        java.lang.Integer int26 = multiMatchQueryBuilder25.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder25.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap29 = null;
        multiMatchQueryBuilder28.setfieldsBoosts(strObjectFloatHashMap29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder14.type((java.lang.Object) strObjectFloatHashMap29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type32 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float33 = type32.tieBreaker();
        org.elasticsearch.common.ParseField parseField34 = type32.parseField();
        float float35 = type32.tieBreaker();
        multiMatchQueryBuilder14.type = type32;
        multiMatchQueryBuilder14.setprefixLength((java.lang.Integer) 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type32.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(parseField34);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.0f + "'", float35 == 0.0f);
    }

    @Test
    public void test06952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06952");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("hi!", (float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery17);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        multiMatchQueryBuilder16.setzeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder16.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(zeroTermsQuery21);
    }

    @Test
    public void test06953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06953");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.getPROTOTYPE();
        multiMatchQueryBuilder14.settieBreaker((java.lang.Float) 0.0f);
        multiMatchQueryBuilder14.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.tieBreaker((float) '4');
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap23 = multiMatchQueryBuilder22.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap23);
    }

    @Test
    public void test06954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06954");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery19);
        multiMatchQueryBuilder20.useDisMax = true;
        org.elasticsearch.index.query.Operator operator23 = multiMatchQueryBuilder20.getoperator();
        org.elasticsearch.index.query.QueryValidationException queryValidationException24 = multiMatchQueryBuilder20.validate();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(operator23);
        org.junit.Assert.assertNull(queryValidationException24);
    }

    @Test
    public void test06955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06955");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = multiMatchQueryBuilder4.getzeroTermsQuery();
        java.lang.Integer int11 = multiMatchQueryBuilder4.getmaxExpansions();
        java.lang.Float float12 = multiMatchQueryBuilder4.tieBreaker;
        multiMatchQueryBuilder4.useDisMax = false;
        java.lang.Float float15 = multiMatchQueryBuilder4.getcutoffFrequency();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery16;
        java.lang.String str18 = multiMatchQueryBuilder4.rewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.maxExpansions((int) (short) 0);
        org.elasticsearch.common.xcontent.XContentType xContentType21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference22 = multiMatchQueryBuilder20.buildAsBytes(xContentType21);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(zeroTermsQuery10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test06956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06956");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        java.lang.String[] strArray14 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray14);
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.operator(operator16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException20 = multiMatchQueryBuilder15.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder15.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.zeroTermsQuery(zeroTermsQuery23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.maxExpansions((-1));
        multiMatchQueryBuilder22.maxExpansions = 100;
        multiMatchQueryBuilder22.setslop((java.lang.Integer) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int34 = multiMatchQueryBuilder31.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder31.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        multiMatchQueryBuilder36.setcutoffFrequency((java.lang.Float) 1.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(queryValidationException20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
    }

    @Test
    public void test06957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06957");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float21 = multiMatchQueryBuilder20.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str24 = multiMatchQueryBuilder20.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder20.slop((int) '#');
        multiMatchQueryBuilder20.lenient = false;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(float21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test06958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06958");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder8.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = null;
        multiMatchQueryBuilder8.setfuzziness(fuzziness13);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = multiMatchQueryBuilder8.zeroTermsQuery;
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException25 = multiMatchQueryBuilder20.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.cutoffFrequency((float) (byte) 100);
        java.lang.String str28 = multiMatchQueryBuilder20.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder20.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder20.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        boolean boolean33 = multiMatchQueryBuilder8.equals((java.lang.Object) multiMatchQueryBuilder32);
        java.lang.String str34 = multiMatchQueryBuilder8.rewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder8.slop((int) (short) 1);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap37 = multiMatchQueryBuilder8.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(zeroTermsQuery15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(queryValidationException25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(strObjectFloatHashMap37);
    }

    @Test
    public void test06959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06959");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        org.elasticsearch.index.query.Operator operator11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.operator(operator11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.prefixLength(100);
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder14.fields;
        multiMatchQueryBuilder14.setprefixLength((java.lang.Integer) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder14.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : -1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput22 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder21.writeTo(streamOutput22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test06960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06960");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = multiMatchQueryBuilder13.fieldsBoosts;
        java.lang.Boolean boolean19 = multiMatchQueryBuilder13.getlenient();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.zeroTermsQuery(zeroTermsQuery20);
        java.lang.Boolean boolean22 = multiMatchQueryBuilder13.useDisMax;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(strObjectFloatHashMap18);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + false + "'", boolean19, false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(boolean22);
    }

    @Test
    public void test06961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06961");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap17;
        org.elasticsearch.index.query.Operator operator19 = null;
        multiMatchQueryBuilder16.setoperator(operator19);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        java.lang.Boolean boolean28 = multiMatchQueryBuilder25.getlenient();
        java.lang.String str29 = multiMatchQueryBuilder25.getfuzzyRewrite();
        multiMatchQueryBuilder25.lenient = true;
        boolean boolean32 = multiMatchQueryBuilder16.equals((java.lang.Object) multiMatchQueryBuilder25);
        java.lang.Boolean boolean33 = multiMatchQueryBuilder16.useDisMax;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(boolean28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(boolean33);
    }

    @Test
    public void test06962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06962");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder17.setzeroTermsQuery(zeroTermsQuery18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = multiMatchQueryBuilder17.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder17.field("{\n  \"multiMatch\" : {\n    \"query\" : null,\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(type20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test06963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06963");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        multiMatchQueryBuilder13.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.prefixLength((int) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.prefixLength((-1));
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder17.lenient(false);
        org.elasticsearch.common.unit.Fuzziness fuzziness28 = multiMatchQueryBuilder17.fuzziness;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(fuzziness28);
    }

    @Test
    public void test06964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06964");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        java.lang.String str12 = multiMatchQueryBuilder11.toString();
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.String str20 = multiMatchQueryBuilder17.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder17.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.cutoffFrequency((float) '4');
        boolean boolean26 = multiMatchQueryBuilder11.equals((java.lang.Object) multiMatchQueryBuilder23);
        multiMatchQueryBuilder23.setmaxExpansions((java.lang.Integer) (-1));
        multiMatchQueryBuilder23.setprefixLength((java.lang.Integer) 10);
        java.lang.String str31 = multiMatchQueryBuilder23.queryName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str12, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test06965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06965");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        java.lang.String str19 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Integer int20 = multiMatchQueryBuilder4.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.lenient(true);
        multiMatchQueryBuilder4.maxExpansions = 0;
        java.lang.Boolean boolean25 = multiMatchQueryBuilder4.useDisMax;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(boolean25);
    }

    @Test
    public void test06966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06966");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        org.elasticsearch.index.query.Operator operator11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.operator(operator11);
        java.lang.Float float13 = multiMatchQueryBuilder12.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.fuzzyRewrite("");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 100,\n    \"rewrite\" : \"multi_match\",\n    \"lenient\" : false,\n    \"boost\" : 10.0\n  }\n}", (float) 10L);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test06967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06967");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.String str9 = multiMatchQueryBuilder8.getWriteableName();
        multiMatchQueryBuilder8.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder8.rewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder8.tieBreaker = 52.0f;
        multiMatchQueryBuilder8.slop = (-1);
        java.lang.String str18 = multiMatchQueryBuilder8.getanalyzer();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multi_match" + "'", str9, "multi_match");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str18, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test06968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06968");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder4.cutoffFrequency = 0.0f;
        java.lang.Float float11 = multiMatchQueryBuilder4.gettieBreaker();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(float11);
    }

    @Test
    public void test06969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06969");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        java.lang.String str12 = multiMatchQueryBuilder11.toString();
        multiMatchQueryBuilder11.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int15 = multiMatchQueryBuilder11.prefixLength;
        multiMatchQueryBuilder11.setlenient((java.lang.Boolean) false);
        java.lang.Float float18 = multiMatchQueryBuilder11.cutoffFrequency;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str12, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(float18);
    }

    @Test
    public void test06970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06970");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder1 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.String str2 = multiMatchQueryBuilder1.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery3 = multiMatchQueryBuilder1.zeroTermsQuery;
        multiMatchQueryBuilder1.setuseDisMax((java.lang.Boolean) false);
        java.lang.Boolean boolean6 = multiMatchQueryBuilder1.getuseDisMax();
        java.lang.Boolean boolean7 = multiMatchQueryBuilder1.getuseDisMax();
        java.lang.String[] strArray11 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray11);
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException17 = multiMatchQueryBuilder12.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder12.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.zeroTermsQuery(zeroTermsQuery20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.maxExpansions((-1));
        java.lang.String str24 = multiMatchQueryBuilder23.analyzer;
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.operator(operator25);
        multiMatchQueryBuilder23.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray32 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray32);
        org.elasticsearch.index.query.Operator operator34 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.operator(operator34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder33.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException38 = multiMatchQueryBuilder33.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder33.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder33.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder33.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness45 = multiMatchQueryBuilder33.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder33.slop((int) (short) 0);
        multiMatchQueryBuilder33.setslop((java.lang.Integer) 100);
        java.lang.Boolean boolean50 = multiMatchQueryBuilder33.getuseDisMax();
        java.lang.String str51 = multiMatchQueryBuilder33.fuzzyRewrite;
        java.lang.String[] strArray56 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray56);
        java.lang.String[] strArray62 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray56, strArray62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str51, strArray56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder23, strArray56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean7, strArray56);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder68 = org.elasticsearch.common.xcontent.XContentBuilder.builder(xContent0, strArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "multi_match" + "'", str2, "multi_match");
        org.junit.Assert.assertNull(zeroTermsQuery3);
        org.junit.Assert.assertEquals("'" + boolean6 + "' != '" + false + "'", boolean6, false);
        org.junit.Assert.assertEquals("'" + boolean7 + "' != '" + false + "'", boolean7, false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(queryValidationException17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(queryValidationException38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(fuzziness45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(boolean50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray62);
    }

    @Test
    public void test06971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06971");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.fuzzyRewrite("hi!");
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException28 = multiMatchQueryBuilder23.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder23.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder23.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness35 = multiMatchQueryBuilder23.getfuzziness();
        java.lang.Boolean boolean36 = multiMatchQueryBuilder23.getuseDisMax();
        org.elasticsearch.index.query.Operator operator37 = null;
        multiMatchQueryBuilder23.operator = operator37;
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException48 = multiMatchQueryBuilder43.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder43.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder43.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder43.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type55 = multiMatchQueryBuilder43.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type56 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField57 = type56.parseField();
        multiMatchQueryBuilder43.type = type56;
        multiMatchQueryBuilder23.settype(type56);
        float float60 = type56.tieBreaker();
        org.elasticsearch.common.ParseField parseField61 = type56.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder16.type(type56);
        org.elasticsearch.index.search.MatchQuery.Type type63 = type56.matchQueryType();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(queryValidationException28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(fuzziness35);
        org.junit.Assert.assertNull(boolean36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(queryValidationException48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(type55);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type56.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField57);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + 1.0f + "'", float60 == 1.0f);
        org.junit.Assert.assertNotNull(parseField61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertTrue("'" + type63 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type63.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test06972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06972");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        org.elasticsearch.index.query.Operator operator11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.operator(operator11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.prefixLength(100);
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder14.fields;
        multiMatchQueryBuilder14.setprefixLength((java.lang.Integer) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder14.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.slop((int) ' ');
        java.lang.String str22 = multiMatchQueryBuilder21.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test06973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06973");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getmaxExpansions();
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder13.fields;
        org.elasticsearch.index.query.QueryValidationException queryValidationException17 = multiMatchQueryBuilder13.validate();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNull(queryValidationException17);
    }

    @Test
    public void test06974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06974");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (byte) 0);
        org.elasticsearch.common.unit.Fuzziness fuzziness14 = multiMatchQueryBuilder8.getfuzziness();
        java.lang.String str15 = multiMatchQueryBuilder8.getWriteableName();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap16 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = multiMatchQueryBuilder8.type;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(strObjectFloatHashMap11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(fuzziness14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "multi_match" + "'", str15, "multi_match");
        org.junit.Assert.assertNull(strObjectFloatHashMap16);
        org.junit.Assert.assertNull(type17);
    }

    @Test
    public void test06975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06975");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder13.setuseDisMax((java.lang.Boolean) false);
        multiMatchQueryBuilder13.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder13.slop = 100;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder13.boost(100.0f);
        java.lang.Integer int26 = multiMatchQueryBuilder25.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder25.cutoffFrequency((float) '4');
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test06976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06976");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.prefixLength((int) (byte) 1);
        multiMatchQueryBuilder20.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test06977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06977");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.maxExpansions((-1));
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder11.fuzziness;
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        multiMatchQueryBuilder11.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = multiMatchQueryBuilder11.type;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(type20);
    }

    @Test
    public void test06978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06978");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.Integer int15 = multiMatchQueryBuilder11.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.getPROTOTYPE();
        java.lang.Object obj17 = multiMatchQueryBuilder16.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.boost((float) (short) 1);
        java.lang.String str20 = multiMatchQueryBuilder19.getanalyzer();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}" + "'", str20, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
    }

    @Test
    public void test06979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06979");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int16 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.cutoffFrequency((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.useDisMax(true);
        java.lang.String str23 = multiMatchQueryBuilder22.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test06980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06980");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder4.lenient(false);
        java.lang.Integer int10 = multiMatchQueryBuilder9.prefixLength;
        java.lang.String str11 = multiMatchQueryBuilder9.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = multiMatchQueryBuilder9.type;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(type12);
    }

    @Test
    public void test06981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06981");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.useDisMax(true);
        multiMatchQueryBuilder17.setlenient((java.lang.Boolean) true);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap20 = multiMatchQueryBuilder17.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder17.getzeroTermsQuery();
        java.lang.String str22 = multiMatchQueryBuilder17.rewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(strObjectFloatHashMap20);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test06982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06982");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.common.unit.Fuzziness fuzziness9 = multiMatchQueryBuilder8.fuzziness;
        multiMatchQueryBuilder8.maxExpansions = 10;
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder8.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(fuzziness9);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test06983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06983");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        java.lang.String str12 = multiMatchQueryBuilder11.toString();
        java.lang.Float float13 = multiMatchQueryBuilder11.tieBreaker;
        multiMatchQueryBuilder11.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder11.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = multiMatchQueryBuilder22.getzeroTermsQuery();
        java.lang.Object obj29 = multiMatchQueryBuilder22.text;
        java.lang.String[] strArray33 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray33);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException39 = multiMatchQueryBuilder34.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder34.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap42 = multiMatchQueryBuilder41.getfieldsBoosts();
        java.lang.String[] strArray46 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray46);
        org.elasticsearch.index.query.Operator operator48 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.operator(operator48);
        java.lang.String str50 = multiMatchQueryBuilder47.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness51 = multiMatchQueryBuilder47.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder47.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type54 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder47.settype(type54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder41.type(type54);
        org.elasticsearch.index.search.MatchQuery.Type type57 = type54.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type58 = type54.matchQueryType();
        multiMatchQueryBuilder22.settype(type54);
        multiMatchQueryBuilder11.type = type54;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str12, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNull(zeroTermsQuery28);
        org.junit.Assert.assertEquals("'" + obj29 + "' != '" + "multi_match" + "'", obj29, "multi_match");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(queryValidationException39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(strObjectFloatHashMap42);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "multi_match" + "'", str50, "multi_match");
        org.junit.Assert.assertNull(fuzziness51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertTrue("'" + type54 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type54.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertTrue("'" + type57 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type57.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type58.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test06984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06984");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        multiMatchQueryBuilder6.prefixLength = 10;
        java.util.List<java.lang.String> strList10 = multiMatchQueryBuilder6.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder6.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean13 = multiMatchQueryBuilder12.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(boolean13);
    }

    @Test
    public void test06985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06985");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.lang.Integer int8 = multiMatchQueryBuilder4.getmaxExpansions();
        multiMatchQueryBuilder4.useDisMax = false;
        java.lang.Integer int11 = multiMatchQueryBuilder4.slop;
        java.lang.Float float12 = multiMatchQueryBuilder4.cutoffFrequency;
        java.lang.String str13 = multiMatchQueryBuilder4.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.lenient(false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
    }

    @Test
    public void test06986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06986");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        java.lang.String str13 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.String str14 = multiMatchQueryBuilder4.getfuzzyRewrite();
        multiMatchQueryBuilder4.tieBreaker = 1.0f;
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 35);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test06987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06987");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        java.lang.String str14 = multiMatchQueryBuilder13.getNAME();
        java.lang.Boolean boolean15 = multiMatchQueryBuilder13.getlenient();
        org.elasticsearch.index.query.QueryShardContext queryShardContext16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query17 = multiMatchQueryBuilder13.toQuery(queryShardContext16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "multi_match" + "'", str14, "multi_match");
        org.junit.Assert.assertNull(boolean15);
    }

    @Test
    public void test06988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06988");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        multiMatchQueryBuilder4.setzeroTermsQuery(zeroTermsQuery19);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test06989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06989");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.maxExpansions((int) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = multiMatchQueryBuilder4.zeroTermsQuery;
        multiMatchQueryBuilder4.slop = (-1);
        org.elasticsearch.index.query.QueryValidationException queryValidationException15 = multiMatchQueryBuilder4.validate();
        java.lang.String str16 = multiMatchQueryBuilder4.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.maxExpansions((int) '#');
        java.lang.String str19 = multiMatchQueryBuilder18.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"\\\"\\n  }\\n}\" ],\n    \"fuzziness\" : \"1\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(zeroTermsQuery12);
        org.junit.Assert.assertNull(queryValidationException15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test06990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06990");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException25 = multiMatchQueryBuilder20.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.zeroTermsQuery(zeroTermsQuery28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.maxExpansions((-1));
        java.util.List<java.lang.String> strList32 = multiMatchQueryBuilder27.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.Object obj34 = multiMatchQueryBuilder33.text;
        java.lang.String[] strArray38 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray38);
        org.elasticsearch.index.query.Operator operator40 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.operator(operator40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder39.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException44 = multiMatchQueryBuilder39.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder39.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder39.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder39.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type51 = multiMatchQueryBuilder39.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type52 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField53 = type52.parseField();
        multiMatchQueryBuilder39.type = type52;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder33.type(type52);
        org.elasticsearch.index.search.MatchQuery.Type type56 = type52.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder27.type(type52);
        org.elasticsearch.common.ParseField parseField58 = type52.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder8.type(type52);
        float float60 = type52.tieBreaker();
        org.elasticsearch.common.ParseField parseField61 = type52.parseField();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(queryValidationException25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(queryValidationException44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(type51);
        org.junit.Assert.assertTrue("'" + type52 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type52.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type56.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(parseField58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + 1.0f + "'", float60 == 1.0f);
        org.junit.Assert.assertNotNull(parseField61);
    }

    @Test
    public void test06991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06991");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        java.lang.Float float12 = multiMatchQueryBuilder11.cutoffFrequency;
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder17.getlenient();
        multiMatchQueryBuilder17.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder17.tieBreaker((float) (-1));
        multiMatchQueryBuilder17.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder17.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder11.fuzziness((java.lang.Object) multiMatchQueryBuilder17);
        java.lang.Object obj32 = multiMatchQueryBuilder31.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type33 = multiMatchQueryBuilder31.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder35.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : 10,\n    \"maxExpansions\" : -1,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}", (float) (short) -1);
        java.lang.Float float39 = multiMatchQueryBuilder38.tieBreaker;
        java.lang.String str40 = multiMatchQueryBuilder38.fuzzyRewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + "multi_match" + "'", obj32, "multi_match");
        org.junit.Assert.assertNull(type33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(float39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str40, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test06992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06992");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str15 = multiMatchQueryBuilder14.fuzzyRewrite;
        java.lang.String str16 = multiMatchQueryBuilder14.getWriteableName();
        java.lang.Integer int17 = multiMatchQueryBuilder14.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "multi_match" + "'", str16, "multi_match");
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test06993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06993");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        multiMatchQueryBuilder8.setprefixLength((java.lang.Integer) 1);
        java.lang.Integer int12 = multiMatchQueryBuilder8.maxExpansions;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test06994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06994");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        float float33 = multiMatchQueryBuilder25.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type35 = type34.matchQueryType();
        multiMatchQueryBuilder25.settype(type34);
        multiMatchQueryBuilder4.type = type34;
        java.lang.String str38 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) true);
        java.lang.String str43 = multiMatchQueryBuilder4.analyzer;
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder4.operator(operator44);
        java.lang.Boolean boolean46 = multiMatchQueryBuilder45.useDisMax;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 1.0f + "'", float33 == 1.0f);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type35.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(boolean46);
    }

    @Test
    public void test06995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06995");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder4.fuzziness;
        java.lang.Integer int19 = multiMatchQueryBuilder4.prefixLength;
        multiMatchQueryBuilder4.prefixLength = 10;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(fuzziness18);
        org.junit.Assert.assertNull(int19);
    }

    @Test
    public void test06996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06996");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        java.lang.Float float14 = multiMatchQueryBuilder8.getcutoffFrequency();
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.operator(operator15);
        java.lang.String str17 = multiMatchQueryBuilder8.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = multiMatchQueryBuilder8.gettype();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = multiMatchQueryBuilder8.getfieldsBoosts();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder8.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.String str24 = multiMatchQueryBuilder8.getNAME();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap25 = multiMatchQueryBuilder8.fieldsBoosts;
        multiMatchQueryBuilder8.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multi_match" + "'", str17, "multi_match");
        org.junit.Assert.assertNull(type18);
        org.junit.Assert.assertNull(strObjectFloatHashMap19);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
        org.junit.Assert.assertNull(strObjectFloatHashMap25);
    }

    @Test
    public void test06997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06997");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.operator(operator16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.rewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str22 = multiMatchQueryBuilder19.toString();
        java.lang.Float float23 = multiMatchQueryBuilder19.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder19.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}" + "'", str22, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}");
        org.junit.Assert.assertNull(float23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test06998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06998");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder11.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.tieBreaker((float) (byte) 1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
    }

    @Test
    public void test06999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06999");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.field("hi!", (float) 'a');
        float float19 = multiMatchQueryBuilder15.boost();
        org.elasticsearch.index.query.Operator operator20 = null;
        multiMatchQueryBuilder15.operator = operator20;
        multiMatchQueryBuilder15.settieBreaker((java.lang.Float) 52.0f);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap24 = multiMatchQueryBuilder15.fieldsBoosts;
        java.lang.Integer int25 = multiMatchQueryBuilder15.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type26 = multiMatchQueryBuilder15.gettype();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 1.0f + "'", float19 == 1.0f);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNull(type26);
    }

    @Test
    public void test07000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test07000");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.lenient(false);
        float float14 = multiMatchQueryBuilder13.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder13.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.boost((float) 0);
        float float19 = multiMatchQueryBuilder18.boost();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
    }
}
