import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest21 {

    public static boolean debug = false;

    @Test
    public void test10501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10501");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.useDisMax = true;
        java.lang.String str23 = multiMatchQueryBuilder4.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzziness\" : \"FALSE\",\n    \"useDisMax\" : true,\n    \"boost\" : 0.0\n  }\n}" + "'", str23, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzziness\" : \"FALSE\",\n    \"useDisMax\" : true,\n    \"boost\" : 0.0\n  }\n}");
    }

    @Test
    public void test10502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10502");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder23.getfuzziness();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(fuzziness24);
    }

    @Test
    public void test10503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10503");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.lang.Integer int8 = multiMatchQueryBuilder4.getmaxExpansions();
        multiMatchQueryBuilder4.useDisMax = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.prefixLength(0);
        java.lang.Boolean boolean13 = multiMatchQueryBuilder12.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"max_expansions\" : -1,\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder15.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTIMATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAXEXPANSIONS\\\" : 100,\\n    \\\"USEDISMAX\\\" : TRUE,\\n    \\\"TIEBREAKER\\\" : -1.0,\\n    \\\"CUTOFFFREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + boolean13 + "' != '" + true + "'", boolean13, true);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
    }

    @Test
    public void test10504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10504");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.operator(operator15);
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("");
        org.elasticsearch.index.query.Operator operator26 = null;
        multiMatchQueryBuilder21.setoperator(operator26);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = null;
        multiMatchQueryBuilder21.zeroTermsQuery = zeroTermsQuery28;
        multiMatchQueryBuilder21.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String str32 = multiMatchQueryBuilder21.queryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        multiMatchQueryBuilder21.zeroTermsQuery = zeroTermsQuery33;
        org.elasticsearch.common.unit.Fuzziness fuzziness35 = multiMatchQueryBuilder21.fuzziness;
        java.lang.String[] strArray39 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray39);
        org.elasticsearch.index.query.Operator operator41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.operator(operator41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.field("");
        java.lang.String str45 = multiMatchQueryBuilder40.getrewrite();
        java.lang.Object obj46 = multiMatchQueryBuilder40.text;
        float float47 = multiMatchQueryBuilder40.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder40.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float50 = multiMatchQueryBuilder40.gettieBreaker();
        java.lang.String[] strArray54 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray54);
        org.elasticsearch.index.query.Operator operator56 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.operator(operator56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder55.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException60 = multiMatchQueryBuilder55.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder55.cutoffFrequency((float) (byte) 100);
        float float63 = multiMatchQueryBuilder55.boost();
        multiMatchQueryBuilder55.setanalyzer("");
        java.lang.Boolean boolean66 = multiMatchQueryBuilder55.getuseDisMax();
        java.lang.String str67 = multiMatchQueryBuilder55.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder55.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray73 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray73);
        org.elasticsearch.index.query.Operator operator75 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder74.operator(operator75);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder74.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder78.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder78.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness83 = multiMatchQueryBuilder78.getfuzziness();
        multiMatchQueryBuilder69.fuzziness = fuzziness83;
        multiMatchQueryBuilder40.setfuzziness(fuzziness83);
        multiMatchQueryBuilder21.setfuzziness(fuzziness83);
        multiMatchQueryBuilder16.setfuzziness(fuzziness83);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap88 = multiMatchQueryBuilder16.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(fuzziness35);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + obj46 + "' != '" + "multi_match" + "'", obj46, "multi_match");
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 1.0f + "'", float47 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(float50);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(queryValidationException60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + 1.0f + "'", float63 == 1.0f);
        org.junit.Assert.assertNull(boolean66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNotNull(fuzziness83);
        org.junit.Assert.assertNull(strObjectFloatHashMap88);
    }

    @Test
    public void test10505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10505");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder4.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.boost((float) 0L);
        org.elasticsearch.common.unit.Fuzziness fuzziness20 = null;
        multiMatchQueryBuilder4.setfuzziness(fuzziness20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test10506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10506");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap17;
        org.elasticsearch.index.query.Operator operator19 = null;
        multiMatchQueryBuilder16.setoperator(operator19);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        java.lang.Boolean boolean28 = multiMatchQueryBuilder25.getlenient();
        java.lang.String str29 = multiMatchQueryBuilder25.getfuzzyRewrite();
        multiMatchQueryBuilder25.lenient = true;
        boolean boolean32 = multiMatchQueryBuilder16.equals((java.lang.Object) multiMatchQueryBuilder25);
        java.lang.String str33 = multiMatchQueryBuilder25.rewrite;
        java.lang.String str34 = multiMatchQueryBuilder25.queryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = null;
        multiMatchQueryBuilder25.zeroTermsQuery = zeroTermsQuery35;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(boolean28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test10507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10507");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.maxExpansions((int) (short) 10);
        java.lang.Object obj13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.type(obj13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.useDisMax(false);
        java.lang.Float float17 = multiMatchQueryBuilder4.getcutoffFrequency();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(float17);
    }

    @Test
    public void test10508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10508");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float12 = multiMatchQueryBuilder8.gettieBreaker();
        multiMatchQueryBuilder8.setminimumShouldMatch("");
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException24 = multiMatchQueryBuilder19.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.cutoffFrequency((float) (byte) 100);
        float float27 = multiMatchQueryBuilder19.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type28 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type29 = type28.matchQueryType();
        multiMatchQueryBuilder19.settype(type28);
        org.elasticsearch.common.ParseField parseField31 = type28.parseField();
        multiMatchQueryBuilder8.type = type28;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder8.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.useDisMax(false);
        java.lang.Float float37 = multiMatchQueryBuilder34.cutoffFrequency;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = null;
        multiMatchQueryBuilder34.setzeroTermsQuery(zeroTermsQuery38);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(queryValidationException24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type28.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type29.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(float37);
    }

    @Test
    public void test10509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10509");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = multiMatchQueryBuilder4.getzeroTermsQuery();
        java.lang.Integer int11 = multiMatchQueryBuilder4.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.slop(10);
        java.lang.Boolean boolean14 = multiMatchQueryBuilder4.lenient;
        java.lang.Integer int15 = multiMatchQueryBuilder4.maxExpansions;
        java.lang.String str16 = multiMatchQueryBuilder4.toString();
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.lenient = false;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(zeroTermsQuery10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertNull(int15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 10,\n    \"boost\" : 1.0\n  }\n}" + "'", str16, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 10,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test10510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10510");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        multiMatchQueryBuilder10.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}";
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException22 = multiMatchQueryBuilder17.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.cutoffFrequency((float) (byte) 100);
        java.lang.String str25 = multiMatchQueryBuilder17.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder17.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder17.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        float float31 = type30.tieBreaker();
        multiMatchQueryBuilder17.settype(type30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder10.type(type30);
        float float34 = multiMatchQueryBuilder10.boost();
        multiMatchQueryBuilder10.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : {\n      \"multiMatch\" : {\n        \"query\" : \"multi_match\",\n        \"fields\" : [ \"multi_match\", \"hi!\" ],\n        \"slop\" : -1,\n        \"minimumShouldMatch\" : \"\",\n        \"fuzzyRewrite\" : \"hi!\",\n        \"boost\" : 1.0\n      }\n    },\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"cutoff_frequency\\\" : -1.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(queryValidationException22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type30.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 1.0f + "'", float31 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 1.0f + "'", float34 == 1.0f);
    }

    @Test
    public void test10511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10511");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        java.lang.Boolean boolean19 = multiMatchQueryBuilder4.lenient;
        java.lang.String str20 = multiMatchQueryBuilder4.rewrite;
        java.lang.String str21 = multiMatchQueryBuilder4.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.common.unit.Fuzziness fuzziness23 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder4.rewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.boost(52.0f);
        java.lang.String str30 = multiMatchQueryBuilder25.minimumShouldMatch;
        multiMatchQueryBuilder25.cutoffFrequency = 97.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(type22);
        org.junit.Assert.assertNull(fuzziness23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str30, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test10512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10512");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        java.lang.String[] strArray14 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray14);
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.operator(operator16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException20 = multiMatchQueryBuilder15.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder15.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.zeroTermsQuery(zeroTermsQuery23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.maxExpansions((-1));
        multiMatchQueryBuilder22.maxExpansions = 100;
        multiMatchQueryBuilder22.setslop((java.lang.Integer) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int34 = multiMatchQueryBuilder31.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder31.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        java.lang.String str37 = multiMatchQueryBuilder31.toString();
        org.elasticsearch.common.unit.Fuzziness fuzziness38 = multiMatchQueryBuilder31.fuzziness;
        multiMatchQueryBuilder31.cutoffFrequency = 100.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(queryValidationException20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"\\\"\\n  }\\n}\" ],\n    \"fuzziness\" : \"1\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}" + "'", str37, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"\\\"\\n  }\\n}\" ],\n    \"fuzziness\" : \"1\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(fuzziness38);
    }

    @Test
    public void test10513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10513");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Object obj15 = multiMatchQueryBuilder4.gettext();
        java.lang.Object obj16 = multiMatchQueryBuilder4.text;
        java.util.List<java.lang.String> strList17 = multiMatchQueryBuilder4.fields;
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        java.lang.Boolean boolean25 = multiMatchQueryBuilder22.getlenient();
        multiMatchQueryBuilder22.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder22.tieBreaker((float) (-1));
        java.lang.Integer int32 = multiMatchQueryBuilder31.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type33 = multiMatchQueryBuilder31.gettype();
        java.lang.String[] strArray37 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray37);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.operator(operator39);
        java.lang.String str41 = multiMatchQueryBuilder38.getWriteableName();
        java.lang.Boolean boolean42 = multiMatchQueryBuilder38.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder38.getPROTOTYPE();
        multiMatchQueryBuilder38.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray49 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray49);
        org.elasticsearch.index.query.Operator operator51 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.operator(operator51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder50.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException55 = multiMatchQueryBuilder50.validate();
        java.lang.Integer int56 = multiMatchQueryBuilder50.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery57 = multiMatchQueryBuilder50.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder50.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder50.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder50.boost((float) 0);
        java.lang.String str65 = multiMatchQueryBuilder50.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap66 = multiMatchQueryBuilder50.fieldsBoosts;
        multiMatchQueryBuilder38.fieldsBoosts = strObjectFloatHashMap66;
        multiMatchQueryBuilder31.setfieldsBoosts(strObjectFloatHashMap66);
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap66;
        java.lang.String str70 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder4.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int73 = multiMatchQueryBuilder4.prefixLength;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "multi_match" + "'", obj15, "multi_match");
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "multi_match" + "'", obj16, "multi_match");
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(boolean25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNull(type33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multi_match" + "'", str41, "multi_match");
        org.junit.Assert.assertNull(boolean42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(queryValidationException55);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNull(zeroTermsQuery57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap66);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNull(int73);
    }

    @Test
    public void test10514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10514");
        java.lang.String[] strArray4 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder5 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray4);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray4);
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder6.getfuzziness();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery8 = multiMatchQueryBuilder6.getzeroTermsQuery();
        java.lang.String str9 = multiMatchQueryBuilder6.fuzzyRewrite;
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNull(zeroTermsQuery8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test10515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10515");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setrewrite("");
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        multiMatchQueryBuilder20.setzeroTermsQuery(zeroTermsQuery21);
        multiMatchQueryBuilder20.useDisMax = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder20.tieBreaker(0.0f);
        java.lang.String[] strArray30 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray30);
        org.elasticsearch.index.query.Operator operator32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.operator(operator32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException36 = multiMatchQueryBuilder31.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder31.cutoffFrequency((float) (byte) 100);
        java.lang.String str39 = multiMatchQueryBuilder31.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder31.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder31.tieBreaker((-1.0f));
        multiMatchQueryBuilder31.setminimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder20.fuzziness((java.lang.Object) multiMatchQueryBuilder31);
        multiMatchQueryBuilder46.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(queryValidationException36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
    }

    @Test
    public void test10516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10516");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Integer int15 = multiMatchQueryBuilder14.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.maxExpansions((int) (byte) 100);
        java.lang.String str18 = multiMatchQueryBuilder14.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.prefixLength((int) (byte) 0);
        float float21 = multiMatchQueryBuilder14.boost();
        java.lang.String str22 = multiMatchQueryBuilder14.fuzzyRewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 1.0f + "'", float21 == 1.0f);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test10517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10517");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        java.lang.String str14 = multiMatchQueryBuilder12.getfuzzyRewrite();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        multiMatchQueryBuilder19.minimumShouldMatch = "hi!";
        java.lang.Float float26 = multiMatchQueryBuilder19.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type28 = type27.matchQueryType();
        float float29 = type27.tieBreaker();
        multiMatchQueryBuilder19.type = type27;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder12.type(type27);
        multiMatchQueryBuilder31.maxExpansions = 100;
        java.lang.String[] strArray37 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray37);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.operator(operator39);
        org.elasticsearch.index.query.Operator operator41 = null;
        multiMatchQueryBuilder38.operator = operator41;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder38.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery45 = multiMatchQueryBuilder38.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder38.prefixLength((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type48 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.common.ParseField parseField49 = type48.parseField();
        org.elasticsearch.common.ParseField parseField50 = type48.parseField();
        multiMatchQueryBuilder47.settype(type48);
        org.elasticsearch.common.ParseField parseField52 = type48.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder31.type(type48);
        java.lang.Class<?> wildcardClass54 = multiMatchQueryBuilder53.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(zeroTermsQuery45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type48.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(parseField49);
        org.junit.Assert.assertNotNull(parseField50);
        org.junit.Assert.assertNotNull(parseField52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test10518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10518");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder8.type = type18;
        java.lang.Integer int20 = multiMatchQueryBuilder8.getslop();
        java.lang.Integer int21 = multiMatchQueryBuilder8.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder8.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float24 = multiMatchQueryBuilder8.getcutoffFrequency();
        java.lang.String str25 = multiMatchQueryBuilder8.queryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery26);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test10519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10519");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException25 = multiMatchQueryBuilder20.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.cutoffFrequency((float) (byte) 100);
        java.lang.String str28 = multiMatchQueryBuilder20.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder20.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness31 = multiMatchQueryBuilder20.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder20.getPROTOTYPE();
        java.lang.String[] strArray36 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder32, strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) multiMatchQueryBuilder38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.queryName("hi!");
        multiMatchQueryBuilder41.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}";
        java.lang.String[] strArray47 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray47);
        org.elasticsearch.index.query.Operator operator49 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.operator(operator49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder48.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap53 = multiMatchQueryBuilder52.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery54 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder52.zeroTermsQuery(zeroTermsQuery54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder52.lenient(false);
        org.elasticsearch.index.query.QueryValidationException queryValidationException58 = multiMatchQueryBuilder57.validate();
        java.lang.String str59 = multiMatchQueryBuilder57.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder57.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean62 = multiMatchQueryBuilder57.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder41.fuzziness((java.lang.Object) multiMatchQueryBuilder57);
        java.lang.Boolean boolean64 = multiMatchQueryBuilder63.lenient;
        multiMatchQueryBuilder63.setcutoffFrequency((java.lang.Float) 100.0f);
        multiMatchQueryBuilder63.settieBreaker((java.lang.Float) 32.0f);
        multiMatchQueryBuilder63.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        multiMatchQueryBuilder63.setlenient((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(queryValidationException25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(fuzziness31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(strObjectFloatHashMap53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNull(queryValidationException58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNull(boolean62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNull(boolean64);
    }

    @Test
    public void test10520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10520");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean21 = multiMatchQueryBuilder20.useDisMax;
        multiMatchQueryBuilder20.tieBreaker = 0.0f;
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder20.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder20.tieBreaker((float) 97);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(fuzziness24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test10521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10521");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.Object obj1 = multiMatchQueryBuilder0.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder3 = multiMatchQueryBuilder0.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str4 = multiMatchQueryBuilder0.getName();
        multiMatchQueryBuilder0.slop = 10;
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder0);
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "multi_match" + "'", str4, "multi_match");
    }

    @Test
    public void test10522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10522");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder13.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.fuzzyRewrite("");
        java.lang.Integer int18 = multiMatchQueryBuilder17.getmaxExpansions();
        multiMatchQueryBuilder17.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"slop\" : 0,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.useDisMax(false);
        org.elasticsearch.common.xcontent.XContentType xContentType25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference26 = multiMatchQueryBuilder24.buildAsBytes(xContentType25);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test10523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10523");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.analyzer = "multi_match";
        multiMatchQueryBuilder4.setcutoffFrequency((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.fuzzyRewrite("");
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery16;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '4');
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean32 = multiMatchQueryBuilder29.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder29.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.operator(operator37);
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException48 = multiMatchQueryBuilder43.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder43.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj51 = multiMatchQueryBuilder43.text;
        multiMatchQueryBuilder43.setrewrite("");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery54 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder43.zeroTermsQuery(zeroTermsQuery54);
        boolean boolean56 = multiMatchQueryBuilder38.equals((java.lang.Object) multiMatchQueryBuilder43);
        multiMatchQueryBuilder43.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type59 = multiMatchQueryBuilder43.type;
        boolean boolean60 = multiMatchQueryBuilder4.equals((java.lang.Object) type59);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(boolean32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(queryValidationException48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertEquals("'" + obj51 + "' != '" + "multi_match" + "'", obj51, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(type59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test10524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10524");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        float float15 = multiMatchQueryBuilder14.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.slop((int) (short) 10);
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap30 = multiMatchQueryBuilder29.getfieldsBoosts();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap31 = null;
        multiMatchQueryBuilder29.fieldsBoosts = strObjectFloatHashMap31;
        java.lang.Boolean boolean33 = multiMatchQueryBuilder29.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder29.settype(type34);
        multiMatchQueryBuilder17.type = type34;
        java.lang.Float float37 = multiMatchQueryBuilder17.gettieBreaker();
        multiMatchQueryBuilder17.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(strObjectFloatHashMap30);
        org.junit.Assert.assertNull(boolean33);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNull(float37);
    }

    @Test
    public void test10525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10525");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        java.lang.String str12 = multiMatchQueryBuilder11.toString();
        multiMatchQueryBuilder11.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder11.getfuzziness();
        java.lang.Integer int16 = multiMatchQueryBuilder11.slop;
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.operator(operator17);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str12, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(fuzziness15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test10526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10526");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.getPROTOTYPE();
        java.lang.Integer int17 = multiMatchQueryBuilder4.prefixLength;
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        java.lang.Integer int28 = multiMatchQueryBuilder22.slop;
        multiMatchQueryBuilder22.prefixLength = 10;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap31 = null;
        multiMatchQueryBuilder22.setfieldsBoosts(strObjectFloatHashMap31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder22.field("", (float) (byte) 100);
        java.lang.String str36 = multiMatchQueryBuilder35.getminimumShouldMatch();
        org.elasticsearch.index.query.Operator operator37 = multiMatchQueryBuilder35.getoperator();
        boolean boolean38 = multiMatchQueryBuilder4.equals((java.lang.Object) multiMatchQueryBuilder35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.Object obj40 = multiMatchQueryBuilder39.text;
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException50 = multiMatchQueryBuilder45.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder45.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder45.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder45.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type57 = multiMatchQueryBuilder45.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type58 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField59 = type58.parseField();
        multiMatchQueryBuilder45.type = type58;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder39.type(type58);
        org.elasticsearch.common.ParseField parseField62 = type58.parseField();
        org.elasticsearch.common.ParseField parseField63 = type58.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder4.type(type58);
        org.elasticsearch.common.ParseField parseField65 = type58.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type66 = type58.matchQueryType();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(operator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(queryValidationException50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNull(type57);
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type58.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(parseField62);
        org.junit.Assert.assertNotNull(parseField63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(parseField65);
        org.junit.Assert.assertTrue("'" + type66 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type66.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test10527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10527");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException20 = multiMatchQueryBuilder19.validate();
        java.lang.Float float21 = multiMatchQueryBuilder19.getcutoffFrequency();
        multiMatchQueryBuilder19.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder19.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.tieBreaker((-1.0f));
        java.lang.String str28 = multiMatchQueryBuilder25.fuzzyRewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(queryValidationException20);
        org.junit.Assert.assertNull(float21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test10528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10528");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.common.unit.Fuzziness fuzziness10 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness10;
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.tieBreaker((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder14.setcutoffFrequency((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.tieBreaker(0.0f);
        java.lang.Integer int21 = multiMatchQueryBuilder14.getmaxExpansions();
        java.lang.Integer int22 = multiMatchQueryBuilder14.slop;
        java.lang.Boolean boolean23 = multiMatchQueryBuilder14.useDisMax;
        multiMatchQueryBuilder14.settieBreaker((java.lang.Float) 32.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(boolean23);
    }

    @Test
    public void test10529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10529");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        java.lang.Object obj16 = multiMatchQueryBuilder15.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder15.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder15.getName();
        java.lang.String[] strArray25 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray25);
        org.elasticsearch.index.query.Operator operator27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.operator(operator27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException31 = multiMatchQueryBuilder26.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder26.cutoffFrequency((float) (byte) 100);
        java.lang.String str34 = multiMatchQueryBuilder26.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder26.zeroTermsQuery(zeroTermsQuery35);
        multiMatchQueryBuilder26.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder26.setmaxExpansions((java.lang.Integer) 10);
        java.lang.Integer int41 = multiMatchQueryBuilder26.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder15.fuzziness((java.lang.Object) multiMatchQueryBuilder26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder42.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"tieBreaker\" : 1.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "multi_match" + "'", obj16, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(queryValidationException31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
    }

    @Test
    public void test10530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10530");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.Operator operator14 = null;
        multiMatchQueryBuilder4.setoperator(operator14);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type16 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type17 = type16.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.type(type16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.tieBreaker((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.boost((float) '4');
        org.elasticsearch.common.xcontent.XContentType xContentType23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference24 = multiMatchQueryBuilder20.buildAsBytes(xContentType23);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type16.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type17.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test10531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10531");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        java.util.List<java.lang.String> strList21 = multiMatchQueryBuilder20.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.useDisMax(false);
        java.lang.String str24 = multiMatchQueryBuilder23.rewrite;
        java.lang.String str25 = multiMatchQueryBuilder23.getrewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test10532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10532");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        java.lang.String[] strArray11 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray11);
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder16.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.lenient(false);
        multiMatchQueryBuilder16.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery24);
        boolean boolean26 = multiMatchQueryBuilder6.equals((java.lang.Object) multiMatchQueryBuilder25);
        java.lang.Boolean boolean27 = multiMatchQueryBuilder25.getuseDisMax();
        multiMatchQueryBuilder25.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder25.getPROTOTYPE();
        java.lang.String str31 = multiMatchQueryBuilder30.queryName();
        java.lang.String str32 = multiMatchQueryBuilder30.getName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(boolean27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}" + "'", str31, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "multi_match" + "'", str32, "multi_match");
    }

    @Test
    public void test10533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10533");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int13 = multiMatchQueryBuilder12.prefixLength;
        multiMatchQueryBuilder12.maxExpansions = 0;
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException25 = multiMatchQueryBuilder20.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.cutoffFrequency((float) (byte) 100);
        float float28 = multiMatchQueryBuilder20.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type29 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type30 = type29.matchQueryType();
        multiMatchQueryBuilder20.settype(type29);
        org.elasticsearch.index.search.MatchQuery.Type type32 = type29.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder12.type(type29);
        java.lang.Float float34 = multiMatchQueryBuilder12.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder12.useDisMax(false);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params38 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder39 = multiMatchQueryBuilder36.toXContent(xContentBuilder37, params38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(queryValidationException25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 1.0f + "'", float28 == 1.0f);
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type29.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type30.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type32.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(float34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(params38);
    }

    @Test
    public void test10534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10534");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        java.lang.Class<?> wildcardClass18 = multiMatchQueryBuilder8.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test10535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10535");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.queryName("");
        multiMatchQueryBuilder14.setslop((java.lang.Integer) 0);
        java.lang.String str17 = multiMatchQueryBuilder14.getanalyzer();
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder14.fuzziness;
        multiMatchQueryBuilder14.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(fuzziness18);
    }

    @Test
    public void test10536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10536");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        java.lang.String str13 = multiMatchQueryBuilder4.getName();
        java.lang.Object obj14 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) 10.0d);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder19.setlenient((java.lang.Boolean) true);
        multiMatchQueryBuilder19.setslop((java.lang.Integer) (-1));
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test10537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10537");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.tieBreaker((-1.0f));
        multiMatchQueryBuilder16.setlenient((java.lang.Boolean) false);
        multiMatchQueryBuilder16.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : -1,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.QueryShardContext queryShardContext21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query22 = multiMatchQueryBuilder16.toFilter(queryShardContext21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test10538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10538");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        float float18 = type17.tieBreaker();
        multiMatchQueryBuilder4.settype(type17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.slop((int) 'a');
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = multiMatchQueryBuilder21.fieldsBoosts;
        float float23 = multiMatchQueryBuilder21.boost();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type17.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 1.0f + "'", float18 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(strObjectFloatHashMap22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 1.0f + "'", float23 == 1.0f);
    }

    @Test
    public void test10539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10539");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder20.fuzziness;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = multiMatchQueryBuilder20.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList25 = multiMatchQueryBuilder24.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type26 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField27 = type26.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type28 = type26.matchQueryType();
        org.elasticsearch.common.ParseField parseField29 = type26.parseField();
        org.elasticsearch.common.ParseField parseField30 = type26.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type31 = type26.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type32 = type26.matchQueryType();
        multiMatchQueryBuilder24.settype(type26);
        multiMatchQueryBuilder24.setprefixLength((java.lang.Integer) 1);
        java.lang.String str36 = multiMatchQueryBuilder24.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNull(strObjectFloatHashMap22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type26.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField27);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField29);
        org.junit.Assert.assertNotNull(parseField30);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type31.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type32.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test10540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10540");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.tieBreaker((-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField18 = type17.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type19 = type17.matchQueryType();
        org.elasticsearch.common.ParseField parseField20 = type17.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.type(type17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str24 = multiMatchQueryBuilder23.fuzzyRewrite;
        multiMatchQueryBuilder23.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 1,\n    \"max_expansions\" : 10,\n    \"rewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type17.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type19.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test10541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10541");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 1);
        java.lang.Float float12 = multiMatchQueryBuilder11.gettieBreaker();
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.operator(operator13);
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException24 = multiMatchQueryBuilder19.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.zeroTermsQuery(zeroTermsQuery27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder26.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.tieBreaker((float) (short) 0);
        java.lang.String str32 = multiMatchQueryBuilder31.getName();
        boolean boolean33 = multiMatchQueryBuilder11.equals((java.lang.Object) multiMatchQueryBuilder31);
        multiMatchQueryBuilder31.prefixLength = 10;
        org.elasticsearch.index.query.Operator operator36 = null;
        multiMatchQueryBuilder31.operator = operator36;
        java.lang.String str38 = multiMatchQueryBuilder31.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery39 = multiMatchQueryBuilder31.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(queryValidationException24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "multi_match" + "'", str32, "multi_match");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"slop\" : 10,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str38, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"slop\" : 10,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(zeroTermsQuery39);
    }

    @Test
    public void test10542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10542");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        java.lang.Float float13 = multiMatchQueryBuilder4.getcutoffFrequency();
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) false);
        java.lang.Integer int16 = multiMatchQueryBuilder4.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test10543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10543");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery10);
        multiMatchQueryBuilder11.maxExpansions = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.slop((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder15.getPROTOTYPE();
        multiMatchQueryBuilder16.rewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test10544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10544");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float12 = multiMatchQueryBuilder8.gettieBreaker();
        multiMatchQueryBuilder8.setminimumShouldMatch("");
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException24 = multiMatchQueryBuilder19.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.cutoffFrequency((float) (byte) 100);
        float float27 = multiMatchQueryBuilder19.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type28 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type29 = type28.matchQueryType();
        multiMatchQueryBuilder19.settype(type28);
        org.elasticsearch.common.ParseField parseField31 = type28.parseField();
        multiMatchQueryBuilder8.type = type28;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder8.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.useDisMax(false);
        java.lang.String str37 = multiMatchQueryBuilder36.rewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(queryValidationException24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type28.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type29.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test10545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10545");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness8;
        java.lang.String str10 = multiMatchQueryBuilder4.getanalyzer();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = multiMatchQueryBuilder4.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1L));
        java.lang.Float float14 = multiMatchQueryBuilder13.cutoffFrequency;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        multiMatchQueryBuilder13.setzeroTermsQuery(zeroTermsQuery15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder13.cutoffFrequency(10.0f);
        java.util.List<java.lang.String> strList19 = multiMatchQueryBuilder18.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strObjectFloatHashMap11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test10546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10546");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.lenient(true);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = multiMatchQueryBuilder16.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(zeroTermsQuery17);
    }

    @Test
    public void test10547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10547");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        float float33 = multiMatchQueryBuilder25.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type35 = type34.matchQueryType();
        multiMatchQueryBuilder25.settype(type34);
        multiMatchQueryBuilder4.type = type34;
        java.lang.String str38 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder4.boost((float) '4');
        multiMatchQueryBuilder40.maxExpansions = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type43 = multiMatchQueryBuilder40.type;
        org.elasticsearch.index.search.MatchQuery.Type type44 = type43.matchQueryType();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 1.0f + "'", float33 == 1.0f);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type35.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertTrue("'" + type43 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type43.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type44.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test10548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10548");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        java.lang.Float float13 = multiMatchQueryBuilder4.getcutoffFrequency();
        org.elasticsearch.index.query.Operator operator14 = null;
        multiMatchQueryBuilder4.setoperator(operator14);
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type25 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type26 = type25.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder22.type(type25);
        org.elasticsearch.common.ParseField parseField28 = type25.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder4.type(type25);
        org.elasticsearch.index.search.MatchQuery.Type type30 = type25.matchQueryType();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type25.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type26.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(parseField28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type30.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test10549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10549");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        java.lang.String str14 = multiMatchQueryBuilder12.getfuzzyRewrite();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        multiMatchQueryBuilder19.minimumShouldMatch = "hi!";
        java.lang.Float float26 = multiMatchQueryBuilder19.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type28 = type27.matchQueryType();
        float float29 = type27.tieBreaker();
        multiMatchQueryBuilder19.type = type27;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder12.type(type27);
        java.lang.Float float32 = multiMatchQueryBuilder12.gettieBreaker();
        java.lang.Integer int33 = multiMatchQueryBuilder12.getprefixLength();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery34 = null;
        multiMatchQueryBuilder12.setzeroTermsQuery(zeroTermsQuery34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = multiMatchQueryBuilder12.type;
        org.elasticsearch.index.search.MatchQuery.Type type37 = type36.matchQueryType();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(float32);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type37.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test10550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10550");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.String str1 = multiMatchQueryBuilder0.getminimumShouldMatch();
        float float2 = multiMatchQueryBuilder0.boost();
        multiMatchQueryBuilder0.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}";
        java.lang.Boolean boolean5 = multiMatchQueryBuilder0.getuseDisMax();
        java.lang.String str6 = multiMatchQueryBuilder0.getName();
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"slop\" : 10,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str1, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"slop\" : 10,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f);
// flaky:         org.junit.Assert.assertEquals("'" + boolean5 + "' != '" + false + "'", boolean5, false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "multi_match" + "'", str6, "multi_match");
    }

    @Test
    public void test10551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10551");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        java.lang.Float float11 = multiMatchQueryBuilder4.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        java.lang.Integer int14 = multiMatchQueryBuilder13.slop;
        multiMatchQueryBuilder13.slop = 1;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder13.fieldsBoosts;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = multiMatchQueryBuilder13.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNull(strObjectFloatHashMap18);
    }

    @Test
    public void test10552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10552");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap13;
        java.lang.Object obj15 = multiMatchQueryBuilder4.gettext();
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        multiMatchQueryBuilder20.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder20.lenient(true);
        java.lang.String str29 = multiMatchQueryBuilder28.toString();
        java.lang.String str30 = multiMatchQueryBuilder28.getfuzzyRewrite();
        multiMatchQueryBuilder28.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder28.fuzzyRewrite = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder4.field("", (float) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int41 = multiMatchQueryBuilder38.getslop();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "multi_match" + "'", obj15, "multi_match");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str29, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(int41);
    }

    @Test
    public void test10553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10553");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap17;
        java.lang.Integer int19 = multiMatchQueryBuilder16.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.getPROTOTYPE();
        java.lang.Integer int21 = multiMatchQueryBuilder16.prefixLength;
        java.lang.String str22 = multiMatchQueryBuilder16.getrewrite();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = null;
        multiMatchQueryBuilder16.setzeroTermsQuery(zeroTermsQuery23);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str22, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test10554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10554");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException20 = multiMatchQueryBuilder19.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder19.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder19.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type25 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        multiMatchQueryBuilder24.type = type25;
        java.lang.String str27 = multiMatchQueryBuilder24.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder24.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"tieBreaker\" : 52.0,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = multiMatchQueryBuilder29.zeroTermsQuery;
        multiMatchQueryBuilder29.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzziness\" : \"10\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String str33 = multiMatchQueryBuilder29.getanalyzer();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(queryValidationException20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type25.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str27, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(zeroTermsQuery30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str33, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test10555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10555");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.Integer int15 = multiMatchQueryBuilder11.getprefixLength();
        java.lang.String str16 = multiMatchQueryBuilder11.getWriteableName();
        org.elasticsearch.index.query.Operator operator17 = null;
        multiMatchQueryBuilder11.operator = operator17;
        java.lang.String str19 = multiMatchQueryBuilder11.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder11.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"slop\" : 0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "multi_match" + "'", str16, "multi_match");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test10556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10556");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder16.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder16.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        java.lang.String str31 = multiMatchQueryBuilder28.getWriteableName();
        java.lang.Boolean boolean32 = multiMatchQueryBuilder28.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder28.getPROTOTYPE();
        multiMatchQueryBuilder28.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray39 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray39);
        org.elasticsearch.index.query.Operator operator41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.operator(operator41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException45 = multiMatchQueryBuilder40.validate();
        java.lang.Integer int46 = multiMatchQueryBuilder40.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery47 = multiMatchQueryBuilder40.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder40.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder40.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder40.boost((float) 0);
        java.lang.String str55 = multiMatchQueryBuilder40.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap56 = multiMatchQueryBuilder40.fieldsBoosts;
        multiMatchQueryBuilder28.fieldsBoosts = strObjectFloatHashMap56;
        multiMatchQueryBuilder16.setfieldsBoosts(strObjectFloatHashMap56);
        java.lang.Integer int59 = multiMatchQueryBuilder16.prefixLength;
        java.lang.Integer int60 = multiMatchQueryBuilder16.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder16.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : 10,\n    \"maxExpansions\" : -1,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str63 = multiMatchQueryBuilder62.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "multi_match" + "'", str31, "multi_match");
        org.junit.Assert.assertNull(boolean32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(queryValidationException45);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNull(zeroTermsQuery47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap56);
        org.junit.Assert.assertNull(int59);
        org.junit.Assert.assertNull(int60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : 10,\n    \"maxExpansions\" : -1,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str63, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : 10,\n    \"maxExpansions\" : -1,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test10557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10557");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        java.lang.Float float19 = multiMatchQueryBuilder4.getcutoffFrequency();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap20 = multiMatchQueryBuilder4.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(float19);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap20);
    }

    @Test
    public void test10558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10558");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float21 = multiMatchQueryBuilder20.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.rewrite("multi_match");
        java.lang.Float float24 = multiMatchQueryBuilder23.cutoffFrequency;
        org.elasticsearch.index.query.Operator operator25 = multiMatchQueryBuilder23.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(float21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float24);
        org.junit.Assert.assertNull(operator25);
    }

    @Test
    public void test10559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10559");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.tieBreaker((float) 100);
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder4.fuzziness;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(fuzziness21);
    }

    @Test
    public void test10560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10560");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap17;
        java.lang.String str19 = multiMatchQueryBuilder16.getNAME();
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder16.fields;
        multiMatchQueryBuilder16.slop = 0;
        java.lang.Integer int23 = multiMatchQueryBuilder16.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(int23);
    }

    @Test
    public void test10561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10561");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        multiMatchQueryBuilder12.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder12.slop((int) (short) 100);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test10562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10562");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        java.util.List<java.lang.String> strList21 = multiMatchQueryBuilder20.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder20.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}", (float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder20.tieBreaker((float) 0L);
        multiMatchQueryBuilder28.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzziness\" : \"BEST_FIELDS\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test10563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10563");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        java.lang.Float float16 = multiMatchQueryBuilder15.cutoffFrequency;
        multiMatchQueryBuilder15.useDisMax = true;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = null;
        multiMatchQueryBuilder15.setfieldsBoosts(strObjectFloatHashMap19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder15.getzeroTermsQuery();
        java.lang.Integer int22 = multiMatchQueryBuilder15.getprefixLength();
        multiMatchQueryBuilder15.settieBreaker((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type25 = multiMatchQueryBuilder15.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder15.lenient(false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(type25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test10564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10564");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type8 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type9 = type8.matchQueryType();
        float float10 = type8.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = multiMatchQueryBuilder11.zeroTermsQuery;
        java.lang.Boolean boolean13 = multiMatchQueryBuilder11.useDisMax;
        float float14 = multiMatchQueryBuilder11.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.prefixLength((int) (short) -1);
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        multiMatchQueryBuilder21.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder21.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder21.maxExpansions((int) (short) 10);
        java.lang.Object obj30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder21.type(obj30);
        boolean boolean32 = multiMatchQueryBuilder16.equals((java.lang.Object) multiMatchQueryBuilder21);
        java.lang.Integer int33 = multiMatchQueryBuilder16.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type8.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type9.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(zeroTermsQuery12);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(int33);
    }

    @Test
    public void test10565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10565");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.useDisMax(true);
        multiMatchQueryBuilder17.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException29 = multiMatchQueryBuilder24.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder24.cutoffFrequency((float) (byte) 100);
        float float32 = multiMatchQueryBuilder24.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type33 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type34 = type33.matchQueryType();
        multiMatchQueryBuilder24.settype(type33);
        org.elasticsearch.index.search.MatchQuery.Type type36 = type33.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder17.type(type33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder17.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder17.getPROTOTYPE();
        java.lang.String str41 = multiMatchQueryBuilder17.getWriteableName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(queryValidationException29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 1.0f + "'", float32 == 1.0f);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type33.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type34.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type36.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multi_match" + "'", str41, "multi_match");
    }

    @Test
    public void test10566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10566");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.maxExpansions((int) (short) 10);
        java.lang.Boolean boolean13 = multiMatchQueryBuilder12.getlenient();
        multiMatchQueryBuilder12.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.Operator operator16 = null;
        multiMatchQueryBuilder12.operator = operator16;
        multiMatchQueryBuilder12.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder12.operator(operator20);
        multiMatchQueryBuilder12.cutoffFrequency = 1.0f;
        multiMatchQueryBuilder12.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"fuzziness\" : \"BEST_FIELDS\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test10567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10567");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        java.lang.String str20 = multiMatchQueryBuilder17.fuzzyRewrite;
        multiMatchQueryBuilder17.minimumShouldMatch = "multi_match";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = multiMatchQueryBuilder17.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder17.type(type24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryShardContext queryShardContext28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query29 = multiMatchQueryBuilder25.toQuery(queryShardContext28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(zeroTermsQuery23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test10568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10568");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        java.lang.String str9 = multiMatchQueryBuilder4.rewrite;
        java.lang.String str10 = multiMatchQueryBuilder4.getfuzzyRewrite();
        java.lang.Boolean boolean11 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String str12 = multiMatchQueryBuilder4.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(boolean11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str12, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test10569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10569");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.getfuzziness();
        org.elasticsearch.index.query.Operator operator13 = null;
        multiMatchQueryBuilder11.setoperator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.cutoffFrequency((float) (byte) 1);
        java.lang.Boolean boolean19 = multiMatchQueryBuilder16.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean19);
    }

    @Test
    public void test10570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10570");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder16.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder16.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray29 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray29);
        org.elasticsearch.index.query.Operator operator31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.operator(operator31);
        java.lang.Boolean boolean33 = multiMatchQueryBuilder30.getlenient();
        multiMatchQueryBuilder30.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder30.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder30.tieBreaker((float) (-1));
        multiMatchQueryBuilder30.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder30.useDisMax(true);
        multiMatchQueryBuilder43.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray49 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray49);
        org.elasticsearch.index.query.Operator operator51 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.operator(operator51);
        java.lang.String str53 = multiMatchQueryBuilder50.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness54 = multiMatchQueryBuilder50.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder50.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type57 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder50.settype(type57);
        multiMatchQueryBuilder43.settype(type57);
        org.elasticsearch.index.search.MatchQuery.Type type60 = type57.matchQueryType();
        multiMatchQueryBuilder25.type = type57;
        org.elasticsearch.index.query.QueryShardContext queryShardContext62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query63 = multiMatchQueryBuilder25.toQuery(queryShardContext62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(boolean33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "multi_match" + "'", str53, "multi_match");
        org.junit.Assert.assertNull(fuzziness54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertTrue("'" + type57 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type57.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + type60 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type60.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test10571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10571");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 0);
        java.lang.String str13 = multiMatchQueryBuilder8.getfuzzyRewrite();
        java.lang.Boolean boolean14 = multiMatchQueryBuilder8.getlenient();
        java.lang.Integer int15 = multiMatchQueryBuilder8.prefixLength;
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 97);
        multiMatchQueryBuilder8.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 97,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertNull(int15);
    }

    @Test
    public void test10572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10572");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type16 = type15.matchQueryType();
        float float17 = type15.tieBreaker();
        float float18 = type15.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) type15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) -1);
        java.lang.String str22 = multiMatchQueryBuilder21.getWriteableName();
        multiMatchQueryBuilder21.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str25 = multiMatchQueryBuilder21.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type15.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type16.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test10573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10573");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multiMatch\" : {\n    \"query\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"most_fields\\\",\\n    \\\"slop\\\" : 97,\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"tieBreaker\\\" : 100.0,\\n    \\\"cutoffFrequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test10574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10574");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        float float33 = multiMatchQueryBuilder25.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type35 = type34.matchQueryType();
        multiMatchQueryBuilder25.settype(type34);
        multiMatchQueryBuilder4.type = type34;
        java.lang.String str38 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) true);
        multiMatchQueryBuilder4.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzziness\" : \"10\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String str45 = multiMatchQueryBuilder4.fuzzyRewrite;
        multiMatchQueryBuilder4.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 1.0f + "'", float33 == 1.0f);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type35.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzziness\" : \"10\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str45, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzziness\" : \"10\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test10575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10575");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        java.lang.Float float13 = multiMatchQueryBuilder4.getcutoffFrequency();
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.prefixLength((int) (byte) -1);
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder17.fuzziness;
        multiMatchQueryBuilder17.settieBreaker((java.lang.Float) 0.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(fuzziness18);
    }

    @Test
    public void test10576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10576");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.useDisMax(true);
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"\"\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.lenient(true);
        java.lang.Object obj21 = multiMatchQueryBuilder20.gettext();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + "multi_match" + "'", obj21, "multi_match");
    }

    @Test
    public void test10577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10577");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.maxExpansions((int) (short) 10);
        java.lang.Float float13 = multiMatchQueryBuilder12.getcutoffFrequency();
        multiMatchQueryBuilder12.setprefixLength((java.lang.Integer) 10);
        multiMatchQueryBuilder12.slop = 35;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float13);
    }

    @Test
    public void test10578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10578");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.String[] strArray5 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray5);
        org.elasticsearch.index.query.Operator operator7 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.operator(operator7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder6.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = multiMatchQueryBuilder10.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder10.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder10.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.slop(1);
        multiMatchQueryBuilder19.cutoffFrequency = (-1.0f);
        java.lang.String[] strArray25 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray25);
        org.elasticsearch.index.query.Operator operator27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.operator(operator27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder30.setmaxExpansions((java.lang.Integer) 0);
        multiMatchQueryBuilder30.rewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String str37 = multiMatchQueryBuilder30.getfuzzyRewrite();
        multiMatchQueryBuilder30.slop = 1;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder30.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"type\" : \"most_fields\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", (float) 97);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap43 = multiMatchQueryBuilder42.fieldsBoosts;
        multiMatchQueryBuilder19.setfieldsBoosts(strObjectFloatHashMap43);
        java.lang.String[] strArray48 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray48);
        org.elasticsearch.index.query.Operator operator50 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.operator(operator50);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type54 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type55 = type54.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder51.type(type54);
        org.elasticsearch.common.ParseField parseField57 = type54.parseField();
        java.lang.String[] strArray62 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray62);
        java.lang.String[] strArray68 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray68);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray62, strArray68);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) parseField57, strArray68);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strObjectFloatHashMap43, strArray68);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder73 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(strObjectFloatHashMap11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap43);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertTrue("'" + type54 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type54.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type55.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(parseField57);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray68);
    }

    @Test
    public void test10579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10579");
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion0 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE;
        java.lang.Class<?> wildcardClass1 = fieldCaseConversion0.getClass();
        java.lang.String[] strArray5 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray5);
        org.elasticsearch.index.query.Operator operator7 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.operator(operator7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder6.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException11 = multiMatchQueryBuilder6.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder6.cutoffFrequency((float) (byte) 100);
        java.lang.String str14 = multiMatchQueryBuilder6.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder6.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness17 = multiMatchQueryBuilder6.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder6.getPROTOTYPE();
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder18, strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass1, strArray22);
        java.lang.Float float26 = multiMatchQueryBuilder25.getcutoffFrequency();
        java.lang.String str27 = multiMatchQueryBuilder25.getWriteableName();
        multiMatchQueryBuilder25.maxExpansions = 0;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder25.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str32 = multiMatchQueryBuilder31.getanalyzer();
        org.junit.Assert.assertTrue("'" + fieldCaseConversion0 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE + "'", fieldCaseConversion0.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE));
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(queryValidationException11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(fuzziness17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNull(float26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "multi_match" + "'", str27, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test10580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10580");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.slop((int) (short) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder12.settieBreaker((java.lang.Float) 52.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator19 = null;
        multiMatchQueryBuilder12.operator = operator19;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder12.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"type\" : \"most_fields\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test10581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10581");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.slop((int) (byte) 100);
        java.lang.Float float20 = multiMatchQueryBuilder13.tieBreaker;
        org.elasticsearch.common.xcontent.XContentType xContentType21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference22 = multiMatchQueryBuilder13.buildAsBytes(xContentType21);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(float20);
    }

    @Test
    public void test10582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10582");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.slop((int) '#');
        multiMatchQueryBuilder15.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        java.lang.String str27 = multiMatchQueryBuilder26.getName();
        multiMatchQueryBuilder26.prefixLength = 10;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder26.zeroTermsQuery(zeroTermsQuery30);
        java.lang.String[] strArray35 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray35);
        org.elasticsearch.index.query.Operator operator37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.operator(operator37);
        java.lang.String str39 = multiMatchQueryBuilder36.getWriteableName();
        java.lang.Boolean boolean40 = multiMatchQueryBuilder36.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder36.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type43 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float44 = type43.tieBreaker();
        org.elasticsearch.common.ParseField parseField45 = type43.parseField();
        float float46 = type43.tieBreaker();
        multiMatchQueryBuilder36.type = type43;
        multiMatchQueryBuilder31.settype(type43);
        multiMatchQueryBuilder31.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}";
        multiMatchQueryBuilder31.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : {\n      \"multiMatch\" : {\n        \"query\" : \"multi_match\",\n        \"fields\" : [ \"multi_match\", \"hi!\" ],\n        \"slop\" : -1,\n        \"minimumShouldMatch\" : \"\",\n        \"fuzzyRewrite\" : \"hi!\",\n        \"boost\" : 1.0\n      }\n    },\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"cutoff_frequency\\\" : -1.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder15.fuzziness((java.lang.Object) "{\n  \"multiMatch\" : {\n    \"query\" : {\n      \"multiMatch\" : {\n        \"query\" : \"multi_match\",\n        \"fields\" : [ \"multi_match\", \"hi!\" ],\n        \"slop\" : -1,\n        \"minimumShouldMatch\" : \"\",\n        \"fuzzyRewrite\" : \"hi!\",\n        \"boost\" : 1.0\n      }\n    },\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"cutoff_frequency\\\" : -1.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "multi_match" + "'", str27, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "multi_match" + "'", str39, "multi_match");
        org.junit.Assert.assertNull(boolean40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertTrue("'" + type43 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type43.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 0.0f + "'", float44 == 0.0f);
        org.junit.Assert.assertNotNull(parseField45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + 0.0f + "'", float46 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
    }

    @Test
    public void test10583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10583");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        java.lang.String str13 = multiMatchQueryBuilder4.getName();
        java.lang.String str14 = multiMatchQueryBuilder4.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField16 = type15.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type17 = type15.matchQueryType();
        org.elasticsearch.common.ParseField parseField18 = type15.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type19 = type15.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.type(type15);
        multiMatchQueryBuilder20.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}";
        org.elasticsearch.common.xcontent.XContentType xContentType23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference24 = multiMatchQueryBuilder20.buildAsBytes(xContentType23);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type15.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField16);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type17.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type19.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test10584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10584");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        java.lang.String str13 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.String str14 = multiMatchQueryBuilder4.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.io.stream.StreamInput streamInput17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.readFrom(streamInput17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test10585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10585");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.getPROTOTYPE();
        java.lang.Integer int17 = multiMatchQueryBuilder4.prefixLength;
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        java.lang.Integer int28 = multiMatchQueryBuilder22.slop;
        multiMatchQueryBuilder22.prefixLength = 10;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap31 = null;
        multiMatchQueryBuilder22.setfieldsBoosts(strObjectFloatHashMap31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder22.field("", (float) (byte) 100);
        java.lang.String str36 = multiMatchQueryBuilder35.getminimumShouldMatch();
        org.elasticsearch.index.query.Operator operator37 = multiMatchQueryBuilder35.getoperator();
        boolean boolean38 = multiMatchQueryBuilder4.equals((java.lang.Object) multiMatchQueryBuilder35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.Object obj40 = multiMatchQueryBuilder39.text;
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException50 = multiMatchQueryBuilder45.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder45.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder45.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder45.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type57 = multiMatchQueryBuilder45.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type58 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField59 = type58.parseField();
        multiMatchQueryBuilder45.type = type58;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder39.type(type58);
        org.elasticsearch.common.ParseField parseField62 = type58.parseField();
        org.elasticsearch.common.ParseField parseField63 = type58.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder4.type(type58);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder4.boost((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder4.useDisMax(false);
        multiMatchQueryBuilder4.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzziness\" : \"{\\n  \\\"MULTIMATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\", \\\"\\\" ],\\n    \\\"FUZZYREWRITE\\\" : \\\"HI!\\\",\\n    \\\"TIEBREAKER\\\" : 100.0,\\n    \\\"LENIENT\\\" : TRUE,\\n    \\\"CUTOFFFREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(operator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(queryValidationException50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNull(type57);
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type58.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(parseField62);
        org.junit.Assert.assertNotNull(parseField63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
    }

    @Test
    public void test10586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10586");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type8 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type9 = type8.matchQueryType();
        float float10 = type8.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type8);
        multiMatchQueryBuilder11.useDisMax = false;
        multiMatchQueryBuilder11.useDisMax = false;
        java.lang.String str16 = multiMatchQueryBuilder11.getNAME();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.prefixLength((int) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.cutoffFrequency((float) 1);
        java.lang.Integer int21 = multiMatchQueryBuilder20.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.Float float24 = multiMatchQueryBuilder23.tieBreaker;
        multiMatchQueryBuilder23.settieBreaker((java.lang.Float) 52.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type8.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type9.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "multi_match" + "'", str16, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float24);
    }

    @Test
    public void test10587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10587");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.useDisMax(false);
        multiMatchQueryBuilder14.tieBreaker = 52.0f;
        java.lang.Object obj17 = multiMatchQueryBuilder14.text;
        org.elasticsearch.index.query.Operator operator18 = multiMatchQueryBuilder14.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "multi_match" + "'", str12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNull(operator18);
    }

    @Test
    public void test10588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10588");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.Object obj17 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = multiMatchQueryBuilder4.zeroTermsQuery;
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        java.lang.Boolean boolean26 = multiMatchQueryBuilder23.getlenient();
        multiMatchQueryBuilder23.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness31 = multiMatchQueryBuilder30.fuzziness;
        multiMatchQueryBuilder30.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder30.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = multiMatchQueryBuilder35.zeroTermsQuery;
        java.lang.String[] strArray40 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray40);
        org.elasticsearch.index.query.Operator operator42 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.operator(operator42);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder41.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException46 = multiMatchQueryBuilder41.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder41.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap49 = multiMatchQueryBuilder48.getfieldsBoosts();
        java.lang.String[] strArray53 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray53);
        org.elasticsearch.index.query.Operator operator55 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.operator(operator55);
        java.lang.String str57 = multiMatchQueryBuilder54.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness58 = multiMatchQueryBuilder54.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder54.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type61 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder54.settype(type61);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder48.type(type61);
        org.elasticsearch.index.search.MatchQuery.Type type64 = type61.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type65 = type61.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder35.type(type61);
        multiMatchQueryBuilder4.settype(type61);
        org.elasticsearch.common.ParseField parseField68 = type61.parseField();
        float float69 = type61.tieBreaker();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNull(zeroTermsQuery18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(fuzziness31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(zeroTermsQuery36);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(queryValidationException46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNull(strObjectFloatHashMap49);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "multi_match" + "'", str57, "multi_match");
        org.junit.Assert.assertNull(fuzziness58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertTrue("'" + type61 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type61.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertTrue("'" + type64 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type64.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type65 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type65.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(parseField68);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + 1.0f + "'", float69 == 1.0f);
    }

    @Test
    public void test10589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10589");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) 0);
        multiMatchQueryBuilder4.lenient = false;
        multiMatchQueryBuilder4.prefixLength = 1;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder4.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput27 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder4.writeTo(streamOutput27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test10590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10590");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder13.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.fuzzyRewrite("");
        java.lang.Integer int18 = multiMatchQueryBuilder17.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder17.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : 10,\n    \"useDisMax\" : false,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder17.setmaxExpansions((java.lang.Integer) 100);
        java.util.List<java.lang.String> strList23 = multiMatchQueryBuilder17.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strList23);
    }

    @Test
    public void test10591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10591");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.minimumShouldMatch("");
        java.util.List<java.lang.String> strList17 = multiMatchQueryBuilder14.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder14.lenient(false);
        java.lang.String str20 = multiMatchQueryBuilder19.analyzer;
        java.lang.Boolean boolean21 = multiMatchQueryBuilder19.useDisMax;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(boolean21);
    }

    @Test
    public void test10592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10592");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray22);
        java.lang.String[] strArray28 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray22, strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder13, strArray28);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray28);
    }

    @Test
    public void test10593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10593");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String str16 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.useDisMax(true);
        multiMatchQueryBuilder4.slop = 10;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap23 = multiMatchQueryBuilder4.getfieldsBoosts();
        float float24 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : {\n      \"multiMatch\" : {\n        \"query\" : \"multi_match\",\n        \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n        \"minimumShouldMatch\" : \"multi_match\",\n        \"lenient\" : true,\n        \"boost\" : 1.0,\n        \"Name\" : \"multi_match\"\n      }\n    },\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str27 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(strObjectFloatHashMap23);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 1.0f + "'", float24 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test10594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10594");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap16 = multiMatchQueryBuilder13.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(strObjectFloatHashMap16);
    }

    @Test
    public void test10595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10595");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        java.lang.String str18 = multiMatchQueryBuilder17.fuzzyRewrite;
        java.lang.Boolean boolean19 = multiMatchQueryBuilder17.useDisMax;
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.operator(operator20);
        multiMatchQueryBuilder17.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test10596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10596");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        java.lang.String str20 = multiMatchQueryBuilder17.toString();
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.operator(operator21);
        java.lang.String str23 = multiMatchQueryBuilder17.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder17.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str20, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test10597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10597");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type8 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type9 = type8.matchQueryType();
        float float10 = type8.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type8);
        multiMatchQueryBuilder11.useDisMax = false;
        multiMatchQueryBuilder11.useDisMax = false;
        org.elasticsearch.index.query.QueryValidationException queryValidationException16 = multiMatchQueryBuilder11.validate();
        java.lang.Integer int17 = multiMatchQueryBuilder11.getslop();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type8.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type9.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(queryValidationException16);
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test10598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10598");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        java.lang.String str12 = multiMatchQueryBuilder11.toString();
        multiMatchQueryBuilder11.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder11.getfuzziness();
        java.lang.String str16 = multiMatchQueryBuilder11.getName();
        multiMatchQueryBuilder11.settieBreaker((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"tie_breaker\" : -1.0,\n    \"cutoff_frequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder11.prefixLength((int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str12, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(fuzziness15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "multi_match" + "'", str16, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test10599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10599");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion15 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.CAMELCASE;
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion15);
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.fuzziness((java.lang.Object) fieldCaseConversion15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder11.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"fuzziness\" : \"BEST_FIELDS\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}", (float) 0L);
        multiMatchQueryBuilder23.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"tieBreaker\\\" : 100.0,\\n    \\\"cutoffFrequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 0.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + fieldCaseConversion15 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.CAMELCASE + "'", fieldCaseConversion15.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.CAMELCASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test10600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10600");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.String str9 = multiMatchQueryBuilder8.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int12 = multiMatchQueryBuilder11.getprefixLength();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multi_match" + "'", str9, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test10601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10601");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setrewrite("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap15;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder4.getfieldsBoosts();
        java.lang.String str18 = multiMatchQueryBuilder4.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("");
        java.util.List<java.lang.String> strList21 = multiMatchQueryBuilder4.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test10602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10602");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        multiMatchQueryBuilder13.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.prefixLength((int) (short) 100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException29 = multiMatchQueryBuilder24.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder24.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder24.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder24.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = multiMatchQueryBuilder24.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField38 = type37.parseField();
        multiMatchQueryBuilder24.type = type37;
        boolean boolean40 = multiMatchQueryBuilder17.equals((java.lang.Object) multiMatchQueryBuilder24);
        java.lang.String str41 = multiMatchQueryBuilder17.analyzer;
        java.lang.Object obj42 = multiMatchQueryBuilder17.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder17.boost((float) 10);
        java.lang.String[] strArray48 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray48);
        org.elasticsearch.index.query.Operator operator50 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.operator(operator50);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder49.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap54 = multiMatchQueryBuilder53.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery55 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder53.zeroTermsQuery(zeroTermsQuery55);
        multiMatchQueryBuilder53.setanalyzer("hi!");
        multiMatchQueryBuilder53.tieBreaker = (-1.0f);
        multiMatchQueryBuilder53.prefixLength = 1;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder44.fuzziness((java.lang.Object) multiMatchQueryBuilder53);
        java.lang.String str64 = multiMatchQueryBuilder63.analyzer;
        org.elasticsearch.index.query.Operator operator65 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder63.operator(operator65);
        multiMatchQueryBuilder66.setrewrite("hi!");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(queryValidationException29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(type36);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type37.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multi_match" + "'", str41, "multi_match");
        org.junit.Assert.assertEquals("'" + obj42 + "' != '" + "multi_match" + "'", obj42, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNull(strObjectFloatHashMap54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "multi_match" + "'", str64, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
    }

    @Test
    public void test10603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10603");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Integer int15 = multiMatchQueryBuilder14.getprefixLength();
        java.lang.Object obj16 = null;
        boolean boolean17 = multiMatchQueryBuilder14.equals(obj16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}", (float) (byte) 100);
        multiMatchQueryBuilder14.slop = 32;
        java.util.List<java.lang.String> strList23 = multiMatchQueryBuilder14.getfields();
        org.elasticsearch.common.io.stream.StreamInput streamInput24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder14.readFrom(streamInput24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strList23);
    }

    @Test
    public void test10604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10604");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        java.lang.Object obj11 = multiMatchQueryBuilder10.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Object obj14 = null;
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        java.lang.Boolean boolean22 = multiMatchQueryBuilder19.getlenient();
        multiMatchQueryBuilder19.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder19.tieBreaker((float) (-1));
        multiMatchQueryBuilder19.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder19.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type33 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.common.ParseField parseField34 = type33.parseField();
        org.elasticsearch.common.ParseField parseField35 = type33.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.type(type33);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.zeroTermsQuery(zeroTermsQuery37);
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException48 = multiMatchQueryBuilder43.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder43.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder43.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder43.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness55 = multiMatchQueryBuilder43.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder43.slop((int) (short) 0);
        multiMatchQueryBuilder43.setslop((java.lang.Integer) 100);
        java.lang.Boolean boolean60 = multiMatchQueryBuilder43.getuseDisMax();
        java.lang.String str61 = multiMatchQueryBuilder43.fuzzyRewrite;
        java.lang.String[] strArray66 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray66);
        java.lang.String[] strArray72 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray66, strArray72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str61, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder38, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj14, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type79 = multiMatchQueryBuilder78.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder78.boost((float) 0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "multi_match" + "'", obj11, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type33.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(parseField34);
        org.junit.Assert.assertNotNull(parseField35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(queryValidationException48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(fuzziness55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNull(boolean60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNull(type79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
    }

    @Test
    public void test10605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10605");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str20 = multiMatchQueryBuilder19.rewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder19.gettype();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type21.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
    }

    @Test
    public void test10606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10606");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        java.lang.Object obj5 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder4.tieBreaker((float) (byte) 10);
        java.lang.String str8 = multiMatchQueryBuilder7.getName();
        multiMatchQueryBuilder7.setuseDisMax((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + "multi_match" + "'", obj5, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "multi_match" + "'", str8, "multi_match");
    }

    @Test
    public void test10607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10607");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        java.lang.Float float13 = multiMatchQueryBuilder4.getcutoffFrequency();
        multiMatchQueryBuilder4.prefixLength = 100;
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.cutoffFrequency((float) 1L);
        java.lang.Integer int20 = multiMatchQueryBuilder4.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(int20);
    }

    @Test
    public void test10608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10608");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.Object obj17 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.tieBreaker = (-1.0f);
        java.lang.Integer int20 = multiMatchQueryBuilder4.getmaxExpansions();
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap30 = multiMatchQueryBuilder29.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder29.zeroTermsQuery(zeroTermsQuery31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder29.lenient(false);
        java.lang.Object obj35 = multiMatchQueryBuilder34.gettext();
        java.lang.Integer int36 = multiMatchQueryBuilder34.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.type((java.lang.Object) int36);
        java.lang.Integer int38 = multiMatchQueryBuilder4.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(strObjectFloatHashMap30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + "multi_match" + "'", obj35, "multi_match");
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(int38);
    }

    @Test
    public void test10609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10609");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        java.lang.String str14 = multiMatchQueryBuilder4.getrewrite();
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.prefixLength((int) ' ');
        java.lang.Boolean boolean19 = multiMatchQueryBuilder18.getuseDisMax();
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException29 = multiMatchQueryBuilder24.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder24.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder24.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder24.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.useDisMax(false);
        boolean boolean38 = multiMatchQueryBuilder18.equals((java.lang.Object) multiMatchQueryBuilder35);
        java.lang.Object obj39 = multiMatchQueryBuilder35.text;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(queryValidationException29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + obj39 + "' != '" + "multi_match" + "'", obj39, "multi_match");
    }

    @Test
    public void test10610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10610");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        java.lang.Object obj5 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder4.tieBreaker((float) (byte) 10);
        java.lang.String[] strArray11 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray11);
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException17 = multiMatchQueryBuilder12.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder12.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap20 = multiMatchQueryBuilder19.getfieldsBoosts();
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        java.lang.String str28 = multiMatchQueryBuilder25.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness29 = multiMatchQueryBuilder25.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder25.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type32 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder25.settype(type32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder19.type(type32);
        org.elasticsearch.index.search.MatchQuery.Type type35 = type32.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type36 = type32.matchQueryType();
        float float37 = type32.tieBreaker();
        org.elasticsearch.common.ParseField parseField38 = type32.parseField();
        multiMatchQueryBuilder7.type = type32;
        org.elasticsearch.common.ParseField parseField40 = type32.parseField();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + "multi_match" + "'", obj5, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(queryValidationException17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(strObjectFloatHashMap20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "multi_match" + "'", str28, "multi_match");
        org.junit.Assert.assertNull(fuzziness29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type32.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type35.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type36.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 1.0f + "'", float37 == 1.0f);
        org.junit.Assert.assertNotNull(parseField38);
        org.junit.Assert.assertNotNull(parseField40);
    }

    @Test
    public void test10611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10611");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int17 = multiMatchQueryBuilder16.prefixLength;
        java.lang.String str18 = multiMatchQueryBuilder16.queryName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test10612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10612");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        java.lang.String str13 = multiMatchQueryBuilder4.getName();
        multiMatchQueryBuilder4.prefixLength = 10;
        multiMatchQueryBuilder4.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = multiMatchQueryBuilder4.gettype();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNull(type18);
    }

    @Test
    public void test10613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10613");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder8.type = type18;
        java.lang.Integer int20 = multiMatchQueryBuilder8.getslop();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder8.getzeroTermsQuery();
        java.lang.String str22 = multiMatchQueryBuilder8.getminimumShouldMatch();
        java.util.List<java.lang.String> strList23 = multiMatchQueryBuilder8.fields;
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type33 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type34 = type33.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder30.type(type33);
        org.elasticsearch.common.ParseField parseField36 = type33.parseField();
        java.lang.String[] strArray41 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray41);
        java.lang.String[] strArray47 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray41, strArray47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) parseField36, strArray47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strList23, strArray47);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder52 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params53 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder54 = multiMatchQueryBuilder51.toXContent(xContentBuilder52, params53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type33.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type34.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(parseField36);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(params53);
    }

    @Test
    public void test10614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10614");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        float float15 = multiMatchQueryBuilder14.boost();
        java.lang.Float float16 = multiMatchQueryBuilder14.cutoffFrequency;
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.lenient(false);
        java.lang.Integer int26 = multiMatchQueryBuilder25.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder25.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap29 = null;
        multiMatchQueryBuilder28.setfieldsBoosts(strObjectFloatHashMap29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder14.type((java.lang.Object) strObjectFloatHashMap29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery34 = null;
        multiMatchQueryBuilder14.zeroTermsQuery = zeroTermsQuery34;
        multiMatchQueryBuilder14.rewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder14.slop = 32;
        java.lang.Integer int40 = multiMatchQueryBuilder14.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(int40);
    }

    @Test
    public void test10615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10615");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery17;
        java.util.List<java.lang.String> strList19 = multiMatchQueryBuilder4.fields;
        java.lang.Integer int20 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.common.xcontent.XContentType xContentType21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference22 = multiMatchQueryBuilder4.buildAsBytes(xContentType21);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNull(int20);
    }

    @Test
    public void test10616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10616");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder4.toString();
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap25 = multiMatchQueryBuilder24.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder24.lenient(false);
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery32);
        multiMatchQueryBuilder24.tieBreaker = 10.0f;
        java.util.List<java.lang.String> strList36 = multiMatchQueryBuilder24.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        java.lang.String str38 = multiMatchQueryBuilder24.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder24.maxExpansions(0);
        java.lang.String str41 = multiMatchQueryBuilder40.getNAME();
        org.elasticsearch.common.unit.Fuzziness fuzziness42 = multiMatchQueryBuilder40.fuzziness;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(strObjectFloatHashMap25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multi_match" + "'", str41, "multi_match");
        org.junit.Assert.assertNull(fuzziness42);
    }

    @Test
    public void test10617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10617");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setrewrite("");
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.String str16 = multiMatchQueryBuilder4.getName();
        java.lang.String str17 = multiMatchQueryBuilder4.analyzer;
        org.elasticsearch.common.io.stream.StreamOutput streamOutput18 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder4.writeTo(streamOutput18);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "multi_match" + "'", str16, "multi_match");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test10618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10618");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.minimumShouldMatch("");
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) (-1));
        java.lang.String str14 = multiMatchQueryBuilder4.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder4.getfuzziness();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(fuzziness15);
    }

    @Test
    public void test10619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10619");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.Integer int17 = multiMatchQueryBuilder16.getmaxExpansions();
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = null;
        multiMatchQueryBuilder16.setfuzziness(fuzziness18);
        multiMatchQueryBuilder16.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str22 = multiMatchQueryBuilder16.getWriteableName();
        multiMatchQueryBuilder16.settieBreaker((java.lang.Float) 0.0f);
        java.lang.Integer int25 = multiMatchQueryBuilder16.slop;
        java.lang.Class<?> wildcardClass26 = multiMatchQueryBuilder16.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test10620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10620");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder19.setmaxExpansions((java.lang.Integer) 35);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test10621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10621");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.getPROTOTYPE();
        multiMatchQueryBuilder14.settieBreaker((java.lang.Float) 0.0f);
        multiMatchQueryBuilder14.lenient = false;
        org.elasticsearch.index.query.Operator operator19 = null;
        multiMatchQueryBuilder14.operator = operator19;
        multiMatchQueryBuilder14.cutoffFrequency = 1.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder14.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"slop\" : 10,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray28 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray28);
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.operator(operator30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder29.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException34 = multiMatchQueryBuilder29.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder29.cutoffFrequency((float) (byte) 100);
        java.lang.String str37 = multiMatchQueryBuilder29.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder29.zeroTermsQuery(zeroTermsQuery38);
        multiMatchQueryBuilder29.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.String[] strArray45 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray45);
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.operator(operator47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder46.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean53 = multiMatchQueryBuilder50.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder50.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator58 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder55.operator(operator58);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery60 = null;
        multiMatchQueryBuilder59.setzeroTermsQuery(zeroTermsQuery60);
        org.elasticsearch.common.unit.Fuzziness fuzziness62 = multiMatchQueryBuilder59.fuzziness;
        multiMatchQueryBuilder29.setfuzziness(fuzziness62);
        multiMatchQueryBuilder24.setfuzziness(fuzziness62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder24.useDisMax(false);
        multiMatchQueryBuilder66.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery69 = multiMatchQueryBuilder66.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(queryValidationException34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(boolean53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(fuzziness62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNull(zeroTermsQuery69);
    }

    @Test
    public void test10622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10622");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.String str9 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str12 = multiMatchQueryBuilder4.getfuzzyRewrite();
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        java.lang.String str22 = multiMatchQueryBuilder21.getminimumShouldMatch();
        org.elasticsearch.index.query.QueryValidationException queryValidationException23 = multiMatchQueryBuilder21.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator27 = null;
        multiMatchQueryBuilder26.operator = operator27;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multi_match" + "'", str9, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(queryValidationException23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test10623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10623");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        multiMatchQueryBuilder12.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float15 = multiMatchQueryBuilder12.gettieBreaker();
        java.lang.String str16 = multiMatchQueryBuilder12.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = multiMatchQueryBuilder12.type;
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.zeroTermsQuery(zeroTermsQuery30);
        multiMatchQueryBuilder31.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray39 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray39);
        org.elasticsearch.index.query.Operator operator41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.operator(operator41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException45 = multiMatchQueryBuilder40.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder40.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder40.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder40.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness52 = multiMatchQueryBuilder40.getfuzziness();
        java.lang.Object obj53 = multiMatchQueryBuilder40.text;
        java.lang.String str54 = multiMatchQueryBuilder40.minimumShouldMatch;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery55 = null;
        multiMatchQueryBuilder40.setzeroTermsQuery(zeroTermsQuery55);
        java.lang.String[] strArray60 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray60);
        org.elasticsearch.index.query.Operator operator62 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder61.operator(operator62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder61.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException66 = multiMatchQueryBuilder61.validate();
        java.lang.Integer int67 = multiMatchQueryBuilder61.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery68 = multiMatchQueryBuilder61.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder61.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder61.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder61.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder61.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean78 = multiMatchQueryBuilder77.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder77.boost((float) 1);
        java.lang.Boolean boolean81 = multiMatchQueryBuilder80.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type82 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type83 = type82.matchQueryType();
        float float84 = type82.tieBreaker();
        float float85 = type82.tieBreaker();
        float float86 = type82.tieBreaker();
        org.elasticsearch.common.ParseField parseField87 = type82.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = multiMatchQueryBuilder80.type(type82);
        float float89 = type82.tieBreaker();
        multiMatchQueryBuilder40.settype(type82);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = multiMatchQueryBuilder31.type(type82);
        org.elasticsearch.common.ParseField parseField92 = type82.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = multiMatchQueryBuilder12.type(type82);
        org.elasticsearch.index.query.Operator operator94 = null;
        multiMatchQueryBuilder12.setoperator(operator94);
        java.lang.Boolean boolean96 = multiMatchQueryBuilder12.lenient;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}" + "'", str16, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(type17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(queryValidationException45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(fuzziness52);
        org.junit.Assert.assertEquals("'" + obj53 + "' != '" + "multi_match" + "'", obj53, "multi_match");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNull(queryValidationException66);
        org.junit.Assert.assertNull(int67);
        org.junit.Assert.assertNull(zeroTermsQuery68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNull(boolean78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNull(boolean81);
        org.junit.Assert.assertTrue("'" + type82 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type82.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type83 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type83.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + 0.0f + "'", float84 == 0.0f);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + 0.0f + "'", float85 == 0.0f);
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + 0.0f + "'", float86 == 0.0f);
        org.junit.Assert.assertNotNull(parseField87);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder88);
        org.junit.Assert.assertTrue("'" + float89 + "' != '" + 0.0f + "'", float89 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder91);
        org.junit.Assert.assertNotNull(parseField92);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder93);
        org.junit.Assert.assertEquals("'" + boolean96 + "' != '" + true + "'", boolean96, true);
    }

    @Test
    public void test10624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10624");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float12 = multiMatchQueryBuilder8.gettieBreaker();
        multiMatchQueryBuilder8.rewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder8.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzziness\" : \"10\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str17 = multiMatchQueryBuilder8.getanalyzer();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str17, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test10625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10625");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.maxExpansions((int) (short) 10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder12.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.slop(10);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test10626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10626");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = multiMatchQueryBuilder4.getzeroTermsQuery();
        java.lang.Object obj11 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder13.prefixLength = (-1);
        java.lang.String str16 = multiMatchQueryBuilder13.getrewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(zeroTermsQuery10);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "multi_match" + "'", obj11, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test10627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10627");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder4.fields;
        java.lang.Boolean boolean21 = multiMatchQueryBuilder4.useDisMax;
        multiMatchQueryBuilder4.tieBreaker = 0.0f;
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type33 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type34 = type33.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder30.type(type33);
        multiMatchQueryBuilder35.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder35.tieBreaker((float) 10L);
        java.util.List<java.lang.String> strList40 = multiMatchQueryBuilder39.getfields();
        multiMatchQueryBuilder39.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        boolean boolean43 = multiMatchQueryBuilder4.equals((java.lang.Object) multiMatchQueryBuilder39);
        java.lang.Boolean boolean44 = multiMatchQueryBuilder4.useDisMax;
        java.lang.Boolean boolean45 = multiMatchQueryBuilder4.getlenient();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type33.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type34.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertNull(boolean45);
    }

    @Test
    public void test10628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10628");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        multiMatchQueryBuilder11.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder11.zeroTermsQuery;
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder11.getfuzziness();
        java.lang.String str16 = multiMatchQueryBuilder11.queryName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNull(fuzziness15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test10629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10629");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder4.fields;
        java.lang.Boolean boolean21 = multiMatchQueryBuilder4.useDisMax;
        java.lang.String[] strArray25 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray25);
        org.elasticsearch.index.query.Operator operator27 = null;
        multiMatchQueryBuilder26.operator = operator27;
        org.elasticsearch.common.unit.Fuzziness fuzziness29 = multiMatchQueryBuilder26.getfuzziness();
        multiMatchQueryBuilder26.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder26.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap35 = null;
        multiMatchQueryBuilder26.fieldsBoosts = strObjectFloatHashMap35;
        multiMatchQueryBuilder26.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder26.zeroTermsQuery(zeroTermsQuery39);
        org.elasticsearch.common.unit.Fuzziness fuzziness41 = null;
        multiMatchQueryBuilder40.fuzziness = fuzziness41;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.zeroTermsQuery(zeroTermsQuery43);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery45 = multiMatchQueryBuilder40.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder4.type((java.lang.Object) zeroTermsQuery45);
        java.lang.Integer int47 = multiMatchQueryBuilder46.getmaxExpansions();
        multiMatchQueryBuilder46.lenient = true;
        multiMatchQueryBuilder46.tieBreaker = 52.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder46.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.tieBreaker((float) '#');
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNull(fuzziness29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(zeroTermsQuery45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
    }

    @Test
    public void test10630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10630");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        float float15 = multiMatchQueryBuilder14.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.maxExpansions((int) (byte) 10);
        java.lang.Boolean boolean18 = multiMatchQueryBuilder14.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzziness\" : \"FALSE\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 0.0\n  }\n}", (float) (byte) 1);
        java.lang.String str22 = multiMatchQueryBuilder21.queryName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test10631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10631");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        java.lang.String str13 = multiMatchQueryBuilder4.getfuzzyRewrite();
        java.util.List<java.lang.String> strList14 = multiMatchQueryBuilder4.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test10632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10632");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = multiMatchQueryBuilder4.type;
        java.lang.Boolean boolean13 = multiMatchQueryBuilder4.getlenient();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(type12);
        org.junit.Assert.assertNull(boolean13);
    }

    @Test
    public void test10633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10633");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = null;
        multiMatchQueryBuilder13.fuzziness = fuzziness16;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.rewrite("");
        multiMatchQueryBuilder19.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness22 = multiMatchQueryBuilder19.getfuzziness();
        multiMatchQueryBuilder19.setprefixLength((java.lang.Integer) 97);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap25 = multiMatchQueryBuilder19.getfieldsBoosts();
        java.lang.Class<?> wildcardClass26 = multiMatchQueryBuilder19.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(fuzziness22);
        org.junit.Assert.assertNull(strObjectFloatHashMap25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test10634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10634");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.prefixLength = 10;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.setfieldsBoosts(strObjectFloatHashMap13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("", (float) (byte) 100);
        java.lang.String str18 = multiMatchQueryBuilder17.getminimumShouldMatch();
        org.elasticsearch.index.query.Operator operator19 = multiMatchQueryBuilder17.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.boost((float) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.fuzzyRewrite("multi_match");
        java.lang.Object obj24 = multiMatchQueryBuilder23.gettext();
        java.lang.String str25 = multiMatchQueryBuilder23.getWriteableName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(operator19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + "multi_match" + "'", obj24, "multi_match");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "multi_match" + "'", str25, "multi_match");
    }

    @Test
    public void test10635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10635");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("hi!", (float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"Name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("");
        multiMatchQueryBuilder4.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"useDisMax\" : false,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test10636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10636");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.common.unit.Fuzziness fuzziness10 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness10;
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float14 = type13.tieBreaker();
        org.elasticsearch.common.ParseField parseField15 = type13.parseField();
        float float16 = type13.tieBreaker();
        multiMatchQueryBuilder4.settype(type13);
        org.elasticsearch.index.search.MatchQuery.Type type18 = type13.matchQueryType();
        float float19 = type13.tieBreaker();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(parseField15);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.0f + "'", float16 == 0.0f);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type18.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
    }

    @Test
    public void test10637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10637");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.prefixLength((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type14 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.common.ParseField parseField15 = type14.parseField();
        org.elasticsearch.common.ParseField parseField16 = type14.parseField();
        multiMatchQueryBuilder13.settype(type14);
        java.lang.String str18 = multiMatchQueryBuilder13.rewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder13.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder20.rewrite;
        org.elasticsearch.common.io.stream.StreamOutput streamOutput22 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder20.writeTo(streamOutput22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type14.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(parseField15);
        org.junit.Assert.assertNotNull(parseField16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test10638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10638");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.common.unit.Fuzziness fuzziness9 = multiMatchQueryBuilder8.fuzziness;
        java.util.List<java.lang.String> strList10 = multiMatchQueryBuilder8.getfields();
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 10);
        multiMatchQueryBuilder8.lenient = false;
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder8.fields;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(fuzziness9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNull(zeroTermsQuery16);
    }

    @Test
    public void test10639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10639");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException20 = multiMatchQueryBuilder19.validate();
        java.lang.Float float21 = multiMatchQueryBuilder19.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        java.lang.Boolean boolean31 = multiMatchQueryBuilder28.getlenient();
        multiMatchQueryBuilder28.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder28.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness36 = multiMatchQueryBuilder35.fuzziness;
        multiMatchQueryBuilder35.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder35.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery41 = multiMatchQueryBuilder40.zeroTermsQuery;
        java.lang.String[] strArray45 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray45);
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.operator(operator47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder46.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException51 = multiMatchQueryBuilder46.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder46.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap54 = multiMatchQueryBuilder53.getfieldsBoosts();
        java.lang.String[] strArray58 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray58);
        org.elasticsearch.index.query.Operator operator60 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder59.operator(operator60);
        java.lang.String str62 = multiMatchQueryBuilder59.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness63 = multiMatchQueryBuilder59.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder59.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type66 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder59.settype(type66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder53.type(type66);
        org.elasticsearch.index.search.MatchQuery.Type type69 = type66.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type70 = type66.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder40.type(type66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder71.lenient(true);
        multiMatchQueryBuilder71.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"slop\" : 0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder71.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder23.fuzziness((java.lang.Object) multiMatchQueryBuilder77);
        java.lang.String[] strArray82 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray82);
        org.elasticsearch.index.query.Operator operator84 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder83.operator(operator84);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder83.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException88 = multiMatchQueryBuilder83.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = multiMatchQueryBuilder83.cutoffFrequency((float) (byte) 100);
        float float91 = multiMatchQueryBuilder83.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type92 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type93 = type92.matchQueryType();
        multiMatchQueryBuilder83.settype(type92);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder95 = multiMatchQueryBuilder23.type(type92);
        multiMatchQueryBuilder95.rewrite = "";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(queryValidationException20);
        org.junit.Assert.assertNull(float21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(boolean31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(fuzziness36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(zeroTermsQuery41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(queryValidationException51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNull(strObjectFloatHashMap54);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "multi_match" + "'", str62, "multi_match");
        org.junit.Assert.assertNull(fuzziness63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertTrue("'" + type66 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type66.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertTrue("'" + type69 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type69.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type70 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type70.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertNull(queryValidationException88);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder90);
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + 1.0f + "'", float91 == 1.0f);
        org.junit.Assert.assertTrue("'" + type92 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type92.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type93 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type93.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder95);
    }

    @Test
    public void test10640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10640");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        java.lang.Integer int13 = multiMatchQueryBuilder11.slop;
        multiMatchQueryBuilder11.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.prefixLength((int) (short) 1);
        java.lang.String str18 = multiMatchQueryBuilder17.getminimumShouldMatch();
        java.lang.String str19 = multiMatchQueryBuilder17.getrewrite();
        java.lang.String str20 = multiMatchQueryBuilder17.getfuzzyRewrite();
        java.lang.Boolean boolean21 = multiMatchQueryBuilder17.getuseDisMax();
        multiMatchQueryBuilder17.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : 10,\n    \"maxExpansions\" : -1,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String str24 = multiMatchQueryBuilder17.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
    }

    @Test
    public void test10641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10641");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) false);
        multiMatchQueryBuilder4.minimumShouldMatch = "";
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.elasticsearch.index.query.Operator operator20 = null;
        multiMatchQueryBuilder17.operator = operator20;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.fuzzyRewrite("multi_match");
        multiMatchQueryBuilder23.tieBreaker = 0.0f;
        java.lang.String str26 = multiMatchQueryBuilder23.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder4.type((java.lang.Object) str26);
        java.lang.String str28 = multiMatchQueryBuilder27.fuzzyRewrite;
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder27.operator = operator29;
        java.lang.Float float31 = multiMatchQueryBuilder27.tieBreaker;
        multiMatchQueryBuilder27.setmaxExpansions((java.lang.Integer) 10);
        multiMatchQueryBuilder27.setmaxExpansions((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder27.lenient(true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(float31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
    }

    @Test
    public void test10642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10642");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.operator(operator15);
        java.lang.String str17 = multiMatchQueryBuilder14.analyzer;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test10643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10643");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        java.lang.String str14 = multiMatchQueryBuilder12.getfuzzyRewrite();
        java.lang.Object obj15 = multiMatchQueryBuilder12.gettext();
        org.elasticsearch.index.query.QueryValidationException queryValidationException16 = multiMatchQueryBuilder12.validate();
        org.elasticsearch.index.query.QueryShardContext queryShardContext17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query18 = multiMatchQueryBuilder12.toFilter(queryShardContext17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "multi_match" + "'", obj15, "multi_match");
        org.junit.Assert.assertNull(queryValidationException16);
    }

    @Test
    public void test10644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10644");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        multiMatchQueryBuilder16.setzeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator23 = multiMatchQueryBuilder22.getoperator();
        java.lang.Object obj24 = multiMatchQueryBuilder22.text;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(operator23);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + "multi_match" + "'", obj24, "multi_match");
    }

    @Test
    public void test10645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10645");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.slop((int) (short) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder23.getPROTOTYPE();
        multiMatchQueryBuilder23.useDisMax = false;
        java.lang.String str27 = multiMatchQueryBuilder23.getNAME();
        java.lang.String str28 = multiMatchQueryBuilder23.getrewrite();
        multiMatchQueryBuilder23.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"slop\" : 0,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "multi_match" + "'", str27, "multi_match");
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test10646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10646");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) 1.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = null;
        multiMatchQueryBuilder8.fuzziness = fuzziness16;
        java.lang.Object obj18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.type(obj18);
        multiMatchQueryBuilder19.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder19.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"\"\n  }\n}");
        multiMatchQueryBuilder25.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder25.useDisMax = true;
        multiMatchQueryBuilder25.tieBreaker = 10.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test10647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10647");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.queryName("");
        multiMatchQueryBuilder4.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}";
        float float20 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.slop((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.getPROTOTYPE();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 1.0f + "'", float20 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test10648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10648");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.QueryValidationException queryValidationException12 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.maxExpansions(1);
        java.lang.String str15 = multiMatchQueryBuilder14.getrewrite();
        java.lang.String str16 = multiMatchQueryBuilder14.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.lenient(false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNull(queryValidationException12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test10649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10649");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder16.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder16.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str24 = multiMatchQueryBuilder23.getWriteableName();
        java.lang.String[] strArray28 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray28);
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.operator(operator30);
        java.lang.String str32 = multiMatchQueryBuilder31.getminimumShouldMatch();
        boolean boolean33 = multiMatchQueryBuilder23.equals((java.lang.Object) str32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder23.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\" ],\\n    \\\"boost\\\" : 0.0,\\n    \\\"Name\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : \\\\\\\"multi_match\\\\\\\",\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"multi_match\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"minimum_should_match\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"lenient\\\\\\\" : true,\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\"\\n  }\\n}\"\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = null;
        multiMatchQueryBuilder36.zeroTermsQuery = zeroTermsQuery37;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
    }

    @Test
    public void test10650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10650");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.Operator operator20 = multiMatchQueryBuilder19.getoperator();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder19.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.maxExpansions(0);
        java.lang.Boolean boolean24 = multiMatchQueryBuilder23.lenient;
        org.elasticsearch.index.query.Operator operator25 = null;
        multiMatchQueryBuilder23.operator = operator25;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(operator20);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + boolean24 + "' != '" + false + "'", boolean24, false);
    }

    @Test
    public void test10651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10651");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.getPROTOTYPE();
        multiMatchQueryBuilder14.settieBreaker((java.lang.Float) 0.0f);
        multiMatchQueryBuilder14.lenient = false;
        org.elasticsearch.index.query.Operator operator19 = null;
        multiMatchQueryBuilder14.operator = operator19;
        multiMatchQueryBuilder14.cutoffFrequency = 1.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder14.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"slop\" : 10,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params26 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder24.doXContent(xContentBuilder25, params26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(params26);
    }

    @Test
    public void test10652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10652");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str12 = multiMatchQueryBuilder8.minimumShouldMatch;
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException22 = multiMatchQueryBuilder17.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.cutoffFrequency((float) (byte) 100);
        java.lang.String str25 = multiMatchQueryBuilder17.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder17.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness28 = multiMatchQueryBuilder17.getfuzziness();
        org.elasticsearch.common.unit.Fuzziness fuzziness29 = null;
        multiMatchQueryBuilder17.fuzziness = fuzziness29;
        java.lang.Integer int31 = multiMatchQueryBuilder17.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = multiMatchQueryBuilder17.zeroTermsQuery;
        boolean boolean33 = multiMatchQueryBuilder8.equals((java.lang.Object) zeroTermsQuery32);
        java.lang.String[] strArray38 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray38);
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray38, strArray44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean33, strArray38);
        java.lang.Float float48 = multiMatchQueryBuilder47.gettieBreaker();
        float float49 = multiMatchQueryBuilder47.boost();
        org.elasticsearch.index.query.Operator operator50 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder47.operator(operator50);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(queryValidationException22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(fuzziness28);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(zeroTermsQuery32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNull(float48);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + 1.0f + "'", float49 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
    }

    @Test
    public void test10653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10653");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 1,\n    \"maxExpansions\" : 100,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray30 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray30);
        org.elasticsearch.index.query.Operator operator32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.operator(operator32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap36 = multiMatchQueryBuilder35.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder35.zeroTermsQuery(zeroTermsQuery37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder35.lenient(false);
        java.lang.Object obj41 = multiMatchQueryBuilder40.gettext();
        java.lang.Integer int42 = multiMatchQueryBuilder40.getslop();
        multiMatchQueryBuilder40.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder40.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder40.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder40.prefixLength((int) '#');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery51 = multiMatchQueryBuilder50.getzeroTermsQuery();
        boolean boolean52 = multiMatchQueryBuilder24.equals((java.lang.Object) multiMatchQueryBuilder50);
        java.lang.Boolean boolean53 = multiMatchQueryBuilder24.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder24.slop(1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(strObjectFloatHashMap36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertEquals("'" + obj41 + "' != '" + "multi_match" + "'", obj41, "multi_match");
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(zeroTermsQuery51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(boolean53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
    }

    @Test
    public void test10654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10654");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.useDisMax(true);
        multiMatchQueryBuilder4.tieBreaker = 52.0f;
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        java.lang.Boolean boolean31 = multiMatchQueryBuilder28.getlenient();
        multiMatchQueryBuilder28.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder28.cutoffFrequency(0.0f);
        java.lang.String str36 = multiMatchQueryBuilder35.minimumShouldMatch;
        java.lang.String str37 = multiMatchQueryBuilder35.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder35.tieBreaker((float) (byte) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder35.cutoffFrequency((-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder35.boost((float) 10L);
        java.lang.Boolean boolean44 = multiMatchQueryBuilder35.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder4.type((java.lang.Object) boolean44);
        java.lang.String str46 = multiMatchQueryBuilder45.getName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(boolean31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "multi_match" + "'", str46, "multi_match");
    }

    @Test
    public void test10655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10655");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.operator(operator16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.rewrite("hi!");
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder19.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder19.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float23 = multiMatchQueryBuilder19.cutoffFrequency;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(float23);
    }

    @Test
    public void test10656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10656");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("");
        java.lang.String str26 = multiMatchQueryBuilder21.getrewrite();
        java.lang.Object obj27 = multiMatchQueryBuilder21.text;
        float float28 = multiMatchQueryBuilder21.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder21.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float31 = multiMatchQueryBuilder21.gettieBreaker();
        java.lang.String[] strArray35 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray35);
        org.elasticsearch.index.query.Operator operator37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.operator(operator37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder36.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException41 = multiMatchQueryBuilder36.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder36.cutoffFrequency((float) (byte) 100);
        float float44 = multiMatchQueryBuilder36.boost();
        multiMatchQueryBuilder36.setanalyzer("");
        java.lang.Boolean boolean47 = multiMatchQueryBuilder36.getuseDisMax();
        java.lang.String str48 = multiMatchQueryBuilder36.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder36.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray54 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray54);
        org.elasticsearch.index.query.Operator operator56 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.operator(operator56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder55.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder59.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder59.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness64 = multiMatchQueryBuilder59.getfuzziness();
        multiMatchQueryBuilder50.fuzziness = fuzziness64;
        multiMatchQueryBuilder21.setfuzziness(fuzziness64);
        multiMatchQueryBuilder16.fuzziness = fuzziness64;
        org.elasticsearch.index.query.Operator operator68 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder16.operator(operator68);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery70 = multiMatchQueryBuilder69.zeroTermsQuery;
        org.elasticsearch.common.unit.Fuzziness fuzziness71 = multiMatchQueryBuilder69.getfuzziness();
        java.lang.String[] strArray75 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray75);
        org.elasticsearch.index.query.Operator operator77 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder76.operator(operator77);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder76.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException81 = multiMatchQueryBuilder76.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder76.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery84 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder83.zeroTermsQuery(zeroTermsQuery84);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder83.maxExpansions((-1));
        org.elasticsearch.common.unit.Fuzziness fuzziness88 = multiMatchQueryBuilder83.fuzziness;
        multiMatchQueryBuilder83.cutoffFrequency = 0.0f;
        java.util.List<java.lang.String> strList91 = multiMatchQueryBuilder83.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = multiMatchQueryBuilder69.fuzziness((java.lang.Object) strList91);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery93 = null;
        multiMatchQueryBuilder92.setzeroTermsQuery(zeroTermsQuery93);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + "multi_match" + "'", obj27, "multi_match");
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 1.0f + "'", float28 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(float31);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(queryValidationException41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 1.0f + "'", float44 == 1.0f);
        org.junit.Assert.assertNull(boolean47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(fuzziness64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNull(zeroTermsQuery70);
        org.junit.Assert.assertNotNull(fuzziness71);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNull(queryValidationException81);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertNull(fuzziness88);
        org.junit.Assert.assertNotNull(strList91);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder92);
    }

    @Test
    public void test10657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10657");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder8.type = type18;
        java.lang.Integer int20 = multiMatchQueryBuilder8.getslop();
        java.lang.String str21 = multiMatchQueryBuilder8.fuzzyRewrite;
        java.lang.Integer int22 = multiMatchQueryBuilder8.getprefixLength();
        multiMatchQueryBuilder8.setanalyzer("");
        multiMatchQueryBuilder8.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 97,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"lenient\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}";
        java.lang.String[] strArray30 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray30);
        org.elasticsearch.index.query.Operator operator32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.operator(operator32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException36 = multiMatchQueryBuilder31.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder31.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder31.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder31.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder42.field("hi!", (float) 'a');
        java.lang.String str46 = multiMatchQueryBuilder42.getanalyzer();
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder42.operator(operator47);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap49 = multiMatchQueryBuilder48.getfieldsBoosts();
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap49;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(queryValidationException36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap49);
    }

    @Test
    public void test10658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10658");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        multiMatchQueryBuilder11.prefixLength = 100;
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("");
        multiMatchQueryBuilder21.minimumShouldMatch = "hi!";
        java.lang.Float float28 = multiMatchQueryBuilder21.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type29 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type30 = type29.matchQueryType();
        float float31 = type29.tieBreaker();
        multiMatchQueryBuilder21.type = type29;
        multiMatchQueryBuilder21.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder21.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str37 = multiMatchQueryBuilder36.rewrite;
        java.lang.String[] strArray41 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray41);
        org.elasticsearch.index.query.Operator operator43 = null;
        multiMatchQueryBuilder42.operator = operator43;
        org.elasticsearch.common.unit.Fuzziness fuzziness45 = multiMatchQueryBuilder42.getfuzziness();
        multiMatchQueryBuilder42.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.Operator operator48 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder42.operator(operator48);
        java.lang.String[] strArray53 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray53);
        org.elasticsearch.index.query.Operator operator55 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.operator(operator55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder54.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException59 = multiMatchQueryBuilder54.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder54.cutoffFrequency((float) (byte) 100);
        float float62 = multiMatchQueryBuilder54.boost();
        multiMatchQueryBuilder54.setanalyzer("");
        java.lang.Boolean boolean65 = multiMatchQueryBuilder54.getuseDisMax();
        java.lang.String str66 = multiMatchQueryBuilder54.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder54.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray72 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray72);
        org.elasticsearch.index.query.Operator operator74 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder73.operator(operator74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder73.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder77.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder77.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness82 = multiMatchQueryBuilder77.getfuzziness();
        multiMatchQueryBuilder68.fuzziness = fuzziness82;
        multiMatchQueryBuilder42.fuzziness = fuzziness82;
        multiMatchQueryBuilder36.setfuzziness(fuzziness82);
        multiMatchQueryBuilder11.setfuzziness(fuzziness82);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery87 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery87);
        java.lang.Boolean boolean89 = multiMatchQueryBuilder11.getlenient();
        java.lang.String str90 = multiMatchQueryBuilder11.getanalyzer();
        org.elasticsearch.index.query.Operator operator91 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = multiMatchQueryBuilder11.operator(operator91);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder94 = multiMatchQueryBuilder92.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"\\\"\\n  }\\n}\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap95 = multiMatchQueryBuilder92.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(float28);
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type29.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type30.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 0.0f + "'", float31 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNull(fuzziness45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNull(queryValidationException59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + 1.0f + "'", float62 == 1.0f);
        org.junit.Assert.assertNull(boolean65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(fuzziness82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder88);
        org.junit.Assert.assertNull(boolean89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}" + "'", str90, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder92);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder94);
        org.junit.Assert.assertNull(strObjectFloatHashMap95);
    }

    @Test
    public void test10659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10659");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        java.lang.Integer int13 = multiMatchQueryBuilder11.slop;
        multiMatchQueryBuilder11.setfuzzyRewrite("hi!");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap16 = multiMatchQueryBuilder11.getfieldsBoosts();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder11.fieldsBoosts;
        java.lang.Class<?> wildcardClass18 = multiMatchQueryBuilder11.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(strObjectFloatHashMap16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test10660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10660");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.tieBreaker((float) (short) 0);
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) true);
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        multiMatchQueryBuilder10.slop = 10;
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = multiMatchQueryBuilder10.type;
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException28 = multiMatchQueryBuilder23.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder23.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder23.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness35 = multiMatchQueryBuilder23.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder23.slop((int) (short) 0);
        multiMatchQueryBuilder23.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray43 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray43);
        org.elasticsearch.index.query.Operator operator45 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.operator(operator45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder44.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException49 = multiMatchQueryBuilder44.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder44.cutoffFrequency((float) (byte) 100);
        float float52 = multiMatchQueryBuilder44.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type53 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type54 = type53.matchQueryType();
        multiMatchQueryBuilder44.settype(type53);
        multiMatchQueryBuilder23.type = type53;
        multiMatchQueryBuilder10.settype(type53);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(type18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(queryValidationException28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(fuzziness35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNull(queryValidationException49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + 1.0f + "'", float52 == 1.0f);
        org.junit.Assert.assertTrue("'" + type53 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type53.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type54 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type54.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test10661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10661");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str16 = multiMatchQueryBuilder4.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.queryName("");
        java.lang.String str19 = multiMatchQueryBuilder18.getanalyzer();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str19, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test10662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10662");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.lang.Integer int8 = multiMatchQueryBuilder4.getmaxExpansions();
        multiMatchQueryBuilder4.useDisMax = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.prefixLength(0);
        java.lang.Boolean boolean13 = multiMatchQueryBuilder12.getuseDisMax();
        multiMatchQueryBuilder12.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}";
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap25 = multiMatchQueryBuilder24.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder24.lenient(false);
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder33.settype(type36);
        multiMatchQueryBuilder12.settype(type36);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder12.operator(operator39);
        multiMatchQueryBuilder12.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 0,\n    \"fuzzyRewrite\" : \"\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + boolean13 + "' != '" + true + "'", boolean13, true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(strObjectFloatHashMap25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
    }

    @Test
    public void test10663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10663");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.Operator operator24 = null;
        multiMatchQueryBuilder21.operator = operator24;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder21.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = multiMatchQueryBuilder21.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type29 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        multiMatchQueryBuilder21.type = type29;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder16.type(type29);
        java.lang.String str32 = multiMatchQueryBuilder16.queryName();
        java.lang.String str33 = multiMatchQueryBuilder16.getWriteableName();
        multiMatchQueryBuilder16.setuseDisMax((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(zeroTermsQuery28);
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type29.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "multi_match" + "'", str33, "multi_match");
    }

    @Test
    public void test10664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10664");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        java.lang.String str14 = multiMatchQueryBuilder12.getfuzzyRewrite();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        multiMatchQueryBuilder19.minimumShouldMatch = "hi!";
        java.lang.Float float26 = multiMatchQueryBuilder19.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type28 = type27.matchQueryType();
        float float29 = type27.tieBreaker();
        multiMatchQueryBuilder19.type = type27;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder12.type(type27);
        multiMatchQueryBuilder31.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Object obj34 = multiMatchQueryBuilder31.text;
        java.lang.String str35 = multiMatchQueryBuilder31.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "multi_match" + "'", obj34, "multi_match");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str35, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test10665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10665");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder17.setzeroTermsQuery(zeroTermsQuery18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = multiMatchQueryBuilder17.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.String str26 = multiMatchQueryBuilder25.getminimumShouldMatch();
        multiMatchQueryBuilder25.maxExpansions = 100;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = null;
        multiMatchQueryBuilder25.zeroTermsQuery = zeroTermsQuery29;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.slop((int) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap33 = multiMatchQueryBuilder25.getfieldsBoosts();
        multiMatchQueryBuilder17.setfieldsBoosts(strObjectFloatHashMap33);
        java.lang.Boolean boolean35 = multiMatchQueryBuilder17.lenient;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(type20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"slop\" : 10,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str26, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"slop\" : 10,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
// flaky:         org.junit.Assert.assertNotNull(strObjectFloatHashMap33);
        org.junit.Assert.assertEquals("'" + boolean35 + "' != '" + false + "'", boolean35, false);
    }

    @Test
    public void test10666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10666");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder4.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        java.lang.Float float13 = multiMatchQueryBuilder4.gettieBreaker();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float13);
    }

    @Test
    public void test10667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10667");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.prefixLength((-1));
        multiMatchQueryBuilder23.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.lenient(true);
        multiMatchQueryBuilder23.setmaxExpansions((java.lang.Integer) 32);
        java.lang.Object obj30 = multiMatchQueryBuilder23.gettext();
        java.lang.String[] strArray34 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray34);
        org.elasticsearch.index.query.Operator operator36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.operator(operator36);
        org.elasticsearch.index.query.Operator operator38 = null;
        multiMatchQueryBuilder35.operator = operator38;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder35.fuzzyRewrite("multi_match");
        java.lang.Float float42 = multiMatchQueryBuilder35.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder35.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        java.lang.Integer int45 = multiMatchQueryBuilder44.slop;
        java.lang.Boolean boolean46 = multiMatchQueryBuilder44.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder44.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder44.slop(0);
        boolean boolean51 = multiMatchQueryBuilder23.equals((java.lang.Object) multiMatchQueryBuilder44);
        java.lang.Boolean boolean52 = multiMatchQueryBuilder44.getuseDisMax();
        java.lang.Class<?> wildcardClass53 = multiMatchQueryBuilder44.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertEquals("'" + obj30 + "' != '" + "multi_match" + "'", obj30, "multi_match");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(float42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNull(boolean46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(boolean52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test10668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10668");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = multiMatchQueryBuilder4.fuzziness;
        multiMatchQueryBuilder4.maxExpansions = 1;
        java.lang.String str16 = multiMatchQueryBuilder4.rewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = multiMatchQueryBuilder4.type;
        org.elasticsearch.index.query.Operator operator18 = multiMatchQueryBuilder4.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(fuzziness13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(type17);
        org.junit.Assert.assertNull(operator18);
    }

    @Test
    public void test10669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10669");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder13.setuseDisMax((java.lang.Boolean) false);
        java.lang.Integer int20 = multiMatchQueryBuilder13.getmaxExpansions();
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder13.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder13.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder23.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray29 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray29);
        org.elasticsearch.index.query.Operator operator31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.operator(operator31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder30.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException35 = multiMatchQueryBuilder30.validate();
        java.lang.Integer int36 = multiMatchQueryBuilder30.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = multiMatchQueryBuilder30.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder30.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder30.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder30.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder30.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float47 = multiMatchQueryBuilder46.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder46.rewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery50 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder46.zeroTermsQuery(zeroTermsQuery50);
        java.lang.String[] strArray55 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray55);
        org.elasticsearch.index.query.Operator operator57 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.operator(operator57);
        java.lang.Boolean boolean59 = multiMatchQueryBuilder56.getlenient();
        multiMatchQueryBuilder56.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder56.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness64 = multiMatchQueryBuilder63.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder63.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.Integer int67 = multiMatchQueryBuilder63.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder63.getPROTOTYPE();
        java.lang.Object obj69 = multiMatchQueryBuilder68.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder68.boost((float) (short) 1);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap72 = multiMatchQueryBuilder71.fieldsBoosts;
        multiMatchQueryBuilder51.fieldsBoosts = strObjectFloatHashMap72;
        multiMatchQueryBuilder23.fieldsBoosts = strObjectFloatHashMap72;
        java.lang.Integer int75 = multiMatchQueryBuilder23.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(queryValidationException35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNull(zeroTermsQuery37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNull(float47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNull(boolean59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNull(fuzziness64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNull(int67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
// flaky:         org.junit.Assert.assertNotNull(strObjectFloatHashMap72);
        org.junit.Assert.assertNull(int75);
    }

    @Test
    public void test10670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10670");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        multiMatchQueryBuilder11.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"\\\"\\n  }\\n}\",\n    \"rewrite\" : \"\",\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.Operator operator15 = multiMatchQueryBuilder11.getoperator();
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap25 = multiMatchQueryBuilder24.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder24.lenient(false);
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder24.boost((float) 10L);
        java.lang.Integer int36 = multiMatchQueryBuilder35.getprefixLength();
        java.lang.Boolean boolean37 = multiMatchQueryBuilder35.getlenient();
        java.lang.String str38 = multiMatchQueryBuilder35.getrewrite();
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        multiMatchQueryBuilder43.minimumShouldMatch = "hi!";
        java.lang.Float float50 = multiMatchQueryBuilder43.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type51 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type52 = type51.matchQueryType();
        float float53 = type51.tieBreaker();
        multiMatchQueryBuilder43.type = type51;
        org.elasticsearch.index.search.MatchQuery.Type type55 = type51.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder35.type(type51);
        boolean boolean57 = multiMatchQueryBuilder11.equals((java.lang.Object) multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(operator15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(strObjectFloatHashMap25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertEquals("'" + boolean37 + "' != '" + false + "'", boolean37, false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(float50);
        org.junit.Assert.assertTrue("'" + type51 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type51.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type52 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type52.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type55.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test10671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10671");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException22 = multiMatchQueryBuilder17.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder17.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder17.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness29 = multiMatchQueryBuilder17.getfuzziness();
        java.lang.Boolean boolean30 = multiMatchQueryBuilder17.getuseDisMax();
        org.elasticsearch.index.query.Operator operator31 = null;
        multiMatchQueryBuilder17.operator = operator31;
        java.lang.String[] strArray36 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray36);
        org.elasticsearch.index.query.Operator operator38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.operator(operator38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder37.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException42 = multiMatchQueryBuilder37.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder37.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder37.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder37.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type49 = multiMatchQueryBuilder37.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type50 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField51 = type50.parseField();
        multiMatchQueryBuilder37.type = type50;
        multiMatchQueryBuilder17.settype(type50);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder4.type(type50);
        java.lang.String str55 = multiMatchQueryBuilder54.getanalyzer();
        org.elasticsearch.index.query.QueryValidationException queryValidationException56 = multiMatchQueryBuilder54.validate();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(queryValidationException22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(fuzziness29);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(queryValidationException42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNull(type49);
        org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type50.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(queryValidationException56);
    }

    @Test
    public void test10672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10672");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        multiMatchQueryBuilder4.setminimumShouldMatch("");
        java.lang.String str18 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.tieBreaker((float) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryShardContext queryShardContext23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query24 = multiMatchQueryBuilder22.toQuery(queryShardContext23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test10673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10673");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        float float7 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 1.0f);
        multiMatchQueryBuilder4.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Object obj16 = multiMatchQueryBuilder15.text;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 1.0f + "'", float7 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "multi_match" + "'", obj16, "multi_match");
    }

    @Test
    public void test10674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10674");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.String str1 = multiMatchQueryBuilder0.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery2 = multiMatchQueryBuilder0.zeroTermsQuery;
        java.lang.Boolean boolean3 = multiMatchQueryBuilder0.lenient;
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"slop\" : 10,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str1, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"slop\" : 10,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(zeroTermsQuery2);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + false + "'", boolean3, false);
    }

    @Test
    public void test10675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10675");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        java.lang.Float float13 = multiMatchQueryBuilder4.gettieBreaker();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = null;
        multiMatchQueryBuilder4.setfieldsBoosts(strObjectFloatHashMap14);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.boost((float) (short) 1);
        java.lang.String str20 = multiMatchQueryBuilder19.analyzer;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test10676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10676");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float16 = multiMatchQueryBuilder15.cutoffFrequency;
        multiMatchQueryBuilder15.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean19 = multiMatchQueryBuilder15.lenient;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder15.useDisMax(false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test10677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10677");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        java.lang.Integer int14 = multiMatchQueryBuilder13.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder13.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.lenient(false);
        multiMatchQueryBuilder13.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : 10,\n    \"maxExpansions\" : -1,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder13.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"fuzziness\" : \"BEST_FIELDS\",\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 0.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test10678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10678");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField11 = type10.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type12 = type10.matchQueryType();
        multiMatchQueryBuilder4.type = type10;
        org.elasticsearch.index.query.QueryValidationException queryValidationException14 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder4.fuzziness;
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : 10,\n    \"useDisMax\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type10.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type12.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNull(queryValidationException14);
        org.junit.Assert.assertNull(fuzziness15);
    }

    @Test
    public void test10679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10679");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        java.lang.String str13 = multiMatchQueryBuilder4.getName();
        java.lang.Object obj14 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"\"\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
    }

    @Test
    public void test10680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10680");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        multiMatchQueryBuilder10.tieBreaker = 0.0f;
        java.lang.String str13 = multiMatchQueryBuilder10.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.boost((float) 97);
        multiMatchQueryBuilder10.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
    }

    @Test
    public void test10681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10681");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        java.lang.String str13 = multiMatchQueryBuilder4.getName();
        java.lang.Object obj14 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.fuzzyRewrite = "";
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : -1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator20 = multiMatchQueryBuilder4.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"useDisMax\" : true,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder22.setuseDisMax((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNull(operator20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test10682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10682");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder14.getfuzziness();
        java.lang.Float float16 = multiMatchQueryBuilder14.tieBreaker;
        org.elasticsearch.index.query.Operator operator17 = null;
        multiMatchQueryBuilder14.setoperator(operator17);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(fuzziness15);
        org.junit.Assert.assertNull(float16);
    }

    @Test
    public void test10683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10683");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.lang.Integer int8 = multiMatchQueryBuilder4.getmaxExpansions();
        multiMatchQueryBuilder4.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.prefixLength((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.useDisMax(true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test10684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10684");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        multiMatchQueryBuilder13.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.analyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder13.getfuzziness();
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap28 = multiMatchQueryBuilder27.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder27.zeroTermsQuery(zeroTermsQuery29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder27.lenient(false);
        java.lang.Object obj33 = multiMatchQueryBuilder32.gettext();
        java.lang.Integer int34 = multiMatchQueryBuilder32.getslop();
        multiMatchQueryBuilder32.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder32.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException39 = multiMatchQueryBuilder38.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder38.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder38.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type44 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        multiMatchQueryBuilder43.type = type44;
        multiMatchQueryBuilder13.type = type44;
        org.elasticsearch.index.query.Operator operator47 = null;
        multiMatchQueryBuilder13.setoperator(operator47);
        multiMatchQueryBuilder13.setlenient((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type51 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder13.type(type51);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(fuzziness18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(strObjectFloatHashMap28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + "multi_match" + "'", obj33, "multi_match");
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(queryValidationException39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type44.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
    }

    @Test
    public void test10685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10685");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder4.minimumShouldMatch;
        java.lang.String str22 = multiMatchQueryBuilder4.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder4.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder24.setslop((java.lang.Integer) 0);
        java.lang.String str27 = multiMatchQueryBuilder24.getminimumShouldMatch();
        java.lang.Object obj28 = null;
        java.lang.Object obj29 = null;
        java.lang.String[] strArray33 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray33);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        java.lang.Boolean boolean37 = multiMatchQueryBuilder34.getlenient();
        multiMatchQueryBuilder34.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder34.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder34.tieBreaker((float) (-1));
        multiMatchQueryBuilder34.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder34.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type48 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.common.ParseField parseField49 = type48.parseField();
        org.elasticsearch.common.ParseField parseField50 = type48.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder47.type(type48);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery52 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.zeroTermsQuery(zeroTermsQuery52);
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.Operator operator59 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.operator(operator59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder58.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException63 = multiMatchQueryBuilder58.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder58.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder58.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder58.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness70 = multiMatchQueryBuilder58.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder58.slop((int) (short) 0);
        multiMatchQueryBuilder58.setslop((java.lang.Integer) 100);
        java.lang.Boolean boolean75 = multiMatchQueryBuilder58.getuseDisMax();
        java.lang.String str76 = multiMatchQueryBuilder58.fuzzyRewrite;
        java.lang.String[] strArray81 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray81);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray81);
        java.lang.String[] strArray87 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray87);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray81, strArray87);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str76, strArray81);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder53, strArray81);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj29, strArray81);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj28, strArray81);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder94 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str27, strArray81);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str27, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(boolean37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type48.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(parseField49);
        org.junit.Assert.assertNotNull(parseField50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNull(queryValidationException63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNull(fuzziness70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNull(boolean75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strArray87);
    }

    @Test
    public void test10686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10686");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder24.setoperator(operator29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder24.zeroTermsQuery = zeroTermsQuery31;
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        multiMatchQueryBuilder37.maxExpansions = 0;
        java.lang.Boolean boolean40 = multiMatchQueryBuilder37.lenient;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder37.tieBreaker((float) (short) 100);
        java.lang.Boolean boolean43 = multiMatchQueryBuilder42.useDisMax;
        java.lang.String str44 = multiMatchQueryBuilder42.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap47 = multiMatchQueryBuilder42.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(boolean40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(boolean43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "multi_match" + "'", str44, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNull(strObjectFloatHashMap47);
    }

    @Test
    public void test10687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10687");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type9 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type10 = type9.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type9);
        multiMatchQueryBuilder11.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.getPROTOTYPE();
        java.lang.String str15 = multiMatchQueryBuilder14.getName();
        multiMatchQueryBuilder14.setslop((java.lang.Integer) 32);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type9.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type10.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "multi_match" + "'", str15, "multi_match");
    }

    @Test
    public void test10688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10688");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.useDisMax(false);
        java.lang.Object obj17 = multiMatchQueryBuilder16.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException20 = multiMatchQueryBuilder16.validate();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(queryValidationException20);
    }

    @Test
    public void test10689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10689");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder4.minimumShouldMatch;
        java.lang.String str22 = multiMatchQueryBuilder4.getminimumShouldMatch();
        java.lang.Integer int23 = multiMatchQueryBuilder4.maxExpansions;
        java.lang.String str24 = multiMatchQueryBuilder4.getfuzzyRewrite();
        multiMatchQueryBuilder4.maxExpansions = 1;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test10690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10690");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.String str10 = multiMatchQueryBuilder4.getNAME();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.zeroTermsQuery;
        multiMatchQueryBuilder4.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.queryName("multi_match");
        java.lang.String str16 = multiMatchQueryBuilder4.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "multi_match" + "'", str10, "multi_match");
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test10691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10691");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.fuzzyRewrite("");
        java.lang.String str15 = multiMatchQueryBuilder14.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.maxExpansions((int) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) (short) 10);
        multiMatchQueryBuilder19.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params25 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder19.doXContent(xContentBuilder24, params25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(params25);
    }

    @Test
    public void test10692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10692");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        java.lang.String str9 = multiMatchQueryBuilder4.rewrite;
        java.lang.String str10 = multiMatchQueryBuilder4.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!^97.0\", \"\", \"hi!^97.0\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.slop((int) (short) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.zeroTermsQuery(zeroTermsQuery24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder4.boost((float) (byte) 0);
        java.lang.String str35 = multiMatchQueryBuilder34.queryName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test10693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10693");
        java.lang.String[] strArray4 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder5 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray4);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray4);
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder6.getfuzziness();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery8 = multiMatchQueryBuilder6.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder6.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder6.boost(10.0f);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNull(zeroTermsQuery8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
    }

    @Test
    public void test10694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10694");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        float float33 = multiMatchQueryBuilder25.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type35 = type34.matchQueryType();
        multiMatchQueryBuilder25.settype(type34);
        multiMatchQueryBuilder4.type = type34;
        java.lang.String str38 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) true);
        multiMatchQueryBuilder4.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzziness\" : \"10\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String str45 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder47.getPROTOTYPE();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 1.0f + "'", float33 == 1.0f);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type35.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzziness\" : \"10\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str45, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzziness\" : \"10\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
    }

    @Test
    public void test10695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10695");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.useDisMax(true);
        multiMatchQueryBuilder17.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str20 = multiMatchQueryBuilder17.queryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery21);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test10696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10696");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        java.lang.String str19 = multiMatchQueryBuilder18.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        multiMatchQueryBuilder18.zeroTermsQuery = zeroTermsQuery20;
        multiMatchQueryBuilder18.setprefixLength((java.lang.Integer) 100);
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder18.getfuzziness();
        multiMatchQueryBuilder18.slop = 97;
        multiMatchQueryBuilder18.setmaxExpansions((java.lang.Integer) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = null;
        multiMatchQueryBuilder18.setzeroTermsQuery(zeroTermsQuery29);
        java.lang.String str31 = multiMatchQueryBuilder18.getminimumShouldMatch();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str19, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(fuzziness24);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test10697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10697");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        java.lang.String str14 = multiMatchQueryBuilder12.getfuzzyRewrite();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        multiMatchQueryBuilder19.minimumShouldMatch = "hi!";
        java.lang.Float float26 = multiMatchQueryBuilder19.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type28 = type27.matchQueryType();
        float float29 = type27.tieBreaker();
        multiMatchQueryBuilder19.type = type27;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder12.type(type27);
        java.lang.Float float32 = multiMatchQueryBuilder12.gettieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder12.slop((int) (byte) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder12.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"\\\"\\n  }\\n}\"\n  }\n}");
        multiMatchQueryBuilder36.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(float32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
    }

    @Test
    public void test10698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10698");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap17;
        java.lang.String str19 = multiMatchQueryBuilder16.getNAME();
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder16.fields;
        multiMatchQueryBuilder16.slop = 0;
        java.lang.String str23 = multiMatchQueryBuilder16.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = multiMatchQueryBuilder16.zeroTermsQuery;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        multiMatchQueryBuilder16.setzeroTermsQuery(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(zeroTermsQuery24);
    }

    @Test
    public void test10699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10699");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder11.settieBreaker((java.lang.Float) 1.0f);
        multiMatchQueryBuilder11.maxExpansions = 10;
        org.elasticsearch.index.query.Operator operator16 = null;
        multiMatchQueryBuilder11.setoperator(operator16);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
    }

    @Test
    public void test10700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10700");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        java.lang.String[] strArray11 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray11);
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder16.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.lenient(false);
        multiMatchQueryBuilder16.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery24);
        boolean boolean26 = multiMatchQueryBuilder6.equals((java.lang.Object) multiMatchQueryBuilder25);
        java.lang.Boolean boolean27 = multiMatchQueryBuilder25.getuseDisMax();
        multiMatchQueryBuilder25.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.Boolean boolean30 = multiMatchQueryBuilder25.useDisMax;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder25.setzeroTermsQuery(zeroTermsQuery31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder25.cutoffFrequency((float) (-1));
        multiMatchQueryBuilder25.maxExpansions = 0;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(boolean27);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
    }

    @Test
    public void test10701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10701");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.lenient(true);
        java.lang.Float float16 = multiMatchQueryBuilder15.gettieBreaker();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float16);
    }

    @Test
    public void test10702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10702");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.boost((float) 10L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.rewrite("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness22 = multiMatchQueryBuilder8.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder8.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = null;
        multiMatchQueryBuilder8.zeroTermsQuery = zeroTermsQuery28;
        java.lang.Class<?> wildcardClass30 = multiMatchQueryBuilder8.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(fuzziness22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test10703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10703");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.operator(operator16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.rewrite("hi!");
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder19.getfields();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap21 = multiMatchQueryBuilder19.fieldsBoosts;
        multiMatchQueryBuilder19.setslop((java.lang.Integer) 52);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(strObjectFloatHashMap21);
    }

    @Test
    public void test10704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10704");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.tieBreaker((float) (short) 0);
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) true);
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        java.lang.Boolean boolean14 = multiMatchQueryBuilder10.lenient;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.useDisMax(true);
        java.lang.Float float17 = multiMatchQueryBuilder10.getcutoffFrequency();
        java.lang.String str18 = multiMatchQueryBuilder10.rewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.boost((float) (short) 0);
        multiMatchQueryBuilder20.setslop((java.lang.Integer) 52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.tieBreaker(0.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertEquals("'" + boolean14 + "' != '" + true + "'", boolean14, true);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test10705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10705");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.maxExpansions((-1));
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder11.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.Object obj18 = multiMatchQueryBuilder17.text;
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException28 = multiMatchQueryBuilder23.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder23.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder23.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type35 = multiMatchQueryBuilder23.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField37 = type36.parseField();
        multiMatchQueryBuilder23.type = type36;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder17.type(type36);
        org.elasticsearch.index.search.MatchQuery.Type type40 = type36.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder11.type(type36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder11.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder11.maxExpansions((int) '4');
        java.lang.Integer int46 = multiMatchQueryBuilder11.getslop();
        java.lang.Float float47 = multiMatchQueryBuilder11.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder11.getPROTOTYPE();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(queryValidationException28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(type35);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type40.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNull(float47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
    }

    @Test
    public void test10706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10706");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.maxExpansions((-1));
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder11.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.Object obj18 = multiMatchQueryBuilder17.text;
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException28 = multiMatchQueryBuilder23.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder23.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder23.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type35 = multiMatchQueryBuilder23.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField37 = type36.parseField();
        multiMatchQueryBuilder23.type = type36;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder17.type(type36);
        org.elasticsearch.index.search.MatchQuery.Type type40 = type36.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder11.type(type36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder11.boost((float) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder11.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder11.tieBreaker = 35.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(queryValidationException28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(type35);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type40.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
    }

    @Test
    public void test10707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10707");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.boost((float) (short) 0);
        java.lang.Object obj22 = multiMatchQueryBuilder21.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) 10);
        java.lang.String[] strArray29 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray29);
        org.elasticsearch.index.query.Operator operator31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.operator(operator31);
        multiMatchQueryBuilder30.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder30.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder30.maxExpansions((int) (short) 10);
        java.lang.Object obj39 = multiMatchQueryBuilder38.text;
        boolean boolean40 = multiMatchQueryBuilder21.equals((java.lang.Object) multiMatchQueryBuilder38);
        multiMatchQueryBuilder21.setmaxExpansions((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"slop\" : 0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + "multi_match" + "'", obj22, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertEquals("'" + obj39 + "' != '" + "multi_match" + "'", obj39, "multi_match");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
    }

    @Test
    public void test10708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10708");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.Operator operator10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.operator(operator10);
        java.lang.String str12 = multiMatchQueryBuilder4.fuzzyRewrite;
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 52.0f);
        java.lang.Integer int15 = multiMatchQueryBuilder4.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(int15);
    }

    @Test
    public void test10709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10709");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder8.type = type18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.slop(10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = null;
        multiMatchQueryBuilder21.setfieldsBoosts(strObjectFloatHashMap22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.fuzzyRewrite("");
        java.lang.String str26 = multiMatchQueryBuilder25.minimumShouldMatch;
        multiMatchQueryBuilder25.tieBreaker = 1.0f;
        java.lang.Object obj29 = multiMatchQueryBuilder25.text;
        multiMatchQueryBuilder25.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + obj29 + "' != '" + "multi_match" + "'", obj29, "multi_match");
    }

    @Test
    public void test10710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10710");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.operator(operator16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.rewrite("hi!");
        java.lang.String str20 = multiMatchQueryBuilder13.getrewrite();
        multiMatchQueryBuilder13.maxExpansions = 32;
        multiMatchQueryBuilder13.setslop((java.lang.Integer) 52);
        multiMatchQueryBuilder13.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test10711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10711");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        multiMatchQueryBuilder11.prefixLength = 100;
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("");
        multiMatchQueryBuilder21.minimumShouldMatch = "hi!";
        java.lang.Float float28 = multiMatchQueryBuilder21.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type29 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type30 = type29.matchQueryType();
        float float31 = type29.tieBreaker();
        multiMatchQueryBuilder21.type = type29;
        multiMatchQueryBuilder21.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder21.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str37 = multiMatchQueryBuilder36.rewrite;
        java.lang.String[] strArray41 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray41);
        org.elasticsearch.index.query.Operator operator43 = null;
        multiMatchQueryBuilder42.operator = operator43;
        org.elasticsearch.common.unit.Fuzziness fuzziness45 = multiMatchQueryBuilder42.getfuzziness();
        multiMatchQueryBuilder42.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.Operator operator48 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder42.operator(operator48);
        java.lang.String[] strArray53 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray53);
        org.elasticsearch.index.query.Operator operator55 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.operator(operator55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder54.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException59 = multiMatchQueryBuilder54.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder54.cutoffFrequency((float) (byte) 100);
        float float62 = multiMatchQueryBuilder54.boost();
        multiMatchQueryBuilder54.setanalyzer("");
        java.lang.Boolean boolean65 = multiMatchQueryBuilder54.getuseDisMax();
        java.lang.String str66 = multiMatchQueryBuilder54.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder54.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray72 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray72);
        org.elasticsearch.index.query.Operator operator74 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder73.operator(operator74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder73.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder77.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder77.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness82 = multiMatchQueryBuilder77.getfuzziness();
        multiMatchQueryBuilder68.fuzziness = fuzziness82;
        multiMatchQueryBuilder42.fuzziness = fuzziness82;
        multiMatchQueryBuilder36.setfuzziness(fuzziness82);
        multiMatchQueryBuilder11.setfuzziness(fuzziness82);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery87 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery87);
        java.lang.Boolean boolean89 = multiMatchQueryBuilder11.getlenient();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery90 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery90);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = multiMatchQueryBuilder11.getPROTOTYPE();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(float28);
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type29.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type30.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 0.0f + "'", float31 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNull(fuzziness45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNull(queryValidationException59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + 1.0f + "'", float62 == 1.0f);
        org.junit.Assert.assertNull(boolean65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(fuzziness82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder88);
        org.junit.Assert.assertNull(boolean89);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder91);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder92);
    }

    @Test
    public void test10712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10712");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder18.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder18.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.queryName("{\n  \"multiMatch\" : {\n    \"query\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder18.getPROTOTYPE();
        multiMatchQueryBuilder18.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"fuzziness\" : \"BOOLEAN\",\n    \"prefixLength\" : 10,\n    \"maxExpansions\" : 32,\n    \"useDisMax\" : false,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 52.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test10713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10713");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        java.lang.String str14 = multiMatchQueryBuilder12.getfuzzyRewrite();
        java.lang.String str15 = multiMatchQueryBuilder12.getanalyzer();
        org.elasticsearch.index.query.QueryShardContext queryShardContext16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query17 = multiMatchQueryBuilder12.toFilter(queryShardContext16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test10714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10714");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int16 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        java.lang.Boolean boolean27 = multiMatchQueryBuilder24.getlenient();
        multiMatchQueryBuilder24.analyzer = "multi_match";
        multiMatchQueryBuilder24.setcutoffFrequency((java.lang.Float) (-1.0f));
        multiMatchQueryBuilder24.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = multiMatchQueryBuilder24.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder24.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder36.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : 10,\n    \"maxExpansions\" : -1,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder36.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"maxExpansions\" : 1,\n    \"useDisMax\" : false,\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        boolean boolean41 = multiMatchQueryBuilder4.equals((java.lang.Object) multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(fuzziness19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(boolean27);
        org.junit.Assert.assertNull(type34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test10715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10715");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int16 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.cutoffFrequency((float) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder18.getzeroTermsQuery();
        java.lang.Integer int22 = multiMatchQueryBuilder18.maxExpansions;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNull(int22);
    }

    @Test
    public void test10716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10716");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int16 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.QueryValidationException queryValidationException19 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.maxExpansions((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str24 = multiMatchQueryBuilder21.rewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.prefixLength((int) (short) 0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(queryValidationException19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test10717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10717");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int13 = multiMatchQueryBuilder12.prefixLength;
        multiMatchQueryBuilder12.maxExpansions = 0;
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder12.fuzziness;
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap26 = multiMatchQueryBuilder25.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder25.zeroTermsQuery(zeroTermsQuery27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder25.lenient(false);
        multiMatchQueryBuilder25.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder25.zeroTermsQuery(zeroTermsQuery33);
        multiMatchQueryBuilder25.tieBreaker = 10.0f;
        java.lang.String[] strArray40 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray40);
        org.elasticsearch.index.query.Operator operator42 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.operator(operator42);
        multiMatchQueryBuilder41.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder41.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.maxExpansions((int) (short) 10);
        java.lang.String[] strArray53 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray53);
        org.elasticsearch.index.query.Operator operator55 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.operator(operator55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder54.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder58.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness63 = multiMatchQueryBuilder58.getfuzziness();
        multiMatchQueryBuilder47.fuzziness = fuzziness63;
        multiMatchQueryBuilder25.setfuzziness(fuzziness63);
        multiMatchQueryBuilder12.setfuzziness(fuzziness63);
        org.elasticsearch.index.query.Operator operator67 = multiMatchQueryBuilder12.operator;
        java.util.List<java.lang.String> strList68 = multiMatchQueryBuilder12.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(strObjectFloatHashMap26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(fuzziness63);
        org.junit.Assert.assertNull(operator67);
        org.junit.Assert.assertNotNull(strList68);
    }

    @Test
    public void test10718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10718");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        multiMatchQueryBuilder8.useDisMax = false;
        java.lang.String str18 = multiMatchQueryBuilder8.getNAME();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "multi_match" + "'", str18, "multi_match");
    }

    @Test
    public void test10719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10719");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.maxExpansions((-1));
        java.lang.String str16 = multiMatchQueryBuilder15.getNAME();
        java.lang.String str17 = multiMatchQueryBuilder15.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.boost((float) 0L);
        multiMatchQueryBuilder19.prefixLength = 100;
        java.lang.Boolean boolean22 = multiMatchQueryBuilder19.lenient;
        java.lang.String str23 = multiMatchQueryBuilder19.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "multi_match" + "'", str16, "multi_match");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"prefixLength\" : 100,\n    \"maxExpansions\" : -1,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 0.0\n  }\n}" + "'", str23, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"prefixLength\" : 100,\n    \"maxExpansions\" : -1,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 0.0\n  }\n}");
    }

    @Test
    public void test10720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10720");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("hi!", (float) (byte) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery15);
        java.lang.Boolean boolean17 = multiMatchQueryBuilder14.useDisMax;
        java.lang.String str18 = multiMatchQueryBuilder14.fuzzyRewrite;
        multiMatchQueryBuilder14.setslop((java.lang.Integer) 97);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test10721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10721");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 10);
        java.lang.Integer int19 = multiMatchQueryBuilder4.prefixLength;
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.cutoffFrequency(52.0f);
        java.lang.Integer int24 = multiMatchQueryBuilder4.prefixLength;
        java.lang.Object obj25 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder4.tieBreaker((float) 1);
        java.lang.Boolean boolean28 = multiMatchQueryBuilder27.useDisMax;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertEquals("'" + obj25 + "' != '" + "multi_match" + "'", obj25, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(boolean28);
    }

    @Test
    public void test10722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10722");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder8.tieBreaker = 10.0f;
        java.lang.String str20 = multiMatchQueryBuilder8.getrewrite();
        multiMatchQueryBuilder8.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test10723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10723");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.slop((int) (short) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.prefixLength(32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 1,\n    \"max_expansions\" : 100,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.prefixLength(0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test10724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10724");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type8 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type9 = type8.matchQueryType();
        float float10 = type8.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type8);
        multiMatchQueryBuilder11.useDisMax = false;
        multiMatchQueryBuilder11.useDisMax = false;
        org.elasticsearch.index.query.QueryValidationException queryValidationException16 = multiMatchQueryBuilder11.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.getPROTOTYPE();
        java.lang.String str20 = multiMatchQueryBuilder11.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type8.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type9.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(queryValidationException16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test10725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10725");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.type(type15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.getPROTOTYPE();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder17.getlenient();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + boolean18 + "' != '" + false + "'", boolean18, false);
    }

    @Test
    public void test10726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10726");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder12.zeroTermsQuery;
        multiMatchQueryBuilder12.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"useDisMax\\\" : true,\\n    \\\"cutoffFrequency\\\" : 52.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : false,\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
    }

    @Test
    public void test10727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10727");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.maxExpansions((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder19.fuzziness((java.lang.Object) "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder25.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder25.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}", (float) (byte) 100);
        java.lang.Boolean boolean31 = multiMatchQueryBuilder30.getuseDisMax();
        multiMatchQueryBuilder30.setslop((java.lang.Integer) 97);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(boolean31);
    }

    @Test
    public void test10728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10728");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder21.setlenient((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test10729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10729");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Integer int10 = multiMatchQueryBuilder4.maxExpansions;
        org.elasticsearch.index.query.Operator operator11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.operator(operator11);
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = multiMatchQueryBuilder21.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.zeroTermsQuery(zeroTermsQuery23);
        multiMatchQueryBuilder21.prefixLength = 1;
        boolean boolean27 = multiMatchQueryBuilder4.equals((java.lang.Object) 1);
        java.util.List<java.lang.String> strList28 = multiMatchQueryBuilder4.getfields();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(strObjectFloatHashMap22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strList28);
    }

    @Test
    public void test10730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10730");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        multiMatchQueryBuilder12.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder12.setuseDisMax((java.lang.Boolean) false);
        java.lang.Float float17 = multiMatchQueryBuilder12.cutoffFrequency;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float17);
    }

    @Test
    public void test10731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10731");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        multiMatchQueryBuilder8.setanalyzer("hi!");
        multiMatchQueryBuilder8.tieBreaker = (-1.0f);
        java.lang.Integer int16 = multiMatchQueryBuilder8.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder8.tieBreaker((float) (-1));
        java.lang.String str19 = multiMatchQueryBuilder18.getrewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test10732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10732");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder14.gettype();
        java.lang.Integer int16 = multiMatchQueryBuilder14.maxExpansions;
        java.lang.Boolean boolean17 = multiMatchQueryBuilder14.lenient;
        java.util.List<java.lang.String> strList18 = multiMatchQueryBuilder14.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Object obj21 = multiMatchQueryBuilder20.gettext();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + "multi_match" + "'", obj21, "multi_match");
    }

    @Test
    public void test10733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10733");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.String[] strArray5 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray5);
        org.elasticsearch.index.query.Operator operator7 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.operator(operator7);
        java.lang.Boolean boolean9 = multiMatchQueryBuilder6.getlenient();
        multiMatchQueryBuilder6.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = multiMatchQueryBuilder6.gettype();
        multiMatchQueryBuilder6.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder6.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.useDisMax(false);
        java.lang.Object obj19 = multiMatchQueryBuilder16.gettext();
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException29 = multiMatchQueryBuilder24.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder24.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder31.getPROTOTYPE();
        multiMatchQueryBuilder34.settieBreaker((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = multiMatchQueryBuilder34.zeroTermsQuery;
        java.lang.Object obj38 = multiMatchQueryBuilder34.gettext();
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException48 = multiMatchQueryBuilder43.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder43.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder43.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder43.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness55 = multiMatchQueryBuilder43.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder43.slop((int) (short) 0);
        multiMatchQueryBuilder43.setslop((java.lang.Integer) 100);
        java.lang.Boolean boolean60 = multiMatchQueryBuilder43.getuseDisMax();
        java.lang.String str61 = multiMatchQueryBuilder43.fuzzyRewrite;
        java.lang.String[] strArray66 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray66);
        java.lang.String[] strArray72 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray66, strArray72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str61, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj38, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder16, strArray66);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder78 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertNull(type12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + "multi_match" + "'", obj19, "multi_match");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(queryValidationException29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(zeroTermsQuery37);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(queryValidationException48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(fuzziness55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNull(boolean60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray72);
    }

    @Test
    public void test10734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10734");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.useDisMax(false);
        org.elasticsearch.common.unit.Fuzziness fuzziness22 = multiMatchQueryBuilder21.fuzziness;
        multiMatchQueryBuilder21.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder21.lenient = false;
        multiMatchQueryBuilder21.setcutoffFrequency((java.lang.Float) 52.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder21.prefixLength((int) '#');
        org.elasticsearch.index.query.Operator operator31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder21.operator(operator31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder21.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"hi!\\\",\\n    \\\"slop\\\" : 0,\\n    \\\"minimum_should_match\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : \\\\\\\"multi_match\\\\\\\",\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"multi_match\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"minimum_should_match\\\\\\\" : \\\\\\\"multi_match\\\\\\\",\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(fuzziness22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
    }

    @Test
    public void test10735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10735");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder8.tieBreaker = 10.0f;
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        multiMatchQueryBuilder24.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder24.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.maxExpansions((int) (short) 10);
        java.lang.String[] strArray36 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray36);
        org.elasticsearch.index.query.Operator operator38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.operator(operator38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder37.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder41.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness46 = multiMatchQueryBuilder41.getfuzziness();
        multiMatchQueryBuilder30.fuzziness = fuzziness46;
        multiMatchQueryBuilder8.setfuzziness(fuzziness46);
        multiMatchQueryBuilder8.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery51 = null;
        multiMatchQueryBuilder8.setzeroTermsQuery(zeroTermsQuery51);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(fuzziness46);
    }

    @Test
    public void test10736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10736");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList18 = multiMatchQueryBuilder4.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.rewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        java.lang.Integer int23 = multiMatchQueryBuilder4.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList26 = multiMatchQueryBuilder25.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder25.slop(100);
        java.lang.String[] strArray32 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray32);
        org.elasticsearch.index.query.Operator operator34 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.operator(operator34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder33.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException38 = multiMatchQueryBuilder33.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder33.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj41 = multiMatchQueryBuilder33.text;
        java.lang.String str42 = multiMatchQueryBuilder33.getName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery43 = null;
        multiMatchQueryBuilder33.zeroTermsQuery = zeroTermsQuery43;
        java.lang.String[] strArray48 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray48);
        org.elasticsearch.index.query.Operator operator50 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.operator(operator50);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder49.field("");
        multiMatchQueryBuilder49.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder49.lenient(true);
        java.lang.String str58 = multiMatchQueryBuilder57.toString();
        java.lang.String str59 = multiMatchQueryBuilder57.getfuzzyRewrite();
        java.lang.String[] strArray63 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray63);
        org.elasticsearch.index.query.Operator operator65 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.operator(operator65);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder64.field("");
        multiMatchQueryBuilder64.minimumShouldMatch = "hi!";
        java.lang.Float float71 = multiMatchQueryBuilder64.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type72 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type73 = type72.matchQueryType();
        float float74 = type72.tieBreaker();
        multiMatchQueryBuilder64.type = type72;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder57.type(type72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type77 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type78 = type77.matchQueryType();
        float float79 = type77.tieBreaker();
        float float80 = type77.tieBreaker();
        multiMatchQueryBuilder76.type = type77;
        multiMatchQueryBuilder33.settype(type77);
        org.elasticsearch.index.search.MatchQuery.Type type83 = type77.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type84 = type77.matchQueryType();
        multiMatchQueryBuilder25.type = type77;
        java.lang.Integer int86 = multiMatchQueryBuilder25.getprefixLength();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(queryValidationException38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertEquals("'" + obj41 + "' != '" + "multi_match" + "'", obj41, "multi_match");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "multi_match" + "'", str42, "multi_match");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str58, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNull(float71);
        org.junit.Assert.assertTrue("'" + type72 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type72.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type73 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type73.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 0.0f + "'", float74 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertTrue("'" + type77 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type77.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type78 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type78.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + 0.0f + "'", float79 == 0.0f);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + 0.0f + "'", float80 == 0.0f);
        org.junit.Assert.assertTrue("'" + type83 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type83.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type84 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type84.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNull(int86);
    }

    @Test
    public void test10737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10737");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setrewrite("");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        multiMatchQueryBuilder4.setcutoffFrequency((java.lang.Float) 0.0f);
        java.util.List<java.lang.String> strList21 = multiMatchQueryBuilder4.fields;
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        java.lang.Boolean boolean31 = multiMatchQueryBuilder28.getlenient();
        multiMatchQueryBuilder28.analyzer = "multi_match";
        multiMatchQueryBuilder28.setcutoffFrequency((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder28.fuzzyRewrite("");
        multiMatchQueryBuilder28.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery40 = null;
        multiMatchQueryBuilder28.zeroTermsQuery = zeroTermsQuery40;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder28.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder4.type((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multi_match\" : {?    \"query\" : \"multi_match\",?    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],?    \"cutoff_frequency\" : 100.0,?    \"boost\" : 1.0?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(boolean31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
    }

    @Test
    public void test10738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10738");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.type(type22);
        multiMatchQueryBuilder23.setuseDisMax((java.lang.Boolean) true);
        multiMatchQueryBuilder23.setuseDisMax((java.lang.Boolean) false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap28 = multiMatchQueryBuilder23.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = multiMatchQueryBuilder23.getzeroTermsQuery();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder30 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params31 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder23.doXContent(xContentBuilder30, params31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type22.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(strObjectFloatHashMap28);
        org.junit.Assert.assertNull(zeroTermsQuery29);
        org.junit.Assert.assertNotNull(params31);
    }

    @Test
    public void test10739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10739");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        org.elasticsearch.index.query.QueryValidationException queryValidationException8 = multiMatchQueryBuilder6.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder6.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int11 = multiMatchQueryBuilder10.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.Operator operator14 = multiMatchQueryBuilder10.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(queryValidationException8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(operator14);
    }

    @Test
    public void test10740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10740");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Object obj15 = multiMatchQueryBuilder4.gettext();
        java.lang.Object obj16 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField20 = type19.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.common.ParseField parseField22 = type19.parseField();
        float float23 = type19.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder4.type((java.lang.Object) type19);
        java.lang.Integer int25 = multiMatchQueryBuilder4.getmaxExpansions();
        multiMatchQueryBuilder4.useDisMax = false;
        java.lang.Integer int28 = multiMatchQueryBuilder4.getslop();
        java.lang.Boolean boolean29 = multiMatchQueryBuilder4.useDisMax;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "multi_match" + "'", obj15, "multi_match");
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "multi_match" + "'", obj16, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField20);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 1.0f + "'", float23 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertEquals("'" + boolean29 + "' != '" + false + "'", boolean29, false);
    }

    @Test
    public void test10741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10741");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) true);
        java.lang.Integer int18 = multiMatchQueryBuilder4.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int18);
    }

    @Test
    public void test10742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10742");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        float float33 = multiMatchQueryBuilder25.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type35 = type34.matchQueryType();
        multiMatchQueryBuilder25.settype(type34);
        multiMatchQueryBuilder4.type = type34;
        java.lang.String str38 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder4.boost((float) '4');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery41 = null;
        multiMatchQueryBuilder40.setzeroTermsQuery(zeroTermsQuery41);
        multiMatchQueryBuilder40.prefixLength = 0;
        java.lang.Integer int45 = multiMatchQueryBuilder40.maxExpansions;
        multiMatchQueryBuilder40.setlenient((java.lang.Boolean) true);
        multiMatchQueryBuilder40.useDisMax = false;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 1.0f + "'", float33 == 1.0f);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type35.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(int45);
    }

    @Test
    public void test10743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10743");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.tieBreaker((float) 1L);
        multiMatchQueryBuilder18.setcutoffFrequency((java.lang.Float) 0.0f);
        java.lang.Integer int21 = multiMatchQueryBuilder18.prefixLength;
        org.elasticsearch.common.io.stream.StreamInput streamInput22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.readFrom(streamInput22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(int21);
    }

    @Test
    public void test10744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10744");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.useDisMax(true);
        java.lang.Integer int18 = multiMatchQueryBuilder17.getslop();
        float float19 = multiMatchQueryBuilder17.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.field("", 10.0f);
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException32 = multiMatchQueryBuilder27.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder27.cutoffFrequency((float) (byte) 100);
        float float35 = multiMatchQueryBuilder27.boost();
        multiMatchQueryBuilder27.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder27.rewrite("multi_match");
        java.lang.String str40 = multiMatchQueryBuilder39.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap41 = null;
        multiMatchQueryBuilder39.fieldsBoosts = strObjectFloatHashMap41;
        java.util.List<java.lang.String> strList43 = multiMatchQueryBuilder39.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type44 = multiMatchQueryBuilder39.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder39.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder39.tieBreaker((float) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder39.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int51 = multiMatchQueryBuilder50.getmaxExpansions();
        java.lang.String[] strArray55 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray55);
        org.elasticsearch.index.query.Operator operator57 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.operator(operator57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder56.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap61 = multiMatchQueryBuilder60.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery62 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder60.zeroTermsQuery(zeroTermsQuery62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder60.lenient(false);
        java.lang.Object obj66 = multiMatchQueryBuilder65.gettext();
        java.lang.Integer int67 = multiMatchQueryBuilder65.getslop();
        multiMatchQueryBuilder65.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder65.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException72 = multiMatchQueryBuilder71.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder71.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder71.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type77 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        multiMatchQueryBuilder76.type = type77;
        multiMatchQueryBuilder50.type = type77;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder22.type(type77);
        float float81 = type77.tieBreaker();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 1.0f + "'", float19 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(queryValidationException32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 1.0f + "'", float35 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNull(type44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNull(strObjectFloatHashMap61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertEquals("'" + obj66 + "' != '" + "multi_match" + "'", obj66, "multi_match");
        org.junit.Assert.assertNull(int67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNull(queryValidationException72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertTrue("'" + type77 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type77.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + 0.0f + "'", float81 == 0.0f);
    }

    @Test
    public void test10745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10745");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        java.lang.Object obj16 = multiMatchQueryBuilder15.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str19 = multiMatchQueryBuilder18.getrewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "multi_match" + "'", obj16, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test10746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10746");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.analyzer = "multi_match";
        java.lang.Integer int22 = multiMatchQueryBuilder4.getprefixLength();
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        java.lang.String str30 = multiMatchQueryBuilder29.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type31 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type32 = type31.matchQueryType();
        float float33 = type31.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder29.type(type31);
        org.elasticsearch.common.ParseField parseField35 = type31.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type36 = type31.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type37 = type31.matchQueryType();
        multiMatchQueryBuilder4.settype(type31);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "multi_match" + "'", str30, "multi_match");
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type31.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type32.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(parseField35);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type36.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type37.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test10747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10747");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.queryName("");
        multiMatchQueryBuilder4.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}";
        java.lang.Float float20 = multiMatchQueryBuilder4.tieBreaker;
        multiMatchQueryBuilder4.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"\\\",\\n    \\\"rewrite\\\" : \\\"multi_match\\\",\\n    \\\"tie_breaker\\\" : -1.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"multi_match\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(float20);
    }

    @Test
    public void test10748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10748");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.useDisMax = true;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params24 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = multiMatchQueryBuilder4.toXContent(xContentBuilder23, params24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(params24);
    }

    @Test
    public void test10749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10749");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str16 = multiMatchQueryBuilder15.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.cutoffFrequency(0.0f);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap21 = multiMatchQueryBuilder20.getfieldsBoosts();
        java.lang.String str22 = multiMatchQueryBuilder20.getName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(strObjectFloatHashMap21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
    }

    @Test
    public void test10750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10750");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type16 = type15.matchQueryType();
        float float17 = type15.tieBreaker();
        float float18 = type15.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) type15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) -1);
        java.lang.String str22 = multiMatchQueryBuilder21.getWriteableName();
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException32 = multiMatchQueryBuilder27.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder27.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder27.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder27.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness39 = multiMatchQueryBuilder27.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder27.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery42 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder27.zeroTermsQuery(zeroTermsQuery42);
        java.lang.String[] strArray47 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray47);
        org.elasticsearch.index.query.Operator operator49 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.operator(operator49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder48.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException53 = multiMatchQueryBuilder48.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder48.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder48.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder48.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type60 = multiMatchQueryBuilder48.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type61 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField62 = type61.parseField();
        multiMatchQueryBuilder48.type = type61;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder43.type(type61);
        multiMatchQueryBuilder43.setrewrite("");
        multiMatchQueryBuilder43.setprefixLength((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type69 = multiMatchQueryBuilder43.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder21.type(type69);
        java.lang.Object obj71 = multiMatchQueryBuilder21.gettext();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery72 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder21.zeroTermsQuery(zeroTermsQuery72);
        java.lang.String str74 = multiMatchQueryBuilder73.rewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap75 = multiMatchQueryBuilder73.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type15.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type16.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(queryValidationException32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(fuzziness39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(queryValidationException53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(type60);
        org.junit.Assert.assertTrue("'" + type61 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type61.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertTrue("'" + type69 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type69.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertEquals("'" + obj71 + "' != '" + "multi_match" + "'", obj71, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(strObjectFloatHashMap75);
    }

    @Test
    public void test10751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10751");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 100);
        multiMatchQueryBuilder8.prefixLength = 100;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery18);
        multiMatchQueryBuilder8.slop = (-1);
        multiMatchQueryBuilder8.useDisMax = true;
        multiMatchQueryBuilder8.setprefixLength((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder8.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.boost((float) 0L);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test10752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10752");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder17.setuseDisMax((java.lang.Boolean) true);
        multiMatchQueryBuilder17.setprefixLength((java.lang.Integer) 0);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = null;
        multiMatchQueryBuilder17.setfieldsBoosts(strObjectFloatHashMap22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder17.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"prefixLength\" : -1,\n    \"maxExpansions\" : 100,\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float26 = multiMatchQueryBuilder17.getcutoffFrequency();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(float26);
    }

    @Test
    public void test10753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10753");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder4.toString();
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap25 = multiMatchQueryBuilder24.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder24.lenient(false);
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery32);
        multiMatchQueryBuilder24.tieBreaker = 10.0f;
        java.util.List<java.lang.String> strList36 = multiMatchQueryBuilder24.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap38 = multiMatchQueryBuilder4.getfieldsBoosts();
        java.lang.String str39 = multiMatchQueryBuilder4.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder4.lenient(true);
        multiMatchQueryBuilder41.lenient = false;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(strObjectFloatHashMap25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(strObjectFloatHashMap38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str39, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
    }

    @Test
    public void test10754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10754");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = multiMatchQueryBuilder18.gettype();
        multiMatchQueryBuilder18.useDisMax = true;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(type19);
    }

    @Test
    public void test10755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10755");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Boolean boolean15 = multiMatchQueryBuilder11.lenient;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap16 = null;
        multiMatchQueryBuilder11.setfieldsBoosts(strObjectFloatHashMap16);
        java.lang.String str18 = multiMatchQueryBuilder11.getminimumShouldMatch();
        java.lang.Integer int19 = multiMatchQueryBuilder11.getslop();
        java.lang.String str20 = multiMatchQueryBuilder11.getNAME();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder11.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder11.maxExpansions(0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test10756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10756");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.useDisMax(false);
        java.lang.Object obj17 = multiMatchQueryBuilder16.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        java.lang.Boolean boolean27 = multiMatchQueryBuilder24.getlenient();
        multiMatchQueryBuilder24.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = multiMatchQueryBuilder24.gettype();
        multiMatchQueryBuilder24.setslop((java.lang.Integer) (-1));
        java.util.List<java.lang.String> strList33 = multiMatchQueryBuilder24.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder24.slop((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.tieBreaker(0.0f);
        java.lang.String[] strArray41 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray41);
        org.elasticsearch.index.query.Operator operator43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.operator(operator43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException47 = multiMatchQueryBuilder42.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder42.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder42.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder42.fuzzyRewrite("hi!");
        multiMatchQueryBuilder42.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery56 = null;
        multiMatchQueryBuilder42.zeroTermsQuery = zeroTermsQuery56;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder42.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder59.prefixLength((-1));
        multiMatchQueryBuilder61.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder61.lenient(true);
        java.lang.String[] strArray69 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray69);
        org.elasticsearch.index.query.Operator operator71 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder70.operator(operator71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder70.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder74.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder74.setanalyzer("multi_match");
        org.elasticsearch.index.query.QueryValidationException queryValidationException79 = multiMatchQueryBuilder74.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery80 = multiMatchQueryBuilder74.zeroTermsQuery;
        java.lang.String str81 = multiMatchQueryBuilder74.getrewrite();
        multiMatchQueryBuilder74.lenient = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder74.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap87 = multiMatchQueryBuilder74.fieldsBoosts;
        multiMatchQueryBuilder65.fieldsBoosts = strObjectFloatHashMap87;
        multiMatchQueryBuilder35.setfieldsBoosts(strObjectFloatHashMap87);
        multiMatchQueryBuilder19.fieldsBoosts = strObjectFloatHashMap87;
        java.lang.Boolean boolean91 = multiMatchQueryBuilder19.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(boolean27);
        org.junit.Assert.assertNull(type30);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNull(queryValidationException47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNull(queryValidationException79);
        org.junit.Assert.assertNull(zeroTermsQuery80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap87);
        org.junit.Assert.assertEquals("'" + boolean91 + "' != '" + false + "'", boolean91, false);
    }

    @Test
    public void test10757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10757");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        java.lang.Float float16 = multiMatchQueryBuilder15.cutoffFrequency;
        multiMatchQueryBuilder15.useDisMax = true;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = null;
        multiMatchQueryBuilder15.setfieldsBoosts(strObjectFloatHashMap19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder15.getzeroTermsQuery();
        org.elasticsearch.index.query.Operator operator22 = null;
        multiMatchQueryBuilder15.setoperator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = multiMatchQueryBuilder15.type;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNull(type24);
    }

    @Test
    public void test10758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10758");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder4.fields;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap16 = multiMatchQueryBuilder4.fieldsBoosts;
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float19 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = multiMatchQueryBuilder4.gettype();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNull(strObjectFloatHashMap16);
        org.junit.Assert.assertNull(float19);
        org.junit.Assert.assertNull(type20);
    }

    @Test
    public void test10759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10759");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        java.lang.String str12 = multiMatchQueryBuilder8.fuzzyRewrite;
        multiMatchQueryBuilder8.settieBreaker((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.QueryValidationException queryValidationException15 = multiMatchQueryBuilder8.validate();
        multiMatchQueryBuilder8.cutoffFrequency = 52.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(queryValidationException15);
    }

    @Test
    public void test10760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10760");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.tieBreaker((float) '4');
        java.lang.String str17 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int18 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.cutoffFrequency((float) 0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test10761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10761");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("hi!");
        java.lang.String str12 = multiMatchQueryBuilder8.fuzzyRewrite;
        org.elasticsearch.index.query.QueryValidationException queryValidationException13 = multiMatchQueryBuilder8.validate();
        java.lang.String[] strArray17 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray17);
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.operator(operator19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.field("");
        java.lang.String str23 = multiMatchQueryBuilder18.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = multiMatchQueryBuilder18.type;
        java.lang.Boolean boolean25 = multiMatchQueryBuilder18.getuseDisMax();
        java.lang.Boolean boolean26 = multiMatchQueryBuilder18.getlenient();
        boolean boolean27 = multiMatchQueryBuilder8.equals((java.lang.Object) boolean26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder8.boost(10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder29.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}", (float) (short) 1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(queryValidationException13);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(type24);
        org.junit.Assert.assertNull(boolean25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
    }

    @Test
    public void test10762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10762");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        java.lang.Integer int13 = multiMatchQueryBuilder11.slop;
        multiMatchQueryBuilder11.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.prefixLength((int) (short) 1);
        java.lang.String str18 = multiMatchQueryBuilder17.getminimumShouldMatch();
        java.lang.String str19 = multiMatchQueryBuilder17.getrewrite();
        java.lang.String str20 = multiMatchQueryBuilder17.getfuzzyRewrite();
        java.lang.Boolean boolean21 = multiMatchQueryBuilder17.getuseDisMax();
        java.lang.String[] strArray25 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray25);
        org.elasticsearch.index.query.Operator operator27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.operator(operator27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException31 = multiMatchQueryBuilder26.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder26.cutoffFrequency((float) (byte) 100);
        java.lang.String str34 = multiMatchQueryBuilder26.getanalyzer();
        multiMatchQueryBuilder26.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str37 = multiMatchQueryBuilder26.fuzzyRewrite;
        java.lang.Integer int38 = multiMatchQueryBuilder26.slop;
        multiMatchQueryBuilder26.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.QueryValidationException queryValidationException41 = multiMatchQueryBuilder26.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder26.maxExpansions((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type44 = multiMatchQueryBuilder26.type;
        org.elasticsearch.index.query.Operator operator45 = multiMatchQueryBuilder26.getoperator();
        multiMatchQueryBuilder26.lenient = true;
        java.lang.String[] strArray51 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray51);
        org.elasticsearch.index.query.Operator operator53 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.operator(operator53);
        java.lang.String str55 = multiMatchQueryBuilder54.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type56 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type57 = type56.matchQueryType();
        float float58 = type56.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder54.type(type56);
        org.elasticsearch.common.ParseField parseField60 = type56.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type61 = type56.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type62 = type56.matchQueryType();
        multiMatchQueryBuilder26.settype(type56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder17.type(type56);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(queryValidationException31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNull(queryValidationException41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(type44);
        org.junit.Assert.assertNull(operator45);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "multi_match" + "'", str55, "multi_match");
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type56.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type57 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type57.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + 0.0f + "'", float58 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(parseField60);
        org.junit.Assert.assertTrue("'" + type61 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type61.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type62 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type62.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
    }

    @Test
    public void test10763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10763");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder4.toString();
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap25 = multiMatchQueryBuilder24.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.minimumShouldMatch("multi_match");
        java.lang.String str28 = multiMatchQueryBuilder27.toString();
        java.lang.String[] strArray32 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray32);
        org.elasticsearch.index.query.Operator operator34 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.operator(operator34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder33.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException38 = multiMatchQueryBuilder33.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder33.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.zeroTermsQuery(zeroTermsQuery41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder40.getPROTOTYPE();
        multiMatchQueryBuilder43.settieBreaker((java.lang.Float) 0.0f);
        multiMatchQueryBuilder43.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder43.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.String[] strArray53 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray53);
        org.elasticsearch.index.query.Operator operator55 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.operator(operator55);
        java.lang.String str57 = multiMatchQueryBuilder54.getWriteableName();
        java.lang.Boolean boolean58 = multiMatchQueryBuilder54.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder54.getPROTOTYPE();
        multiMatchQueryBuilder54.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray65 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray65);
        org.elasticsearch.index.query.Operator operator67 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder66.operator(operator67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder66.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException71 = multiMatchQueryBuilder66.validate();
        java.lang.Integer int72 = multiMatchQueryBuilder66.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery73 = multiMatchQueryBuilder66.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder66.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder66.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder66.boost((float) 0);
        java.lang.String str81 = multiMatchQueryBuilder66.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap82 = multiMatchQueryBuilder66.fieldsBoosts;
        multiMatchQueryBuilder54.fieldsBoosts = strObjectFloatHashMap82;
        multiMatchQueryBuilder49.fieldsBoosts = strObjectFloatHashMap82;
        multiMatchQueryBuilder27.setfieldsBoosts(strObjectFloatHashMap82);
        multiMatchQueryBuilder4.setfieldsBoosts(strObjectFloatHashMap82);
        multiMatchQueryBuilder4.tieBreaker = 10.0f;
        java.lang.Object obj89 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(strObjectFloatHashMap25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str28, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(queryValidationException38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "multi_match" + "'", str57, "multi_match");
        org.junit.Assert.assertNull(boolean58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNull(queryValidationException71);
        org.junit.Assert.assertNull(int72);
        org.junit.Assert.assertNull(zeroTermsQuery73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap82);
        org.junit.Assert.assertEquals("'" + obj89 + "' != '" + "multi_match" + "'", obj89, "multi_match");
    }

    @Test
    public void test10764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10764");
        java.lang.Object obj0 = null;
        java.lang.String[] strArray4 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder5 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray4);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj0, strArray4);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"slop\" : 10,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator9 = null;
        multiMatchQueryBuilder8.setoperator(operator9);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
    }

    @Test
    public void test10765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10765");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        java.lang.Integer int16 = multiMatchQueryBuilder13.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder13.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 10,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"fuzziness\" : \"BEST_FIELDS\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}", (float) (-1L));
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test10766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10766");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.tieBreaker((float) 10);
        java.lang.Object obj17 = multiMatchQueryBuilder16.gettext();
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder22.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder22.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness34 = multiMatchQueryBuilder22.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder22.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder22.zeroTermsQuery(zeroTermsQuery37);
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException48 = multiMatchQueryBuilder43.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder43.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder43.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder43.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type55 = multiMatchQueryBuilder43.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type56 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField57 = type56.parseField();
        multiMatchQueryBuilder43.type = type56;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder38.type(type56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder16.fuzziness((java.lang.Object) multiMatchQueryBuilder59);
        java.lang.String str61 = multiMatchQueryBuilder59.toString();
        multiMatchQueryBuilder59.rewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(fuzziness34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(queryValidationException48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(type55);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type56.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str61, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test10767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10767");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder20.fuzziness;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = multiMatchQueryBuilder20.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness25 = multiMatchQueryBuilder20.fuzziness;
        java.util.List<java.lang.String> strList26 = multiMatchQueryBuilder20.getfields();
        org.elasticsearch.index.query.Operator operator27 = multiMatchQueryBuilder20.operator;
        multiMatchQueryBuilder20.cutoffFrequency = 1.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNull(strObjectFloatHashMap22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(fuzziness25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNull(operator27);
    }

    @Test
    public void test10768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10768");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.queryName("");
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type32 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type33 = type32.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder29.type(type32);
        org.elasticsearch.common.ParseField parseField35 = type32.parseField();
        float float36 = type32.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder20.type(type32);
        java.lang.Boolean boolean38 = multiMatchQueryBuilder37.useDisMax;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type32.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type33.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(parseField35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 1.0f + "'", float36 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(boolean38);
    }

    @Test
    public void test10769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10769");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder13.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.fuzzyRewrite("");
        java.lang.Integer int18 = multiMatchQueryBuilder17.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder17.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : 10,\n    \"useDisMax\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.boost((float) 100L);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test10770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10770");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.Operator operator10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.operator(operator10);
        java.lang.String str12 = multiMatchQueryBuilder4.fuzzyRewrite;
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap24 = multiMatchQueryBuilder23.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder28.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str33 = multiMatchQueryBuilder28.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) str33);
        java.lang.Boolean boolean35 = multiMatchQueryBuilder4.lenient;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) -1);
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(strObjectFloatHashMap24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "multi_match" + "'", str33, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(boolean35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
    }

    @Test
    public void test10771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10771");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder4.toString();
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion16 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE;
        java.lang.Class<?> wildcardClass17 = fieldCaseConversion16.getClass();
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        java.lang.String str30 = multiMatchQueryBuilder22.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder22.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness33 = multiMatchQueryBuilder22.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder22.getPROTOTYPE();
        java.lang.String[] strArray38 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder34, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass17, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) strArray38);
        java.util.List<java.lang.String> strList43 = multiMatchQueryBuilder42.fields;
        java.lang.String str44 = multiMatchQueryBuilder42.rewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertTrue("'" + fieldCaseConversion16 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE + "'", fieldCaseConversion16.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(fuzziness33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test10772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10772");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        java.lang.Float float14 = multiMatchQueryBuilder8.getcutoffFrequency();
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.operator(operator15);
        java.lang.String str17 = multiMatchQueryBuilder8.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = multiMatchQueryBuilder8.gettype();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = multiMatchQueryBuilder8.getfieldsBoosts();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder8.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder8.maxExpansions((int) (short) 0);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multi_match" + "'", str17, "multi_match");
        org.junit.Assert.assertNull(type18);
        org.junit.Assert.assertNull(strObjectFloatHashMap19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test10773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10773");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        multiMatchQueryBuilder10.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}";
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException22 = multiMatchQueryBuilder17.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.cutoffFrequency((float) (byte) 100);
        java.lang.String str25 = multiMatchQueryBuilder17.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder17.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder17.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        float float31 = type30.tieBreaker();
        multiMatchQueryBuilder17.settype(type30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder10.type(type30);
        java.lang.Float float34 = multiMatchQueryBuilder33.gettieBreaker();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap35 = multiMatchQueryBuilder33.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder33.cutoffFrequency((float) 100L);
        java.lang.String[] strArray41 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray41);
        org.elasticsearch.index.query.Operator operator43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.operator(operator43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap47 = multiMatchQueryBuilder46.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery48 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder46.zeroTermsQuery(zeroTermsQuery48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder46.lenient(false);
        multiMatchQueryBuilder46.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery54 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder46.zeroTermsQuery(zeroTermsQuery54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type56 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder46.type = type56;
        java.lang.Integer int58 = multiMatchQueryBuilder46.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type59 = multiMatchQueryBuilder46.gettype();
        org.elasticsearch.index.search.MatchQuery.Type type60 = type59.matchQueryType();
        multiMatchQueryBuilder37.type = type59;
        java.util.List<java.lang.String> strList62 = multiMatchQueryBuilder37.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder37.lenient(true);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery65 = null;
        multiMatchQueryBuilder37.setzeroTermsQuery(zeroTermsQuery65);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(queryValidationException22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type30.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 1.0f + "'", float31 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(float34);
        org.junit.Assert.assertNull(strObjectFloatHashMap35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNull(strObjectFloatHashMap47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type56.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(int58);
        org.junit.Assert.assertTrue("'" + type59 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type59.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type60 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type60.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
    }

    @Test
    public void test10774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10774");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getName();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 0);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = multiMatchQueryBuilder4.fieldsBoosts;
        java.lang.Float float16 = multiMatchQueryBuilder4.gettieBreaker();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "multi_match" + "'", str12, "multi_match");
        org.junit.Assert.assertNull(strObjectFloatHashMap15);
        org.junit.Assert.assertNull(float16);
    }

    @Test
    public void test10775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10775");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder17.setuseDisMax((java.lang.Boolean) true);
        multiMatchQueryBuilder17.setprefixLength((java.lang.Integer) 0);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = null;
        multiMatchQueryBuilder17.setfieldsBoosts(strObjectFloatHashMap22);
        java.lang.Float float24 = multiMatchQueryBuilder17.gettieBreaker();
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder17.operator(operator25);
        multiMatchQueryBuilder26.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.boost((float) (short) 1);
        multiMatchQueryBuilder30.cutoffFrequency = 1.0f;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder33 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params34 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder30.doXContent(xContentBuilder33, params34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(float24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(params34);
    }

    @Test
    public void test10776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10776");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder4.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"prefixLength\" : 0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder4.getanalyzer();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(type18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test10777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10777");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type16 = type15.matchQueryType();
        float float17 = type15.tieBreaker();
        float float18 = type15.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) type15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) -1);
        org.elasticsearch.index.query.Operator operator22 = null;
        multiMatchQueryBuilder4.operator = operator22;
        java.lang.Object obj24 = multiMatchQueryBuilder4.text;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type15.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type16.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + "multi_match" + "'", obj24, "multi_match");
    }

    @Test
    public void test10778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10778");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.boost((float) 1);
        java.lang.Integer int14 = multiMatchQueryBuilder13.prefixLength;
        multiMatchQueryBuilder13.setmaxExpansions((java.lang.Integer) 97);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test10779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10779");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException25 = multiMatchQueryBuilder20.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.cutoffFrequency((float) (byte) 100);
        java.lang.String str28 = multiMatchQueryBuilder20.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder20.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness31 = multiMatchQueryBuilder20.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder20.getPROTOTYPE();
        java.lang.String[] strArray36 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder32, strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) multiMatchQueryBuilder38);
        java.lang.String str40 = multiMatchQueryBuilder38.rewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder38.tieBreaker((float) '4');
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(queryValidationException25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(fuzziness31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
    }

    @Test
    public void test10780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10780");
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion0 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE;
        java.lang.Class<?> wildcardClass1 = fieldCaseConversion0.getClass();
        java.lang.String[] strArray5 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray5);
        org.elasticsearch.index.query.Operator operator7 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.operator(operator7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder6.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException11 = multiMatchQueryBuilder6.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder6.cutoffFrequency((float) (byte) 100);
        java.lang.String str14 = multiMatchQueryBuilder6.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder6.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness17 = multiMatchQueryBuilder6.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder6.getPROTOTYPE();
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder18, strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass1, strArray22);
        java.lang.Float float26 = multiMatchQueryBuilder25.getcutoffFrequency();
        multiMatchQueryBuilder25.setuseDisMax((java.lang.Boolean) false);
        multiMatchQueryBuilder25.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 97,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertTrue("'" + fieldCaseConversion0 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE + "'", fieldCaseConversion0.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE));
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(queryValidationException11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(fuzziness17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNull(float26);
    }

    @Test
    public void test10781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10781");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type8 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type9 = type8.matchQueryType();
        float float10 = type8.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = multiMatchQueryBuilder11.zeroTermsQuery;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery13);
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder11.getfields();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput16 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder11.writeTo(streamOutput16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type8.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type9.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(zeroTermsQuery12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test10782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10782");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException20 = multiMatchQueryBuilder19.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder19.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder19.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type25 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        multiMatchQueryBuilder24.type = type25;
        float float27 = type25.tieBreaker();
        float float28 = type25.tieBreaker();
        float float29 = type25.tieBreaker();
        org.elasticsearch.common.ParseField parseField30 = type25.parseField();
        org.elasticsearch.common.ParseField parseField31 = type25.parseField();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(queryValidationException20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type25.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 0.0f + "'", float27 == 0.0f);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 0.0f + "'", float28 == 0.0f);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(parseField30);
        org.junit.Assert.assertNotNull(parseField31);
    }

    @Test
    public void test10783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10783");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("hi!");
        org.elasticsearch.index.query.Operator operator19 = null;
        multiMatchQueryBuilder16.operator = operator19;
        multiMatchQueryBuilder16.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList23 = multiMatchQueryBuilder16.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder16.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"analyzer\" : \"\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.prefixLength(52);
        multiMatchQueryBuilder25.slop = 1;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test10784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10784");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Integer int15 = multiMatchQueryBuilder14.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = multiMatchQueryBuilder14.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(zeroTermsQuery18);
    }

    @Test
    public void test10785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10785");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        java.lang.String str32 = multiMatchQueryBuilder27.getrewrite();
        java.lang.String str33 = multiMatchQueryBuilder27.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder27.useDisMax(true);
        multiMatchQueryBuilder27.prefixLength = 10;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap38 = multiMatchQueryBuilder27.getfieldsBoosts();
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException48 = multiMatchQueryBuilder43.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder43.cutoffFrequency((float) (byte) 100);
        java.lang.String str51 = multiMatchQueryBuilder43.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder43.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder43.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.tieBreaker((float) 1L);
        multiMatchQueryBuilder57.setcutoffFrequency((java.lang.Float) 0.0f);
        java.lang.String[] strArray63 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray63);
        org.elasticsearch.index.query.Operator operator65 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.operator(operator65);
        multiMatchQueryBuilder64.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator69 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder64.operator(operator69);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder70.maxExpansions((int) (short) 10);
        java.lang.String[] strArray76 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray76);
        org.elasticsearch.index.query.Operator operator78 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder77.operator(operator78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder77.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder81.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder81.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness86 = multiMatchQueryBuilder81.getfuzziness();
        multiMatchQueryBuilder70.fuzziness = fuzziness86;
        multiMatchQueryBuilder57.setfuzziness(fuzziness86);
        multiMatchQueryBuilder27.setfuzziness(fuzziness86);
        multiMatchQueryBuilder22.setfuzziness(fuzziness86);
        org.elasticsearch.index.query.Operator operator91 = multiMatchQueryBuilder22.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(strObjectFloatHashMap38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(queryValidationException48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNotNull(fuzziness86);
        org.junit.Assert.assertNull(operator91);
    }

    @Test
    public void test10786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10786");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.lang.Integer int8 = multiMatchQueryBuilder4.getmaxExpansions();
        multiMatchQueryBuilder4.useDisMax = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.prefixLength(0);
        java.lang.Boolean boolean13 = multiMatchQueryBuilder12.getuseDisMax();
        multiMatchQueryBuilder12.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}";
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap25 = multiMatchQueryBuilder24.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder24.lenient(false);
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder33.settype(type36);
        multiMatchQueryBuilder12.settype(type36);
        java.lang.Boolean boolean39 = multiMatchQueryBuilder12.lenient;
        java.lang.String str40 = multiMatchQueryBuilder12.getanalyzer();
        org.elasticsearch.index.query.Operator operator41 = multiMatchQueryBuilder12.getoperator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + boolean13 + "' != '" + true + "'", boolean13, true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(strObjectFloatHashMap25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNull(boolean39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str40, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNull(operator41);
    }

    @Test
    public void test10787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10787");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.Integer int15 = multiMatchQueryBuilder11.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.getPROTOTYPE();
        java.lang.Object obj17 = multiMatchQueryBuilder16.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.boost((float) (short) 1);
        org.elasticsearch.common.io.stream.StreamInput streamInput20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.readFrom(streamInput20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test10788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10788");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.lang.String[] strArray4 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder5 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray4);
        org.elasticsearch.index.query.Operator operator6 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder5.operator(operator6);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder7.lenient(false);
        java.lang.String str10 = multiMatchQueryBuilder9.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder9.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException22 = multiMatchQueryBuilder17.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.getPROTOTYPE();
        multiMatchQueryBuilder27.settieBreaker((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = multiMatchQueryBuilder27.zeroTermsQuery;
        java.lang.Object obj31 = multiMatchQueryBuilder27.gettext();
        java.lang.String[] strArray35 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray35);
        org.elasticsearch.index.query.Operator operator37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.operator(operator37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder36.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException41 = multiMatchQueryBuilder36.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder36.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder36.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder36.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness48 = multiMatchQueryBuilder36.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder36.slop((int) (short) 0);
        multiMatchQueryBuilder36.setslop((java.lang.Integer) 100);
        java.lang.Boolean boolean53 = multiMatchQueryBuilder36.getuseDisMax();
        java.lang.String str54 = multiMatchQueryBuilder36.fuzzyRewrite;
        java.lang.String[] strArray59 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray59);
        java.lang.String[] strArray65 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray65);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray59, strArray65);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str54, strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj31, strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder12, strArray59);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder71 = org.elasticsearch.common.xcontent.XContentBuilder.builder(xContent0, strArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "multi_match" + "'", str10, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(queryValidationException22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(zeroTermsQuery30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(queryValidationException41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(fuzziness48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(boolean53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray65);
    }

    @Test
    public void test10789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10789");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.minimumShouldMatch("");
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder4, strArray19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = multiMatchQueryBuilder22.getzeroTermsQuery();
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder22.getfuzziness();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(zeroTermsQuery23);
        org.junit.Assert.assertNull(fuzziness24);
    }

    @Test
    public void test10790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10790");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = multiMatchQueryBuilder13.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder13.useDisMax(false);
        multiMatchQueryBuilder24.setprefixLength((java.lang.Integer) 100);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(type22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test10791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10791");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.queryName("");
        multiMatchQueryBuilder14.setrewrite("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder14.fieldsBoosts;
        multiMatchQueryBuilder14.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.getPROTOTYPE();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test10792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10792");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder24.setoperator(operator29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder24.zeroTermsQuery = zeroTermsQuery31;
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        multiMatchQueryBuilder37.maxExpansions = 0;
        java.lang.Boolean boolean40 = multiMatchQueryBuilder37.lenient;
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap50 = multiMatchQueryBuilder49.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.minimumShouldMatch("multi_match");
        java.lang.String str53 = multiMatchQueryBuilder52.toString();
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.Operator operator59 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.operator(operator59);
        java.lang.String str61 = multiMatchQueryBuilder58.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness62 = multiMatchQueryBuilder58.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder58.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.cutoffFrequency((float) '4');
        boolean boolean67 = multiMatchQueryBuilder52.equals((java.lang.Object) multiMatchQueryBuilder64);
        multiMatchQueryBuilder64.setmaxExpansions((java.lang.Integer) (-1));
        multiMatchQueryBuilder64.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder37.fuzziness((java.lang.Object) multiMatchQueryBuilder64);
        java.lang.String str73 = multiMatchQueryBuilder64.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder64.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder75.maxExpansions(100);
        java.lang.String[] strArray81 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray81);
        org.elasticsearch.index.query.Operator operator83 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder82.operator(operator83);
        java.lang.String str85 = multiMatchQueryBuilder82.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness86 = multiMatchQueryBuilder82.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = multiMatchQueryBuilder82.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type89 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder82.settype(type89);
        org.elasticsearch.common.ParseField parseField91 = type89.parseField();
        multiMatchQueryBuilder77.type = type89;
        java.lang.String str93 = multiMatchQueryBuilder77.fuzzyRewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(boolean40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(strObjectFloatHashMap50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str53, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "multi_match" + "'", str61, "multi_match");
        org.junit.Assert.assertNull(fuzziness62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "multi_match" + "'", str85, "multi_match");
        org.junit.Assert.assertNull(fuzziness86);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder88);
        org.junit.Assert.assertTrue("'" + type89 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type89.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField91);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test10793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10793");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder4.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.boost((float) 0L);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.maxExpansions(10);
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test10794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10794");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        java.lang.String str13 = multiMatchQueryBuilder4.fuzzyRewrite;
        float float14 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.QueryShardContext queryShardContext15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query16 = multiMatchQueryBuilder4.toFilter(queryShardContext15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
    }

    @Test
    public void test10795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10795");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList18 = multiMatchQueryBuilder4.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.rewrite("hi!");
        java.lang.String str21 = multiMatchQueryBuilder20.getfuzzyRewrite();
        java.lang.Boolean boolean22 = multiMatchQueryBuilder20.getlenient();
        org.elasticsearch.index.query.Operator operator23 = null;
        multiMatchQueryBuilder20.operator = operator23;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type25 = multiMatchQueryBuilder20.type;
        java.lang.String[] strArray29 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray29);
        org.elasticsearch.index.query.Operator operator31 = null;
        multiMatchQueryBuilder30.operator = operator31;
        org.elasticsearch.common.unit.Fuzziness fuzziness33 = multiMatchQueryBuilder30.getfuzziness();
        multiMatchQueryBuilder30.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder30.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap39 = null;
        multiMatchQueryBuilder30.fieldsBoosts = strObjectFloatHashMap39;
        multiMatchQueryBuilder30.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder30.zeroTermsQuery(zeroTermsQuery43);
        org.elasticsearch.common.unit.Fuzziness fuzziness45 = null;
        multiMatchQueryBuilder44.fuzziness = fuzziness45;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder44.zeroTermsQuery(zeroTermsQuery47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder44.maxExpansions((int) (short) 100);
        org.elasticsearch.index.query.Operator operator51 = null;
        multiMatchQueryBuilder44.setoperator(operator51);
        java.lang.Integer int53 = multiMatchQueryBuilder44.slop;
        java.lang.String str54 = multiMatchQueryBuilder44.getfuzzyRewrite();
        boolean boolean55 = multiMatchQueryBuilder20.equals((java.lang.Object) str54);
        java.lang.String str56 = multiMatchQueryBuilder20.getName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertNull(type25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNull(fuzziness33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "multi_match" + "'", str56, "multi_match");
    }

    @Test
    public void test10796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10796");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        java.util.List<java.lang.String> strList21 = multiMatchQueryBuilder20.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = multiMatchQueryBuilder20.type;
        java.lang.String str23 = multiMatchQueryBuilder20.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder20.getfuzziness();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "multi_match" + "'", str23, "multi_match");
        org.junit.Assert.assertNull(fuzziness24);
    }

    @Test
    public void test10797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10797");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        multiMatchQueryBuilder13.prefixLength = 10;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap16 = multiMatchQueryBuilder13.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder13.cutoffFrequency((float) (short) 0);
        java.lang.String str19 = multiMatchQueryBuilder13.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.cutoffFrequency((float) 10L);
        java.lang.String[] strArray25 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray25);
        org.elasticsearch.index.query.Operator operator27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.operator(operator27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException31 = multiMatchQueryBuilder26.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder26.cutoffFrequency((float) (byte) 100);
        float float34 = multiMatchQueryBuilder26.boost();
        multiMatchQueryBuilder26.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder26.rewrite("multi_match");
        java.lang.String str39 = multiMatchQueryBuilder38.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap40 = null;
        multiMatchQueryBuilder38.fieldsBoosts = strObjectFloatHashMap40;
        java.util.List<java.lang.String> strList42 = multiMatchQueryBuilder38.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type43 = multiMatchQueryBuilder38.type;
        multiMatchQueryBuilder38.settieBreaker((java.lang.Float) (-1.0f));
        float float46 = multiMatchQueryBuilder38.boost();
        java.lang.String[] strArray50 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray50);
        org.elasticsearch.index.query.Operator operator52 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.operator(operator52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.lenient(false);
        java.lang.Integer int56 = multiMatchQueryBuilder55.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder55.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str59 = multiMatchQueryBuilder55.minimumShouldMatch;
        java.lang.String[] strArray63 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray63);
        org.elasticsearch.index.query.Operator operator65 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.operator(operator65);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder64.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException69 = multiMatchQueryBuilder64.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder64.cutoffFrequency((float) (byte) 100);
        java.lang.String str72 = multiMatchQueryBuilder64.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder64.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness75 = multiMatchQueryBuilder64.getfuzziness();
        org.elasticsearch.common.unit.Fuzziness fuzziness76 = null;
        multiMatchQueryBuilder64.fuzziness = fuzziness76;
        java.lang.Integer int78 = multiMatchQueryBuilder64.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery79 = multiMatchQueryBuilder64.zeroTermsQuery;
        boolean boolean80 = multiMatchQueryBuilder55.equals((java.lang.Object) zeroTermsQuery79);
        java.lang.String[] strArray85 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray85);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray85);
        java.lang.String[] strArray91 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray91);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray85, strArray91);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder94 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean80, strArray85);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder95 = multiMatchQueryBuilder38.fuzziness((java.lang.Object) multiMatchQueryBuilder94);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder97 = multiMatchQueryBuilder38.prefixLength((int) 'a');
        boolean boolean98 = multiMatchQueryBuilder13.equals((java.lang.Object) 'a');
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(strObjectFloatHashMap16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(queryValidationException31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 1.0f + "'", float34 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNull(type43);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + 1.0f + "'", float46 == 1.0f);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNull(queryValidationException69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNull(fuzziness75);
        org.junit.Assert.assertNull(int78);
        org.junit.Assert.assertNull(zeroTermsQuery79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder95);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test10798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10798");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.String str1 = multiMatchQueryBuilder0.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery2 = multiMatchQueryBuilder0.zeroTermsQuery;
        multiMatchQueryBuilder0.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder0.zeroTermsQuery(zeroTermsQuery5);
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = null;
        multiMatchQueryBuilder0.setfuzziness(fuzziness7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder0.slop(0);
        multiMatchQueryBuilder0.tieBreaker = 1.0f;
        java.lang.Boolean boolean13 = multiMatchQueryBuilder0.useDisMax;
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str1, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(zeroTermsQuery2);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertEquals("'" + boolean13 + "' != '" + false + "'", boolean13, false);
    }

    @Test
    public void test10799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10799");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList18 = multiMatchQueryBuilder4.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.prefixLength((int) ' ');
        java.lang.Integer int21 = multiMatchQueryBuilder4.maxExpansions;
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(int21);
    }

    @Test
    public void test10800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10800");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        multiMatchQueryBuilder8.setprefixLength((java.lang.Integer) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.tieBreaker((float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.tieBreaker((float) (-1L));
        org.elasticsearch.index.query.Operator operator16 = null;
        multiMatchQueryBuilder15.operator = operator16;
        java.lang.String str18 = multiMatchQueryBuilder15.getminimumShouldMatch();
        java.lang.String str19 = multiMatchQueryBuilder15.rewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test10801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10801");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.Operator operator14 = null;
        multiMatchQueryBuilder4.setoperator(operator14);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", 100.0f);
        org.elasticsearch.index.query.Operator operator19 = multiMatchQueryBuilder18.operator;
        multiMatchQueryBuilder18.cutoffFrequency = 97.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(operator19);
    }

    @Test
    public void test10802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10802");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder14.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder17.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"\\\"\\n  }\\n}\",\n    \"slop\" : 10,\n    \"maxExpansions\" : -1,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"cutoff_frequency\\\" : -1.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) 0);
        java.lang.String str23 = multiMatchQueryBuilder17.analyzer;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test10803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10803");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Boolean boolean15 = multiMatchQueryBuilder11.lenient;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap16 = null;
        multiMatchQueryBuilder11.setfieldsBoosts(strObjectFloatHashMap16);
        java.lang.String str18 = multiMatchQueryBuilder11.getminimumShouldMatch();
        java.lang.Integer int19 = multiMatchQueryBuilder11.getslop();
        java.lang.String str20 = multiMatchQueryBuilder11.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder11.maxExpansions((int) (byte) 10);
        multiMatchQueryBuilder11.settieBreaker((java.lang.Float) 100.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test10804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10804");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder20.fuzziness;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = null;
        multiMatchQueryBuilder20.fieldsBoosts = strObjectFloatHashMap22;
        multiMatchQueryBuilder20.setprefixLength((java.lang.Integer) 0);
        java.lang.String str26 = multiMatchQueryBuilder20.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder20.slop((int) '4');
        multiMatchQueryBuilder28.slop = 0;
        java.lang.Object obj31 = multiMatchQueryBuilder28.gettext();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertEquals("'" + obj31 + "' != '" + "multi_match" + "'", obj31, "multi_match");
    }

    @Test
    public void test10805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10805");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.cutoffFrequency((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.slop(0);
        java.lang.Boolean boolean15 = multiMatchQueryBuilder10.getlenient();
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder10.fields;
        java.lang.String str17 = multiMatchQueryBuilder10.analyzer;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test10806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10806");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.String str1 = multiMatchQueryBuilder0.getminimumShouldMatch();
        float float2 = multiMatchQueryBuilder0.boost();
        multiMatchQueryBuilder0.tieBreaker = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type5 = multiMatchQueryBuilder0.type;
        multiMatchQueryBuilder0.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"\"\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str1, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f);
        org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type5.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
    }

    @Test
    public void test10807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10807");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) true);
        java.lang.String str19 = multiMatchQueryBuilder4.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.tieBreaker((float) (-1));
        java.lang.Boolean boolean24 = multiMatchQueryBuilder21.lenient;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(boolean24);
    }

    @Test
    public void test10808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10808");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        java.lang.String str12 = multiMatchQueryBuilder8.fuzzyRewrite;
        multiMatchQueryBuilder8.settieBreaker((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.cutoffFrequency((float) (short) 0);
        multiMatchQueryBuilder8.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) 35.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test10809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10809");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) (-1.0f));
        multiMatchQueryBuilder8.slop = 100;
        java.lang.String str18 = multiMatchQueryBuilder8.getrewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test10810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10810");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.prefixLength = 10;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.setfieldsBoosts(strObjectFloatHashMap13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("", (float) (byte) 100);
        java.lang.String str18 = multiMatchQueryBuilder17.getminimumShouldMatch();
        org.elasticsearch.index.query.Operator operator19 = multiMatchQueryBuilder17.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.boost((float) (-1));
        java.lang.String[] strArray25 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray25);
        org.elasticsearch.index.query.Operator operator27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.operator(operator27);
        java.lang.Boolean boolean29 = multiMatchQueryBuilder26.getlenient();
        multiMatchQueryBuilder26.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type32 = multiMatchQueryBuilder26.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder26.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int35 = multiMatchQueryBuilder34.prefixLength;
        multiMatchQueryBuilder34.maxExpansions = 0;
        org.elasticsearch.common.unit.Fuzziness fuzziness38 = multiMatchQueryBuilder34.fuzziness;
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type48 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type49 = type48.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder45.type(type48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder34.type(type48);
        multiMatchQueryBuilder21.type = type48;
        java.lang.Integer int53 = multiMatchQueryBuilder21.getmaxExpansions();
        java.lang.Boolean boolean54 = multiMatchQueryBuilder21.getlenient();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(operator19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(boolean29);
        org.junit.Assert.assertNull(type32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNull(fuzziness38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type48.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type49.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNull(boolean54);
    }

    @Test
    public void test10811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10811");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 1,\n    \"max_expansions\" : 100,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder16.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = multiMatchQueryBuilder16.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNull(zeroTermsQuery22);
    }

    @Test
    public void test10812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10812");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 1.0f);
        org.elasticsearch.common.xcontent.XContentType xContentType14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference15 = multiMatchQueryBuilder4.buildAsBytes(xContentType14);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
    }

    @Test
    public void test10813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10813");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        multiMatchQueryBuilder13.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder19.prefixLength = 35;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test10814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10814");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder16.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder16.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        java.lang.String str31 = multiMatchQueryBuilder28.getWriteableName();
        java.lang.Boolean boolean32 = multiMatchQueryBuilder28.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder28.getPROTOTYPE();
        multiMatchQueryBuilder28.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray39 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray39);
        org.elasticsearch.index.query.Operator operator41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.operator(operator41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException45 = multiMatchQueryBuilder40.validate();
        java.lang.Integer int46 = multiMatchQueryBuilder40.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery47 = multiMatchQueryBuilder40.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder40.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder40.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder40.boost((float) 0);
        java.lang.String str55 = multiMatchQueryBuilder40.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap56 = multiMatchQueryBuilder40.fieldsBoosts;
        multiMatchQueryBuilder28.fieldsBoosts = strObjectFloatHashMap56;
        multiMatchQueryBuilder16.setfieldsBoosts(strObjectFloatHashMap56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder16.lenient(true);
        java.lang.String[] strArray64 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray64);
        org.elasticsearch.index.query.Operator operator66 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder65.operator(operator66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder65.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException70 = multiMatchQueryBuilder65.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery71 = multiMatchQueryBuilder65.getzeroTermsQuery();
        java.lang.Integer int72 = multiMatchQueryBuilder65.getmaxExpansions();
        multiMatchQueryBuilder65.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder16.fuzziness((java.lang.Object) multiMatchQueryBuilder65);
        multiMatchQueryBuilder75.setlenient((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "multi_match" + "'", str31, "multi_match");
        org.junit.Assert.assertNull(boolean32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(queryValidationException45);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNull(zeroTermsQuery47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNull(queryValidationException70);
        org.junit.Assert.assertNull(zeroTermsQuery71);
        org.junit.Assert.assertNull(int72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
    }

    @Test
    public void test10815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10815");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String str16 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.useDisMax(true);
        float float21 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) (-1));
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap24 = multiMatchQueryBuilder4.fieldsBoosts;
        multiMatchQueryBuilder4.cutoffFrequency = 10.0f;
        org.elasticsearch.index.query.QueryShardContext queryShardContext27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query28 = multiMatchQueryBuilder4.toFilter(queryShardContext27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 1.0f + "'", float21 == 1.0f);
        org.junit.Assert.assertNull(strObjectFloatHashMap24);
    }

    @Test
    public void test10816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10816");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder16.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder16.type;
        multiMatchQueryBuilder16.settieBreaker((java.lang.Float) (-1.0f));
        float float24 = multiMatchQueryBuilder16.boost();
        java.lang.Integer int25 = multiMatchQueryBuilder16.maxExpansions;
        multiMatchQueryBuilder16.setslop((java.lang.Integer) 1);
        multiMatchQueryBuilder16.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder16.lenient(true);
        java.lang.String str32 = multiMatchQueryBuilder31.getrewrite();
        org.elasticsearch.index.query.QueryShardContext queryShardContext33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query34 = multiMatchQueryBuilder31.toQuery(queryShardContext33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 1.0f + "'", float24 == 1.0f);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "multi_match" + "'", str32, "multi_match");
    }

    @Test
    public void test10817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10817");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 10);
        java.lang.Integer int19 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator22 = null;
        multiMatchQueryBuilder4.setoperator(operator22);
        java.lang.Integer int24 = multiMatchQueryBuilder4.prefixLength;
        org.elasticsearch.index.query.Operator operator25 = multiMatchQueryBuilder4.getoperator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(operator25);
    }

    @Test
    public void test10818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10818");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.maxExpansions((int) ' ');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = multiMatchQueryBuilder19.zeroTermsQuery;
        multiMatchQueryBuilder19.tieBreaker = 10.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder19.zeroTermsQuery(zeroTermsQuery27);
        multiMatchQueryBuilder19.setcutoffFrequency((java.lang.Float) 100.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(zeroTermsQuery24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test10819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10819");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap13;
        multiMatchQueryBuilder4.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery17);
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = null;
        multiMatchQueryBuilder18.fuzziness = fuzziness19;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery21);
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        java.lang.Boolean boolean30 = multiMatchQueryBuilder27.getlenient();
        multiMatchQueryBuilder27.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder27.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness35 = multiMatchQueryBuilder34.fuzziness;
        java.lang.Integer int36 = multiMatchQueryBuilder34.slop;
        multiMatchQueryBuilder34.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder34.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder18.fuzziness((java.lang.Object) multiMatchQueryBuilder40);
        multiMatchQueryBuilder18.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery44);
        org.elasticsearch.common.xcontent.XContentType xContentType46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference47 = multiMatchQueryBuilder45.buildAsBytes(xContentType46);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(fuzziness35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
    }

    @Test
    public void test10820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10820");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int13 = multiMatchQueryBuilder12.prefixLength;
        multiMatchQueryBuilder12.maxExpansions = 0;
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder12.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.useDisMax(false);
        multiMatchQueryBuilder18.slop = 97;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test10821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10821");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.Object obj17 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.tieBreaker = (-1.0f);
        java.lang.Integer int20 = multiMatchQueryBuilder4.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        multiMatchQueryBuilder4.setzeroTermsQuery(zeroTermsQuery24);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder4.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 0,\n    \"fuzzyRewrite\" : \"\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) (-1));
        java.util.List<java.lang.String> strList32 = multiMatchQueryBuilder4.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(strList32);
    }

    @Test
    public void test10822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10822");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        java.lang.String str16 = multiMatchQueryBuilder13.getfuzzyRewrite();
        multiMatchQueryBuilder13.setmaxExpansions((java.lang.Integer) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder13.tieBreaker((float) ' ');
        org.elasticsearch.index.query.Operator operator21 = multiMatchQueryBuilder13.getoperator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(operator21);
    }

    @Test
    public void test10823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10823");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder11.getfieldsBoosts();
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.String str20 = multiMatchQueryBuilder17.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder17.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder17.settype(type24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder11.type(type24);
        multiMatchQueryBuilder11.tieBreaker = 1.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder11.maxExpansions(0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
    }

    @Test
    public void test10824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10824");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = null;
        multiMatchQueryBuilder13.fuzziness = fuzziness16;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.zeroTermsQuery(zeroTermsQuery18);
        java.lang.Object obj20 = multiMatchQueryBuilder13.text;
        multiMatchQueryBuilder13.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder13.lenient(true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + "multi_match" + "'", obj20, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test10825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10825");
        java.lang.String[] strArray4 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder5 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray4);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray4);
        java.lang.Float float7 = multiMatchQueryBuilder6.getcutoffFrequency();
        org.elasticsearch.index.query.Operator operator8 = multiMatchQueryBuilder6.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.field("", (float) 100L);
        multiMatchQueryBuilder6.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}";
        java.lang.String[] strArray17 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray17);
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.operator(operator19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException23 = multiMatchQueryBuilder18.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.cutoffFrequency((float) (byte) 100);
        java.lang.String str26 = multiMatchQueryBuilder18.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder18.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness29 = multiMatchQueryBuilder18.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder18.getPROTOTYPE();
        java.lang.String[] strArray34 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder30, strArray34);
        boolean boolean37 = multiMatchQueryBuilder6.equals((java.lang.Object) multiMatchQueryBuilder30);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder38 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params39 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder40 = multiMatchQueryBuilder30.toXContent(xContentBuilder38, params39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNull(float7);
        org.junit.Assert.assertNull(operator8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(queryValidationException23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(fuzziness29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(params39);
    }

    @Test
    public void test10826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10826");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        multiMatchQueryBuilder13.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        multiMatchQueryBuilder19.zeroTermsQuery = zeroTermsQuery20;
        org.elasticsearch.index.query.QueryValidationException queryValidationException22 = multiMatchQueryBuilder19.validate();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(queryValidationException22);
    }

    @Test
    public void test10827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10827");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.operator(operator16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.rewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str22 = multiMatchQueryBuilder19.toString();
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder31.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness36 = multiMatchQueryBuilder31.getfuzziness();
        multiMatchQueryBuilder19.fuzziness = fuzziness36;
        multiMatchQueryBuilder19.maxExpansions = 52;
        org.elasticsearch.index.query.Operator operator40 = null;
        multiMatchQueryBuilder19.operator = operator40;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}" + "'", str22, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(fuzziness36);
    }

    @Test
    public void test10828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10828");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        java.lang.String str20 = multiMatchQueryBuilder8.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder8.tieBreaker(0.0f);
        java.lang.String str23 = multiMatchQueryBuilder8.getWriteableName();
        multiMatchQueryBuilder8.settieBreaker((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder8.prefixLength((int) (short) 10);
        org.elasticsearch.common.unit.Fuzziness fuzziness28 = multiMatchQueryBuilder27.fuzziness;
        java.lang.String str29 = multiMatchQueryBuilder27.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.cutoffFrequency((float) (short) 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "multi_match" + "'", str23, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(fuzziness28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test10829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10829");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        java.lang.Integer int13 = multiMatchQueryBuilder11.slop;
        multiMatchQueryBuilder11.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.prefixLength((int) (short) 1);
        multiMatchQueryBuilder11.lenient = true;
        java.lang.String str20 = multiMatchQueryBuilder11.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str23 = multiMatchQueryBuilder11.getNAME();
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder11.fuzziness;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "multi_match" + "'", str23, "multi_match");
        org.junit.Assert.assertNull(fuzziness24);
    }

    @Test
    public void test10830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10830");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.useDisMax(true);
        multiMatchQueryBuilder16.setslop((java.lang.Integer) 0);
        java.lang.Boolean boolean19 = multiMatchQueryBuilder16.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.getPROTOTYPE();
        multiMatchQueryBuilder16.setprefixLength((java.lang.Integer) 0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + true + "'", boolean19, true);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test10831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10831");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        multiMatchQueryBuilder4.setminimumShouldMatch("");
        java.lang.String str18 = multiMatchQueryBuilder4.rewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = multiMatchQueryBuilder4.getfieldsBoosts();
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray25 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray25);
        org.elasticsearch.index.query.Operator operator27 = null;
        multiMatchQueryBuilder26.operator = operator27;
        org.elasticsearch.common.unit.Fuzziness fuzziness29 = multiMatchQueryBuilder26.getfuzziness();
        multiMatchQueryBuilder26.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder26.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap35 = null;
        multiMatchQueryBuilder26.fieldsBoosts = strObjectFloatHashMap35;
        multiMatchQueryBuilder26.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder26.zeroTermsQuery(zeroTermsQuery39);
        org.elasticsearch.common.unit.Fuzziness fuzziness41 = null;
        multiMatchQueryBuilder40.fuzziness = fuzziness41;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.zeroTermsQuery(zeroTermsQuery43);
        java.lang.String[] strArray48 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray48);
        org.elasticsearch.index.query.Operator operator50 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.operator(operator50);
        java.lang.Boolean boolean52 = multiMatchQueryBuilder49.getlenient();
        multiMatchQueryBuilder49.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder49.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness57 = multiMatchQueryBuilder56.fuzziness;
        java.lang.Integer int58 = multiMatchQueryBuilder56.slop;
        multiMatchQueryBuilder56.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder56.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder40.fuzziness((java.lang.Object) multiMatchQueryBuilder62);
        java.lang.Float float64 = multiMatchQueryBuilder40.tieBreaker;
        org.elasticsearch.common.unit.Fuzziness fuzziness65 = multiMatchQueryBuilder40.getfuzziness();
        multiMatchQueryBuilder4.fuzziness = fuzziness65;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(strObjectFloatHashMap19);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNull(fuzziness29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(boolean52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNull(fuzziness57);
        org.junit.Assert.assertNull(int58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNull(float64);
        org.junit.Assert.assertNotNull(fuzziness65);
    }

    @Test
    public void test10832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10832");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException25 = multiMatchQueryBuilder20.validate();
        java.lang.Integer int26 = multiMatchQueryBuilder20.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery27 = multiMatchQueryBuilder20.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder20.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder20.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder20.boost((float) 0);
        java.lang.String str35 = multiMatchQueryBuilder20.fuzzyRewrite;
        java.lang.String[] strArray39 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray39);
        org.elasticsearch.index.query.Operator operator41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.operator(operator41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap45 = multiMatchQueryBuilder44.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder44.zeroTermsQuery(zeroTermsQuery46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder44.lenient(false);
        multiMatchQueryBuilder44.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery52 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder44.zeroTermsQuery(zeroTermsQuery52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type56 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder53.settype(type56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder20.fuzziness((java.lang.Object) type56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder13.type(type56);
        multiMatchQueryBuilder13.settieBreaker((java.lang.Float) 1.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(queryValidationException25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNull(zeroTermsQuery27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(strObjectFloatHashMap45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type56.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
    }

    @Test
    public void test10833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10833");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.Integer int17 = multiMatchQueryBuilder16.getmaxExpansions();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder16.getlenient();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = multiMatchQueryBuilder16.getfieldsBoosts();
        java.lang.Integer int20 = multiMatchQueryBuilder16.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNull(strObjectFloatHashMap19);
        org.junit.Assert.assertNull(int20);
    }

    @Test
    public void test10834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10834");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder13.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float24 = multiMatchQueryBuilder13.cutoffFrequency;
        multiMatchQueryBuilder13.setcutoffFrequency((java.lang.Float) 32.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float24);
    }

    @Test
    public void test10835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10835");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setrewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        java.lang.Float float19 = multiMatchQueryBuilder16.tieBreaker;
        java.lang.Object obj20 = multiMatchQueryBuilder16.text;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(float19);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + "multi_match" + "'", obj20, "multi_match");
    }

    @Test
    public void test10836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10836");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        org.elasticsearch.index.query.Operator operator11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.operator(operator11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.prefixLength(100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.boost((float) (byte) 1);
        multiMatchQueryBuilder14.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"slop\" : 100,\n    \"prefixLength\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test10837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10837");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        java.lang.Float float13 = multiMatchQueryBuilder4.gettieBreaker();
        multiMatchQueryBuilder4.lenient = true;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = multiMatchQueryBuilder4.getzeroTermsQuery();
        multiMatchQueryBuilder4.prefixLength = 52;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.getPROTOTYPE();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNull(zeroTermsQuery16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test10838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10838");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        java.lang.Float float14 = multiMatchQueryBuilder8.getcutoffFrequency();
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.operator(operator15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float18 = type17.tieBreaker();
        org.elasticsearch.common.ParseField parseField19 = type17.parseField();
        float float20 = type17.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type17.matchQueryType();
        float float22 = type17.tieBreaker();
        org.elasticsearch.common.ParseField parseField23 = type17.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type24 = type17.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder8.type(type17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.prefixLength(97);
        multiMatchQueryBuilder25.setcutoffFrequency((java.lang.Float) 97.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type17.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertNotNull(parseField19);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 0.0f + "'", float22 == 0.0f);
        org.junit.Assert.assertNotNull(parseField23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type24.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test10839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10839");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.getPROTOTYPE();
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder20.toString();
        java.lang.String str22 = multiMatchQueryBuilder20.getanalyzer();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"prefixLength\" : 100,\n    \"maxExpansions\" : 100,\n    \"rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"cutoffFrequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str21, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"prefixLength\" : 100,\n    \"maxExpansions\" : 100,\n    \"rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"cutoffFrequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str22, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test10840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10840");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.useDisMax(true);
        java.lang.Integer int18 = multiMatchQueryBuilder17.getslop();
        float float19 = multiMatchQueryBuilder17.boost();
        float float20 = multiMatchQueryBuilder17.boost();
        java.lang.Object obj21 = multiMatchQueryBuilder17.gettext();
        java.lang.String str22 = multiMatchQueryBuilder17.analyzer;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 1.0f + "'", float19 == 1.0f);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 1.0f + "'", float20 == 1.0f);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + "multi_match" + "'", obj21, "multi_match");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str22, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test10841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10841");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str20 = multiMatchQueryBuilder19.fuzzyRewrite;
        java.lang.String str21 = multiMatchQueryBuilder19.fuzzyRewrite;
        multiMatchQueryBuilder19.prefixLength = 10;
        multiMatchQueryBuilder19.rewrite = "";
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap26 = multiMatchQueryBuilder19.getfieldsBoosts();
        multiMatchQueryBuilder19.setslop((java.lang.Integer) 52);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = null;
        multiMatchQueryBuilder19.zeroTermsQuery = zeroTermsQuery29;
        java.util.List<java.lang.String> strList31 = multiMatchQueryBuilder19.getfields();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(strObjectFloatHashMap26);
        org.junit.Assert.assertNotNull(strList31);
    }

    @Test
    public void test10842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10842");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        java.lang.String str17 = multiMatchQueryBuilder16.minimumShouldMatch;
        java.lang.String str18 = multiMatchQueryBuilder16.getfuzzyRewrite();
        java.lang.String str19 = multiMatchQueryBuilder16.getWriteableName();
        java.lang.Integer int20 = multiMatchQueryBuilder16.prefixLength;
        java.lang.String str21 = multiMatchQueryBuilder16.rewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test10843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10843");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        java.lang.String str20 = multiMatchQueryBuilder17.toString();
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.operator(operator21);
        java.lang.String str23 = multiMatchQueryBuilder17.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder17.getfuzziness();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str20, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(fuzziness24);
    }

    @Test
    public void test10844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10844");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        java.lang.String str14 = multiMatchQueryBuilder8.getfuzzyRewrite();
        java.lang.String str15 = multiMatchQueryBuilder8.rewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.cutoffFrequency((float) 100L);
        java.lang.String str18 = multiMatchQueryBuilder17.rewrite;
        multiMatchQueryBuilder17.lenient = true;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test10845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10845");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.field("", (float) (byte) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.getPROTOTYPE();
        java.util.List<java.lang.String> strList21 = multiMatchQueryBuilder20.fields;
        multiMatchQueryBuilder20.setcutoffFrequency((java.lang.Float) 1.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test10846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10846");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        java.lang.String str13 = multiMatchQueryBuilder4.getName();
        multiMatchQueryBuilder4.slop = 1;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.tieBreaker(0.0f);
        java.lang.String str23 = multiMatchQueryBuilder4.getName();
        java.lang.String str24 = multiMatchQueryBuilder4.getWriteableName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "multi_match" + "'", str23, "multi_match");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
    }

    @Test
    public void test10847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10847");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder13.setprefixLength((java.lang.Integer) 10);
        multiMatchQueryBuilder13.settieBreaker((java.lang.Float) (-1.0f));
        java.lang.Integer int24 = multiMatchQueryBuilder13.getslop();
        java.lang.Boolean boolean25 = multiMatchQueryBuilder13.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(boolean25);
    }

    @Test
    public void test10848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10848");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder11.getfieldsBoosts();
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.String str20 = multiMatchQueryBuilder17.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder17.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder17.settype(type24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder11.type(type24);
        multiMatchQueryBuilder26.settieBreaker((java.lang.Float) 100.0f);
        multiMatchQueryBuilder26.tieBreaker = 100.0f;
        org.elasticsearch.index.query.Operator operator31 = multiMatchQueryBuilder26.getoperator();
        multiMatchQueryBuilder26.settieBreaker((java.lang.Float) 1.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(operator31);
    }

    @Test
    public void test10849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10849");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.Boolean boolean16 = multiMatchQueryBuilder12.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder12.operator(operator19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"type\" : \"most_fields\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type23 = multiMatchQueryBuilder22.gettype();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(type23);
    }

    @Test
    public void test10850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10850");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        java.lang.String str13 = multiMatchQueryBuilder4.getName();
        multiMatchQueryBuilder4.tieBreaker = 52.0f;
        multiMatchQueryBuilder4.lenient = true;
        multiMatchQueryBuilder4.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"\\\"\\n  }\\n}\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.QueryShardContext queryShardContext20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query21 = multiMatchQueryBuilder4.toQuery(queryShardContext20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
    }

    @Test
    public void test10851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10851");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test10852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10852");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        java.lang.Float float16 = multiMatchQueryBuilder15.cutoffFrequency;
        multiMatchQueryBuilder15.useDisMax = true;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = null;
        multiMatchQueryBuilder15.setfieldsBoosts(strObjectFloatHashMap19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder15.getzeroTermsQuery();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = multiMatchQueryBuilder15.zeroTermsQuery;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap23 = multiMatchQueryBuilder15.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder15.lenient(true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNull(zeroTermsQuery22);
        org.junit.Assert.assertNull(strObjectFloatHashMap23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test10853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10853");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder4.toString();
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion16 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE;
        java.lang.Class<?> wildcardClass17 = fieldCaseConversion16.getClass();
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        java.lang.String str30 = multiMatchQueryBuilder22.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder22.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness33 = multiMatchQueryBuilder22.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder22.getPROTOTYPE();
        java.lang.String[] strArray38 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder34, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass17, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) strArray38);
        java.util.List<java.lang.String> strList43 = multiMatchQueryBuilder42.fields;
        multiMatchQueryBuilder42.maxExpansions = 100;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder42.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"fuzziness\" : \"BEST_FIELDS\",\n    \"tieBreaker\" : 0.0,\n    \"boost\" : 0.0\n  }\n}", (float) 1L);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertTrue("'" + fieldCaseConversion16 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE + "'", fieldCaseConversion16.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(fuzziness33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
    }

    @Test
    public void test10854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10854");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.QueryValidationException queryValidationException12 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type14 = type13.matchQueryType();
        multiMatchQueryBuilder4.settype(type13);
        java.lang.Float float16 = multiMatchQueryBuilder4.gettieBreaker();
        java.lang.String str17 = multiMatchQueryBuilder4.getanalyzer();
        java.lang.Object obj18 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = multiMatchQueryBuilder4.type;
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!^97.0\", \"\", \"hi!^97.0\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNull(queryValidationException12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type14.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + "multi_match" + "'", obj18, "multi_match");
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
    }

    @Test
    public void test10855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10855");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        java.lang.String str14 = multiMatchQueryBuilder4.getrewrite();
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.prefixLength((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        multiMatchQueryBuilder18.prefixLength = 97;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test10856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10856");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery10);
        multiMatchQueryBuilder11.maxExpansions = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str16 = multiMatchQueryBuilder15.getminimumShouldMatch();
        java.lang.Object obj17 = multiMatchQueryBuilder15.gettext();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder15.getuseDisMax();
        java.lang.Object obj19 = null;
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        java.lang.Boolean boolean27 = multiMatchQueryBuilder24.getlenient();
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder24.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder24.tieBreaker((float) (-1));
        multiMatchQueryBuilder24.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder24.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.common.ParseField parseField39 = type38.parseField();
        org.elasticsearch.common.ParseField parseField40 = type38.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder37.type(type38);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery42 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.zeroTermsQuery(zeroTermsQuery42);
        java.lang.String[] strArray47 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray47);
        org.elasticsearch.index.query.Operator operator49 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.operator(operator49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder48.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException53 = multiMatchQueryBuilder48.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder48.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder48.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder48.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness60 = multiMatchQueryBuilder48.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder48.slop((int) (short) 0);
        multiMatchQueryBuilder48.setslop((java.lang.Integer) 100);
        java.lang.Boolean boolean65 = multiMatchQueryBuilder48.getuseDisMax();
        java.lang.String str66 = multiMatchQueryBuilder48.fuzzyRewrite;
        java.lang.String[] strArray71 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray71);
        java.lang.String[] strArray77 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray77);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray71, strArray77);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str66, strArray71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder43, strArray71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj19, strArray71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder15, strArray71);
        java.lang.Integer int84 = multiMatchQueryBuilder83.getmaxExpansions();
        java.lang.String str85 = multiMatchQueryBuilder83.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder83.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = multiMatchQueryBuilder87.prefixLength(35);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(boolean27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(parseField39);
        org.junit.Assert.assertNotNull(parseField40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(queryValidationException53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(fuzziness60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNull(boolean65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNull(int84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
    }

    @Test
    public void test10857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10857");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.Operator operator24 = null;
        multiMatchQueryBuilder21.operator = operator24;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder21.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = multiMatchQueryBuilder21.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type29 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        multiMatchQueryBuilder21.type = type29;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder16.type(type29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder16.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.prefixLength(0);
        multiMatchQueryBuilder33.maxExpansions = 97;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(zeroTermsQuery28);
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type29.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
    }

    @Test
    public void test10858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10858");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.queryName("");
        java.util.List<java.lang.String> strList18 = multiMatchQueryBuilder4.fields;
        float float19 = multiMatchQueryBuilder4.boost();
        java.lang.Integer int20 = multiMatchQueryBuilder4.maxExpansions;
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.operator(operator21);
        java.lang.String str23 = multiMatchQueryBuilder22.rewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 1.0f + "'", float19 == 1.0f);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test10859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10859");
        java.lang.Object obj0 = null;
        java.lang.String[] strArray4 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder5 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray4);
        org.elasticsearch.index.query.Operator operator6 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder5.operator(operator6);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder5.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap10 = multiMatchQueryBuilder9.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder9.zeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder9.lenient(false);
        multiMatchQueryBuilder9.setcutoffFrequency((java.lang.Float) 1.0f);
        java.lang.Integer int17 = multiMatchQueryBuilder9.maxExpansions;
        java.lang.String str18 = multiMatchQueryBuilder9.minimumShouldMatch;
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException28 = multiMatchQueryBuilder23.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.cutoffFrequency((float) (byte) 100);
        java.lang.String str31 = multiMatchQueryBuilder23.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder23.queryName("");
        multiMatchQueryBuilder33.setslop((java.lang.Integer) 0);
        java.lang.String[] strArray39 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder9, strArray39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj0, strArray39);
        org.elasticsearch.index.query.Operator operator44 = null;
        multiMatchQueryBuilder43.operator = operator44;
        java.lang.Boolean boolean46 = multiMatchQueryBuilder43.getuseDisMax();
        java.lang.Integer int47 = multiMatchQueryBuilder43.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder43.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 10,\n    \"rewrite\" : \"\",\n    \"tieBreaker\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder43.getPROTOTYPE();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNull(strObjectFloatHashMap10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(queryValidationException28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNull(boolean46);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
    }

    @Test
    public void test10860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10860");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 10);
        java.lang.Integer int19 = multiMatchQueryBuilder4.slop;
        java.lang.Class<?> wildcardClass20 = multiMatchQueryBuilder4.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test10861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10861");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.Operator operator20 = multiMatchQueryBuilder19.getoperator();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder19.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.maxExpansions(0);
        java.lang.Boolean boolean24 = multiMatchQueryBuilder23.lenient;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.slop((int) (byte) -1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(operator20);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + boolean24 + "' != '" + false + "'", boolean24, false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test10862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10862");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"fuzziness\" : \"{\\n  \\\"MULTIMATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\", \\\"\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"MAX_EXPANSIONS\\\\\\\" : 1,\\\\N    \\\\\\\"LENIENT\\\\\\\" : FALSE,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 10.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAXEXPANSIONS\\\" : 100,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : 0,\n    \"minimumShouldMatch\" : \"hi!\",\n    \"fuzzyRewrite\" : \"multi_match\",\n    \"tieBreaker\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test10863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10863");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) 1.0f);
        org.elasticsearch.index.query.QueryValidationException queryValidationException16 = multiMatchQueryBuilder8.validate();
        multiMatchQueryBuilder8.slop = 1;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder8.useDisMax(true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(queryValidationException16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test10864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10864");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzziness\" : \"10\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test10865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10865");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder25.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder25.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = multiMatchQueryBuilder25.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField39 = type38.parseField();
        multiMatchQueryBuilder25.type = type38;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder20.type(type38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str44 = multiMatchQueryBuilder41.rewrite;
        java.lang.Boolean boolean45 = multiMatchQueryBuilder41.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder41.maxExpansions(1);
        java.lang.Integer int48 = multiMatchQueryBuilder41.getprefixLength();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(type37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(boolean45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(int48);
    }

    @Test
    public void test10866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10866");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        java.lang.String str14 = multiMatchQueryBuilder12.getfuzzyRewrite();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        multiMatchQueryBuilder19.minimumShouldMatch = "hi!";
        java.lang.Float float26 = multiMatchQueryBuilder19.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type28 = type27.matchQueryType();
        float float29 = type27.tieBreaker();
        multiMatchQueryBuilder19.type = type27;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder12.type(type27);
        multiMatchQueryBuilder31.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator34 = null;
        multiMatchQueryBuilder31.operator = operator34;
        multiMatchQueryBuilder31.tieBreaker = (-1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder31.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"slop\" : 0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator40 = multiMatchQueryBuilder31.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(operator40);
    }

    @Test
    public void test10867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10867");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float12 = multiMatchQueryBuilder8.gettieBreaker();
        multiMatchQueryBuilder8.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder18.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        multiMatchQueryBuilder25.operator = operator26;
        org.elasticsearch.common.unit.Fuzziness fuzziness28 = multiMatchQueryBuilder25.getfuzziness();
        multiMatchQueryBuilder25.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder25.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap34 = null;
        multiMatchQueryBuilder25.fieldsBoosts = strObjectFloatHashMap34;
        multiMatchQueryBuilder25.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder25.zeroTermsQuery(zeroTermsQuery38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder18.fuzziness((java.lang.Object) multiMatchQueryBuilder25);
        multiMatchQueryBuilder18.useDisMax = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type43 = multiMatchQueryBuilder18.gettype();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNull(fuzziness28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(type43);
    }

    @Test
    public void test10868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10868");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.prefixLength((-1));
        multiMatchQueryBuilder23.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}";
        multiMatchQueryBuilder23.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.QueryValidationException queryValidationException28 = multiMatchQueryBuilder23.validate();
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder23.operator = operator29;
        java.lang.String str31 = multiMatchQueryBuilder23.getNAME();
        java.lang.String str32 = multiMatchQueryBuilder23.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(queryValidationException28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "multi_match" + "'", str31, "multi_match");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}" + "'", str32, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
    }

    @Test
    public void test10869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10869");
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion0 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE;
        java.lang.Class<?> wildcardClass1 = fieldCaseConversion0.getClass();
        java.lang.String[] strArray5 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray5);
        org.elasticsearch.index.query.Operator operator7 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.operator(operator7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder6.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException11 = multiMatchQueryBuilder6.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder6.cutoffFrequency((float) (byte) 100);
        java.lang.String str14 = multiMatchQueryBuilder6.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder6.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness17 = multiMatchQueryBuilder6.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder6.getPROTOTYPE();
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder18, strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass1, strArray22);
        multiMatchQueryBuilder25.settieBreaker((java.lang.Float) 1.0f);
        multiMatchQueryBuilder25.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String str30 = multiMatchQueryBuilder25.analyzer;
        java.lang.Boolean boolean31 = multiMatchQueryBuilder25.getlenient();
        org.junit.Assert.assertTrue("'" + fieldCaseConversion0 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE + "'", fieldCaseConversion0.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE));
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(queryValidationException11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(fuzziness17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(boolean31);
    }

    @Test
    public void test10870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10870");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean25 = multiMatchQueryBuilder4.getlenient();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap26 = multiMatchQueryBuilder4.fieldsBoosts;
        java.lang.String str27 = multiMatchQueryBuilder4.minimumShouldMatch;
        multiMatchQueryBuilder4.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(boolean25);
        org.junit.Assert.assertNull(strObjectFloatHashMap26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test10871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10871");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float20 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.Object obj22 = multiMatchQueryBuilder21.text;
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException32 = multiMatchQueryBuilder27.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder27.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder27.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder27.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type39 = multiMatchQueryBuilder27.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type40 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField41 = type40.parseField();
        multiMatchQueryBuilder27.type = type40;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder21.type(type40);
        org.elasticsearch.common.ParseField parseField44 = type40.parseField();
        org.elasticsearch.common.ParseField parseField45 = type40.parseField();
        float float46 = type40.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type47 = type40.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type48 = type40.matchQueryType();
        multiMatchQueryBuilder4.settype(type40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder4.lenient(false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(float20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(queryValidationException32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(type39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type40.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(parseField44);
        org.junit.Assert.assertNotNull(parseField45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + 1.0f + "'", float46 == 1.0f);
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type47.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type48.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
    }

    @Test
    public void test10872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10872");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type9 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type10 = type9.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type9);
        multiMatchQueryBuilder11.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.tieBreaker((float) 10L);
        java.lang.Integer int16 = multiMatchQueryBuilder11.prefixLength;
        multiMatchQueryBuilder11.rewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"fuzziness\" : \"BEST_FIELDS\",\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 0.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.tieBreaker((float) 35);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type9.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type10.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test10873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10873");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder16.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder16.type;
        multiMatchQueryBuilder16.settieBreaker((java.lang.Float) (-1.0f));
        float float24 = multiMatchQueryBuilder16.boost();
        java.lang.Integer int25 = multiMatchQueryBuilder16.maxExpansions;
        multiMatchQueryBuilder16.setslop((java.lang.Integer) 1);
        multiMatchQueryBuilder16.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder16.lenient(true);
        multiMatchQueryBuilder31.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 0,\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 1.0f + "'", float24 == 1.0f);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test10874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10874");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        java.lang.Object obj16 = multiMatchQueryBuilder15.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder15.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder15.minimumShouldMatch;
        java.lang.Boolean boolean22 = multiMatchQueryBuilder15.getlenient();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "multi_match" + "'", obj16, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
        org.junit.Assert.assertNull(boolean22);
    }

    @Test
    public void test10875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10875");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.Operator operator19 = multiMatchQueryBuilder4.getoperator();
        java.lang.Boolean boolean20 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.Operator operator21 = null;
        multiMatchQueryBuilder4.operator = operator21;
        java.lang.String str23 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.String str24 = multiMatchQueryBuilder4.getNAME();
        java.util.List<java.lang.String> strList25 = multiMatchQueryBuilder4.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(fuzziness18);
        org.junit.Assert.assertNull(operator19);
        org.junit.Assert.assertEquals("'" + boolean20 + "' != '" + false + "'", boolean20, false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
        org.junit.Assert.assertNotNull(strList25);
    }

    @Test
    public void test10876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10876");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.tieBreaker((float) (short) 0);
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) true);
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        multiMatchQueryBuilder10.slop = 10;
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder10.tieBreaker = 52.0f;
        java.lang.Float float20 = multiMatchQueryBuilder10.cutoffFrequency;
        java.lang.Object obj21 = multiMatchQueryBuilder10.gettext();
        java.lang.String str22 = multiMatchQueryBuilder10.fuzzyRewrite;
        boolean boolean24 = multiMatchQueryBuilder10.equals((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"tie_breaker\" : 52.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        java.lang.String str25 = multiMatchQueryBuilder10.getanalyzer();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(float20);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + "multi_match" + "'", obj21, "multi_match");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test10877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10877");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery17;
        java.util.List<java.lang.String> strList19 = multiMatchQueryBuilder4.fields;
        java.lang.String str20 = multiMatchQueryBuilder4.getrewrite();
        java.lang.String str21 = multiMatchQueryBuilder4.getName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
    }

    @Test
    public void test10878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10878");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder4.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.boost((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder19.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : 10,\n    \"maxExpansions\" : -1,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}", (float) 10);
        multiMatchQueryBuilder22.slop = (-1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test10879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10879");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.useDisMax;
        multiMatchQueryBuilder4.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        multiMatchQueryBuilder22.minimumShouldMatch = "hi!";
        java.lang.Float float29 = multiMatchQueryBuilder22.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type31 = type30.matchQueryType();
        float float32 = type30.tieBreaker();
        multiMatchQueryBuilder22.type = type30;
        multiMatchQueryBuilder22.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder22.maxExpansions(100);
        org.elasticsearch.common.unit.Fuzziness fuzziness38 = null;
        multiMatchQueryBuilder22.setfuzziness(fuzziness38);
        multiMatchQueryBuilder22.setmaxExpansions((java.lang.Integer) 0);
        java.lang.Float float42 = multiMatchQueryBuilder22.tieBreaker;
        boolean boolean43 = multiMatchQueryBuilder4.equals((java.lang.Object) multiMatchQueryBuilder22);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery44 = null;
        multiMatchQueryBuilder22.setzeroTermsQuery(zeroTermsQuery44);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(float29);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type30.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type31.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 0.0f + "'", float32 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(float42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test10880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10880");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setrewrite("");
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.lenient(false);
        java.lang.String str20 = multiMatchQueryBuilder17.minimumShouldMatch;
        java.lang.String str21 = multiMatchQueryBuilder17.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test10881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10881");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        multiMatchQueryBuilder11.setslop((java.lang.Integer) 100);
        multiMatchQueryBuilder11.slop = (-1);
        float float16 = multiMatchQueryBuilder11.boost();
        multiMatchQueryBuilder11.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        float float19 = multiMatchQueryBuilder11.boost();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 1.0f + "'", float16 == 1.0f);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 1.0f + "'", float19 == 1.0f);
    }

    @Test
    public void test10882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10882");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        java.lang.String str13 = multiMatchQueryBuilder4.getName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery14;
        java.lang.Integer int16 = multiMatchQueryBuilder4.getslop();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder4.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
    }

    @Test
    public void test10883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10883");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getmaxExpansions();
        multiMatchQueryBuilder13.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : 10,\n    \"maxExpansions\" : -1,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder13.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test10884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10884");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder8.setanalyzer("multi_match");
        org.elasticsearch.index.query.QueryValidationException queryValidationException13 = multiMatchQueryBuilder8.validate();
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"prefix_length\" : 100,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(queryValidationException13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test10885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10885");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        multiMatchQueryBuilder4.maxExpansions = 100;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = multiMatchQueryBuilder4.getzeroTermsQuery();
        java.lang.Float float18 = multiMatchQueryBuilder4.getcutoffFrequency();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(zeroTermsQuery17);
        org.junit.Assert.assertNull(float18);
    }

    @Test
    public void test10886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10886");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.prefixLength((int) (byte) 10);
        java.lang.String[] strArray17 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray17);
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.operator(operator19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap23 = multiMatchQueryBuilder22.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder22.zeroTermsQuery(zeroTermsQuery24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder22.useDisMax(false);
        java.lang.Object obj28 = multiMatchQueryBuilder27.text;
        java.lang.String[] strArray32 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray32);
        org.elasticsearch.index.query.Operator operator34 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.operator(operator34);
        java.lang.Boolean boolean36 = multiMatchQueryBuilder33.getlenient();
        multiMatchQueryBuilder33.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type39 = multiMatchQueryBuilder33.gettype();
        multiMatchQueryBuilder33.setslop((java.lang.Integer) (-1));
        java.lang.String[] strArray45 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray45);
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.operator(operator47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder46.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException51 = multiMatchQueryBuilder46.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder46.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder46.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder46.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness58 = multiMatchQueryBuilder46.getfuzziness();
        java.lang.Boolean boolean59 = multiMatchQueryBuilder46.getuseDisMax();
        org.elasticsearch.index.query.Operator operator60 = null;
        multiMatchQueryBuilder46.operator = operator60;
        java.lang.String[] strArray65 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray65);
        org.elasticsearch.index.query.Operator operator67 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder66.operator(operator67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder66.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException71 = multiMatchQueryBuilder66.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder66.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder66.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder66.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type78 = multiMatchQueryBuilder66.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type79 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField80 = type79.parseField();
        multiMatchQueryBuilder66.type = type79;
        multiMatchQueryBuilder46.settype(type79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder33.type(type79);
        multiMatchQueryBuilder27.type = type79;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder4.type(type79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder85.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float88 = multiMatchQueryBuilder87.getcutoffFrequency();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(strObjectFloatHashMap23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertEquals("'" + obj28 + "' != '" + "multi_match" + "'", obj28, "multi_match");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(boolean36);
        org.junit.Assert.assertNull(type39);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(queryValidationException51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNull(fuzziness58);
        org.junit.Assert.assertNull(boolean59);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNull(queryValidationException71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNull(type78);
        org.junit.Assert.assertTrue("'" + type79 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type79.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertNull(float88);
    }

    @Test
    public void test10887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10887");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str19 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.slop(10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery22);
        multiMatchQueryBuilder4.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test10888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10888");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        multiMatchQueryBuilder13.setmaxExpansions((java.lang.Integer) (-1));
        java.lang.Integer int16 = multiMatchQueryBuilder13.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test10889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10889");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Integer int15 = multiMatchQueryBuilder14.getprefixLength();
        java.lang.Object obj16 = null;
        boolean boolean17 = multiMatchQueryBuilder14.equals(obj16);
        java.lang.String str18 = multiMatchQueryBuilder14.queryName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test10890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10890");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder16.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder16.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        java.lang.String str31 = multiMatchQueryBuilder28.getWriteableName();
        java.lang.Boolean boolean32 = multiMatchQueryBuilder28.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder28.getPROTOTYPE();
        multiMatchQueryBuilder28.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray39 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray39);
        org.elasticsearch.index.query.Operator operator41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.operator(operator41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException45 = multiMatchQueryBuilder40.validate();
        java.lang.Integer int46 = multiMatchQueryBuilder40.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery47 = multiMatchQueryBuilder40.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder40.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder40.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder40.boost((float) 0);
        java.lang.String str55 = multiMatchQueryBuilder40.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap56 = multiMatchQueryBuilder40.fieldsBoosts;
        multiMatchQueryBuilder28.fieldsBoosts = strObjectFloatHashMap56;
        multiMatchQueryBuilder16.setfieldsBoosts(strObjectFloatHashMap56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder16.lenient(true);
        java.lang.String str61 = multiMatchQueryBuilder16.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder16.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}", (float) 97);
        org.elasticsearch.index.query.Operator operator65 = multiMatchQueryBuilder16.operator;
        org.elasticsearch.index.query.Operator operator66 = null;
        multiMatchQueryBuilder16.setoperator(operator66);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "multi_match" + "'", str31, "multi_match");
        org.junit.Assert.assertNull(boolean32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(queryValidationException45);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNull(zeroTermsQuery47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "multi_match" + "'", str61, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNull(operator65);
    }

    @Test
    public void test10891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10891");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder24.setoperator(operator29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder24.zeroTermsQuery = zeroTermsQuery31;
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        multiMatchQueryBuilder37.maxExpansions = 0;
        java.lang.Boolean boolean40 = multiMatchQueryBuilder37.lenient;
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap50 = multiMatchQueryBuilder49.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.minimumShouldMatch("multi_match");
        java.lang.String str53 = multiMatchQueryBuilder52.toString();
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.Operator operator59 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.operator(operator59);
        java.lang.String str61 = multiMatchQueryBuilder58.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness62 = multiMatchQueryBuilder58.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder58.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.cutoffFrequency((float) '4');
        boolean boolean67 = multiMatchQueryBuilder52.equals((java.lang.Object) multiMatchQueryBuilder64);
        multiMatchQueryBuilder64.setmaxExpansions((java.lang.Integer) (-1));
        multiMatchQueryBuilder64.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder37.fuzziness((java.lang.Object) multiMatchQueryBuilder64);
        java.lang.String str73 = multiMatchQueryBuilder64.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder64.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder75.maxExpansions(100);
        java.lang.String[] strArray81 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray81);
        org.elasticsearch.index.query.Operator operator83 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder82.operator(operator83);
        java.lang.String str85 = multiMatchQueryBuilder82.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness86 = multiMatchQueryBuilder82.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = multiMatchQueryBuilder82.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type89 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder82.settype(type89);
        org.elasticsearch.common.ParseField parseField91 = type89.parseField();
        multiMatchQueryBuilder77.type = type89;
        java.util.List<java.lang.String> strList93 = multiMatchQueryBuilder77.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(boolean40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(strObjectFloatHashMap50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str53, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "multi_match" + "'", str61, "multi_match");
        org.junit.Assert.assertNull(fuzziness62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "multi_match" + "'", str85, "multi_match");
        org.junit.Assert.assertNull(fuzziness86);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder88);
        org.junit.Assert.assertTrue("'" + type89 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type89.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField91);
        org.junit.Assert.assertNotNull(strList93);
    }

    @Test
    public void test10892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10892");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.useDisMax(true);
        java.lang.String str17 = multiMatchQueryBuilder4.toString();
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        float float30 = multiMatchQueryBuilder22.boost();
        multiMatchQueryBuilder22.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder22.rewrite("multi_match");
        java.lang.String str35 = multiMatchQueryBuilder34.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap36 = null;
        multiMatchQueryBuilder34.fieldsBoosts = strObjectFloatHashMap36;
        java.util.List<java.lang.String> strList38 = multiMatchQueryBuilder34.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type39 = multiMatchQueryBuilder34.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder34.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray45 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray45);
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.operator(operator47);
        java.lang.String str49 = multiMatchQueryBuilder46.getWriteableName();
        java.lang.Boolean boolean50 = multiMatchQueryBuilder46.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder46.getPROTOTYPE();
        multiMatchQueryBuilder46.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.Operator operator59 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.operator(operator59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder58.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException63 = multiMatchQueryBuilder58.validate();
        java.lang.Integer int64 = multiMatchQueryBuilder58.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery65 = multiMatchQueryBuilder58.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder58.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder58.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder58.boost((float) 0);
        java.lang.String str73 = multiMatchQueryBuilder58.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap74 = multiMatchQueryBuilder58.fieldsBoosts;
        multiMatchQueryBuilder46.fieldsBoosts = strObjectFloatHashMap74;
        multiMatchQueryBuilder34.setfieldsBoosts(strObjectFloatHashMap74);
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap74;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.prefixLength = 1;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder4.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"\\\"\\n  }\\n}\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException84 = multiMatchQueryBuilder4.validate();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str17, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 1.0f + "'", float30 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNull(type39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "multi_match" + "'", str49, "multi_match");
        org.junit.Assert.assertNull(boolean50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNull(queryValidationException63);
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNull(zeroTermsQuery65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNull(queryValidationException84);
    }

    @Test
    public void test10893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10893");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        float float7 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 1.0f);
        java.util.List<java.lang.String> strList10 = multiMatchQueryBuilder4.getfields();
        java.lang.String[] strArray14 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray14);
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.operator(operator16);
        java.lang.String str18 = multiMatchQueryBuilder17.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type20 = type19.matchQueryType();
        float float21 = type19.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.type(type19);
        float float24 = multiMatchQueryBuilder23.boost();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 1.0f + "'", float7 == 1.0f);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "multi_match" + "'", str18, "multi_match");
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 1.0f + "'", float24 == 1.0f);
    }

    @Test
    public void test10894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10894");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Boolean boolean9 = multiMatchQueryBuilder8.getlenient();
        org.elasticsearch.index.query.Operator operator10 = multiMatchQueryBuilder8.operator;
        multiMatchQueryBuilder8.rewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder8.useDisMax = true;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + false + "'", boolean9, false);
        org.junit.Assert.assertNull(operator10);
        org.junit.Assert.assertNull(strObjectFloatHashMap15);
    }

    @Test
    public void test10895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10895");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String str16 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        multiMatchQueryBuilder21.cutoffFrequency = 100.0f;
        java.lang.Integer int24 = multiMatchQueryBuilder21.getmaxExpansions();
        multiMatchQueryBuilder21.prefixLength = (-1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(int24);
    }

    @Test
    public void test10896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10896");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type16 = multiMatchQueryBuilder4.type;
        java.lang.String str17 = multiMatchQueryBuilder4.queryName();
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        java.lang.String str30 = multiMatchQueryBuilder22.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder22.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder22.tieBreaker((-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type35 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField36 = type35.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type37 = type35.matchQueryType();
        org.elasticsearch.common.ParseField parseField38 = type35.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder22.type(type35);
        org.elasticsearch.common.ParseField parseField40 = type35.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder4.type(type35);
        java.lang.Integer int42 = multiMatchQueryBuilder4.prefixLength;
        java.lang.String str43 = multiMatchQueryBuilder4.getName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(type16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type35.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField36);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type37.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(parseField40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "multi_match" + "'", str43, "multi_match");
    }

    @Test
    public void test10897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10897");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        multiMatchQueryBuilder8.setanalyzer("hi!");
        java.lang.Integer int14 = multiMatchQueryBuilder8.getprefixLength();
        multiMatchQueryBuilder8.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder8.setlenient((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test10898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10898");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder25.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder25.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = multiMatchQueryBuilder25.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField39 = type38.parseField();
        multiMatchQueryBuilder25.type = type38;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder20.type(type38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str44 = multiMatchQueryBuilder43.getName();
        org.elasticsearch.common.unit.Fuzziness fuzziness45 = multiMatchQueryBuilder43.getfuzziness();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery46 = multiMatchQueryBuilder43.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(type37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "multi_match" + "'", str44, "multi_match");
        org.junit.Assert.assertNull(fuzziness45);
        org.junit.Assert.assertNull(zeroTermsQuery46);
    }

    @Test
    public void test10899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10899");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean13 = multiMatchQueryBuilder4.lenient;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder4.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}", (float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.String str20 = multiMatchQueryBuilder19.getNAME();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
    }

    @Test
    public void test10900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10900");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.useDisMax(true);
        java.lang.Integer int22 = multiMatchQueryBuilder21.getmaxExpansions();
        java.lang.String str23 = multiMatchQueryBuilder21.getfuzzyRewrite();
        java.lang.String str24 = multiMatchQueryBuilder21.getNAME();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
    }

    @Test
    public void test10901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10901");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.String str9 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (byte) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException16 = multiMatchQueryBuilder4.validate();
        java.lang.String str17 = multiMatchQueryBuilder4.rewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.tieBreaker(0.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multi_match" + "'", str9, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(queryValidationException16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test10902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10902");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.cutoffFrequency((float) '4');
        float float13 = multiMatchQueryBuilder12.boost();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery14);
        java.lang.Integer int16 = multiMatchQueryBuilder15.maxExpansions;
        java.lang.String str17 = multiMatchQueryBuilder15.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder15.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}", (float) 0L);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 1.0f + "'", float13 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test10903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10903");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.operator(operator16);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder17.setzeroTermsQuery(zeroTermsQuery18);
        org.elasticsearch.common.unit.Fuzziness fuzziness20 = multiMatchQueryBuilder17.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.Float float23 = multiMatchQueryBuilder22.cutoffFrequency;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(fuzziness20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(float23);
    }

    @Test
    public void test10904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10904");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.Operator operator9 = null;
        multiMatchQueryBuilder4.setoperator(operator9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder12.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.slop((int) (short) 0);
        multiMatchQueryBuilder16.maxExpansions = (-1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test10905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10905");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        float float15 = multiMatchQueryBuilder14.boost();
        java.lang.Float float16 = multiMatchQueryBuilder14.cutoffFrequency;
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.lenient(false);
        java.lang.Integer int26 = multiMatchQueryBuilder25.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder25.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap29 = null;
        multiMatchQueryBuilder28.setfieldsBoosts(strObjectFloatHashMap29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder14.type((java.lang.Object) strObjectFloatHashMap29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder14.lenient(true);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery34 = null;
        multiMatchQueryBuilder14.zeroTermsQuery = zeroTermsQuery34;
        java.lang.Boolean boolean36 = multiMatchQueryBuilder14.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(boolean36);
    }

    @Test
    public void test10906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10906");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        java.lang.Integer int13 = multiMatchQueryBuilder11.slop;
        multiMatchQueryBuilder11.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.prefixLength((int) (short) 1);
        multiMatchQueryBuilder11.lenient = true;
        org.elasticsearch.index.query.QueryValidationException queryValidationException20 = multiMatchQueryBuilder11.validate();
        multiMatchQueryBuilder11.tieBreaker = 32.0f;
        float float23 = multiMatchQueryBuilder11.boost();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(queryValidationException20);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 1.0f + "'", float23 == 1.0f);
    }

    @Test
    public void test10907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10907");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type8 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type9 = type8.matchQueryType();
        float float10 = type8.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = multiMatchQueryBuilder11.zeroTermsQuery;
        java.lang.Boolean boolean13 = multiMatchQueryBuilder11.useDisMax;
        java.lang.String str14 = multiMatchQueryBuilder11.rewrite;
        multiMatchQueryBuilder11.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.boost(97.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type8.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type9.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(zeroTermsQuery12);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test10908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10908");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.Object obj17 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.tieBreaker = (-1.0f);
        java.lang.String str20 = multiMatchQueryBuilder4.getName();
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.operator(operator21);
        java.lang.String str23 = multiMatchQueryBuilder22.getrewrite();
        org.elasticsearch.index.query.Operator operator24 = multiMatchQueryBuilder22.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.minimumShouldMatch("");
        multiMatchQueryBuilder26.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 52,\n    \"rewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 100,\\n    \\\"rewrite\\\" : \\\"multi_match\\\",\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 10.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(operator24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test10909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10909");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String str10 = multiMatchQueryBuilder4.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.slop((int) (short) 10);
        multiMatchQueryBuilder12.slop = (-1);
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap24 = multiMatchQueryBuilder23.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.zeroTermsQuery(zeroTermsQuery25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder23.lenient(false);
        org.elasticsearch.index.query.QueryValidationException queryValidationException29 = multiMatchQueryBuilder28.validate();
        java.lang.String str30 = multiMatchQueryBuilder28.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder28.zeroTermsQuery = zeroTermsQuery31;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder28.tieBreaker(0.0f);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder28.operator(operator35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.String str38 = multiMatchQueryBuilder37.getminimumShouldMatch();
        multiMatchQueryBuilder37.maxExpansions = 100;
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.lenient(false);
        java.lang.Integer int50 = multiMatchQueryBuilder49.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str53 = multiMatchQueryBuilder49.minimumShouldMatch;
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.Operator operator59 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.operator(operator59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder58.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException63 = multiMatchQueryBuilder58.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder58.cutoffFrequency((float) (byte) 100);
        java.lang.String str66 = multiMatchQueryBuilder58.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder58.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness69 = multiMatchQueryBuilder58.getfuzziness();
        org.elasticsearch.common.unit.Fuzziness fuzziness70 = null;
        multiMatchQueryBuilder58.fuzziness = fuzziness70;
        java.lang.Integer int72 = multiMatchQueryBuilder58.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery73 = multiMatchQueryBuilder58.zeroTermsQuery;
        boolean boolean74 = multiMatchQueryBuilder49.equals((java.lang.Object) zeroTermsQuery73);
        java.lang.String[] strArray79 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray79);
        java.lang.String[] strArray85 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray85);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray79, strArray85);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean74, strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 100, strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) operator35, strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder12, strArray79);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(strObjectFloatHashMap24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(queryValidationException29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str38, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNull(queryValidationException63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNull(fuzziness69);
        org.junit.Assert.assertNull(int72);
        org.junit.Assert.assertNull(zeroTermsQuery73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strArray85);
    }

    @Test
    public void test10910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10910");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder13.setuseDisMax((java.lang.Boolean) false);
        multiMatchQueryBuilder13.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder13.slop = 100;
        java.lang.String str24 = multiMatchQueryBuilder13.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder13.tieBreaker((float) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder13.maxExpansions((int) (byte) -1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test10911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10911");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Boolean boolean15 = multiMatchQueryBuilder11.lenient;
        multiMatchQueryBuilder11.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.operator(operator18);
        multiMatchQueryBuilder11.setlenient((java.lang.Boolean) false);
        java.lang.Integer int22 = multiMatchQueryBuilder11.getslop();
        java.lang.Boolean boolean23 = multiMatchQueryBuilder11.lenient;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertEquals("'" + boolean23 + "' != '" + false + "'", boolean23, false);
    }

    @Test
    public void test10912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10912");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder4.fields;
        java.lang.Boolean boolean21 = multiMatchQueryBuilder4.useDisMax;
        java.lang.String[] strArray25 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray25);
        org.elasticsearch.index.query.Operator operator27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.operator(operator27);
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder26.operator = operator29;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder26.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = multiMatchQueryBuilder26.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        multiMatchQueryBuilder26.type = type34;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder4.type(type34);
        multiMatchQueryBuilder4.setfuzzyRewrite("");
        multiMatchQueryBuilder4.cutoffFrequency = 52.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(zeroTermsQuery33);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
    }

    @Test
    public void test10913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10913");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type16 = multiMatchQueryBuilder4.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField18 = type17.parseField();
        multiMatchQueryBuilder4.type = type17;
        java.lang.String str20 = multiMatchQueryBuilder4.getanalyzer();
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder25.operator(operator30);
        java.lang.Integer int32 = multiMatchQueryBuilder31.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder31.slop((int) (byte) 100);
        boolean boolean35 = multiMatchQueryBuilder4.equals((java.lang.Object) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap36 = multiMatchQueryBuilder4.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(type16);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type17.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(strObjectFloatHashMap36);
    }

    @Test
    public void test10914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10914");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.maxExpansions((-1));
        multiMatchQueryBuilder11.maxExpansions = 100;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder11.zeroTermsQuery = zeroTermsQuery18;
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        java.lang.String str27 = multiMatchQueryBuilder24.getWriteableName();
        java.lang.Boolean boolean28 = multiMatchQueryBuilder24.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder24.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder24.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str33 = multiMatchQueryBuilder24.toString();
        multiMatchQueryBuilder24.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray39 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray39);
        org.elasticsearch.index.query.Operator operator41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.operator(operator41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap45 = multiMatchQueryBuilder44.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder44.zeroTermsQuery(zeroTermsQuery46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder44.lenient(false);
        multiMatchQueryBuilder44.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery52 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder44.zeroTermsQuery(zeroTermsQuery52);
        multiMatchQueryBuilder44.tieBreaker = 10.0f;
        java.util.List<java.lang.String> strList56 = multiMatchQueryBuilder44.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder24.fuzziness((java.lang.Object) multiMatchQueryBuilder44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder24.cutoffFrequency((float) (-1L));
        org.elasticsearch.common.unit.Fuzziness fuzziness60 = multiMatchQueryBuilder59.getfuzziness();
        multiMatchQueryBuilder11.fuzziness = fuzziness60;
        java.util.List<java.lang.String> strList62 = multiMatchQueryBuilder11.getfields();
        multiMatchQueryBuilder11.setlenient((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "multi_match" + "'", str27, "multi_match");
        org.junit.Assert.assertNull(boolean28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str33, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(strObjectFloatHashMap45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(fuzziness60);
        org.junit.Assert.assertNotNull(strList62);
    }

    @Test
    public void test10915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10915");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        java.lang.Boolean boolean19 = multiMatchQueryBuilder4.lenient;
        java.lang.String str20 = multiMatchQueryBuilder4.rewrite;
        java.lang.String str21 = multiMatchQueryBuilder4.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type23 = multiMatchQueryBuilder4.gettype();
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        org.elasticsearch.index.query.Operator operator31 = null;
        multiMatchQueryBuilder28.operator = operator31;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder28.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = multiMatchQueryBuilder28.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder28.prefixLength((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.common.ParseField parseField39 = type38.parseField();
        org.elasticsearch.common.ParseField parseField40 = type38.parseField();
        multiMatchQueryBuilder37.settype(type38);
        org.elasticsearch.common.ParseField parseField42 = type38.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder4.type(type38);
        java.lang.String str44 = multiMatchQueryBuilder43.getminimumShouldMatch();
        org.elasticsearch.index.query.Operator operator45 = multiMatchQueryBuilder43.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.slop(100);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(type22);
        org.junit.Assert.assertNull(type23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(zeroTermsQuery35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(parseField39);
        org.junit.Assert.assertNotNull(parseField40);
        org.junit.Assert.assertNotNull(parseField42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(operator45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
    }

    @Test
    public void test10916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10916");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        multiMatchQueryBuilder4.setminimumShouldMatch("");
        java.lang.String str18 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.tieBreaker((float) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        float float23 = multiMatchQueryBuilder20.boost();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder20.zeroTermsQuery(zeroTermsQuery24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap28 = multiMatchQueryBuilder25.fieldsBoosts;
        java.lang.Boolean boolean29 = multiMatchQueryBuilder25.useDisMax;
        org.elasticsearch.index.query.Operator operator30 = null;
        multiMatchQueryBuilder25.operator = operator30;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 1.0f + "'", float23 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(strObjectFloatHashMap28);
        org.junit.Assert.assertNull(boolean29);
    }

    @Test
    public void test10917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10917");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        java.lang.String str19 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap29 = multiMatchQueryBuilder28.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.zeroTermsQuery(zeroTermsQuery30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder28.lenient(false);
        multiMatchQueryBuilder28.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder28.zeroTermsQuery(zeroTermsQuery36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type40 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder37.settype(type40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) type40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type43 = multiMatchQueryBuilder42.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder42.prefixLength((-1));
        java.lang.Boolean boolean46 = multiMatchQueryBuilder42.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder42.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder49 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params50 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder42.doXContent(xContentBuilder49, params50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(strObjectFloatHashMap29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type40.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(type43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(boolean46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(params50);
    }

    @Test
    public void test10918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10918");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder13.setuseDisMax((java.lang.Boolean) false);
        multiMatchQueryBuilder13.maxExpansions = 1;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = multiMatchQueryBuilder13.zeroTermsQuery;
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = multiMatchQueryBuilder13.fuzziness;
        multiMatchQueryBuilder13.cutoffFrequency = 10.0f;
        java.lang.Integer int22 = multiMatchQueryBuilder13.prefixLength;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(zeroTermsQuery18);
        org.junit.Assert.assertNull(fuzziness19);
        org.junit.Assert.assertNull(int22);
    }

    @Test
    public void test10919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10919");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        multiMatchQueryBuilder13.tieBreaker = (-1.0f);
        multiMatchQueryBuilder13.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder13.rewrite = "hi!";
        java.lang.Integer int20 = multiMatchQueryBuilder13.getprefixLength();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(int20);
    }

    @Test
    public void test10920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10920");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        multiMatchQueryBuilder4.type = type12;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type14 = multiMatchQueryBuilder4.type;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type14.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
    }

    @Test
    public void test10921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10921");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.cutoffFrequency((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.slop(0);
        multiMatchQueryBuilder14.settieBreaker((java.lang.Float) 1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 10,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test10922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10922");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type16 = type15.matchQueryType();
        float float17 = type15.tieBreaker();
        float float18 = type15.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) type15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) -1);
        multiMatchQueryBuilder21.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"slop\" : 0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str24 = multiMatchQueryBuilder21.minimumShouldMatch;
        multiMatchQueryBuilder21.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"tie_breaker\" : -1.0,\n    \"cutoff_frequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder21.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzziness\" : \"BEST_FIELDS\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type15.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type16.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test10923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10923");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type8 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type9 = type8.matchQueryType();
        float float10 = type8.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type8);
        multiMatchQueryBuilder11.useDisMax = false;
        multiMatchQueryBuilder11.useDisMax = false;
        java.lang.String str16 = multiMatchQueryBuilder11.getNAME();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.prefixLength((int) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.cutoffFrequency((float) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery21);
        multiMatchQueryBuilder11.setslop((java.lang.Integer) 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type8.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type9.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "multi_match" + "'", str16, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test10924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10924");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.useDisMax(false);
        multiMatchQueryBuilder4.prefixLength = 10;
        java.lang.String str17 = multiMatchQueryBuilder4.minimumShouldMatch;
        multiMatchQueryBuilder4.useDisMax = false;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "multi_match" + "'", str12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test10925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10925");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.getPROTOTYPE();
        multiMatchQueryBuilder21.useDisMax = true;
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder28.operator = operator29;
        org.elasticsearch.common.unit.Fuzziness fuzziness31 = multiMatchQueryBuilder28.getfuzziness();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        multiMatchQueryBuilder28.setzeroTermsQuery(zeroTermsQuery32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = multiMatchQueryBuilder28.type;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder21.fuzziness((java.lang.Object) type34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNull(fuzziness31);
        org.junit.Assert.assertNull(type34);
    }

    @Test
    public void test10926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10926");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder4.settype(type11);
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type18 = type17.matchQueryType();
        multiMatchQueryBuilder16.settype(type17);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type11.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type17.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type18.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test10927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10927");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.type;
        org.elasticsearch.index.query.Operator operator11 = null;
        multiMatchQueryBuilder4.setoperator(operator11);
        java.lang.String str13 = multiMatchQueryBuilder4.toString();
        multiMatchQueryBuilder4.setrewrite("hi!");
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        java.lang.Boolean boolean23 = multiMatchQueryBuilder20.getlenient();
        multiMatchQueryBuilder20.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder20.tieBreaker((float) (-1));
        multiMatchQueryBuilder20.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder20.useDisMax(true);
        multiMatchQueryBuilder33.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray39 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray39);
        org.elasticsearch.index.query.Operator operator41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.operator(operator41);
        java.lang.String str43 = multiMatchQueryBuilder40.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness44 = multiMatchQueryBuilder40.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder40.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type47 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder40.settype(type47);
        multiMatchQueryBuilder33.settype(type47);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery50 = multiMatchQueryBuilder33.zeroTermsQuery;
        java.lang.String str51 = multiMatchQueryBuilder33.getName();
        multiMatchQueryBuilder33.cutoffFrequency = 1.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type54 = multiMatchQueryBuilder33.gettype();
        org.elasticsearch.common.ParseField parseField55 = type54.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder4.type(type54);
        java.util.List<java.lang.String> strList57 = multiMatchQueryBuilder56.getfields();
        org.elasticsearch.index.query.Operator operator58 = null;
        multiMatchQueryBuilder56.setoperator(operator58);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "multi_match" + "'", str43, "multi_match");
        org.junit.Assert.assertNull(fuzziness44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type47.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNull(zeroTermsQuery50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "multi_match" + "'", str51, "multi_match");
        org.junit.Assert.assertTrue("'" + type54 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type54.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(strList57);
    }

    @Test
    public void test10928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10928");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.field("hi!", (float) 'a');
        java.lang.String str19 = multiMatchQueryBuilder15.getanalyzer();
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder15.operator(operator20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        multiMatchQueryBuilder21.setrewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder21.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = null;
        multiMatchQueryBuilder21.zeroTermsQuery = zeroTermsQuery28;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test10929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10929");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        multiMatchQueryBuilder4.maxExpansions = 1;
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder17.getlenient();
        multiMatchQueryBuilder17.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) 100);
        multiMatchQueryBuilder23.setanalyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.tieBreaker(52.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.String[] strArray33 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray33);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        java.lang.String str37 = multiMatchQueryBuilder34.getWriteableName();
        java.lang.Boolean boolean38 = multiMatchQueryBuilder34.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder34.getPROTOTYPE();
        multiMatchQueryBuilder34.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray45 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray45);
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.operator(operator47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder46.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException51 = multiMatchQueryBuilder46.validate();
        java.lang.Integer int52 = multiMatchQueryBuilder46.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery53 = multiMatchQueryBuilder46.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder46.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder46.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder46.boost((float) 0);
        java.lang.String str61 = multiMatchQueryBuilder46.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap62 = multiMatchQueryBuilder46.fieldsBoosts;
        multiMatchQueryBuilder34.fieldsBoosts = strObjectFloatHashMap62;
        multiMatchQueryBuilder29.fieldsBoosts = strObjectFloatHashMap62;
        multiMatchQueryBuilder29.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : 10,\n    \"maxExpansions\" : -1,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryShardContext queryShardContext67 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query68 = multiMatchQueryBuilder29.toQuery(queryShardContext67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "multi_match" + "'", str37, "multi_match");
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(queryValidationException51);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNull(zeroTermsQuery53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap62);
    }

    @Test
    public void test10930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10930");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap13;
        multiMatchQueryBuilder4.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery17);
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = null;
        multiMatchQueryBuilder18.fuzziness = fuzziness19;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery21);
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        java.lang.Boolean boolean30 = multiMatchQueryBuilder27.getlenient();
        multiMatchQueryBuilder27.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder27.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness35 = multiMatchQueryBuilder34.fuzziness;
        java.lang.Integer int36 = multiMatchQueryBuilder34.slop;
        multiMatchQueryBuilder34.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder34.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder18.fuzziness((java.lang.Object) multiMatchQueryBuilder40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder18.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray47 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray47);
        org.elasticsearch.index.query.Operator operator49 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.operator(operator49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder48.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder52.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness57 = null;
        multiMatchQueryBuilder52.setfuzziness(fuzziness57);
        java.lang.String str59 = multiMatchQueryBuilder52.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder18.fuzziness((java.lang.Object) multiMatchQueryBuilder52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder18.getPROTOTYPE();
        multiMatchQueryBuilder61.tieBreaker = (-1.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(fuzziness35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "multi_match" + "'", str59, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
    }

    @Test
    public void test10931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10931");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder24.setoperator(operator29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder24.zeroTermsQuery = zeroTermsQuery31;
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        multiMatchQueryBuilder37.maxExpansions = 0;
        java.lang.Boolean boolean40 = multiMatchQueryBuilder37.lenient;
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap50 = multiMatchQueryBuilder49.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.minimumShouldMatch("multi_match");
        java.lang.String str53 = multiMatchQueryBuilder52.toString();
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.Operator operator59 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.operator(operator59);
        java.lang.String str61 = multiMatchQueryBuilder58.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness62 = multiMatchQueryBuilder58.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder58.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.cutoffFrequency((float) '4');
        boolean boolean67 = multiMatchQueryBuilder52.equals((java.lang.Object) multiMatchQueryBuilder64);
        multiMatchQueryBuilder64.setmaxExpansions((java.lang.Integer) (-1));
        multiMatchQueryBuilder64.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder37.fuzziness((java.lang.Object) multiMatchQueryBuilder64);
        java.lang.String str73 = multiMatchQueryBuilder64.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder64.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder75.maxExpansions(100);
        multiMatchQueryBuilder75.useDisMax = false;
        java.lang.Boolean boolean80 = multiMatchQueryBuilder75.useDisMax;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(boolean40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(strObjectFloatHashMap50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str53, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "multi_match" + "'", str61, "multi_match");
        org.junit.Assert.assertNull(fuzziness62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertEquals("'" + boolean80 + "' != '" + false + "'", boolean80, false);
    }

    @Test
    public void test10932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10932");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        java.lang.String str19 = multiMatchQueryBuilder18.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        multiMatchQueryBuilder18.zeroTermsQuery = zeroTermsQuery20;
        multiMatchQueryBuilder18.setprefixLength((java.lang.Integer) 100);
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder18.getfuzziness();
        multiMatchQueryBuilder18.setlenient((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder18.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.io.stream.StreamInput streamInput29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.readFrom(streamInput29);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str19, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(fuzziness24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test10933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10933");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.getPROTOTYPE();
        multiMatchQueryBuilder4.cutoffFrequency = 52.0f;
        float float22 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder4.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.cutoffFrequency((float) (byte) 0);
        multiMatchQueryBuilder24.slop = 97;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 1.0f + "'", float22 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test10934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10934");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.common.unit.Fuzziness fuzziness9 = multiMatchQueryBuilder8.fuzziness;
        java.util.List<java.lang.String> strList10 = multiMatchQueryBuilder8.getfields();
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 10);
        multiMatchQueryBuilder8.cutoffFrequency = 10.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery15);
        java.lang.String str17 = multiMatchQueryBuilder16.getminimumShouldMatch();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(fuzziness9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test10935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10935");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder0.boost((float) 1);
        java.lang.String str3 = multiMatchQueryBuilder2.rewrite;
        java.lang.String[] strArray7 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray7);
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.operator(operator9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException13 = multiMatchQueryBuilder8.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.zeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder17.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.prefixLength((int) (short) 100);
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.field("");
        java.lang.String str33 = multiMatchQueryBuilder28.getrewrite();
        java.lang.Object obj34 = multiMatchQueryBuilder28.text;
        float float35 = multiMatchQueryBuilder28.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder28.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float38 = multiMatchQueryBuilder28.gettieBreaker();
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException48 = multiMatchQueryBuilder43.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder43.cutoffFrequency((float) (byte) 100);
        float float51 = multiMatchQueryBuilder43.boost();
        multiMatchQueryBuilder43.setanalyzer("");
        java.lang.Boolean boolean54 = multiMatchQueryBuilder43.getuseDisMax();
        java.lang.String str55 = multiMatchQueryBuilder43.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder43.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray61 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray61);
        org.elasticsearch.index.query.Operator operator63 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.operator(operator63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder62.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder66.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder66.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness71 = multiMatchQueryBuilder66.getfuzziness();
        multiMatchQueryBuilder57.fuzziness = fuzziness71;
        multiMatchQueryBuilder28.setfuzziness(fuzziness71);
        multiMatchQueryBuilder28.maxExpansions = 10;
        java.lang.Integer int76 = multiMatchQueryBuilder28.prefixLength;
        java.lang.String[] strArray80 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray80);
        org.elasticsearch.index.query.Operator operator82 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder81.operator(operator82);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder81.field("");
        org.elasticsearch.common.unit.Fuzziness fuzziness86 = multiMatchQueryBuilder85.fuzziness;
        java.util.List<java.lang.String> strList87 = multiMatchQueryBuilder85.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type88 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = multiMatchQueryBuilder85.fuzziness((java.lang.Object) type88);
        org.elasticsearch.common.ParseField parseField90 = type88.parseField();
        multiMatchQueryBuilder28.type = type88;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = multiMatchQueryBuilder23.type(type88);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = multiMatchQueryBuilder2.type(type88);
        multiMatchQueryBuilder2.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"fuzziness\" : \"{\\n  \\\"MULTIMATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\", \\\"\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"MAX_EXPANSIONS\\\\\\\" : 1,\\\\N    \\\\\\\"LENIENT\\\\\\\" : FALSE,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 10.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAXEXPANSIONS\\\" : 100,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : 0,\n    \"minimumShouldMatch\" : \"hi!\",\n    \"fuzzyRewrite\" : \"multi_match\",\n    \"tieBreaker\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder0);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : -1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}" + "'", str3, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : -1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(queryValidationException13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "multi_match" + "'", obj34, "multi_match");
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 1.0f + "'", float35 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(float38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(queryValidationException48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 1.0f + "'", float51 == 1.0f);
        org.junit.Assert.assertNull(boolean54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(fuzziness71);
        org.junit.Assert.assertNull(int76);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNull(fuzziness86);
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertTrue("'" + type88 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type88.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
        org.junit.Assert.assertNotNull(parseField90);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder92);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder93);
    }

    @Test
    public void test10936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10936");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.minimumShouldMatch("");
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.useDisMax(false);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder16 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params17 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder15.doXContent(xContentBuilder16, params17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(params17);
    }

    @Test
    public void test10937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10937");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap17;
        multiMatchQueryBuilder16.setslop((java.lang.Integer) 0);
        java.lang.String str21 = multiMatchQueryBuilder16.minimumShouldMatch;
        java.lang.Boolean boolean22 = multiMatchQueryBuilder16.getuseDisMax();
        java.lang.String str23 = multiMatchQueryBuilder16.getanalyzer();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test10938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10938");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.lang.Integer int8 = multiMatchQueryBuilder4.getmaxExpansions();
        multiMatchQueryBuilder4.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder4.getName();
        java.lang.Boolean boolean14 = multiMatchQueryBuilder4.getlenient();
        java.lang.Object obj15 = multiMatchQueryBuilder4.gettext();
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap25 = multiMatchQueryBuilder24.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder24.lenient(false);
        java.lang.Object obj30 = multiMatchQueryBuilder29.gettext();
        java.lang.Integer int31 = multiMatchQueryBuilder29.getslop();
        multiMatchQueryBuilder29.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder29.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException36 = multiMatchQueryBuilder35.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder35.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder35.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type41 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        multiMatchQueryBuilder40.type = type41;
        float float43 = type41.tieBreaker();
        float float44 = type41.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder4.type(type41);
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) 52);
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "multi_match" + "'", obj15, "multi_match");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(strObjectFloatHashMap25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertEquals("'" + obj30 + "' != '" + "multi_match" + "'", obj30, "multi_match");
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(queryValidationException36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type41.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 0.0f + "'", float43 == 0.0f);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 0.0f + "'", float44 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
    }

    @Test
    public void test10939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10939");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.boost((float) 10L);
        java.lang.Float float20 = multiMatchQueryBuilder19.getcutoffFrequency();
        java.lang.String str21 = multiMatchQueryBuilder19.getminimumShouldMatch();
        java.util.List<java.lang.String> strList22 = multiMatchQueryBuilder19.fields;
        java.lang.Boolean boolean23 = multiMatchQueryBuilder19.lenient;
        multiMatchQueryBuilder19.tieBreaker = 100.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(float20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertEquals("'" + boolean23 + "' != '" + false + "'", boolean23, false);
    }

    @Test
    public void test10940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10940");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        java.lang.Integer int11 = multiMatchQueryBuilder10.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.slop((int) (byte) 100);
        multiMatchQueryBuilder13.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = multiMatchQueryBuilder13.getzeroTermsQuery();
        org.elasticsearch.index.query.Operator operator17 = multiMatchQueryBuilder13.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder13.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 1,\n    \"maxExpansions\" : -1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", 35.0f);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder20.doXContent(xContentBuilder21, params22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(zeroTermsQuery16);
        org.junit.Assert.assertNull(operator17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(params22);
    }

    @Test
    public void test10941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10941");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        java.lang.String str14 = multiMatchQueryBuilder12.getfuzzyRewrite();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        multiMatchQueryBuilder19.minimumShouldMatch = "hi!";
        java.lang.Float float26 = multiMatchQueryBuilder19.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type28 = type27.matchQueryType();
        float float29 = type27.tieBreaker();
        multiMatchQueryBuilder19.type = type27;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder12.type(type27);
        multiMatchQueryBuilder31.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Object obj34 = multiMatchQueryBuilder31.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder31.boost((-1.0f));
        java.lang.String[] strArray40 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray40);
        org.elasticsearch.index.query.Operator operator42 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.operator(operator42);
        java.lang.Boolean boolean44 = multiMatchQueryBuilder41.getlenient();
        java.lang.Integer int45 = multiMatchQueryBuilder41.getmaxExpansions();
        multiMatchQueryBuilder41.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder41.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float50 = multiMatchQueryBuilder49.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type51 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField52 = type51.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type53 = type51.matchQueryType();
        org.elasticsearch.common.ParseField parseField54 = type51.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type55 = type51.matchQueryType();
        multiMatchQueryBuilder49.type = type51;
        float float57 = type51.tieBreaker();
        multiMatchQueryBuilder31.type = type51;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder31.field("", (float) (short) 1);
        org.elasticsearch.common.unit.Fuzziness fuzziness62 = multiMatchQueryBuilder61.getfuzziness();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "multi_match" + "'", obj34, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(float50);
        org.junit.Assert.assertTrue("'" + type51 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type51.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField52);
        org.junit.Assert.assertTrue("'" + type53 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type53.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField54);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type55.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + 1.0f + "'", float57 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNull(fuzziness62);
    }

    @Test
    public void test10942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10942");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder8.type = type18;
        java.lang.Integer int20 = multiMatchQueryBuilder8.getslop();
        java.lang.Integer int21 = multiMatchQueryBuilder8.getprefixLength();
        multiMatchQueryBuilder8.rewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"fuzziness\" : \"BEST_FIELDS\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = multiMatchQueryBuilder8.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(zeroTermsQuery24);
    }

    @Test
    public void test10943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10943");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.slop((int) (byte) 100);
        multiMatchQueryBuilder13.tieBreaker = 100.0f;
        java.util.List<java.lang.String> strList22 = multiMatchQueryBuilder13.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strList22);
    }

    @Test
    public void test10944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10944");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.QueryValidationException queryValidationException12 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.maxExpansions(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.boost((float) 0L);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        multiMatchQueryBuilder4.useDisMax = false;
        java.lang.String str21 = multiMatchQueryBuilder4.getName();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput22 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder4.writeTo(streamOutput22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNull(queryValidationException12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
    }

    @Test
    public void test10945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10945");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Object obj10 = multiMatchQueryBuilder4.text;
        float float11 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float14 = multiMatchQueryBuilder13.tieBreaker;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        multiMatchQueryBuilder13.setzeroTermsQuery(zeroTermsQuery15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder13.boost((float) (-1));
        java.lang.Boolean boolean19 = multiMatchQueryBuilder18.lenient;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "multi_match" + "'", obj10, "multi_match");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 1.0f + "'", float11 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean19);
    }

    @Test
    public void test10946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10946");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        java.lang.String[] strArray11 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray11);
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder16.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.lenient(false);
        multiMatchQueryBuilder16.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery24);
        boolean boolean26 = multiMatchQueryBuilder6.equals((java.lang.Object) multiMatchQueryBuilder25);
        multiMatchQueryBuilder6.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}";
        java.util.List<java.lang.String> strList29 = multiMatchQueryBuilder6.getfields();
        java.lang.String[] strArray33 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray33);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException39 = multiMatchQueryBuilder34.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder34.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder34.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder34.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type46 = multiMatchQueryBuilder34.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type47 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField48 = type47.parseField();
        multiMatchQueryBuilder34.type = type47;
        multiMatchQueryBuilder6.settype(type47);
        org.elasticsearch.common.ParseField parseField51 = type47.parseField();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(queryValidationException39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(type46);
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type47.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField48);
        org.junit.Assert.assertNotNull(parseField51);
    }

    @Test
    public void test10947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10947");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder4.queryName();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = multiMatchQueryBuilder4.fieldsBoosts;
        org.elasticsearch.index.query.Operator operator15 = multiMatchQueryBuilder4.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(strObjectFloatHashMap14);
        org.junit.Assert.assertNull(operator15);
    }

    @Test
    public void test10948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10948");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("hi!");
        java.lang.Integer int12 = multiMatchQueryBuilder8.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder8.type;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap16 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNull(strObjectFloatHashMap16);
    }

    @Test
    public void test10949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10949");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException20 = multiMatchQueryBuilder19.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder19.cutoffFrequency((float) 100L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzziness\" : \"10\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator25 = null;
        multiMatchQueryBuilder24.setoperator(operator25);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery27 = multiMatchQueryBuilder24.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(queryValidationException20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(zeroTermsQuery27);
    }

    @Test
    public void test10950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10950");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder13.rewrite = "multi_match";
        java.lang.Integer int20 = multiMatchQueryBuilder13.maxExpansions;
        java.lang.String str21 = multiMatchQueryBuilder13.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"\\\",\\n    \\\"fuzziness\\\" : \\\"BEST_FIELDS\\\",\\n    \\\"cutoff_frequency\\\" : -1.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"useDisMax\\\" : true,\\n    \\\"cutoffFrequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : -1.0\n  }\n}");
        java.lang.String str24 = multiMatchQueryBuilder13.getWriteableName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
    }

    @Test
    public void test10951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10951");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        java.lang.String str14 = multiMatchQueryBuilder12.getfuzzyRewrite();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        multiMatchQueryBuilder19.minimumShouldMatch = "hi!";
        java.lang.Float float26 = multiMatchQueryBuilder19.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type28 = type27.matchQueryType();
        float float29 = type27.tieBreaker();
        multiMatchQueryBuilder19.type = type27;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder12.type(type27);
        multiMatchQueryBuilder31.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator34 = null;
        multiMatchQueryBuilder31.operator = operator34;
        multiMatchQueryBuilder31.tieBreaker = (-1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder31.prefixLength((int) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder31.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder31.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 100,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"\\\"\\n  }\\n}\"\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
    }

    @Test
    public void test10952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10952");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        java.lang.Object obj5 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder4.tieBreaker((float) (byte) 10);
        java.lang.String str8 = multiMatchQueryBuilder7.getName();
        java.lang.String str9 = multiMatchQueryBuilder7.getanalyzer();
        multiMatchQueryBuilder7.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str12 = multiMatchQueryBuilder7.minimumShouldMatch;
        multiMatchQueryBuilder7.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder7.setuseDisMax((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + "multi_match" + "'", obj5, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "multi_match" + "'", str8, "multi_match");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test10953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10953");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException25 = multiMatchQueryBuilder20.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.zeroTermsQuery(zeroTermsQuery28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.maxExpansions((-1));
        java.util.List<java.lang.String> strList32 = multiMatchQueryBuilder27.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.Object obj34 = multiMatchQueryBuilder33.text;
        java.lang.String[] strArray38 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray38);
        org.elasticsearch.index.query.Operator operator40 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.operator(operator40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder39.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException44 = multiMatchQueryBuilder39.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder39.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder39.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder39.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type51 = multiMatchQueryBuilder39.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type52 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField53 = type52.parseField();
        multiMatchQueryBuilder39.type = type52;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder33.type(type52);
        org.elasticsearch.index.search.MatchQuery.Type type56 = type52.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder27.type(type52);
        org.elasticsearch.common.ParseField parseField58 = type52.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder8.type(type52);
        org.elasticsearch.index.query.Operator operator60 = multiMatchQueryBuilder8.getoperator();
        java.lang.Integer int61 = multiMatchQueryBuilder8.getprefixLength();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(queryValidationException25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(queryValidationException44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(type51);
        org.junit.Assert.assertTrue("'" + type52 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type52.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type56.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(parseField58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(operator60);
        org.junit.Assert.assertNull(int61);
    }

    @Test
    public void test10954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10954");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type8 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type9 = type8.matchQueryType();
        float float10 = type8.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type8);
        org.elasticsearch.index.query.Operator operator12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder6.operator(operator12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.slop((int) (byte) 100);
        java.lang.Object obj16 = multiMatchQueryBuilder15.text;
        org.elasticsearch.index.query.QueryShardContext queryShardContext17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query18 = multiMatchQueryBuilder15.toQuery(queryShardContext17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type8.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type9.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "multi_match" + "'", obj16, "multi_match");
    }

    @Test
    public void test10955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10955");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        java.util.List<java.lang.String> strList21 = multiMatchQueryBuilder20.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder20.getfuzziness();
        multiMatchQueryBuilder20.slop = 1;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder20.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"maxExpansions\" : 52,\n    \"useDisMax\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Object obj29 = multiMatchQueryBuilder28.text;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(fuzziness24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertEquals("'" + obj29 + "' != '" + "multi_match" + "'", obj29, "multi_match");
    }

    @Test
    public void test10956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10956");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.boost((float) ' ');
        org.elasticsearch.index.query.Operator operator12 = null;
        multiMatchQueryBuilder4.operator = operator12;
        java.lang.String str14 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder4.type;
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        java.lang.String str25 = multiMatchQueryBuilder20.getrewrite();
        org.elasticsearch.common.unit.Fuzziness fuzziness26 = null;
        multiMatchQueryBuilder20.fuzziness = fuzziness26;
        java.lang.Object obj28 = multiMatchQueryBuilder20.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder20.tieBreaker((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder30.setcutoffFrequency((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder30.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.tieBreaker((float) 'a');
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        java.lang.Boolean boolean46 = multiMatchQueryBuilder43.getlenient();
        multiMatchQueryBuilder43.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder43.boost((float) ' ');
        java.lang.String[] strArray54 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray54);
        org.elasticsearch.index.query.Operator operator56 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.operator(operator56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder55.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException60 = multiMatchQueryBuilder55.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder55.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder55.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.Operator operator65 = null;
        multiMatchQueryBuilder55.setoperator(operator65);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type67 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type68 = type67.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder55.type(type67);
        multiMatchQueryBuilder50.settype(type67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder36.type(type67);
        multiMatchQueryBuilder4.type = type67;
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 35.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "multi_match" + "'", str14, "multi_match");
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + obj28 + "' != '" + "multi_match" + "'", obj28, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(boolean46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(queryValidationException60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertTrue("'" + type67 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type67.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type68 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type68.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
    }

    @Test
    public void test10957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10957");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        java.lang.String str14 = multiMatchQueryBuilder12.getfuzzyRewrite();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        multiMatchQueryBuilder19.minimumShouldMatch = "hi!";
        java.lang.Float float26 = multiMatchQueryBuilder19.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type28 = type27.matchQueryType();
        float float29 = type27.tieBreaker();
        multiMatchQueryBuilder19.type = type27;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder12.type(type27);
        multiMatchQueryBuilder31.maxExpansions = 100;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.prefixLength((int) (short) 0);
        org.elasticsearch.index.query.Operator operator36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.operator(operator36);
        java.lang.Float float38 = multiMatchQueryBuilder37.tieBreaker;
        java.lang.Integer int39 = multiMatchQueryBuilder37.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder37.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.cutoffFrequency((float) 'a');
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(float38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
    }

    @Test
    public void test10958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10958");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.getPROTOTYPE();
        multiMatchQueryBuilder14.settieBreaker((java.lang.Float) 0.0f);
        multiMatchQueryBuilder14.lenient = false;
        org.elasticsearch.index.query.Operator operator19 = null;
        multiMatchQueryBuilder14.operator = operator19;
        multiMatchQueryBuilder14.cutoffFrequency = 1.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder14.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"slop\" : 10,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder14.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = multiMatchQueryBuilder26.gettype();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
    }

    @Test
    public void test10959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10959");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = multiMatchQueryBuilder4.getzeroTermsQuery();
        java.lang.Integer int11 = multiMatchQueryBuilder4.getmaxExpansions();
        java.lang.Float float12 = multiMatchQueryBuilder4.tieBreaker;
        multiMatchQueryBuilder4.useDisMax = false;
        java.lang.Float float15 = multiMatchQueryBuilder4.getcutoffFrequency();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery16;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.setzeroTermsQuery(zeroTermsQuery18);
        multiMatchQueryBuilder4.setminimumShouldMatch("");
        multiMatchQueryBuilder4.maxExpansions = 1;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str26 = multiMatchQueryBuilder25.getName();
        java.lang.Float float27 = multiMatchQueryBuilder25.tieBreaker;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(zeroTermsQuery10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "multi_match" + "'", str26, "multi_match");
        org.junit.Assert.assertNull(float27);
    }

    @Test
    public void test10960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10960");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery18;
        java.lang.Integer int20 = multiMatchQueryBuilder4.getprefixLength();
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int20);
    }

    @Test
    public void test10961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10961");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.lang.Integer int8 = multiMatchQueryBuilder4.getmaxExpansions();
        multiMatchQueryBuilder4.useDisMax = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.prefixLength(0);
        java.lang.Boolean boolean13 = multiMatchQueryBuilder12.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"max_expansions\" : -1,\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int16 = multiMatchQueryBuilder12.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + boolean13 + "' != '" + true + "'", boolean13, true);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test10962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10962");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder6.maxExpansions = 1;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder6.slop((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean13 = multiMatchQueryBuilder12.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test10963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10963");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        java.lang.String str13 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.String str14 = multiMatchQueryBuilder4.queryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery15;
        java.lang.Boolean boolean17 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        java.lang.Boolean boolean25 = multiMatchQueryBuilder22.getlenient();
        multiMatchQueryBuilder22.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness30 = multiMatchQueryBuilder29.fuzziness;
        multiMatchQueryBuilder29.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder29.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray38 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray38);
        org.elasticsearch.index.query.Operator operator40 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.operator(operator40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder39.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder43.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness48 = multiMatchQueryBuilder43.getfuzziness();
        multiMatchQueryBuilder29.fuzziness = fuzziness48;
        multiMatchQueryBuilder4.fuzziness = fuzziness48;
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 97);
        java.lang.String str55 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.util.List<java.lang.String> strList56 = multiMatchQueryBuilder4.getfields();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(boolean25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(fuzziness30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(fuzziness48);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertNotNull(strList56);
    }

    @Test
    public void test10964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10964");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.common.unit.Fuzziness fuzziness10 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness10;
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.tieBreaker((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder14.setcutoffFrequency((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.tieBreaker(0.0f);
        java.lang.Integer int21 = multiMatchQueryBuilder14.getmaxExpansions();
        java.lang.String str22 = multiMatchQueryBuilder14.fuzzyRewrite;
        java.lang.String str23 = multiMatchQueryBuilder14.analyzer;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test10965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10965");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery17;
        java.lang.String str19 = multiMatchQueryBuilder4.getName();
        java.lang.String str20 = multiMatchQueryBuilder4.getWriteableName();
        multiMatchQueryBuilder4.setcutoffFrequency((java.lang.Float) (-1.0f));
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
    }

    @Test
    public void test10966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10966");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.Float float9 = multiMatchQueryBuilder4.tieBreaker;
        java.lang.String str10 = multiMatchQueryBuilder4.getrewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test10967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10967");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.type;
        org.elasticsearch.index.query.Operator operator11 = null;
        multiMatchQueryBuilder4.operator = operator11;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 1,\n    \"max_expansions\" : 10,\n    \"rewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.prefixLength((int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test10968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10968");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str16 = multiMatchQueryBuilder15.queryName();
        java.lang.Integer int17 = multiMatchQueryBuilder15.prefixLength;
        java.lang.String str18 = multiMatchQueryBuilder15.queryName();
        multiMatchQueryBuilder15.setuseDisMax((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test10969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10969");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setrewrite("");
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.operator(operator15);
        java.lang.String str17 = multiMatchQueryBuilder16.queryName();
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.zeroTermsQuery(zeroTermsQuery30);
        multiMatchQueryBuilder31.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.prefixLength((int) (short) 100);
        java.lang.String[] strArray41 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray41);
        org.elasticsearch.index.query.Operator operator43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.operator(operator43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException47 = multiMatchQueryBuilder42.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder42.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder42.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder42.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type54 = multiMatchQueryBuilder42.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type55 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField56 = type55.parseField();
        multiMatchQueryBuilder42.type = type55;
        boolean boolean58 = multiMatchQueryBuilder35.equals((java.lang.Object) multiMatchQueryBuilder42);
        java.lang.String str59 = multiMatchQueryBuilder35.analyzer;
        java.lang.Object obj60 = multiMatchQueryBuilder35.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder35.boost((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder16.fuzziness((java.lang.Object) multiMatchQueryBuilder62);
        java.lang.Integer int64 = multiMatchQueryBuilder16.maxExpansions;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery65 = null;
        multiMatchQueryBuilder16.setzeroTermsQuery(zeroTermsQuery65);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNull(queryValidationException47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNull(type54);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type55.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "multi_match" + "'", str59, "multi_match");
        org.junit.Assert.assertEquals("'" + obj60 + "' != '" + "multi_match" + "'", obj60, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNull(int64);
    }

    @Test
    public void test10970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10970");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        java.lang.Float float16 = multiMatchQueryBuilder15.cutoffFrequency;
        multiMatchQueryBuilder15.useDisMax = true;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = null;
        multiMatchQueryBuilder15.setfieldsBoosts(strObjectFloatHashMap19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder15.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = multiMatchQueryBuilder15.gettype();
        java.lang.Integer int23 = multiMatchQueryBuilder15.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder15.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder24.slop = (-1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNull(type22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test10971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10971");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        java.lang.Object obj11 = multiMatchQueryBuilder10.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Object obj14 = null;
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        java.lang.Boolean boolean22 = multiMatchQueryBuilder19.getlenient();
        multiMatchQueryBuilder19.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder19.tieBreaker((float) (-1));
        multiMatchQueryBuilder19.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder19.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type33 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.common.ParseField parseField34 = type33.parseField();
        org.elasticsearch.common.ParseField parseField35 = type33.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.type(type33);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.zeroTermsQuery(zeroTermsQuery37);
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException48 = multiMatchQueryBuilder43.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder43.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder43.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder43.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness55 = multiMatchQueryBuilder43.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder43.slop((int) (short) 0);
        multiMatchQueryBuilder43.setslop((java.lang.Integer) 100);
        java.lang.Boolean boolean60 = multiMatchQueryBuilder43.getuseDisMax();
        java.lang.String str61 = multiMatchQueryBuilder43.fuzzyRewrite;
        java.lang.String[] strArray66 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray66);
        java.lang.String[] strArray72 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray66, strArray72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str61, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder38, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj14, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", strArray66);
        multiMatchQueryBuilder78.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder78.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}^0.0\" ],\n    \"analyzer\" : \"\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "multi_match" + "'", obj11, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type33.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(parseField34);
        org.junit.Assert.assertNotNull(parseField35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(queryValidationException48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(fuzziness55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNull(boolean60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
    }

    @Test
    public void test10972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10972");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        java.lang.Integer int13 = multiMatchQueryBuilder11.slop;
        multiMatchQueryBuilder11.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.prefixLength((int) (short) 1);
        java.lang.String str18 = multiMatchQueryBuilder17.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder17.maxExpansions(0);
        org.elasticsearch.index.query.QueryShardContext queryShardContext21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query22 = multiMatchQueryBuilder17.toQuery(queryShardContext21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test10973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10973");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        java.lang.String str15 = multiMatchQueryBuilder12.toString();
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap25 = multiMatchQueryBuilder24.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder24.lenient(false);
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery32);
        multiMatchQueryBuilder24.tieBreaker = 10.0f;
        java.lang.String[] strArray39 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray39);
        org.elasticsearch.index.query.Operator operator41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.operator(operator41);
        multiMatchQueryBuilder40.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator45 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder40.operator(operator45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.maxExpansions((int) (short) 10);
        java.lang.String[] strArray52 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray52);
        org.elasticsearch.index.query.Operator operator54 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.operator(operator54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder53.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder57.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness62 = multiMatchQueryBuilder57.getfuzziness();
        multiMatchQueryBuilder46.fuzziness = fuzziness62;
        multiMatchQueryBuilder24.setfuzziness(fuzziness62);
        multiMatchQueryBuilder12.fuzziness = fuzziness62;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str15, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(strObjectFloatHashMap25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(fuzziness62);
    }

    @Test
    public void test10974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10974");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String str16 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.useDisMax(true);
        float float21 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) (-1));
        java.lang.String str24 = multiMatchQueryBuilder4.analyzer;
        java.lang.String str25 = multiMatchQueryBuilder4.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder4.prefixLength((int) (short) 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 1.0f + "'", float21 == 1.0f);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test10975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10975");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type8 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type9 = type8.matchQueryType();
        float float10 = type8.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = multiMatchQueryBuilder11.zeroTermsQuery;
        java.lang.Boolean boolean13 = multiMatchQueryBuilder11.useDisMax;
        java.lang.String str14 = multiMatchQueryBuilder11.rewrite;
        multiMatchQueryBuilder11.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float17 = multiMatchQueryBuilder11.gettieBreaker();
        java.lang.Integer int18 = multiMatchQueryBuilder11.getprefixLength();
        multiMatchQueryBuilder11.rewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"max_expansions\" : -1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type8.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type9.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(zeroTermsQuery12);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNull(int18);
    }

    @Test
    public void test10976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10976");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (byte) 0);
        org.elasticsearch.common.unit.Fuzziness fuzziness14 = multiMatchQueryBuilder8.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float17 = multiMatchQueryBuilder16.cutoffFrequency;
        multiMatchQueryBuilder16.setmaxExpansions((java.lang.Integer) 97);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap20 = multiMatchQueryBuilder16.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(strObjectFloatHashMap11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(fuzziness14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNull(strObjectFloatHashMap20);
    }

    @Test
    public void test10977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10977");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.getPROTOTYPE();
        java.lang.Integer int15 = multiMatchQueryBuilder11.prefixLength;
        java.lang.Float float16 = multiMatchQueryBuilder11.tieBreaker;
        java.lang.String str17 = multiMatchQueryBuilder11.fuzzyRewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test10978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10978");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean11 = multiMatchQueryBuilder10.getlenient();
        multiMatchQueryBuilder10.prefixLength = 10;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
    }

    @Test
    public void test10979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10979");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap13;
        multiMatchQueryBuilder4.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = multiMatchQueryBuilder18.gettype();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder18.doXContent(xContentBuilder20, params21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(type19);
        org.junit.Assert.assertNotNull(params21);
    }

    @Test
    public void test10980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10980");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder4.cutoffFrequency = 10.0f;
        java.lang.Object obj17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.type(obj17);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        multiMatchQueryBuilder4.setzeroTermsQuery(zeroTermsQuery19);
        java.lang.Integer int21 = multiMatchQueryBuilder4.prefixLength;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params23 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder4.doXContent(xContentBuilder22, params23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNotNull(params23);
    }

    @Test
    public void test10981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10981");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.tieBreaker((float) 100);
        multiMatchQueryBuilder4.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"analyzer\" : \"\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray28 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray28);
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.operator(operator30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder29.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap34 = multiMatchQueryBuilder33.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder33.zeroTermsQuery(zeroTermsQuery35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.lenient(false);
        multiMatchQueryBuilder33.setcutoffFrequency((java.lang.Float) 1.0f);
        java.lang.Integer int41 = multiMatchQueryBuilder33.maxExpansions;
        java.lang.String str42 = multiMatchQueryBuilder33.minimumShouldMatch;
        java.lang.String[] strArray46 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray46);
        org.elasticsearch.index.query.Operator operator48 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.operator(operator48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder47.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException52 = multiMatchQueryBuilder47.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder47.cutoffFrequency((float) (byte) 100);
        java.lang.String str55 = multiMatchQueryBuilder47.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder47.queryName("");
        multiMatchQueryBuilder57.setslop((java.lang.Integer) 0);
        java.lang.String[] strArray63 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder33, strArray63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", strArray63);
        java.lang.String str68 = multiMatchQueryBuilder67.toString();
        java.util.List<java.lang.String> strList69 = multiMatchQueryBuilder67.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(strObjectFloatHashMap34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(queryValidationException52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"most_fields\\\",\\n    \\\"slop\\\" : 97,\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"tieBreaker\\\" : 100.0,\\n    \\\"cutoffFrequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}" + "'", str68, "{\n  \"multiMatch\" : {\n    \"query\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"most_fields\\\",\\n    \\\"slop\\\" : 97,\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"tieBreaker\\\" : 100.0,\\n    \\\"cutoffFrequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strList69);
    }

    @Test
    public void test10982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10982");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        java.lang.String str14 = multiMatchQueryBuilder12.getfuzzyRewrite();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        multiMatchQueryBuilder19.minimumShouldMatch = "hi!";
        java.lang.Float float26 = multiMatchQueryBuilder19.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type28 = type27.matchQueryType();
        float float29 = type27.tieBreaker();
        multiMatchQueryBuilder19.type = type27;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder12.type(type27);
        multiMatchQueryBuilder31.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str34 = multiMatchQueryBuilder31.getNAME();
        java.lang.Object obj35 = multiMatchQueryBuilder31.gettext();
        java.lang.Float float36 = multiMatchQueryBuilder31.gettieBreaker();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "multi_match" + "'", str34, "multi_match");
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + "multi_match" + "'", obj35, "multi_match");
        org.junit.Assert.assertNull(float36);
    }

    @Test
    public void test10983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10983");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str20 = multiMatchQueryBuilder13.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 10,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentType xContentType23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference24 = multiMatchQueryBuilder22.buildAsBytes(xContentType23);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test10984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10984");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        java.lang.String str12 = multiMatchQueryBuilder11.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder11.maxExpansions = 100;
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        multiMatchQueryBuilder21.setrewrite("");
        java.util.List<java.lang.String> strList26 = multiMatchQueryBuilder21.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField28 = type27.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type29 = type27.matchQueryType();
        multiMatchQueryBuilder21.type = type27;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder11.type(type27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder31.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        multiMatchQueryBuilder31.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder31.setslop((java.lang.Integer) 10);
        org.elasticsearch.index.query.Operator operator39 = multiMatchQueryBuilder31.getoperator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField28);
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type29.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(operator39);
    }

    @Test
    public void test10985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10985");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        org.elasticsearch.index.query.QueryValidationException queryValidationException14 = multiMatchQueryBuilder13.validate();
        java.lang.String str15 = multiMatchQueryBuilder13.getanalyzer();
        java.lang.Boolean boolean16 = multiMatchQueryBuilder13.useDisMax;
        java.util.List<java.lang.String> strList17 = multiMatchQueryBuilder13.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.prefixLength(52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 1,\n    \"max_expansions\" : 10,\n    \"rewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.slop(0);
        java.lang.Object obj24 = multiMatchQueryBuilder21.text;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(queryValidationException14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + "multi_match" + "'", obj24, "multi_match");
    }

    @Test
    public void test10986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10986");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str19 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}", (float) 'a');
        multiMatchQueryBuilder22.setcutoffFrequency((java.lang.Float) 35.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test10987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10987");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        java.lang.String str12 = multiMatchQueryBuilder11.toString();
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.String str20 = multiMatchQueryBuilder17.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder17.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.cutoffFrequency((float) '4');
        boolean boolean26 = multiMatchQueryBuilder11.equals((java.lang.Object) multiMatchQueryBuilder23);
        java.util.List<java.lang.String> strList27 = multiMatchQueryBuilder11.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type28 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder11.fuzziness((java.lang.Object) type28);
        java.lang.Float float30 = multiMatchQueryBuilder29.cutoffFrequency;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str12, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type28.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(float30);
    }

    @Test
    public void test10988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10988");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.operator(operator16);
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj30 = multiMatchQueryBuilder22.text;
        multiMatchQueryBuilder22.setrewrite("");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder22.zeroTermsQuery(zeroTermsQuery33);
        boolean boolean35 = multiMatchQueryBuilder17.equals((java.lang.Object) multiMatchQueryBuilder22);
        org.elasticsearch.index.query.Operator operator36 = multiMatchQueryBuilder17.getoperator();
        java.lang.String str37 = multiMatchQueryBuilder17.minimumShouldMatch;
        java.lang.Object obj38 = multiMatchQueryBuilder17.text;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertEquals("'" + obj30 + "' != '" + "multi_match" + "'", obj30, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(operator36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}" + "'", str37, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertEquals("'" + obj38 + "' != '" + "multi_match" + "'", obj38, "multi_match");
    }

    @Test
    public void test10989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10989");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        java.lang.Integer int14 = multiMatchQueryBuilder13.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder13.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.lenient(false);
        multiMatchQueryBuilder13.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : 10,\n    \"maxExpansions\" : -1,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder13.setmaxExpansions((java.lang.Integer) 52);
        java.lang.Object obj22 = multiMatchQueryBuilder13.gettext();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + "multi_match" + "'", obj22, "multi_match");
    }

    @Test
    public void test10990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10990");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.minimumShouldMatch("");
        multiMatchQueryBuilder11.slop = 10;
        java.lang.String[] strArray17 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray17);
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.operator(operator19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException23 = multiMatchQueryBuilder18.validate();
        java.lang.Integer int24 = multiMatchQueryBuilder18.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder18.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        float float29 = multiMatchQueryBuilder28.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.slop((int) (short) 10);
        java.lang.String[] strArray35 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray35);
        org.elasticsearch.index.query.Operator operator37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.operator(operator37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder36.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException41 = multiMatchQueryBuilder36.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder36.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap44 = multiMatchQueryBuilder43.getfieldsBoosts();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap45 = null;
        multiMatchQueryBuilder43.fieldsBoosts = strObjectFloatHashMap45;
        java.lang.Boolean boolean47 = multiMatchQueryBuilder43.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type48 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder43.settype(type48);
        multiMatchQueryBuilder31.type = type48;
        org.elasticsearch.common.ParseField parseField51 = type48.parseField();
        multiMatchQueryBuilder11.type = type48;
        org.elasticsearch.index.search.MatchQuery.Type type53 = type48.matchQueryType();
        org.elasticsearch.common.ParseField parseField54 = type48.parseField();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(queryValidationException23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 1.0f + "'", float29 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(queryValidationException41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(strObjectFloatHashMap44);
        org.junit.Assert.assertNull(boolean47);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type48.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField51);
        org.junit.Assert.assertTrue("'" + type53 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type53.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField54);
    }

    @Test
    public void test10991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10991");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float16 = multiMatchQueryBuilder15.cutoffFrequency;
        multiMatchQueryBuilder15.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int19 = multiMatchQueryBuilder15.getprefixLength();
        java.lang.String str20 = multiMatchQueryBuilder15.getWriteableName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
    }

    @Test
    public void test10992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10992");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder11.getfieldsBoosts();
        java.lang.Object obj13 = multiMatchQueryBuilder11.text;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = multiMatchQueryBuilder11.getfieldsBoosts();
        multiMatchQueryBuilder11.setslop((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.slop((int) ' ');
        multiMatchQueryBuilder11.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 0,\n    \"prefix_length\" : 35,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + "multi_match" + "'", obj13, "multi_match");
        org.junit.Assert.assertNull(strObjectFloatHashMap14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test10993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10993");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder12.setzeroTermsQuery(zeroTermsQuery13);
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException24 = multiMatchQueryBuilder19.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.cutoffFrequency((float) (byte) 100);
        float float27 = multiMatchQueryBuilder19.boost();
        multiMatchQueryBuilder19.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type31 = type30.matchQueryType();
        float float32 = type30.tieBreaker();
        float float33 = type30.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder19.fuzziness((java.lang.Object) type30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder12.type(type30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzziness\" : \"10\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(queryValidationException24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type30.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type31.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 0.0f + "'", float32 == 0.0f);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
    }

    @Test
    public void test10994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10994");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"most_fields\\\",\\n    \\\"slop\\\" : 97,\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"tieBreaker\\\" : 100.0,\\n    \\\"cutoffFrequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
    }

    @Test
    public void test10995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10995");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.prefixLength = 10;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.setfieldsBoosts(strObjectFloatHashMap13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("", (float) (byte) 100);
        java.lang.String str18 = multiMatchQueryBuilder17.getminimumShouldMatch();
        org.elasticsearch.index.query.Operator operator19 = multiMatchQueryBuilder17.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.boost((float) (-1));
        java.lang.String[] strArray25 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray25);
        org.elasticsearch.index.query.Operator operator27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.operator(operator27);
        java.lang.Boolean boolean29 = multiMatchQueryBuilder26.getlenient();
        multiMatchQueryBuilder26.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type32 = multiMatchQueryBuilder26.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder26.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int35 = multiMatchQueryBuilder34.prefixLength;
        multiMatchQueryBuilder34.maxExpansions = 0;
        org.elasticsearch.common.unit.Fuzziness fuzziness38 = multiMatchQueryBuilder34.fuzziness;
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type48 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type49 = type48.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder45.type(type48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder34.type(type48);
        multiMatchQueryBuilder21.type = type48;
        multiMatchQueryBuilder21.tieBreaker = 100.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(operator19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(boolean29);
        org.junit.Assert.assertNull(type32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNull(fuzziness38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type48.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type49.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
    }

    @Test
    public void test10996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10996");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean21 = multiMatchQueryBuilder20.getlenient();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = multiMatchQueryBuilder20.getzeroTermsQuery();
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException32 = multiMatchQueryBuilder27.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder27.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder27.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder27.fuzzyRewrite("hi!");
        multiMatchQueryBuilder27.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery41 = null;
        multiMatchQueryBuilder27.zeroTermsQuery = zeroTermsQuery41;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder27.slop((int) (short) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery45 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder27.zeroTermsQuery(zeroTermsQuery45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder46.getPROTOTYPE();
        org.elasticsearch.common.unit.Fuzziness fuzziness48 = multiMatchQueryBuilder47.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder47.tieBreaker(52.0f);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap51 = multiMatchQueryBuilder50.getfieldsBoosts();
        multiMatchQueryBuilder20.setfieldsBoosts(strObjectFloatHashMap51);
        java.lang.String[] strArray56 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray56);
        org.elasticsearch.index.query.Operator operator58 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.operator(operator58);
        java.lang.Boolean boolean60 = multiMatchQueryBuilder57.getlenient();
        multiMatchQueryBuilder57.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type63 = multiMatchQueryBuilder57.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder57.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int66 = multiMatchQueryBuilder65.prefixLength;
        multiMatchQueryBuilder65.maxExpansions = 0;
        java.lang.String[] strArray72 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray72);
        org.elasticsearch.index.query.Operator operator74 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder73.operator(operator74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder73.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException78 = multiMatchQueryBuilder73.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder73.cutoffFrequency((float) (byte) 100);
        float float81 = multiMatchQueryBuilder73.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type82 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type83 = type82.matchQueryType();
        multiMatchQueryBuilder73.settype(type82);
        org.elasticsearch.index.search.MatchQuery.Type type85 = type82.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder65.type(type82);
        org.elasticsearch.common.ParseField parseField87 = type82.parseField();
        multiMatchQueryBuilder20.settype(type82);
        org.elasticsearch.common.ParseField parseField89 = type82.parseField();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNull(zeroTermsQuery22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(queryValidationException32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
// flaky:         org.junit.Assert.assertNotNull(fuzziness48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap51);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(boolean60);
        org.junit.Assert.assertNull(type63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNull(int66);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNull(queryValidationException78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + 1.0f + "'", float81 == 1.0f);
        org.junit.Assert.assertTrue("'" + type82 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type82.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type83 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type83.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type85 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type85.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertNotNull(parseField87);
        org.junit.Assert.assertNotNull(parseField89);
    }

    @Test
    public void test10997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10997");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.useDisMax(true);
        java.lang.Boolean boolean22 = multiMatchQueryBuilder21.getuseDisMax();
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.operator(operator23);
        multiMatchQueryBuilder21.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"fuzziness\" : \"BEST_FIELDS\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = multiMatchQueryBuilder21.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.getPROTOTYPE();
        org.elasticsearch.common.unit.Fuzziness fuzziness29 = multiMatchQueryBuilder21.fuzziness;
        multiMatchQueryBuilder21.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + boolean22 + "' != '" + true + "'", boolean22, true);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(type27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(fuzziness29);
    }

    @Test
    public void test10998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10998");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        multiMatchQueryBuilder12.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float15 = multiMatchQueryBuilder12.gettieBreaker();
        java.lang.String str16 = multiMatchQueryBuilder12.fuzzyRewrite;
        multiMatchQueryBuilder12.slop = 100;
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        java.lang.String str26 = multiMatchQueryBuilder25.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type28 = type27.matchQueryType();
        float float29 = type27.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder25.type(type27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder30.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}", (float) 100L);
        java.lang.String[] strArray37 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray37);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.operator(operator39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder38.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder42.setanalyzer("multi_match");
        org.elasticsearch.index.query.QueryValidationException queryValidationException47 = multiMatchQueryBuilder42.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery48 = multiMatchQueryBuilder42.zeroTermsQuery;
        java.lang.String str49 = multiMatchQueryBuilder42.getrewrite();
        multiMatchQueryBuilder42.lenient = true;
        java.lang.String[] strArray55 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray55);
        org.elasticsearch.index.query.Operator operator57 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.operator(operator57);
        java.lang.String str59 = multiMatchQueryBuilder56.getWriteableName();
        java.lang.Boolean boolean60 = multiMatchQueryBuilder56.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder56.getPROTOTYPE();
        multiMatchQueryBuilder56.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray67 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray67);
        org.elasticsearch.index.query.Operator operator69 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder68.operator(operator69);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder68.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException73 = multiMatchQueryBuilder68.validate();
        java.lang.Integer int74 = multiMatchQueryBuilder68.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery75 = multiMatchQueryBuilder68.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder68.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder68.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder68.boost((float) 0);
        java.lang.String str83 = multiMatchQueryBuilder68.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap84 = multiMatchQueryBuilder68.fieldsBoosts;
        multiMatchQueryBuilder56.fieldsBoosts = strObjectFloatHashMap84;
        multiMatchQueryBuilder42.fieldsBoosts = strObjectFloatHashMap84;
        multiMatchQueryBuilder30.setfieldsBoosts(strObjectFloatHashMap84);
        java.lang.Integer int88 = multiMatchQueryBuilder30.getprefixLength();
        boolean boolean89 = multiMatchQueryBuilder12.equals((java.lang.Object) int88);
        org.elasticsearch.index.query.Operator operator90 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = multiMatchQueryBuilder12.operator(operator90);
        java.util.List<java.lang.String> strList92 = multiMatchQueryBuilder12.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}" + "'", str16, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "multi_match" + "'", str26, "multi_match");
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(queryValidationException47);
        org.junit.Assert.assertNull(zeroTermsQuery48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "multi_match" + "'", str59, "multi_match");
        org.junit.Assert.assertNull(boolean60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNull(queryValidationException73);
        org.junit.Assert.assertNull(int74);
        org.junit.Assert.assertNull(zeroTermsQuery75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap84);
        org.junit.Assert.assertNull(int88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder91);
        org.junit.Assert.assertNotNull(strList92);
    }

    @Test
    public void test10999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10999");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder20.fuzziness;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = multiMatchQueryBuilder20.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder20.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder20.useDisMax(false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNull(strObjectFloatHashMap22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test11000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test11000");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.maxExpansions((-1));
        multiMatchQueryBuilder11.maxExpansions = 100;
        multiMatchQueryBuilder11.setslop((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        multiMatchQueryBuilder11.zeroTermsQuery = zeroTermsQuery20;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
    }
}
