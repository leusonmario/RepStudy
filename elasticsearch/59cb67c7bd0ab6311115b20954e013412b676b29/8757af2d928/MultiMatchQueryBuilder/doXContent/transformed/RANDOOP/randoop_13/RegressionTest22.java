import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest22 {

    public static boolean debug = false;

    @Test
    public void test11001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11001");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder24.setoperator(operator29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder24.zeroTermsQuery = zeroTermsQuery31;
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        multiMatchQueryBuilder37.maxExpansions = 0;
        java.lang.Boolean boolean40 = multiMatchQueryBuilder37.lenient;
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap50 = multiMatchQueryBuilder49.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.minimumShouldMatch("multi_match");
        java.lang.String str53 = multiMatchQueryBuilder52.toString();
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.Operator operator59 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.operator(operator59);
        java.lang.String str61 = multiMatchQueryBuilder58.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness62 = multiMatchQueryBuilder58.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder58.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.cutoffFrequency((float) '4');
        boolean boolean67 = multiMatchQueryBuilder52.equals((java.lang.Object) multiMatchQueryBuilder64);
        multiMatchQueryBuilder64.setmaxExpansions((java.lang.Integer) (-1));
        multiMatchQueryBuilder64.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder37.fuzziness((java.lang.Object) multiMatchQueryBuilder64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder64.maxExpansions((int) (byte) 100);
        java.lang.String str75 = multiMatchQueryBuilder64.getrewrite();
        java.lang.Boolean boolean76 = multiMatchQueryBuilder64.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(boolean40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(strObjectFloatHashMap50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str53, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "multi_match" + "'", str61, "multi_match");
        org.junit.Assert.assertNull(fuzziness62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(boolean76);
    }

    @Test
    public void test11002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11002");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        java.lang.String[] strArray11 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray11);
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder16.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.lenient(false);
        multiMatchQueryBuilder16.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery24);
        boolean boolean26 = multiMatchQueryBuilder6.equals((java.lang.Object) multiMatchQueryBuilder25);
        multiMatchQueryBuilder6.slop = 100;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap29 = multiMatchQueryBuilder6.getfieldsBoosts();
        java.lang.String str30 = multiMatchQueryBuilder6.rewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(strObjectFloatHashMap29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test11003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11003");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int16 = multiMatchQueryBuilder15.getprefixLength();
        java.lang.Object obj17 = multiMatchQueryBuilder15.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = multiMatchQueryBuilder15.gettype();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(type20);
    }

    @Test
    public void test11004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11004");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        java.lang.String str12 = multiMatchQueryBuilder8.fuzzyRewrite;
        multiMatchQueryBuilder8.settieBreaker((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.cutoffFrequency((float) (short) 0);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder16.fieldsBoosts;
        java.lang.Object obj18 = multiMatchQueryBuilder16.gettext();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + "multi_match" + "'", obj18, "multi_match");
    }

    @Test
    public void test11005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11005");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        org.elasticsearch.index.query.Operator operator11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.operator(operator11);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder14.prefixLength = 10;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
    }

    @Test
    public void test11006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11006");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder12.setprefixLength((java.lang.Integer) 100);
        java.lang.String str15 = multiMatchQueryBuilder12.rewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(zeroTermsQuery10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test11007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11007");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = multiMatchQueryBuilder4.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) ' ');
        java.lang.String str24 = multiMatchQueryBuilder23.rewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type20.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test11008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11008");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.util.List<java.lang.String> strList8 = multiMatchQueryBuilder4.fields;
        java.lang.String[] strArray12 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray12);
        org.elasticsearch.index.query.Operator operator14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.operator(operator14);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException18 = multiMatchQueryBuilder13.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = multiMatchQueryBuilder13.getzeroTermsQuery();
        java.lang.Object obj20 = multiMatchQueryBuilder13.text;
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap33 = multiMatchQueryBuilder32.getfieldsBoosts();
        java.lang.String[] strArray37 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray37);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.operator(operator39);
        java.lang.String str41 = multiMatchQueryBuilder38.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness42 = multiMatchQueryBuilder38.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder38.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type45 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder38.settype(type45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder32.type(type45);
        org.elasticsearch.index.search.MatchQuery.Type type48 = type45.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type49 = type45.matchQueryType();
        multiMatchQueryBuilder13.settype(type45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder4.type(type45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"slop\" : 0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.useDisMax(true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(queryValidationException18);
        org.junit.Assert.assertNull(zeroTermsQuery19);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + "multi_match" + "'", obj20, "multi_match");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(strObjectFloatHashMap33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multi_match" + "'", str41, "multi_match");
        org.junit.Assert.assertNull(fuzziness42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type45.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type48.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type49.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
    }

    @Test
    public void test11009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11009");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        multiMatchQueryBuilder4.rewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder4.slop = 0;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder4.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
    }

    @Test
    public void test11010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11010");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        multiMatchQueryBuilder4.setrewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.tieBreaker(100.0f);
        multiMatchQueryBuilder4.useDisMax = true;
        org.elasticsearch.common.io.stream.StreamInput streamInput17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.readFrom(streamInput17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
    }

    @Test
    public void test11011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11011");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.lenient(false);
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        java.lang.String str31 = multiMatchQueryBuilder28.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness32 = multiMatchQueryBuilder28.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder28.tieBreaker((float) (short) 0);
        multiMatchQueryBuilder34.setlenient((java.lang.Boolean) true);
        java.lang.String str37 = multiMatchQueryBuilder34.getWriteableName();
        float float38 = multiMatchQueryBuilder34.boost();
        multiMatchQueryBuilder34.fuzzyRewrite = "";
        multiMatchQueryBuilder34.lenient = false;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery43 = multiMatchQueryBuilder34.zeroTermsQuery;
        boolean boolean44 = multiMatchQueryBuilder23.equals((java.lang.Object) zeroTermsQuery43);
        org.elasticsearch.common.unit.Fuzziness fuzziness45 = multiMatchQueryBuilder23.getfuzziness();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder23.zeroTermsQuery(zeroTermsQuery46);
        java.lang.String str48 = multiMatchQueryBuilder23.getrewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "multi_match" + "'", str31, "multi_match");
        org.junit.Assert.assertNull(fuzziness32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "multi_match" + "'", str37, "multi_match");
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 1.0f + "'", float38 == 1.0f);
        org.junit.Assert.assertNull(zeroTermsQuery43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(fuzziness45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}" + "'", str48, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test11012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11012");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("hi!");
        java.lang.Integer int12 = multiMatchQueryBuilder8.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder16.setcutoffFrequency((java.lang.Float) 52.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test11013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11013");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 100);
        multiMatchQueryBuilder8.prefixLength = 100;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.cutoffFrequency((float) 1L);
        org.elasticsearch.index.query.Operator operator20 = null;
        multiMatchQueryBuilder8.operator = operator20;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test11014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11014");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput21 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder16.writeTo(streamOutput21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test11015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11015");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        float float15 = multiMatchQueryBuilder14.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.slop((int) (short) 10);
        multiMatchQueryBuilder14.setcutoffFrequency((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"\"\n  }\n}");
        multiMatchQueryBuilder21.setmaxExpansions((java.lang.Integer) 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test11016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11016");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 0);
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        java.lang.Boolean boolean22 = multiMatchQueryBuilder19.getlenient();
        java.util.List<java.lang.String> strList23 = multiMatchQueryBuilder19.fields;
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException33 = multiMatchQueryBuilder28.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery34 = multiMatchQueryBuilder28.getzeroTermsQuery();
        java.lang.Object obj35 = multiMatchQueryBuilder28.text;
        java.lang.String[] strArray39 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray39);
        org.elasticsearch.index.query.Operator operator41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.operator(operator41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException45 = multiMatchQueryBuilder40.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder40.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap48 = multiMatchQueryBuilder47.getfieldsBoosts();
        java.lang.String[] strArray52 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray52);
        org.elasticsearch.index.query.Operator operator54 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.operator(operator54);
        java.lang.String str56 = multiMatchQueryBuilder53.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness57 = multiMatchQueryBuilder53.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder53.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type60 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder53.settype(type60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder47.type(type60);
        org.elasticsearch.index.search.MatchQuery.Type type63 = type60.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type64 = type60.matchQueryType();
        multiMatchQueryBuilder28.settype(type60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder19.type(type60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder14.type(type60);
        java.lang.String[] strArray71 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray71);
        org.elasticsearch.index.query.Operator operator73 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder72.operator(operator73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder72.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap77 = multiMatchQueryBuilder76.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery78 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder76.zeroTermsQuery(zeroTermsQuery78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder76.lenient(false);
        multiMatchQueryBuilder76.maxExpansions = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type84 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type85 = type84.matchQueryType();
        float float86 = type84.tieBreaker();
        float float87 = type84.tieBreaker();
        float float88 = type84.tieBreaker();
        multiMatchQueryBuilder76.type = type84;
        org.elasticsearch.index.search.MatchQuery.Type type90 = type84.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = multiMatchQueryBuilder14.type(type84);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = multiMatchQueryBuilder14.prefixLength(1);
        java.lang.Boolean boolean94 = multiMatchQueryBuilder14.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(queryValidationException33);
        org.junit.Assert.assertNull(zeroTermsQuery34);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + "multi_match" + "'", obj35, "multi_match");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(queryValidationException45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(strObjectFloatHashMap48);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "multi_match" + "'", str56, "multi_match");
        org.junit.Assert.assertNull(fuzziness57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertTrue("'" + type60 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type60.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertTrue("'" + type63 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type63.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type64 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type64.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNull(strObjectFloatHashMap77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertTrue("'" + type84 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type84.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type85 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type85.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float86 + "' != '" + 0.0f + "'", float86 == 0.0f);
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + 0.0f + "'", float87 == 0.0f);
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + 0.0f + "'", float88 == 0.0f);
        org.junit.Assert.assertTrue("'" + type90 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type90.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder91);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder93);
        org.junit.Assert.assertNull(boolean94);
    }

    @Test
    public void test11017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11017");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder16.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder16.type;
        multiMatchQueryBuilder16.settieBreaker((java.lang.Float) (-1.0f));
        float float24 = multiMatchQueryBuilder16.boost();
        multiMatchQueryBuilder16.useDisMax = true;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 1.0f + "'", float24 == 1.0f);
    }

    @Test
    public void test11018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11018");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = null;
        multiMatchQueryBuilder13.fuzziness = fuzziness16;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.rewrite("");
        java.lang.String str20 = multiMatchQueryBuilder19.queryName();
        org.elasticsearch.index.query.Operator operator21 = multiMatchQueryBuilder19.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNull(operator21);
    }

    @Test
    public void test11019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11019");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = null;
        multiMatchQueryBuilder18.setfieldsBoosts(strObjectFloatHashMap19);
        multiMatchQueryBuilder18.setslop((java.lang.Integer) 97);
        org.elasticsearch.common.xcontent.XContentType xContentType23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference24 = multiMatchQueryBuilder18.buildAsBytes(xContentType23);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test11020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11020");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder17.setuseDisMax((java.lang.Boolean) true);
        multiMatchQueryBuilder17.setprefixLength((java.lang.Integer) 0);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = null;
        multiMatchQueryBuilder17.setfieldsBoosts(strObjectFloatHashMap22);
        java.lang.Float float24 = multiMatchQueryBuilder17.gettieBreaker();
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder17.operator(operator25);
        multiMatchQueryBuilder26.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.slop(52);
        org.elasticsearch.index.query.Operator operator31 = null;
        multiMatchQueryBuilder26.setoperator(operator31);
        multiMatchQueryBuilder26.lenient = true;
        multiMatchQueryBuilder26.cutoffFrequency = 100.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(float24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
    }

    @Test
    public void test11021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11021");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Object obj15 = multiMatchQueryBuilder4.gettext();
        java.lang.Object obj16 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.boost(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 1,\n    \"maxExpansions\" : -1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap23 = multiMatchQueryBuilder22.getfieldsBoosts();
        multiMatchQueryBuilder22.useDisMax = false;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "multi_match" + "'", obj15, "multi_match");
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "multi_match" + "'", obj16, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(strObjectFloatHashMap23);
    }

    @Test
    public void test11022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11022");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        multiMatchQueryBuilder16.setzeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}");
        multiMatchQueryBuilder22.setmaxExpansions((java.lang.Integer) 0);
        java.lang.String str25 = multiMatchQueryBuilder22.getNAME();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "multi_match" + "'", str25, "multi_match");
    }

    @Test
    public void test11023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11023");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap13;
        multiMatchQueryBuilder4.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap21 = multiMatchQueryBuilder20.fieldsBoosts;
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.slop((int) (short) -1);
        multiMatchQueryBuilder25.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : 10,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str28 = multiMatchQueryBuilder25.fuzzyRewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(strObjectFloatHashMap21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test11024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11024");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        java.lang.String str12 = multiMatchQueryBuilder11.toString();
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.String str20 = multiMatchQueryBuilder17.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder17.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.cutoffFrequency((float) '4');
        boolean boolean26 = multiMatchQueryBuilder11.equals((java.lang.Object) multiMatchQueryBuilder23);
        multiMatchQueryBuilder23.setmaxExpansions((java.lang.Integer) (-1));
        multiMatchQueryBuilder23.setprefixLength((java.lang.Integer) 10);
        java.lang.String str31 = multiMatchQueryBuilder23.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder23.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery34 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.zeroTermsQuery(zeroTermsQuery34);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = multiMatchQueryBuilder35.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str12, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(zeroTermsQuery36);
    }

    @Test
    public void test11025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11025");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.Operator operator20 = multiMatchQueryBuilder19.getoperator();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder19.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.maxExpansions(0);
        java.lang.Boolean boolean24 = multiMatchQueryBuilder23.getlenient();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(operator20);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + boolean24 + "' != '" + false + "'", boolean24, false);
    }

    @Test
    public void test11026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11026");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.useDisMax(false);
        multiMatchQueryBuilder14.tieBreaker = 52.0f;
        org.elasticsearch.common.io.stream.StreamInput streamInput17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.readFrom(streamInput17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "multi_match" + "'", str12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
    }

    @Test
    public void test11027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11027");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.tieBreaker((float) (short) 0);
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) true);
        java.lang.String str13 = multiMatchQueryBuilder10.getWriteableName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder10.zeroTermsQuery;
        java.lang.String str15 = multiMatchQueryBuilder10.fuzzyRewrite;
        java.lang.String str16 = multiMatchQueryBuilder10.getName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "multi_match" + "'", str16, "multi_match");
    }

    @Test
    public void test11028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11028");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.slop((int) (short) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = multiMatchQueryBuilder14.zeroTermsQuery;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder14.setzeroTermsQuery(zeroTermsQuery18);
        multiMatchQueryBuilder14.setuseDisMax((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(zeroTermsQuery17);
    }

    @Test
    public void test11029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11029");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = multiMatchQueryBuilder18.gettype();
        multiMatchQueryBuilder18.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean22 = multiMatchQueryBuilder18.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(type19);
        org.junit.Assert.assertNull(boolean22);
    }

    @Test
    public void test11030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11030");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int13 = multiMatchQueryBuilder12.prefixLength;
        multiMatchQueryBuilder12.maxExpansions = 0;
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder12.fuzziness;
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type26 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type27 = type26.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder23.type(type26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder12.type(type26);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.zeroTermsQuery(zeroTermsQuery30);
        java.lang.Boolean boolean32 = multiMatchQueryBuilder31.useDisMax;
        multiMatchQueryBuilder31.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder31.lenient(false);
        org.elasticsearch.index.query.Operator operator37 = multiMatchQueryBuilder31.getoperator();
        org.elasticsearch.common.unit.Fuzziness fuzziness38 = null;
        multiMatchQueryBuilder31.setfuzziness(fuzziness38);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type26.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type27.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(boolean32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(operator37);
    }

    @Test
    public void test11031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11031");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList18 = multiMatchQueryBuilder4.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.rewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.Operator operator23 = multiMatchQueryBuilder4.getoperator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(operator23);
    }

    @Test
    public void test11032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11032");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder24.setoperator(operator29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder24.zeroTermsQuery = zeroTermsQuery31;
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        multiMatchQueryBuilder37.maxExpansions = 0;
        java.lang.Boolean boolean40 = multiMatchQueryBuilder37.lenient;
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap50 = multiMatchQueryBuilder49.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.minimumShouldMatch("multi_match");
        java.lang.String str53 = multiMatchQueryBuilder52.toString();
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.Operator operator59 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.operator(operator59);
        java.lang.String str61 = multiMatchQueryBuilder58.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness62 = multiMatchQueryBuilder58.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder58.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.cutoffFrequency((float) '4');
        boolean boolean67 = multiMatchQueryBuilder52.equals((java.lang.Object) multiMatchQueryBuilder64);
        multiMatchQueryBuilder64.setmaxExpansions((java.lang.Integer) (-1));
        multiMatchQueryBuilder64.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder37.fuzziness((java.lang.Object) multiMatchQueryBuilder64);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap73 = multiMatchQueryBuilder64.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder64.boost(0.0f);
        multiMatchQueryBuilder75.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 97,\n    \"prefixLength\" : 10,\n    \"maxExpansions\" : -1,\n    \"rewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(boolean40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(strObjectFloatHashMap50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str53, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "multi_match" + "'", str61, "multi_match");
        org.junit.Assert.assertNull(fuzziness62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNull(strObjectFloatHashMap73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
    }

    @Test
    public void test11033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11033");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        multiMatchQueryBuilder4.maxExpansions = 100;
        org.elasticsearch.index.query.Operator operator17 = multiMatchQueryBuilder4.operator;
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder26.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness31 = multiMatchQueryBuilder26.getfuzziness();
        multiMatchQueryBuilder4.fuzziness = fuzziness31;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder4.cutoffFrequency(100.0f);
        java.lang.String str35 = multiMatchQueryBuilder34.minimumShouldMatch;
        java.lang.Object obj36 = null;
        java.lang.String[] strArray40 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj36, strArray40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str35, strArray40);
        java.lang.Float float44 = multiMatchQueryBuilder43.gettieBreaker();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery45 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder43.zeroTermsQuery(zeroTermsQuery45);
        java.lang.Integer int47 = multiMatchQueryBuilder43.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(operator17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(fuzziness31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNull(float44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNull(int47);
    }

    @Test
    public void test11034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11034");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness8;
        org.elasticsearch.index.query.Operator operator10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.operator(operator10);
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) true);
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 32);
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness16);
    }

    @Test
    public void test11035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11035");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.queryName("");
        multiMatchQueryBuilder14.setrewrite("");
        java.lang.Integer int17 = multiMatchQueryBuilder14.maxExpansions;
        multiMatchQueryBuilder14.minimumShouldMatch = "";
        org.elasticsearch.index.query.QueryShardContext queryShardContext20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query21 = multiMatchQueryBuilder14.toFilter(queryShardContext20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test11036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11036");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.String[] strArray5 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray5);
        org.elasticsearch.index.query.Operator operator7 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.operator(operator7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder6.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException11 = multiMatchQueryBuilder6.validate();
        java.lang.Integer int12 = multiMatchQueryBuilder6.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder6.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder6.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder6.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder6.boost((float) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.zeroTermsQuery(zeroTermsQuery21);
        java.util.List<java.lang.String> strList23 = multiMatchQueryBuilder22.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder22.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray29 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray29);
        org.elasticsearch.index.query.Operator operator31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.operator(operator31);
        java.lang.Boolean boolean33 = multiMatchQueryBuilder30.getlenient();
        multiMatchQueryBuilder30.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = multiMatchQueryBuilder30.gettype();
        multiMatchQueryBuilder30.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder30.minimumShouldMatch("");
        java.lang.String[] strArray45 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder30, strArray45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder25, strArray45);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder50 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(queryValidationException11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(boolean33);
        org.junit.Assert.assertNull(type36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(strArray45);
    }

    @Test
    public void test11037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11037");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.String str10 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.useDisMax(true);
        multiMatchQueryBuilder4.slop = 97;
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException24 = multiMatchQueryBuilder19.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder19.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder19.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder19.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder32.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.zeroTermsQuery(zeroTermsQuery35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(queryValidationException24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
    }

    @Test
    public void test11038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11038");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Object obj10 = multiMatchQueryBuilder4.text;
        float float11 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float14 = multiMatchQueryBuilder4.gettieBreaker();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException24 = multiMatchQueryBuilder19.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.cutoffFrequency((float) (byte) 100);
        float float27 = multiMatchQueryBuilder19.boost();
        multiMatchQueryBuilder19.setanalyzer("");
        java.lang.Boolean boolean30 = multiMatchQueryBuilder19.getuseDisMax();
        java.lang.String str31 = multiMatchQueryBuilder19.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder19.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray37 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray37);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.operator(operator39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder38.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder42.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness47 = multiMatchQueryBuilder42.getfuzziness();
        multiMatchQueryBuilder33.fuzziness = fuzziness47;
        multiMatchQueryBuilder4.setfuzziness(fuzziness47);
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type52 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) 0.0d);
        multiMatchQueryBuilder54.prefixLength = (-1);
        java.lang.String str57 = multiMatchQueryBuilder54.getfuzzyRewrite();
        float float58 = multiMatchQueryBuilder54.boost();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "multi_match" + "'", obj10, "multi_match");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 1.0f + "'", float11 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(queryValidationException24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(fuzziness47);
        org.junit.Assert.assertNull(type52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str57, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + 1.0f + "'", float58 == 1.0f);
    }

    @Test
    public void test11039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11039");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.Operator operator10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.operator(operator10);
        java.lang.Float float12 = multiMatchQueryBuilder4.gettieBreaker();
        multiMatchQueryBuilder4.slop = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder16.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"type\" : \"phrase\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test11040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11040");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.String str1 = multiMatchQueryBuilder0.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery2 = multiMatchQueryBuilder0.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder0.prefixLength((int) (short) -1);
        multiMatchQueryBuilder0.setcutoffFrequency((java.lang.Float) 1.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder0.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder0.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"slop\" : 10,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str1, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"slop\" : 10,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(zeroTermsQuery2);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder4);
// flaky:         org.junit.Assert.assertNotNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
    }

    @Test
    public void test11041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11041");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        java.lang.String str9 = multiMatchQueryBuilder4.rewrite;
        java.lang.String[] strArray13 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray13);
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.operator(operator15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException19 = multiMatchQueryBuilder14.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.cutoffFrequency((float) (byte) 100);
        float float22 = multiMatchQueryBuilder14.boost();
        multiMatchQueryBuilder14.setanalyzer("");
        multiMatchQueryBuilder14.setcutoffFrequency((java.lang.Float) 0.0f);
        boolean boolean27 = multiMatchQueryBuilder4.equals((java.lang.Object) multiMatchQueryBuilder14);
        java.lang.String[] strArray31 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray31);
        org.elasticsearch.index.query.Operator operator33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.operator(operator33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean39 = multiMatchQueryBuilder36.useDisMax;
        java.lang.String[] strArray43 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray43);
        org.elasticsearch.index.query.Operator operator45 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.operator(operator45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder44.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException49 = multiMatchQueryBuilder44.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder44.cutoffFrequency((float) (byte) 100);
        java.lang.String str52 = multiMatchQueryBuilder44.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder44.queryName("");
        multiMatchQueryBuilder54.setslop((java.lang.Integer) 0);
        java.lang.String[] strArray60 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean39, strArray60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean27, strArray60);
        multiMatchQueryBuilder64.useDisMax = true;
        multiMatchQueryBuilder64.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : -1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(queryValidationException19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 1.0f + "'", float22 == 1.0f);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(boolean39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNull(queryValidationException49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(strArray60);
    }

    @Test
    public void test11042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11042");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.queryName("");
        multiMatchQueryBuilder14.setslop((java.lang.Integer) 0);
        java.lang.String str17 = multiMatchQueryBuilder14.getanalyzer();
        java.lang.String str18 = multiMatchQueryBuilder14.getfuzzyRewrite();
        org.elasticsearch.index.query.Operator operator19 = multiMatchQueryBuilder14.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(operator19);
    }

    @Test
    public void test11043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11043");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("hi!", (float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"Name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("");
        java.lang.String str19 = multiMatchQueryBuilder18.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test11044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11044");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.slop(1);
        java.lang.String str18 = multiMatchQueryBuilder17.minimumShouldMatch;
        java.lang.String str19 = multiMatchQueryBuilder17.rewrite;
        multiMatchQueryBuilder17.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder17.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = multiMatchQueryBuilder17.type;
        java.lang.String[] strArray28 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray28);
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.operator(operator30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder29.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException34 = multiMatchQueryBuilder29.validate();
        java.lang.Integer int35 = multiMatchQueryBuilder29.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = multiMatchQueryBuilder29.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder29.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        multiMatchQueryBuilder29.maxExpansions = 100;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery42 = multiMatchQueryBuilder29.getzeroTermsQuery();
        java.lang.Boolean boolean43 = multiMatchQueryBuilder29.useDisMax;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap44 = multiMatchQueryBuilder29.fieldsBoosts;
        java.lang.String[] strArray48 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray48);
        org.elasticsearch.index.query.Operator operator50 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.operator(operator50);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder49.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException54 = multiMatchQueryBuilder49.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder49.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder49.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.Operator operator59 = null;
        multiMatchQueryBuilder49.setoperator(operator59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type61 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type62 = type61.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder49.type(type61);
        org.elasticsearch.common.ParseField parseField64 = type61.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder29.type(type61);
        java.lang.String str66 = multiMatchQueryBuilder29.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery67 = null;
        multiMatchQueryBuilder29.zeroTermsQuery = zeroTermsQuery67;
        java.lang.String str69 = multiMatchQueryBuilder29.rewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder17.type((java.lang.Object) str69);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "multi_match" + "'", str18, "multi_match");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(type24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(queryValidationException34);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNull(zeroTermsQuery36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(zeroTermsQuery42);
        org.junit.Assert.assertNull(boolean43);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNull(queryValidationException54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertTrue("'" + type61 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type61.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type62 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type62.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(parseField64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
    }

    @Test
    public void test11045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11045");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        java.lang.String str9 = multiMatchQueryBuilder4.rewrite;
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.slop((int) (byte) 10);
        java.lang.String str14 = multiMatchQueryBuilder13.toString();
        java.lang.String str15 = multiMatchQueryBuilder13.fuzzyRewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 10,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str14, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 10,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test11046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11046");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder13.rewrite = "multi_match";
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        java.lang.String str27 = multiMatchQueryBuilder24.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness28 = multiMatchQueryBuilder24.fuzziness;
        multiMatchQueryBuilder24.setlenient((java.lang.Boolean) false);
        multiMatchQueryBuilder24.minimumShouldMatch = "";
        java.lang.String[] strArray36 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray36);
        org.elasticsearch.index.query.Operator operator38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.operator(operator38);
        org.elasticsearch.index.query.Operator operator40 = null;
        multiMatchQueryBuilder37.operator = operator40;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder37.fuzzyRewrite("multi_match");
        multiMatchQueryBuilder43.tieBreaker = 0.0f;
        java.lang.String str46 = multiMatchQueryBuilder43.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder24.type((java.lang.Object) str46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder24.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray53 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray53);
        org.elasticsearch.index.query.Operator operator55 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.operator(operator55);
        multiMatchQueryBuilder54.setrewrite("");
        java.util.List<java.lang.String> strList59 = multiMatchQueryBuilder54.getfields();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery60 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder54.zeroTermsQuery(zeroTermsQuery60);
        java.lang.Float float62 = multiMatchQueryBuilder54.getcutoffFrequency();
        java.lang.String[] strArray66 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray66);
        org.elasticsearch.index.query.Operator operator68 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.operator(operator68);
        java.lang.Boolean boolean70 = multiMatchQueryBuilder67.getlenient();
        multiMatchQueryBuilder67.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder67.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness75 = multiMatchQueryBuilder74.fuzziness;
        multiMatchQueryBuilder74.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder74.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray83 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray83);
        org.elasticsearch.index.query.Operator operator85 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder84.operator(operator85);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = multiMatchQueryBuilder84.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = multiMatchQueryBuilder88.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder88.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness93 = multiMatchQueryBuilder88.getfuzziness();
        multiMatchQueryBuilder74.fuzziness = fuzziness93;
        multiMatchQueryBuilder54.setfuzziness(fuzziness93);
        multiMatchQueryBuilder24.setfuzziness(fuzziness93);
        multiMatchQueryBuilder13.setfuzziness(fuzziness93);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder99 = multiMatchQueryBuilder13.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"multi_match\",\n    \"prefix_length\" : 100,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "multi_match" + "'", str27, "multi_match");
        org.junit.Assert.assertNull(fuzziness28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNull(float62);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNull(boolean70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNull(fuzziness75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder88);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder90);
        org.junit.Assert.assertNotNull(fuzziness93);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder99);
    }

    @Test
    public void test11047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11047");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        java.lang.Boolean boolean19 = multiMatchQueryBuilder4.lenient;
        java.lang.String str20 = multiMatchQueryBuilder4.rewrite;
        java.lang.String str21 = multiMatchQueryBuilder4.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.common.unit.Fuzziness fuzziness23 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.Boolean boolean26 = multiMatchQueryBuilder25.lenient;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(type22);
        org.junit.Assert.assertNull(fuzziness23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(boolean26);
    }

    @Test
    public void test11048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11048");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.lenient(false);
        multiMatchQueryBuilder23.setuseDisMax((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test11049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11049");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.tieBreaker((-1.0f));
        multiMatchQueryBuilder16.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        multiMatchQueryBuilder16.zeroTermsQuery = zeroTermsQuery19;
        multiMatchQueryBuilder16.prefixLength = 0;
        java.lang.Boolean boolean23 = multiMatchQueryBuilder16.lenient;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder16.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.Integer int28 = multiMatchQueryBuilder25.maxExpansions;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + boolean23 + "' != '" + false + "'", boolean23, false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(int28);
    }

    @Test
    public void test11050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11050");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        multiMatchQueryBuilder4.setminimumShouldMatch("");
        java.lang.String str18 = multiMatchQueryBuilder4.rewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.useDisMax(false);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap30 = multiMatchQueryBuilder29.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder29.zeroTermsQuery(zeroTermsQuery31);
        java.lang.Float float33 = multiMatchQueryBuilder32.cutoffFrequency;
        java.lang.String[] strArray37 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray37);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.operator(operator39);
        java.lang.Boolean boolean41 = multiMatchQueryBuilder38.getlenient();
        multiMatchQueryBuilder38.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder38.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder38.tieBreaker((float) (-1));
        multiMatchQueryBuilder38.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder38.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder32.fuzziness((java.lang.Object) multiMatchQueryBuilder38);
        java.lang.Object obj53 = multiMatchQueryBuilder52.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder4.fuzziness(obj53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.slop(0);
        java.lang.Integer int57 = multiMatchQueryBuilder54.getprefixLength();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(strObjectFloatHashMap30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(float33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(boolean41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertEquals("'" + obj53 + "' != '" + "multi_match" + "'", obj53, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNull(int57);
    }

    @Test
    public void test11051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11051");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.getPROTOTYPE();
        multiMatchQueryBuilder14.settieBreaker((java.lang.Float) 0.0f);
        multiMatchQueryBuilder14.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.Boolean boolean21 = multiMatchQueryBuilder20.getlenient();
        java.lang.String str22 = multiMatchQueryBuilder20.getNAME();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + false + "'", boolean21, false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
    }

    @Test
    public void test11052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11052");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder13.setuseDisMax((java.lang.Boolean) false);
        multiMatchQueryBuilder13.maxExpansions = 1;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = multiMatchQueryBuilder13.zeroTermsQuery;
        java.lang.Boolean boolean19 = multiMatchQueryBuilder13.lenient;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder13.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        java.lang.Boolean boolean24 = multiMatchQueryBuilder13.getlenient();
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder13.operator(operator25);
        java.util.List<java.lang.String> strList27 = multiMatchQueryBuilder13.getfields();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(zeroTermsQuery18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(strList27);
    }

    @Test
    public void test11053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11053");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.type;
        org.elasticsearch.index.query.Operator operator11 = null;
        multiMatchQueryBuilder4.setoperator(operator11);
        java.lang.String str13 = multiMatchQueryBuilder4.toString();
        multiMatchQueryBuilder4.cutoffFrequency = 10.0f;
        java.lang.Boolean boolean16 = multiMatchQueryBuilder4.getuseDisMax();
        org.elasticsearch.common.unit.Fuzziness fuzziness17 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.String str18 = multiMatchQueryBuilder4.getNAME();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder20.getminimumShouldMatch();
        multiMatchQueryBuilder20.rewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(type10);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNull(fuzziness17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "multi_match" + "'", str18, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test11054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11054");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder4.fields;
        java.lang.Boolean boolean21 = multiMatchQueryBuilder4.useDisMax;
        multiMatchQueryBuilder4.tieBreaker = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}", (float) (short) 100);
        java.lang.Object obj27 = multiMatchQueryBuilder26.text;
        java.lang.Integer int28 = multiMatchQueryBuilder26.maxExpansions;
        java.lang.String str29 = multiMatchQueryBuilder26.getNAME();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + "multi_match" + "'", obj27, "multi_match");
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "multi_match" + "'", str29, "multi_match");
    }

    @Test
    public void test11055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11055");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        java.lang.Object obj5 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder4.tieBreaker((float) (byte) 10);
        java.lang.String str8 = multiMatchQueryBuilder4.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder17.getlenient();
        multiMatchQueryBuilder17.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String str23 = multiMatchQueryBuilder17.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder17.slop((int) (short) 10);
        multiMatchQueryBuilder25.slop = (-1);
        java.lang.Boolean boolean28 = multiMatchQueryBuilder25.useDisMax;
        multiMatchQueryBuilder25.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray34 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray34);
        org.elasticsearch.index.query.Operator operator36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.operator(operator36);
        java.lang.Boolean boolean38 = multiMatchQueryBuilder35.getlenient();
        multiMatchQueryBuilder35.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder35.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder35.tieBreaker((float) (-1));
        multiMatchQueryBuilder35.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder35.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type49 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.common.ParseField parseField50 = type49.parseField();
        org.elasticsearch.common.ParseField parseField51 = type49.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder48.type(type49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder48.cutoffFrequency((float) '#');
        multiMatchQueryBuilder48.cutoffFrequency = (-1.0f);
        boolean boolean57 = multiMatchQueryBuilder25.equals((java.lang.Object) multiMatchQueryBuilder48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder25.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str60 = multiMatchQueryBuilder59.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder12.fuzziness((java.lang.Object) multiMatchQueryBuilder59);
        java.lang.Integer int62 = multiMatchQueryBuilder12.getprefixLength();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + "multi_match" + "'", obj5, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(boolean28);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type49.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(parseField50);
        org.junit.Assert.assertNotNull(parseField51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str60, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNull(int62);
    }

    @Test
    public void test11056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11056");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        java.lang.Float float13 = multiMatchQueryBuilder4.gettieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}", (-1.0f));
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException26 = multiMatchQueryBuilder21.validate();
        java.lang.String str27 = multiMatchQueryBuilder21.getNAME();
        org.elasticsearch.common.unit.Fuzziness fuzziness28 = multiMatchQueryBuilder21.fuzziness;
        java.lang.String[] strArray32 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray32);
        org.elasticsearch.index.query.Operator operator34 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.operator(operator34);
        java.lang.Boolean boolean36 = multiMatchQueryBuilder33.getlenient();
        org.elasticsearch.common.unit.Fuzziness fuzziness37 = multiMatchQueryBuilder33.getfuzziness();
        java.lang.String str38 = multiMatchQueryBuilder33.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder33.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder49.setanalyzer("multi_match");
        org.elasticsearch.index.query.QueryValidationException queryValidationException54 = multiMatchQueryBuilder49.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery55 = multiMatchQueryBuilder49.zeroTermsQuery;
        java.lang.String str56 = multiMatchQueryBuilder49.getrewrite();
        multiMatchQueryBuilder49.lenient = true;
        java.lang.String[] strArray62 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray62);
        org.elasticsearch.index.query.Operator operator64 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder63.operator(operator64);
        java.lang.String str66 = multiMatchQueryBuilder63.getWriteableName();
        java.lang.Boolean boolean67 = multiMatchQueryBuilder63.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder63.getPROTOTYPE();
        multiMatchQueryBuilder63.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray74 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray74);
        org.elasticsearch.index.query.Operator operator76 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder75.operator(operator76);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder75.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException80 = multiMatchQueryBuilder75.validate();
        java.lang.Integer int81 = multiMatchQueryBuilder75.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery82 = multiMatchQueryBuilder75.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder75.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder75.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = multiMatchQueryBuilder75.boost((float) 0);
        java.lang.String str90 = multiMatchQueryBuilder75.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap91 = multiMatchQueryBuilder75.fieldsBoosts;
        multiMatchQueryBuilder63.fieldsBoosts = strObjectFloatHashMap91;
        multiMatchQueryBuilder49.fieldsBoosts = strObjectFloatHashMap91;
        multiMatchQueryBuilder40.fieldsBoosts = strObjectFloatHashMap91;
        multiMatchQueryBuilder21.setfieldsBoosts(strObjectFloatHashMap91);
        multiMatchQueryBuilder16.setfieldsBoosts(strObjectFloatHashMap91);
        java.lang.Integer int97 = multiMatchQueryBuilder16.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(queryValidationException26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "multi_match" + "'", str27, "multi_match");
        org.junit.Assert.assertNull(fuzziness28);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(boolean36);
        org.junit.Assert.assertNull(fuzziness37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "multi_match" + "'", str38, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(queryValidationException54);
        org.junit.Assert.assertNull(zeroTermsQuery55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "multi_match" + "'", str66, "multi_match");
        org.junit.Assert.assertNull(boolean67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNull(queryValidationException80);
        org.junit.Assert.assertNull(int81);
        org.junit.Assert.assertNull(zeroTermsQuery82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap91);
        org.junit.Assert.assertNull(int97);
    }

    @Test
    public void test11057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11057");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        java.lang.String str13 = multiMatchQueryBuilder4.getName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery14;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.getPROTOTYPE();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = multiMatchQueryBuilder18.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(zeroTermsQuery19);
    }

    @Test
    public void test11058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11058");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.tieBreaker((float) (short) 100);
        java.lang.Object obj17 = multiMatchQueryBuilder16.gettext();
        multiMatchQueryBuilder16.slop = (-1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
    }

    @Test
    public void test11059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11059");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        java.lang.String str19 = multiMatchQueryBuilder18.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        multiMatchQueryBuilder18.zeroTermsQuery = zeroTermsQuery20;
        multiMatchQueryBuilder18.setprefixLength((java.lang.Integer) 100);
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder18.getfuzziness();
        multiMatchQueryBuilder18.slop = 97;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder18.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type28 = multiMatchQueryBuilder18.type;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str19, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(fuzziness24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(type28);
    }

    @Test
    public void test11060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11060");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Object obj10 = multiMatchQueryBuilder4.text;
        java.lang.String str11 = multiMatchQueryBuilder4.getminimumShouldMatch();
        multiMatchQueryBuilder4.lenient = false;
        java.lang.Float float14 = multiMatchQueryBuilder4.gettieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder4.type;
        java.lang.Integer int16 = multiMatchQueryBuilder4.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "multi_match" + "'", obj10, "multi_match");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test11061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11061");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        java.lang.String str14 = multiMatchQueryBuilder12.getfuzzyRewrite();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        multiMatchQueryBuilder19.minimumShouldMatch = "hi!";
        java.lang.Float float26 = multiMatchQueryBuilder19.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type28 = type27.matchQueryType();
        float float29 = type27.tieBreaker();
        multiMatchQueryBuilder19.type = type27;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder12.type(type27);
        multiMatchQueryBuilder31.maxExpansions = 100;
        java.lang.String[] strArray37 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray37);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.operator(operator39);
        org.elasticsearch.index.query.Operator operator41 = null;
        multiMatchQueryBuilder38.operator = operator41;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder38.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery45 = multiMatchQueryBuilder38.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder38.prefixLength((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type48 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.common.ParseField parseField49 = type48.parseField();
        org.elasticsearch.common.ParseField parseField50 = type48.parseField();
        multiMatchQueryBuilder47.settype(type48);
        org.elasticsearch.common.ParseField parseField52 = type48.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder31.type(type48);
        org.elasticsearch.index.query.Operator operator54 = multiMatchQueryBuilder53.getoperator();
        multiMatchQueryBuilder53.setslop((java.lang.Integer) 52);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(zeroTermsQuery45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type48.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(parseField49);
        org.junit.Assert.assertNotNull(parseField50);
        org.junit.Assert.assertNotNull(parseField52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNull(operator54);
    }

    @Test
    public void test11062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11062");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.tieBreaker((float) (short) 0);
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) true);
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        java.lang.String str14 = multiMatchQueryBuilder10.getNAME();
        java.lang.String str15 = multiMatchQueryBuilder10.queryName();
        java.lang.String str16 = multiMatchQueryBuilder10.queryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery17;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "multi_match" + "'", str14, "multi_match");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test11063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11063");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str12 = multiMatchQueryBuilder8.minimumShouldMatch;
        multiMatchQueryBuilder8.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder8.lenient = true;
        multiMatchQueryBuilder8.tieBreaker = 1.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test11064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11064");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder11.getfieldsBoosts();
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.String str20 = multiMatchQueryBuilder17.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder17.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder17.settype(type24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder11.type(type24);
        multiMatchQueryBuilder26.settieBreaker((java.lang.Float) 100.0f);
        multiMatchQueryBuilder26.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"\\\",\\n    \\\"fuzziness\\\" : \\\"BEST_FIELDS\\\",\\n    \\\"cutoff_frequency\\\" : -1.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"useDisMax\\\" : true,\\n    \\\"cutoffFrequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : -1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test11065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11065");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap13;
        multiMatchQueryBuilder4.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap21 = multiMatchQueryBuilder20.fieldsBoosts;
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.operator(operator22);
        org.elasticsearch.index.query.Operator operator24 = null;
        multiMatchQueryBuilder20.setoperator(operator24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder20.getPROTOTYPE();
        java.lang.Boolean boolean27 = multiMatchQueryBuilder20.useDisMax;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(strObjectFloatHashMap21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + boolean27 + "' != '" + false + "'", boolean27, false);
    }

    @Test
    public void test11066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11066");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.Operator operator24 = null;
        multiMatchQueryBuilder21.operator = operator24;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder21.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = multiMatchQueryBuilder21.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type29 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        multiMatchQueryBuilder21.type = type29;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder16.type(type29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder16.field("");
        java.lang.Boolean boolean34 = multiMatchQueryBuilder33.getlenient();
        multiMatchQueryBuilder33.maxExpansions = 97;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(zeroTermsQuery28);
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type29.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(boolean34);
    }

    @Test
    public void test11067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11067");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        java.lang.Float float12 = multiMatchQueryBuilder4.tieBreaker;
        java.lang.Boolean boolean13 = multiMatchQueryBuilder4.getuseDisMax();
        multiMatchQueryBuilder4.tieBreaker = (-1.0f);
        java.lang.String str16 = multiMatchQueryBuilder4.analyzer;
        java.lang.Integer int17 = multiMatchQueryBuilder4.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test11068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11068");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.cutoffFrequency((float) (-1L));
        org.elasticsearch.index.query.Operator operator18 = multiMatchQueryBuilder4.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = multiMatchQueryBuilder4.type;
        multiMatchQueryBuilder4.useDisMax = false;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(operator18);
        org.junit.Assert.assertNull(type19);
    }

    @Test
    public void test11069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11069");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.getPROTOTYPE();
        multiMatchQueryBuilder11.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.useDisMax(false);
        java.util.List<java.lang.String> strList19 = multiMatchQueryBuilder18.getfields();
        java.lang.String str20 = multiMatchQueryBuilder18.analyzer;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap21 = multiMatchQueryBuilder18.fieldsBoosts;
        multiMatchQueryBuilder18.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"most_fields\\\",\\n    \\\"slop\\\" : 97,\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"tieBreaker\\\" : 100.0,\\n    \\\"cutoffFrequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strObjectFloatHashMap21);
    }

    @Test
    public void test11070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11070");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        java.lang.String str9 = multiMatchQueryBuilder4.rewrite;
        java.lang.String str10 = multiMatchQueryBuilder4.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!^97.0\", \"\", \"hi!^97.0\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder12.setslop((java.lang.Integer) 52);
        multiMatchQueryBuilder12.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : -1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str17 = multiMatchQueryBuilder12.rewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test11071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11071");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder20.fuzziness;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = multiMatchQueryBuilder20.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness25 = multiMatchQueryBuilder20.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.useDisMax(false);
        org.elasticsearch.common.unit.Fuzziness fuzziness28 = multiMatchQueryBuilder27.getfuzziness();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNull(strObjectFloatHashMap22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(fuzziness25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(fuzziness28);
    }

    @Test
    public void test11072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11072");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder8.type = type18;
        java.lang.Integer int20 = multiMatchQueryBuilder8.getslop();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder8.getzeroTermsQuery();
        java.lang.String str22 = multiMatchQueryBuilder8.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder8.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"fuzziness\" : \"BEST_FIELDS\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}", (float) 10L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.prefixLength((-1));
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test11073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11073");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder12.useDisMax = false;
        multiMatchQueryBuilder12.setmaxExpansions((java.lang.Integer) 35);
        multiMatchQueryBuilder12.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator19 = multiMatchQueryBuilder12.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(operator19);
    }

    @Test
    public void test11074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11074");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        java.lang.String str14 = multiMatchQueryBuilder12.getfuzzyRewrite();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        multiMatchQueryBuilder19.minimumShouldMatch = "hi!";
        java.lang.Float float26 = multiMatchQueryBuilder19.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type28 = type27.matchQueryType();
        float float29 = type27.tieBreaker();
        multiMatchQueryBuilder19.type = type27;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder12.type(type27);
        multiMatchQueryBuilder31.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator34 = null;
        multiMatchQueryBuilder31.operator = operator34;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder31.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray41 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray41);
        org.elasticsearch.index.query.Operator operator43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.operator(operator43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException47 = multiMatchQueryBuilder42.validate();
        java.lang.Integer int48 = multiMatchQueryBuilder42.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery49 = multiMatchQueryBuilder42.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder42.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder42.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder42.boost((float) 0);
        java.lang.String str57 = multiMatchQueryBuilder42.fuzzyRewrite;
        multiMatchQueryBuilder42.setanalyzer("multi_match");
        java.lang.String str60 = multiMatchQueryBuilder42.getrewrite();
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion61 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE;
        java.lang.Class<?> wildcardClass62 = fieldCaseConversion61.getClass();
        java.lang.String[] strArray66 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray66);
        org.elasticsearch.index.query.Operator operator68 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.operator(operator68);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder67.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException72 = multiMatchQueryBuilder67.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder67.cutoffFrequency((float) (byte) 100);
        java.lang.String str75 = multiMatchQueryBuilder67.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder67.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness78 = multiMatchQueryBuilder67.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder67.getPROTOTYPE();
        java.lang.String[] strArray83 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder79, strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass62, strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str60, strArray83);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder31, strArray83);
        java.lang.String str89 = multiMatchQueryBuilder88.getrewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNull(queryValidationException47);
        org.junit.Assert.assertNull(int48);
        org.junit.Assert.assertNull(zeroTermsQuery49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + fieldCaseConversion61 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE + "'", fieldCaseConversion61.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE));
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNull(queryValidationException72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNull(fuzziness78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test11075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11075");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.Operator operator12 = null;
        multiMatchQueryBuilder11.operator = operator12;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder11.zeroTermsQuery = zeroTermsQuery14;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.prefixLength((int) (short) 0);
        multiMatchQueryBuilder17.lenient = true;
        java.lang.Float float20 = multiMatchQueryBuilder17.getcutoffFrequency();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(float20);
    }

    @Test
    public void test11076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11076");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str20 = multiMatchQueryBuilder19.fuzzyRewrite;
        multiMatchQueryBuilder19.lenient = true;
        java.lang.Boolean boolean23 = multiMatchQueryBuilder19.lenient;
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        multiMatchQueryBuilder28.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder28.operator(operator33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.maxExpansions((int) (short) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray40);
        org.elasticsearch.index.query.Operator operator42 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.operator(operator42);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder41.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder45.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness50 = multiMatchQueryBuilder45.getfuzziness();
        multiMatchQueryBuilder34.fuzziness = fuzziness50;
        multiMatchQueryBuilder19.fuzziness = fuzziness50;
        java.lang.String str53 = multiMatchQueryBuilder19.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder19.tieBreaker((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type56 = multiMatchQueryBuilder55.gettype();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + boolean23 + "' != '" + true + "'", boolean23, true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(fuzziness50);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzziness\" : \"10\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str53, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzziness\" : \"10\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNull(type56);
    }

    @Test
    public void test11077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11077");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Object obj10 = multiMatchQueryBuilder4.text;
        float float11 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float14 = multiMatchQueryBuilder4.gettieBreaker();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException24 = multiMatchQueryBuilder19.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.cutoffFrequency((float) (byte) 100);
        float float27 = multiMatchQueryBuilder19.boost();
        multiMatchQueryBuilder19.setanalyzer("");
        java.lang.Boolean boolean30 = multiMatchQueryBuilder19.getuseDisMax();
        java.lang.String str31 = multiMatchQueryBuilder19.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder19.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray37 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray37);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.operator(operator39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder38.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder42.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness47 = multiMatchQueryBuilder42.getfuzziness();
        multiMatchQueryBuilder33.fuzziness = fuzziness47;
        multiMatchQueryBuilder4.setfuzziness(fuzziness47);
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 97.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "multi_match" + "'", obj10, "multi_match");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 1.0f + "'", float11 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(queryValidationException24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(fuzziness47);
    }

    @Test
    public void test11078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11078");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        java.lang.String str14 = multiMatchQueryBuilder11.toString();
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder11.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.cutoffFrequency(10.0f);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput18 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder17.writeTo(streamOutput18);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"Name\" : \"multi_match\"\n  }\n}" + "'", str14, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"Name\" : \"multi_match\"\n  }\n}");
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test11079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11079");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.queryName("");
        multiMatchQueryBuilder14.setslop((java.lang.Integer) 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray20);
        org.elasticsearch.index.query.Operator operator23 = multiMatchQueryBuilder22.getoperator();
        java.lang.String str24 = multiMatchQueryBuilder22.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder26.getPROTOTYPE();
        multiMatchQueryBuilder26.setmaxExpansions((java.lang.Integer) 52);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNull(operator23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test11080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11080");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 1);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder4.fieldsBoosts;
        multiMatchQueryBuilder4.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.Operator operator17 = null;
        multiMatchQueryBuilder16.operator = operator17;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.getPROTOTYPE();
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException29 = multiMatchQueryBuilder24.validate();
        java.lang.Integer int30 = multiMatchQueryBuilder24.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = multiMatchQueryBuilder24.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder24.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder24.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder24.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean41 = multiMatchQueryBuilder40.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder40.boost((float) 1);
        java.lang.Boolean boolean44 = multiMatchQueryBuilder43.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type45 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type46 = type45.matchQueryType();
        float float47 = type45.tieBreaker();
        float float48 = type45.tieBreaker();
        float float49 = type45.tieBreaker();
        org.elasticsearch.common.ParseField parseField50 = type45.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder43.type(type45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder19.fuzziness((java.lang.Object) multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(queryValidationException29);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNull(zeroTermsQuery31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(boolean41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(boolean44);
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type45.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type46.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.0f + "'", float47 == 0.0f);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + 0.0f + "'", float48 == 0.0f);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + 0.0f + "'", float49 == 0.0f);
        org.junit.Assert.assertNotNull(parseField50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
    }

    @Test
    public void test11081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11081");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder24.setoperator(operator29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder24.zeroTermsQuery = zeroTermsQuery31;
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        multiMatchQueryBuilder37.maxExpansions = 0;
        java.lang.Boolean boolean40 = multiMatchQueryBuilder37.lenient;
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap50 = multiMatchQueryBuilder49.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.minimumShouldMatch("multi_match");
        java.lang.String str53 = multiMatchQueryBuilder52.toString();
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.Operator operator59 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.operator(operator59);
        java.lang.String str61 = multiMatchQueryBuilder58.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness62 = multiMatchQueryBuilder58.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder58.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.cutoffFrequency((float) '4');
        boolean boolean67 = multiMatchQueryBuilder52.equals((java.lang.Object) multiMatchQueryBuilder64);
        multiMatchQueryBuilder64.setmaxExpansions((java.lang.Integer) (-1));
        multiMatchQueryBuilder64.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder37.fuzziness((java.lang.Object) multiMatchQueryBuilder64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder64.getPROTOTYPE();
        java.lang.String[] strArray77 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray77);
        org.elasticsearch.index.query.Operator operator79 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder78.operator(operator79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder78.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException83 = multiMatchQueryBuilder78.validate();
        java.lang.Integer int84 = multiMatchQueryBuilder78.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery85 = multiMatchQueryBuilder78.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = multiMatchQueryBuilder78.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = multiMatchQueryBuilder78.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = multiMatchQueryBuilder90.fuzzyRewrite("hi!");
        java.util.List<java.lang.String> strList93 = multiMatchQueryBuilder92.getfields();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery94 = null;
        multiMatchQueryBuilder92.zeroTermsQuery = zeroTermsQuery94;
        java.lang.Object obj96 = multiMatchQueryBuilder92.gettext();
        org.elasticsearch.common.unit.Fuzziness fuzziness97 = multiMatchQueryBuilder92.fuzziness;
        multiMatchQueryBuilder73.fuzziness = fuzziness97;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(boolean40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(strObjectFloatHashMap50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str53, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "multi_match" + "'", str61, "multi_match");
        org.junit.Assert.assertNull(fuzziness62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNull(queryValidationException83);
        org.junit.Assert.assertNull(int84);
        org.junit.Assert.assertNull(zeroTermsQuery85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder88);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder90);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder92);
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertEquals("'" + obj96 + "' != '" + "multi_match" + "'", obj96, "multi_match");
        org.junit.Assert.assertNotNull(fuzziness97);
    }

    @Test
    public void test11082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11082");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        java.lang.String[] strArray11 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray11);
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        multiMatchQueryBuilder12.setrewrite("");
        java.util.List<java.lang.String> strList17 = multiMatchQueryBuilder12.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField19 = type18.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type20 = type18.matchQueryType();
        multiMatchQueryBuilder12.type = type18;
        org.elasticsearch.index.search.MatchQuery.Type type22 = type18.matchQueryType();
        multiMatchQueryBuilder6.settype(type18);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField19);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type20.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type22.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test11083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11083");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        java.lang.Float float12 = multiMatchQueryBuilder4.tieBreaker;
        java.lang.Boolean boolean13 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String str14 = multiMatchQueryBuilder4.analyzer;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test11084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11084");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.boost((float) (short) 0);
        java.lang.Object obj22 = multiMatchQueryBuilder21.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) 10);
        java.lang.String[] strArray29 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray29);
        org.elasticsearch.index.query.Operator operator31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.operator(operator31);
        multiMatchQueryBuilder30.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder30.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder30.maxExpansions((int) (short) 10);
        java.lang.Object obj39 = multiMatchQueryBuilder38.text;
        boolean boolean40 = multiMatchQueryBuilder21.equals((java.lang.Object) multiMatchQueryBuilder38);
        multiMatchQueryBuilder21.setmaxExpansions((java.lang.Integer) (-1));
        java.lang.Integer int43 = multiMatchQueryBuilder21.getprefixLength();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + "multi_match" + "'", obj22, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertEquals("'" + obj39 + "' != '" + "multi_match" + "'", obj39, "multi_match");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(int43);
    }

    @Test
    public void test11085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11085");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        java.lang.String[] strArray11 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray11);
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder16.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.lenient(false);
        multiMatchQueryBuilder16.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery24);
        boolean boolean26 = multiMatchQueryBuilder6.equals((java.lang.Object) multiMatchQueryBuilder25);
        multiMatchQueryBuilder6.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder6.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"max_expansions\" : -1,\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float31 = multiMatchQueryBuilder30.gettieBreaker();
        java.lang.Boolean boolean32 = multiMatchQueryBuilder30.getuseDisMax();
        java.lang.String str33 = multiMatchQueryBuilder30.analyzer;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(float31);
        org.junit.Assert.assertNull(boolean32);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test11086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11086");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.Operator operator14 = null;
        multiMatchQueryBuilder4.setoperator(operator14);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type16 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type17 = type16.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.type(type16);
        java.lang.String str19 = multiMatchQueryBuilder4.getfuzzyRewrite();
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) 0);
        org.elasticsearch.common.unit.Fuzziness fuzziness22 = multiMatchQueryBuilder4.fuzziness;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type16.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type17.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(fuzziness22);
    }

    @Test
    public void test11087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11087");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        java.lang.String str9 = multiMatchQueryBuilder4.rewrite;
        java.lang.Boolean boolean10 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setrewrite("");
        multiMatchQueryBuilder4.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) (-1.0f));
        java.lang.Integer int19 = multiMatchQueryBuilder4.prefixLength;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNull(int19);
    }

    @Test
    public void test11088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11088");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.cutoffFrequency((float) '4');
        float float13 = multiMatchQueryBuilder12.boost();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery14);
        java.lang.Integer int16 = multiMatchQueryBuilder15.maxExpansions;
        java.lang.String str17 = multiMatchQueryBuilder15.analyzer;
        java.lang.String str18 = multiMatchQueryBuilder15.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder15.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"analyzer\" : \"\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder15.rewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder15.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str25 = multiMatchQueryBuilder15.queryName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 1.0f + "'", float13 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"analyzer\" : \"\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}" + "'", str25, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"analyzer\" : \"\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test11089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11089");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Object obj15 = multiMatchQueryBuilder4.gettext();
        java.lang.Object obj16 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField20 = type19.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.common.ParseField parseField22 = type19.parseField();
        float float23 = type19.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder4.type((java.lang.Object) type19);
        java.lang.Integer int25 = multiMatchQueryBuilder4.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder4.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", (float) 100L);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "multi_match" + "'", obj15, "multi_match");
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "multi_match" + "'", obj16, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField20);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 1.0f + "'", float23 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test11090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11090");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.cutoffFrequency((float) '4');
        float float13 = multiMatchQueryBuilder12.boost();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery14);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.slop((int) (short) 100);
        java.util.List<java.lang.String> strList18 = multiMatchQueryBuilder17.getfields();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 1.0f + "'", float13 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test11091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11091");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.Operator operator14 = null;
        multiMatchQueryBuilder4.setoperator(operator14);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type16 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type17 = type16.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.type(type16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.tieBreaker((float) '4');
        multiMatchQueryBuilder20.settieBreaker((java.lang.Float) 52.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type23 = multiMatchQueryBuilder20.type;
        multiMatchQueryBuilder20.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type16.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type17.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type23.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
    }

    @Test
    public void test11092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11092");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder13.getPROTOTYPE();
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder13.operator(operator15);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput17 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder13.writeTo(streamOutput17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test11093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11093");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int16 = multiMatchQueryBuilder4.slop;
        java.lang.Object obj17 = multiMatchQueryBuilder4.gettext();
        java.lang.String str18 = multiMatchQueryBuilder4.getminimumShouldMatch();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 97);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test11094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11094");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        java.lang.Object obj19 = multiMatchQueryBuilder4.text;
        java.lang.String str20 = multiMatchQueryBuilder4.getNAME();
        java.lang.Object obj21 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.Operator operator24 = multiMatchQueryBuilder4.operator;
        multiMatchQueryBuilder4.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder4.cutoffFrequency((float) 0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + "multi_match" + "'", obj19, "multi_match");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + "multi_match" + "'", obj21, "multi_match");
        org.junit.Assert.assertNull(operator24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test11095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11095");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean13 = multiMatchQueryBuilder4.lenient;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder4.zeroTermsQuery;
        multiMatchQueryBuilder4.cutoffFrequency = 1.0f;
        java.lang.Integer int17 = multiMatchQueryBuilder4.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test11096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11096");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        java.lang.String str7 = multiMatchQueryBuilder4.rewrite;
        org.elasticsearch.index.query.Operator operator8 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder4.operator(operator8);
        multiMatchQueryBuilder9.tieBreaker = 0.0f;
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder9.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder9.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder9.cutoffFrequency((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder9.slop((int) (short) 10);
        multiMatchQueryBuilder9.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test11097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11097");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        org.elasticsearch.index.query.QueryValidationException queryValidationException14 = multiMatchQueryBuilder13.validate();
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder13.operator(operator15);
        java.lang.Boolean boolean17 = multiMatchQueryBuilder16.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = null;
        multiMatchQueryBuilder16.type = type18;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(queryValidationException14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(boolean17);
    }

    @Test
    public void test11098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11098");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        java.lang.Object obj13 = multiMatchQueryBuilder4.gettext();
        multiMatchQueryBuilder4.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int16 = multiMatchQueryBuilder4.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.prefixLength((int) (byte) -1);
        multiMatchQueryBuilder18.setuseDisMax((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + "multi_match" + "'", obj13, "multi_match");
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test11099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11099");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.lang.Integer int8 = multiMatchQueryBuilder4.getmaxExpansions();
        multiMatchQueryBuilder4.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator15 = multiMatchQueryBuilder4.getoperator();
        java.lang.String str16 = multiMatchQueryBuilder4.getanalyzer();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(operator15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test11100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11100");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.getPROTOTYPE();
        multiMatchQueryBuilder4.cutoffFrequency = 52.0f;
        float float22 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder4.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.cutoffFrequency((float) (byte) 0);
        java.lang.String str27 = multiMatchQueryBuilder26.queryName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 1.0f + "'", float22 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "multi_match" + "'", str27, "multi_match");
    }

    @Test
    public void test11101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11101");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder4.fieldsBoosts;
        java.lang.Boolean boolean18 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.QueryValidationException queryValidationException19 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", 100.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNull(queryValidationException19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test11102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11102");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        java.lang.String str14 = multiMatchQueryBuilder4.getrewrite();
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.prefixLength((int) ' ');
        java.lang.Boolean boolean19 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\" ],\\n    \\\"boost\\\" : 0.0,\\n    \\\"Name\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : \\\\\\\"multi_match\\\\\\\",\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"multi_match\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"minimum_should_match\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"lenient\\\\\\\" : true,\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\"\\n  }\\n}\",\n    \"prefix_length\" : 0,\n    \"use_dis_max\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + false + "'", boolean19, false);
    }

    @Test
    public void test11103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11103");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.slop((int) (short) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.prefixLength(32);
        multiMatchQueryBuilder18.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float21 = multiMatchQueryBuilder18.cutoffFrequency;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        multiMatchQueryBuilder18.setzeroTermsQuery(zeroTermsQuery22);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(float21);
    }

    @Test
    public void test11104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11104");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.lang.Float float16 = multiMatchQueryBuilder8.gettieBreaker();
        java.lang.Integer int17 = multiMatchQueryBuilder8.slop;
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        float float30 = multiMatchQueryBuilder22.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type31 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type32 = type31.matchQueryType();
        multiMatchQueryBuilder22.settype(type31);
        org.elasticsearch.common.ParseField parseField34 = type31.parseField();
        multiMatchQueryBuilder8.type = type31;
        java.lang.Integer int36 = multiMatchQueryBuilder8.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder8.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 100,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tieBreaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 1.0f + "'", float30 == 1.0f);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type31.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type32.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField34);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
    }

    @Test
    public void test11105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11105");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int16 = multiMatchQueryBuilder11.getslop();
        java.lang.Object obj17 = multiMatchQueryBuilder11.gettext();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder11.useDisMax;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNull(boolean18);
    }

    @Test
    public void test11106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11106");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type16 = multiMatchQueryBuilder4.type;
        java.lang.String str17 = multiMatchQueryBuilder4.getminimumShouldMatch();
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder22.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder22.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness34 = multiMatchQueryBuilder22.getfuzziness();
        java.lang.Object obj35 = multiMatchQueryBuilder22.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder22.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.cutoffFrequency((float) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.prefixLength((int) (short) 100);
        java.lang.String[] strArray45 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray45);
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.operator(operator47);
        java.lang.String str49 = multiMatchQueryBuilder46.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness50 = multiMatchQueryBuilder46.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder46.tieBreaker((float) (short) 0);
        multiMatchQueryBuilder52.setlenient((java.lang.Boolean) true);
        java.lang.String str55 = multiMatchQueryBuilder52.getWriteableName();
        float float56 = multiMatchQueryBuilder52.boost();
        java.lang.Integer int57 = multiMatchQueryBuilder52.prefixLength;
        java.lang.String[] strArray61 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray61);
        org.elasticsearch.index.query.Operator operator63 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.operator(operator63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder62.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException67 = multiMatchQueryBuilder62.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder62.cutoffFrequency((float) (byte) 100);
        float float70 = multiMatchQueryBuilder62.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type71 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type72 = type71.matchQueryType();
        multiMatchQueryBuilder62.settype(type71);
        org.elasticsearch.common.ParseField parseField74 = type71.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder52.type(type71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder39.type(type71);
        multiMatchQueryBuilder4.settype(type71);
        org.elasticsearch.index.query.Operator operator78 = multiMatchQueryBuilder4.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(type16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(fuzziness34);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + "multi_match" + "'", obj35, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "multi_match" + "'", str49, "multi_match");
        org.junit.Assert.assertNull(fuzziness50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "multi_match" + "'", str55, "multi_match");
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 1.0f + "'", float56 == 1.0f);
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNull(queryValidationException67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + 1.0f + "'", float70 == 1.0f);
        org.junit.Assert.assertTrue("'" + type71 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type71.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type72 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type72.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNull(operator78);
    }

    @Test
    public void test11107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11107");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Integer int14 = multiMatchQueryBuilder13.prefixLength;
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder13.getfuzziness();
        java.lang.String str16 = multiMatchQueryBuilder13.queryName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(fuzziness15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test11108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11108");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        java.lang.String str13 = multiMatchQueryBuilder4.getName();
        multiMatchQueryBuilder4.slop = 1;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.maxExpansions((int) (short) 10);
        multiMatchQueryBuilder20.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"type\" : \"most_fields\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test11109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11109");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        java.lang.String str20 = multiMatchQueryBuilder8.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder8.tieBreaker(0.0f);
        java.lang.String str23 = multiMatchQueryBuilder8.getWriteableName();
        multiMatchQueryBuilder8.settieBreaker((java.lang.Float) 0.0f);
        java.lang.String str26 = multiMatchQueryBuilder8.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "multi_match" + "'", str23, "multi_match");
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test11110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11110");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.fuzzyRewrite("hi!");
        multiMatchQueryBuilder15.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"fuzziness\" : \"BEST_FIELDS\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}";
        java.lang.Integer int20 = multiMatchQueryBuilder15.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(int20);
    }

    @Test
    public void test11111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11111");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.cutoffFrequency((float) 0);
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder8.getfuzziness();
        java.lang.String str17 = multiMatchQueryBuilder8.getNAME();
        java.lang.Integer int18 = multiMatchQueryBuilder8.prefixLength;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(strObjectFloatHashMap11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(fuzziness16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multi_match" + "'", str17, "multi_match");
        org.junit.Assert.assertNull(int18);
    }

    @Test
    public void test11112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11112");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.QueryValidationException queryValidationException7 = multiMatchQueryBuilder4.validate();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(queryValidationException7);
    }

    @Test
    public void test11113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11113");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int16 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.QueryValidationException queryValidationException19 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.maxExpansions((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder23.lenient = false;
        org.elasticsearch.index.query.Operator operator26 = null;
        multiMatchQueryBuilder23.operator = operator26;
        java.lang.String str28 = multiMatchQueryBuilder23.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(queryValidationException19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str28, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test11114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11114");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.maxExpansions((-1));
        java.lang.String str16 = multiMatchQueryBuilder15.analyzer;
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.operator(operator17);
        multiMatchQueryBuilder15.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder25.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder25.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness37 = multiMatchQueryBuilder25.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder25.slop((int) (short) 0);
        multiMatchQueryBuilder25.setslop((java.lang.Integer) 100);
        java.lang.Boolean boolean42 = multiMatchQueryBuilder25.getuseDisMax();
        java.lang.String str43 = multiMatchQueryBuilder25.fuzzyRewrite;
        java.lang.String[] strArray48 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray48);
        java.lang.String[] strArray54 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray48, strArray54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str43, strArray48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder15, strArray48);
        java.lang.String str59 = multiMatchQueryBuilder58.fuzzyRewrite;
        java.lang.String str60 = multiMatchQueryBuilder58.analyzer;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(fuzziness37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(boolean42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test11115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11115");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder11.getfieldsBoosts();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder11.fieldsBoosts = strObjectFloatHashMap13;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery15);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = null;
        multiMatchQueryBuilder11.fieldsBoosts = strObjectFloatHashMap17;
        java.lang.String str19 = multiMatchQueryBuilder11.toString();
        java.lang.Boolean boolean20 = multiMatchQueryBuilder11.getuseDisMax();
        java.lang.String str21 = multiMatchQueryBuilder11.fuzzyRewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str19, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test11116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11116");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        java.lang.Float float14 = multiMatchQueryBuilder8.getcutoffFrequency();
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.operator(operator15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = multiMatchQueryBuilder16.type;
        multiMatchQueryBuilder16.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"Name\" : \"multi_match\"\n  }\n}";
        java.lang.String str20 = multiMatchQueryBuilder16.getName();
        org.elasticsearch.index.query.Operator operator21 = multiMatchQueryBuilder16.getoperator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(type17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNull(operator21);
    }

    @Test
    public void test11117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11117");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness8;
        java.lang.String str10 = multiMatchQueryBuilder4.getanalyzer();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = multiMatchQueryBuilder4.getfieldsBoosts();
        java.lang.String str12 = multiMatchQueryBuilder4.analyzer;
        java.lang.String str13 = multiMatchQueryBuilder4.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strObjectFloatHashMap11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test11118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11118");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.useDisMax(true);
        multiMatchQueryBuilder16.setslop((java.lang.Integer) 0);
        multiMatchQueryBuilder16.lenient = true;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test11119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11119");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Integer int15 = multiMatchQueryBuilder14.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.maxExpansions((int) (byte) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float19 = type18.tieBreaker();
        org.elasticsearch.common.ParseField parseField20 = type18.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.type((java.lang.Object) parseField20);
        multiMatchQueryBuilder14.lenient = true;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = multiMatchQueryBuilder14.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertNotNull(parseField20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(zeroTermsQuery24);
    }

    @Test
    public void test11120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11120");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.tieBreaker((float) (short) 0);
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) true);
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        java.lang.Boolean boolean14 = multiMatchQueryBuilder10.lenient;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.useDisMax(true);
        multiMatchQueryBuilder16.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder16.setuseDisMax((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertEquals("'" + boolean14 + "' != '" + true + "'", boolean14, true);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test11121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11121");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.operator(operator20);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = multiMatchQueryBuilder21.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.maxExpansions(1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(strObjectFloatHashMap22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test11122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11122");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int16 = multiMatchQueryBuilder4.slop;
        java.lang.Boolean boolean17 = multiMatchQueryBuilder4.lenient;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.useDisMax(true);
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}";
        java.lang.String str22 = multiMatchQueryBuilder4.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder4.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException25 = multiMatchQueryBuilder4.validate();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(queryValidationException25);
    }

    @Test
    public void test11123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11123");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.prefixLength((-1));
        multiMatchQueryBuilder23.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.lenient(true);
        java.lang.String[] strArray31 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray31);
        org.elasticsearch.index.query.Operator operator33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.operator(operator33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder36.setanalyzer("multi_match");
        org.elasticsearch.index.query.QueryValidationException queryValidationException41 = multiMatchQueryBuilder36.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery42 = multiMatchQueryBuilder36.zeroTermsQuery;
        java.lang.String str43 = multiMatchQueryBuilder36.getrewrite();
        multiMatchQueryBuilder36.lenient = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder36.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap49 = multiMatchQueryBuilder36.fieldsBoosts;
        multiMatchQueryBuilder27.fieldsBoosts = strObjectFloatHashMap49;
        java.lang.String[] strArray54 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray54);
        org.elasticsearch.index.query.Operator operator56 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.operator(operator56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder55.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException60 = multiMatchQueryBuilder55.validate();
        java.lang.Integer int61 = multiMatchQueryBuilder55.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery62 = multiMatchQueryBuilder55.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder55.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        multiMatchQueryBuilder55.maxExpansions = 100;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery68 = multiMatchQueryBuilder55.getzeroTermsQuery();
        java.lang.Boolean boolean69 = multiMatchQueryBuilder55.useDisMax;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap70 = multiMatchQueryBuilder55.fieldsBoosts;
        multiMatchQueryBuilder27.setfieldsBoosts(strObjectFloatHashMap70);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery72 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder27.zeroTermsQuery(zeroTermsQuery72);
        multiMatchQueryBuilder27.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 1,\n    \"max_expansions\" : 10,\n    \"rewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean76 = multiMatchQueryBuilder27.lenient;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(queryValidationException41);
        org.junit.Assert.assertNull(zeroTermsQuery42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap49);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(queryValidationException60);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNull(zeroTermsQuery62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNull(zeroTermsQuery68);
        org.junit.Assert.assertNull(boolean69);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertEquals("'" + boolean76 + "' != '" + true + "'", boolean76, true);
    }

    @Test
    public void test11124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11124");
        java.lang.String[] strArray4 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder5 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray4);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray4);
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder6.getfuzziness();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery8 = multiMatchQueryBuilder6.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder6.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str11 = multiMatchQueryBuilder10.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNull(zeroTermsQuery8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str11, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test11125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11125");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.zeroTermsQuery;
        org.elasticsearch.index.query.Operator operator12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.operator(operator12);
        java.lang.Boolean boolean14 = multiMatchQueryBuilder13.lenient;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(boolean14);
    }

    @Test
    public void test11126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11126");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery19);
        multiMatchQueryBuilder20.useDisMax = true;
        multiMatchQueryBuilder20.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str25 = multiMatchQueryBuilder20.getminimumShouldMatch();
        multiMatchQueryBuilder20.setcutoffFrequency((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.Operator operator28 = multiMatchQueryBuilder20.getoperator();
        multiMatchQueryBuilder20.setprefixLength((java.lang.Integer) 97);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(operator28);
    }

    @Test
    public void test11127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11127");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 10);
        java.lang.Integer int19 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator22 = null;
        multiMatchQueryBuilder4.setoperator(operator22);
        java.lang.Integer int24 = multiMatchQueryBuilder4.prefixLength;
        java.lang.Integer int25 = multiMatchQueryBuilder4.prefixLength;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(int25);
    }

    @Test
    public void test11128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11128");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.maxExpansions((int) (short) 10);
        org.elasticsearch.index.query.Operator operator13 = multiMatchQueryBuilder12.getoperator();
        java.lang.Integer int14 = multiMatchQueryBuilder12.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.lenient(false);
        java.lang.Float float17 = multiMatchQueryBuilder12.gettieBreaker();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(operator13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(float17);
    }

    @Test
    public void test11129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11129");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.Operator operator24 = null;
        multiMatchQueryBuilder21.operator = operator24;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder21.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = multiMatchQueryBuilder21.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type29 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        multiMatchQueryBuilder21.type = type29;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder16.type(type29);
        java.lang.Boolean boolean32 = multiMatchQueryBuilder31.lenient;
        java.util.List<java.lang.String> strList33 = multiMatchQueryBuilder31.fields;
        java.lang.String str34 = multiMatchQueryBuilder31.analyzer;
        java.lang.Integer int35 = multiMatchQueryBuilder31.prefixLength;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(zeroTermsQuery28);
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type29.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(boolean32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(int35);
    }

    @Test
    public void test11130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11130");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Object obj22 = multiMatchQueryBuilder13.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder13.useDisMax(false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + "multi_match" + "'", obj22, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test11131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11131");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.analyzer = "multi_match";
        multiMatchQueryBuilder4.setcutoffFrequency((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.fuzzyRewrite("");
        java.lang.Boolean boolean14 = multiMatchQueryBuilder4.getlenient();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = multiMatchQueryBuilder4.getfieldsBoosts();
        multiMatchQueryBuilder4.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertNull(strObjectFloatHashMap15);
    }

    @Test
    public void test11132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11132");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        float float15 = multiMatchQueryBuilder14.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.slop((int) (short) 10);
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap30 = multiMatchQueryBuilder29.getfieldsBoosts();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap31 = null;
        multiMatchQueryBuilder29.fieldsBoosts = strObjectFloatHashMap31;
        java.lang.Boolean boolean33 = multiMatchQueryBuilder29.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder29.settype(type34);
        multiMatchQueryBuilder17.type = type34;
        java.lang.String str37 = multiMatchQueryBuilder17.getfuzzyRewrite();
        java.lang.Boolean boolean38 = multiMatchQueryBuilder17.getuseDisMax();
        java.lang.Integer int39 = multiMatchQueryBuilder17.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(strObjectFloatHashMap30);
        org.junit.Assert.assertNull(boolean33);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertNull(int39);
    }

    @Test
    public void test11133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11133");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.String[] strArray5 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray5);
        org.elasticsearch.index.query.Operator operator7 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.operator(operator7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder6.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException11 = multiMatchQueryBuilder6.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder6.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj14 = multiMatchQueryBuilder6.text;
        java.lang.String str15 = multiMatchQueryBuilder6.getName();
        multiMatchQueryBuilder6.tieBreaker = 52.0f;
        multiMatchQueryBuilder6.lenient = true;
        org.elasticsearch.index.query.Operator operator20 = null;
        multiMatchQueryBuilder6.setoperator(operator20);
        java.lang.String[] strArray25 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray25);
        org.elasticsearch.index.query.Operator operator27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.operator(operator27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.field("");
        multiMatchQueryBuilder26.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder26.lenient(true);
        org.elasticsearch.common.unit.Fuzziness fuzziness35 = multiMatchQueryBuilder34.getfuzziness();
        java.lang.Float float36 = multiMatchQueryBuilder34.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.String str38 = multiMatchQueryBuilder37.getminimumShouldMatch();
        multiMatchQueryBuilder37.maxExpansions = 100;
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.lenient(false);
        java.lang.Integer int50 = multiMatchQueryBuilder49.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str53 = multiMatchQueryBuilder49.minimumShouldMatch;
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.Operator operator59 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.operator(operator59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder58.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException63 = multiMatchQueryBuilder58.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder58.cutoffFrequency((float) (byte) 100);
        java.lang.String str66 = multiMatchQueryBuilder58.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder58.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness69 = multiMatchQueryBuilder58.getfuzziness();
        org.elasticsearch.common.unit.Fuzziness fuzziness70 = null;
        multiMatchQueryBuilder58.fuzziness = fuzziness70;
        java.lang.Integer int72 = multiMatchQueryBuilder58.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery73 = multiMatchQueryBuilder58.zeroTermsQuery;
        boolean boolean74 = multiMatchQueryBuilder49.equals((java.lang.Object) zeroTermsQuery73);
        java.lang.String[] strArray79 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray79);
        java.lang.String[] strArray85 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray85);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray79, strArray85);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean74, strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 100, strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) float36, strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) operator20, strArray79);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder92 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(queryValidationException11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "multi_match" + "'", str15, "multi_match");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(fuzziness35);
        org.junit.Assert.assertNull(float36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"slop\" : 10,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str38, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"slop\" : 10,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNull(queryValidationException63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNull(fuzziness69);
        org.junit.Assert.assertNull(int72);
        org.junit.Assert.assertNull(zeroTermsQuery73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strArray85);
    }

    @Test
    public void test11134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11134");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.queryName("");
        multiMatchQueryBuilder14.setrewrite("");
        java.lang.Integer int17 = multiMatchQueryBuilder14.maxExpansions;
        java.lang.Integer int18 = multiMatchQueryBuilder14.prefixLength;
        multiMatchQueryBuilder14.setlenient((java.lang.Boolean) false);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        multiMatchQueryBuilder25.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder25.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder25.maxExpansions((int) (short) 10);
        java.lang.Object obj34 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder25.type(obj34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder25.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.Operator operator38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.operator(operator38);
        java.lang.Integer int40 = multiMatchQueryBuilder37.getprefixLength();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery41 = null;
        multiMatchQueryBuilder37.setzeroTermsQuery(zeroTermsQuery41);
        java.util.List<java.lang.String> strList43 = multiMatchQueryBuilder37.fields;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder14.type((java.lang.Object) strList43);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [[multi_match, hi!]]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNotNull(strList43);
    }

    @Test
    public void test11135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11135");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery19);
        multiMatchQueryBuilder20.setslop((java.lang.Integer) 32);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params24 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = multiMatchQueryBuilder20.toXContent(xContentBuilder23, params24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(params24);
    }

    @Test
    public void test11136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11136");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        multiMatchQueryBuilder4.setminimumShouldMatch("");
        java.lang.String str18 = multiMatchQueryBuilder4.rewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.useDisMax(true);
        java.lang.Object obj21 = multiMatchQueryBuilder20.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.slop((int) 'a');
        multiMatchQueryBuilder25.tieBreaker = 0.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + "multi_match" + "'", obj21, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test11137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11137");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap13;
        multiMatchQueryBuilder4.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery17);
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = null;
        multiMatchQueryBuilder18.fuzziness = fuzziness19;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder18.maxExpansions((int) (short) 100);
        java.lang.String str25 = multiMatchQueryBuilder24.queryName();
        java.lang.Integer int26 = multiMatchQueryBuilder24.getprefixLength();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(int26);
    }

    @Test
    public void test11138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11138");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap13;
        multiMatchQueryBuilder4.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery17);
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = null;
        multiMatchQueryBuilder18.fuzziness = fuzziness19;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery21);
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        java.lang.Boolean boolean30 = multiMatchQueryBuilder27.getlenient();
        multiMatchQueryBuilder27.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder27.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness35 = multiMatchQueryBuilder34.fuzziness;
        java.lang.Integer int36 = multiMatchQueryBuilder34.slop;
        multiMatchQueryBuilder34.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder34.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder18.fuzziness((java.lang.Object) multiMatchQueryBuilder40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder18.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray47 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray47);
        org.elasticsearch.index.query.Operator operator49 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.operator(operator49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder48.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder52.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness57 = null;
        multiMatchQueryBuilder52.setfuzziness(fuzziness57);
        java.lang.String str59 = multiMatchQueryBuilder52.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder18.fuzziness((java.lang.Object) multiMatchQueryBuilder52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type61 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        float float62 = type61.tieBreaker();
        float float63 = type61.tieBreaker();
        float float64 = type61.tieBreaker();
        multiMatchQueryBuilder52.settype(type61);
        org.elasticsearch.index.search.MatchQuery.Type type66 = type61.matchQueryType();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(fuzziness35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "multi_match" + "'", str59, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertTrue("'" + type61 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type61.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + 0.0f + "'", float62 == 0.0f);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + 0.0f + "'", float63 == 0.0f);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + 0.0f + "'", float64 == 0.0f);
        org.junit.Assert.assertTrue("'" + type66 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE + "'", type66.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE));
    }

    @Test
    public void test11139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11139");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 1,\n    \"max_expansions\" : 100,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.String str20 = multiMatchQueryBuilder19.getName();
        multiMatchQueryBuilder19.prefixLength = 10;
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException32 = multiMatchQueryBuilder27.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder27.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder27.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder27.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness39 = multiMatchQueryBuilder27.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder27.slop((int) (short) 0);
        multiMatchQueryBuilder27.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray47 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray47);
        org.elasticsearch.index.query.Operator operator49 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.operator(operator49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder48.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException53 = multiMatchQueryBuilder48.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder48.cutoffFrequency((float) (byte) 100);
        float float56 = multiMatchQueryBuilder48.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type57 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type58 = type57.matchQueryType();
        multiMatchQueryBuilder48.settype(type57);
        multiMatchQueryBuilder27.type = type57;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder19.fuzziness((java.lang.Object) type57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder4.type(type57);
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) 1);
        java.lang.String str65 = multiMatchQueryBuilder4.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(queryValidationException32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(fuzziness39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(queryValidationException53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertTrue("'" + float56 + "' != '" + 1.0f + "'", float56 == 1.0f);
        org.junit.Assert.assertTrue("'" + type57 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type57.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type58.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"type\" : \"cross_fields\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\" ],\\n    \\\"slop\\\" : 1,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"cutoff_frequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"prefix_length\" : 1,\n    \"boost\" : 1.0\n  }\n}" + "'", str65, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"type\" : \"cross_fields\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\" ],\\n    \\\"slop\\\" : 1,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"cutoff_frequency\\\" : 0.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"prefix_length\" : 1,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test11140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11140");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder16.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder16.type;
        multiMatchQueryBuilder16.settieBreaker((java.lang.Float) (-1.0f));
        float float24 = multiMatchQueryBuilder16.boost();
        java.lang.String[] strArray28 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray28);
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.operator(operator30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder29.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean36 = multiMatchQueryBuilder33.useDisMax;
        java.lang.String str37 = multiMatchQueryBuilder33.queryName();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap38 = multiMatchQueryBuilder33.getfieldsBoosts();
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        java.lang.String str48 = multiMatchQueryBuilder43.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder43.minimumShouldMatch("");
        java.lang.Boolean boolean51 = multiMatchQueryBuilder43.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type52 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float53 = type52.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder43.type(type52);
        multiMatchQueryBuilder33.settype(type52);
        org.elasticsearch.common.ParseField parseField56 = type52.parseField();
        multiMatchQueryBuilder16.settype(type52);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 1.0f + "'", float24 == 1.0f);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(boolean36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(strObjectFloatHashMap38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertTrue("'" + type52 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type52.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(parseField56);
    }

    @Test
    public void test11141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11141");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Object obj10 = multiMatchQueryBuilder4.text;
        float float11 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float14 = multiMatchQueryBuilder4.gettieBreaker();
        multiMatchQueryBuilder4.setcutoffFrequency((java.lang.Float) 10.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "multi_match" + "'", obj10, "multi_match");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 1.0f + "'", float11 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(float14);
    }

    @Test
    public void test11142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11142");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.lang.Integer int9 = multiMatchQueryBuilder4.getmaxExpansions();
        org.elasticsearch.common.unit.Fuzziness fuzziness10 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.common.unit.Fuzziness fuzziness11 = multiMatchQueryBuilder4.fuzziness;
        multiMatchQueryBuilder4.prefixLength = 32;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.tieBreaker((float) (byte) 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(fuzziness10);
        org.junit.Assert.assertNull(fuzziness11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
    }

    @Test
    public void test11143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11143");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder8.type = type18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.slop(10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = multiMatchQueryBuilder21.getfieldsBoosts();
        java.lang.String str23 = multiMatchQueryBuilder21.getNAME();
        java.lang.Float float24 = multiMatchQueryBuilder21.cutoffFrequency;
        multiMatchQueryBuilder21.useDisMax = false;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(strObjectFloatHashMap22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "multi_match" + "'", str23, "multi_match");
        org.junit.Assert.assertNull(float24);
    }

    @Test
    public void test11144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11144");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        java.lang.Float float12 = multiMatchQueryBuilder4.tieBreaker;
        java.lang.Boolean boolean13 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.Float float14 = multiMatchQueryBuilder4.getcutoffFrequency();
        multiMatchQueryBuilder4.tieBreaker = 0.0f;
        multiMatchQueryBuilder4.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"tieBreaker\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str19 = multiMatchQueryBuilder4.analyzer;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test11145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11145");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        float float15 = multiMatchQueryBuilder14.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.slop((int) (short) 10);
        multiMatchQueryBuilder14.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 1,\n    \"maxExpansions\" : 100,\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test11146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11146");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.useDisMax(true);
        multiMatchQueryBuilder17.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        java.lang.String str27 = multiMatchQueryBuilder24.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness28 = multiMatchQueryBuilder24.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder24.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type31 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder24.settype(type31);
        multiMatchQueryBuilder17.settype(type31);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery34 = multiMatchQueryBuilder17.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder17.slop((int) (byte) 0);
        org.elasticsearch.index.query.Operator operator37 = null;
        multiMatchQueryBuilder36.setoperator(operator37);
        org.elasticsearch.common.unit.Fuzziness fuzziness39 = multiMatchQueryBuilder36.fuzziness;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "multi_match" + "'", str27, "multi_match");
        org.junit.Assert.assertNull(fuzziness28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type31.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNull(zeroTermsQuery34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(fuzziness39);
    }

    @Test
    public void test11147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11147");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.String[] strArray5 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray5);
        org.elasticsearch.index.query.Operator operator7 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.operator(operator7);
        java.lang.Boolean boolean9 = multiMatchQueryBuilder6.getlenient();
        multiMatchQueryBuilder6.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder6.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness14 = multiMatchQueryBuilder13.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder13.zeroTermsQuery(zeroTermsQuery15);
        java.lang.Boolean boolean17 = multiMatchQueryBuilder13.lenient;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder13.setfieldsBoosts(strObjectFloatHashMap18);
        java.lang.String str20 = multiMatchQueryBuilder13.getminimumShouldMatch();
        java.lang.Integer int21 = multiMatchQueryBuilder13.getslop();
        java.lang.String str22 = multiMatchQueryBuilder13.getNAME();
        java.lang.Integer int23 = multiMatchQueryBuilder13.getprefixLength();
        org.elasticsearch.index.query.Operator operator24 = multiMatchQueryBuilder13.getoperator();
        java.lang.String[] strArray28 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray28);
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.operator(operator30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder29.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap34 = multiMatchQueryBuilder33.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder33.zeroTermsQuery(zeroTermsQuery35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.lenient(false);
        multiMatchQueryBuilder33.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder33.zeroTermsQuery(zeroTermsQuery41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type43 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder33.type = type43;
        java.lang.Integer int45 = multiMatchQueryBuilder33.getslop();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery46 = multiMatchQueryBuilder33.getzeroTermsQuery();
        java.lang.String str47 = multiMatchQueryBuilder33.getminimumShouldMatch();
        java.util.List<java.lang.String> strList48 = multiMatchQueryBuilder33.fields;
        java.lang.String[] strArray52 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray52);
        org.elasticsearch.index.query.Operator operator54 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.operator(operator54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type58 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type59 = type58.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder55.type(type58);
        org.elasticsearch.common.ParseField parseField61 = type58.parseField();
        java.lang.String[] strArray66 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray66);
        java.lang.String[] strArray72 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray66, strArray72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) parseField61, strArray72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strList48, strArray72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder13, strArray72);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder78 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(fuzziness14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNull(operator24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(strObjectFloatHashMap34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertTrue("'" + type43 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type43.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNull(zeroTermsQuery46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type58.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + type59 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type59.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(parseField61);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray72);
    }

    @Test
    public void test11148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11148");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        java.lang.String[] strArray14 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray14);
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.operator(operator16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException20 = multiMatchQueryBuilder15.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder15.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.zeroTermsQuery(zeroTermsQuery23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.maxExpansions((-1));
        multiMatchQueryBuilder22.maxExpansions = 100;
        multiMatchQueryBuilder22.setslop((java.lang.Integer) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.lenient(true);
        org.elasticsearch.index.query.Operator operator38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.operator(operator38);
        java.lang.String str40 = multiMatchQueryBuilder37.getNAME();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(queryValidationException20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "multi_match" + "'", str40, "multi_match");
    }

    @Test
    public void test11149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11149");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str12 = multiMatchQueryBuilder8.minimumShouldMatch;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = multiMatchQueryBuilder8.getfieldsBoosts();
        java.lang.Integer int14 = multiMatchQueryBuilder8.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strObjectFloatHashMap13);
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test11150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11150");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        multiMatchQueryBuilder8.setprefixLength((java.lang.Integer) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.tieBreaker((float) 'a');
        multiMatchQueryBuilder8.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type16 = multiMatchQueryBuilder8.gettype();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder8.lenient = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder8.boost((float) 'a');
        multiMatchQueryBuilder8.lenient = true;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(type16);
        org.junit.Assert.assertNull(zeroTermsQuery17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test11151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11151");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        float float15 = multiMatchQueryBuilder14.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.slop((int) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.lenient(true);
        java.lang.Float float20 = multiMatchQueryBuilder17.getcutoffFrequency();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        multiMatchQueryBuilder17.zeroTermsQuery = zeroTermsQuery21;
        java.lang.String str23 = multiMatchQueryBuilder17.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        multiMatchQueryBuilder17.setzeroTermsQuery(zeroTermsQuery24);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(float20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"slop\" : 10,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str23, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"slop\" : 10,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test11152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11152");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder8.tieBreaker = 10.0f;
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        multiMatchQueryBuilder24.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder24.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.maxExpansions((int) (short) 10);
        java.lang.String[] strArray36 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray36);
        org.elasticsearch.index.query.Operator operator38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.operator(operator38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder37.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder41.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness46 = multiMatchQueryBuilder41.getfuzziness();
        multiMatchQueryBuilder30.fuzziness = fuzziness46;
        multiMatchQueryBuilder8.setfuzziness(fuzziness46);
        multiMatchQueryBuilder8.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Object obj53 = multiMatchQueryBuilder8.text;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(fuzziness46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertEquals("'" + obj53 + "' != '" + "multi_match" + "'", obj53, "multi_match");
    }

    @Test
    public void test11153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11153");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.maxExpansions((int) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = multiMatchQueryBuilder4.zeroTermsQuery;
        multiMatchQueryBuilder4.slop = (-1);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 0.0f);
        java.lang.Object obj17 = multiMatchQueryBuilder4.text;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(zeroTermsQuery12);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
    }

    @Test
    public void test11154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11154");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float12 = multiMatchQueryBuilder8.gettieBreaker();
        multiMatchQueryBuilder8.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}";
        multiMatchQueryBuilder8.setslop((java.lang.Integer) (-1));
        java.lang.Boolean boolean17 = multiMatchQueryBuilder8.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.slop(32);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = multiMatchQueryBuilder19.zeroTermsQuery;
        org.elasticsearch.common.io.stream.StreamInput streamInput21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder19.readFrom(streamInput21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + false + "'", boolean17, false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(zeroTermsQuery20);
    }

    @Test
    public void test11155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11155");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion15 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.CAMELCASE;
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion15);
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.fuzziness((java.lang.Object) fieldCaseConversion15);
        multiMatchQueryBuilder11.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder11.gettype();
        java.lang.String str22 = multiMatchQueryBuilder11.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + fieldCaseConversion15 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.CAMELCASE + "'", fieldCaseConversion15.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.CAMELCASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test11156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11156");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.Object obj17 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.slop((int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test11157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11157");
        java.lang.Object obj0 = null;
        java.lang.String[] strArray4 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder5 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray4);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj0, strArray4);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"slop\" : 10,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = null;
        multiMatchQueryBuilder8.zeroTermsQuery = zeroTermsQuery9;
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
    }

    @Test
    public void test11158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11158");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder18.cutoffFrequency((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder18.maxExpansions((int) '#');
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test11159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11159");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        java.lang.String str14 = multiMatchQueryBuilder12.getfuzzyRewrite();
        multiMatchQueryBuilder12.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder12.fuzzyRewrite = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = multiMatchQueryBuilder12.gettype();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap20 = multiMatchQueryBuilder12.getfieldsBoosts();
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap30 = multiMatchQueryBuilder29.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder29.minimumShouldMatch("multi_match");
        java.lang.String str33 = multiMatchQueryBuilder32.toString();
        java.lang.String[] strArray37 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray37);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.operator(operator39);
        java.lang.String str41 = multiMatchQueryBuilder38.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness42 = multiMatchQueryBuilder38.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder38.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.cutoffFrequency((float) '4');
        boolean boolean47 = multiMatchQueryBuilder32.equals((java.lang.Object) multiMatchQueryBuilder44);
        multiMatchQueryBuilder44.maxExpansions = (-1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery50 = null;
        multiMatchQueryBuilder44.setzeroTermsQuery(zeroTermsQuery50);
        org.elasticsearch.index.query.Operator operator52 = multiMatchQueryBuilder44.getoperator();
        multiMatchQueryBuilder44.slop = 100;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder12.fuzziness((java.lang.Object) 100);
        java.lang.Float float56 = multiMatchQueryBuilder12.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder12.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 0,\n    \"prefix_length\" : 35,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(type19);
        org.junit.Assert.assertNull(strObjectFloatHashMap20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(strObjectFloatHashMap30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str33, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multi_match" + "'", str41, "multi_match");
        org.junit.Assert.assertNull(fuzziness42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(operator52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNull(float56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
    }

    @Test
    public void test11160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11160");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.minimumShouldMatch("");
        java.lang.Boolean boolean12 = multiMatchQueryBuilder11.getuseDisMax();
        java.lang.Float float13 = multiMatchQueryBuilder11.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.lenient(false);
        java.lang.Integer int16 = multiMatchQueryBuilder15.prefixLength;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test11161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11161");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder25.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder25.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = multiMatchQueryBuilder25.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField39 = type38.parseField();
        multiMatchQueryBuilder25.type = type38;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder20.type(type38);
        multiMatchQueryBuilder41.rewrite = "multi_match";
        multiMatchQueryBuilder41.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Object obj46 = multiMatchQueryBuilder41.gettext();
        java.lang.String str47 = multiMatchQueryBuilder41.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(type37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertEquals("'" + obj46 + "' != '" + "multi_match" + "'", obj46, "multi_match");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str47, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test11162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11162");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.common.unit.Fuzziness fuzziness10 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness10;
        java.lang.String[] strArray15 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray15);
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException21 = multiMatchQueryBuilder16.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.zeroTermsQuery(zeroTermsQuery24);
        multiMatchQueryBuilder25.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray33 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray33);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException39 = multiMatchQueryBuilder34.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder34.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder34.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder34.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness46 = multiMatchQueryBuilder34.getfuzziness();
        java.lang.Object obj47 = multiMatchQueryBuilder34.text;
        java.lang.String str48 = multiMatchQueryBuilder34.minimumShouldMatch;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery49 = null;
        multiMatchQueryBuilder34.setzeroTermsQuery(zeroTermsQuery49);
        java.lang.String[] strArray54 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray54);
        org.elasticsearch.index.query.Operator operator56 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.operator(operator56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder55.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException60 = multiMatchQueryBuilder55.validate();
        java.lang.Integer int61 = multiMatchQueryBuilder55.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery62 = multiMatchQueryBuilder55.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder55.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder55.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder55.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder55.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean72 = multiMatchQueryBuilder71.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder71.boost((float) 1);
        java.lang.Boolean boolean75 = multiMatchQueryBuilder74.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type76 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type77 = type76.matchQueryType();
        float float78 = type76.tieBreaker();
        float float79 = type76.tieBreaker();
        float float80 = type76.tieBreaker();
        org.elasticsearch.common.ParseField parseField81 = type76.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder74.type(type76);
        float float83 = type76.tieBreaker();
        multiMatchQueryBuilder34.settype(type76);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder25.type(type76);
        multiMatchQueryBuilder4.type = type76;
        multiMatchQueryBuilder4.useDisMax = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = multiMatchQueryBuilder4.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(queryValidationException21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(queryValidationException39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(fuzziness46);
        org.junit.Assert.assertEquals("'" + obj47 + "' != '" + "multi_match" + "'", obj47, "multi_match");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(queryValidationException60);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNull(zeroTermsQuery62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNull(boolean72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNull(boolean75);
        org.junit.Assert.assertTrue("'" + type76 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type76.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type77 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type77.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + 0.0f + "'", float78 == 0.0f);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + 0.0f + "'", float79 == 0.0f);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + 0.0f + "'", float80 == 0.0f);
        org.junit.Assert.assertNotNull(parseField81);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + 0.0f + "'", float83 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder90);
    }

    @Test
    public void test11163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11163");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.maxExpansions((-1));
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder11.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.Object obj18 = multiMatchQueryBuilder17.text;
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException28 = multiMatchQueryBuilder23.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder23.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder23.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type35 = multiMatchQueryBuilder23.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField37 = type36.parseField();
        multiMatchQueryBuilder23.type = type36;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder17.type(type36);
        org.elasticsearch.index.search.MatchQuery.Type type40 = type36.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder11.type(type36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder11.useDisMax(false);
        org.elasticsearch.index.query.Operator operator44 = multiMatchQueryBuilder11.operator;
        java.lang.String str45 = multiMatchQueryBuilder11.getanalyzer();
        multiMatchQueryBuilder11.rewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(queryValidationException28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(type35);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type40.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(operator44);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test11164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11164");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder24.setoperator(operator29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder24.zeroTermsQuery = zeroTermsQuery31;
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        multiMatchQueryBuilder37.maxExpansions = 0;
        java.lang.Boolean boolean40 = multiMatchQueryBuilder37.lenient;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder37.tieBreaker((float) (short) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery43 = multiMatchQueryBuilder42.zeroTermsQuery;
        java.lang.Integer int44 = multiMatchQueryBuilder42.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.useDisMax(false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(boolean40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(zeroTermsQuery43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
    }

    @Test
    public void test11165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11165");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        java.lang.Object obj5 = multiMatchQueryBuilder4.text;
        java.lang.String str6 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.String str8 = multiMatchQueryBuilder4.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + "multi_match" + "'", obj5, "multi_match");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test11166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11166");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.boost((float) ' ');
        org.elasticsearch.index.query.Operator operator12 = null;
        multiMatchQueryBuilder4.operator = operator12;
        java.lang.String str14 = multiMatchQueryBuilder4.getWriteableName();
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"maxExpansions\\\" : 1,\\n    \\\"minimumShouldMatch\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : \\\\\\\"multi_match\\\\\\\",\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"multi_match\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\",\\n    \\\"useDisMax\\\" : false,\\n    \\\"cutoffFrequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Class<?> wildcardClass17 = multiMatchQueryBuilder4.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "multi_match" + "'", str14, "multi_match");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test11167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11167");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        org.elasticsearch.index.query.Operator operator11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.operator(operator11);
        java.lang.Float float13 = multiMatchQueryBuilder12.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.fuzzyRewrite("");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.useDisMax(false);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder17.getlenient();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean20);
    }

    @Test
    public void test11168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11168");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery10);
        multiMatchQueryBuilder11.maxExpansions = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str16 = multiMatchQueryBuilder15.getminimumShouldMatch();
        java.lang.Object obj17 = multiMatchQueryBuilder15.gettext();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder15.getuseDisMax();
        java.lang.Object obj19 = null;
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        java.lang.Boolean boolean27 = multiMatchQueryBuilder24.getlenient();
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder24.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder24.tieBreaker((float) (-1));
        multiMatchQueryBuilder24.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder24.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.common.ParseField parseField39 = type38.parseField();
        org.elasticsearch.common.ParseField parseField40 = type38.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder37.type(type38);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery42 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.zeroTermsQuery(zeroTermsQuery42);
        java.lang.String[] strArray47 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray47);
        org.elasticsearch.index.query.Operator operator49 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.operator(operator49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder48.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException53 = multiMatchQueryBuilder48.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder48.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder48.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder48.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness60 = multiMatchQueryBuilder48.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder48.slop((int) (short) 0);
        multiMatchQueryBuilder48.setslop((java.lang.Integer) 100);
        java.lang.Boolean boolean65 = multiMatchQueryBuilder48.getuseDisMax();
        java.lang.String str66 = multiMatchQueryBuilder48.fuzzyRewrite;
        java.lang.String[] strArray71 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray71);
        java.lang.String[] strArray77 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray77);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray71, strArray77);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str66, strArray71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder43, strArray71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj19, strArray71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder15, strArray71);
        java.lang.Integer int84 = multiMatchQueryBuilder83.getmaxExpansions();
        java.lang.String str85 = multiMatchQueryBuilder83.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder83.maxExpansions(10);
        multiMatchQueryBuilder83.setrewrite("");
        java.lang.String str90 = multiMatchQueryBuilder83.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(boolean27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(parseField39);
        org.junit.Assert.assertNotNull(parseField40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(queryValidationException53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(fuzziness60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNull(boolean65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNull(int84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertNull(str90);
    }

    @Test
    public void test11169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11169");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        org.elasticsearch.index.query.Operator operator11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.operator(operator11);
        java.lang.Float float13 = multiMatchQueryBuilder12.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.fuzzyRewrite("");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder12.boost((float) '4');
        java.lang.String str20 = multiMatchQueryBuilder19.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test11170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11170");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Boolean boolean15 = multiMatchQueryBuilder11.lenient;
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        java.lang.String str25 = multiMatchQueryBuilder20.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder20.field("hi!", (float) (byte) 0);
        boolean boolean31 = multiMatchQueryBuilder11.equals((java.lang.Object) multiMatchQueryBuilder30);
        multiMatchQueryBuilder30.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder30.getPROTOTYPE();
        java.lang.String[] strArray38 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray38);
        org.elasticsearch.index.query.Operator operator40 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.operator(operator40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder39.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean46 = multiMatchQueryBuilder43.useDisMax;
        java.lang.String str47 = multiMatchQueryBuilder43.queryName();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap48 = multiMatchQueryBuilder43.getfieldsBoosts();
        java.lang.String[] strArray52 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray52);
        org.elasticsearch.index.query.Operator operator54 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.operator(operator54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder53.field("");
        java.lang.String str58 = multiMatchQueryBuilder53.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder53.minimumShouldMatch("");
        java.lang.Boolean boolean61 = multiMatchQueryBuilder53.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type62 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float63 = type62.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder53.type(type62);
        multiMatchQueryBuilder43.settype(type62);
        org.elasticsearch.common.ParseField parseField66 = type62.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type67 = type62.matchQueryType();
        multiMatchQueryBuilder34.settype(type62);
        java.lang.String[] strArray72 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray72);
        org.elasticsearch.index.query.Operator operator74 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder73.operator(operator74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder73.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap78 = multiMatchQueryBuilder77.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery79 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder77.zeroTermsQuery(zeroTermsQuery79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder77.lenient(false);
        java.lang.Object obj83 = multiMatchQueryBuilder82.gettext();
        java.lang.Integer int84 = multiMatchQueryBuilder82.getslop();
        multiMatchQueryBuilder82.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = multiMatchQueryBuilder82.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str89 = multiMatchQueryBuilder88.fuzzyRewrite;
        java.lang.String str90 = multiMatchQueryBuilder88.fuzzyRewrite;
        java.lang.String str91 = multiMatchQueryBuilder88.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = multiMatchQueryBuilder88.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder93.setlenient((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder97 = multiMatchQueryBuilder93.boost((float) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder98 = multiMatchQueryBuilder34.fuzziness((java.lang.Object) multiMatchQueryBuilder93);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(boolean46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(strObjectFloatHashMap48);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNull(boolean61);
        org.junit.Assert.assertTrue("'" + type62 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type62.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + 0.0f + "'", float63 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(parseField66);
        org.junit.Assert.assertTrue("'" + type67 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type67.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNull(strObjectFloatHashMap78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertEquals("'" + obj83 + "' != '" + "multi_match" + "'", obj83, "multi_match");
        org.junit.Assert.assertNull(int84);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder88);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str91, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder93);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder97);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder98);
    }

    @Test
    public void test11171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11171");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.maxExpansions((-1));
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder11.getfields();
        multiMatchQueryBuilder11.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.useDisMax(true);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        multiMatchQueryBuilder20.zeroTermsQuery = zeroTermsQuery21;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.maxExpansions(52);
        java.lang.Integer int25 = multiMatchQueryBuilder20.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(int25);
    }

    @Test
    public void test11172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11172");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        java.lang.Float float12 = multiMatchQueryBuilder4.tieBreaker;
        java.lang.Integer int13 = multiMatchQueryBuilder4.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 1,\n    \"maxExpansions\" : 100,\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}", (float) 0L);
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        multiMatchQueryBuilder21.fuzzyRewrite = "hi!";
        java.lang.String str26 = multiMatchQueryBuilder21.rewrite;
        java.lang.String[] strArray30 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray30);
        org.elasticsearch.index.query.Operator operator32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.operator(operator32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException36 = multiMatchQueryBuilder31.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder31.cutoffFrequency((float) (byte) 100);
        float float39 = multiMatchQueryBuilder31.boost();
        multiMatchQueryBuilder31.setanalyzer("");
        multiMatchQueryBuilder31.setcutoffFrequency((java.lang.Float) 0.0f);
        boolean boolean44 = multiMatchQueryBuilder21.equals((java.lang.Object) multiMatchQueryBuilder31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder31.getPROTOTYPE();
        java.lang.String[] strArray49 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray49);
        org.elasticsearch.index.query.Operator operator51 = null;
        multiMatchQueryBuilder50.operator = operator51;
        org.elasticsearch.common.unit.Fuzziness fuzziness53 = multiMatchQueryBuilder50.getfuzziness();
        multiMatchQueryBuilder50.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.Operator operator56 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder50.operator(operator56);
        java.lang.String[] strArray61 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray61);
        org.elasticsearch.index.query.Operator operator63 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.operator(operator63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder62.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException67 = multiMatchQueryBuilder62.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder62.cutoffFrequency((float) (byte) 100);
        float float70 = multiMatchQueryBuilder62.boost();
        multiMatchQueryBuilder62.setanalyzer("");
        java.lang.Boolean boolean73 = multiMatchQueryBuilder62.getuseDisMax();
        java.lang.String str74 = multiMatchQueryBuilder62.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder62.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray80 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray80);
        org.elasticsearch.index.query.Operator operator82 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder81.operator(operator82);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder81.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder85.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder85.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness90 = multiMatchQueryBuilder85.getfuzziness();
        multiMatchQueryBuilder76.fuzziness = fuzziness90;
        multiMatchQueryBuilder50.fuzziness = fuzziness90;
        multiMatchQueryBuilder45.setfuzziness(fuzziness90);
        multiMatchQueryBuilder45.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder45.lenient = true;
        boolean boolean98 = multiMatchQueryBuilder16.equals((java.lang.Object) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type99 = multiMatchQueryBuilder16.type;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(queryValidationException36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 1.0f + "'", float39 == 1.0f);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNull(fuzziness53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNull(queryValidationException67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + 1.0f + "'", float70 == 1.0f);
        org.junit.Assert.assertNull(boolean73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertNotNull(fuzziness90);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNull(type99);
    }

    @Test
    public void test11173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11173");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        java.lang.Float float14 = multiMatchQueryBuilder8.getcutoffFrequency();
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.operator(operator15);
        java.lang.String str17 = multiMatchQueryBuilder8.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = multiMatchQueryBuilder8.gettype();
        java.util.List<java.lang.String> strList19 = multiMatchQueryBuilder8.fields;
        java.lang.String str20 = multiMatchQueryBuilder8.rewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multi_match" + "'", str17, "multi_match");
        org.junit.Assert.assertNull(type18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test11174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11174");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder23.cutoffFrequency = 100.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test11175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11175");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.Object obj17 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.prefixLength((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.slop(52);
        java.util.List<java.lang.String> strList24 = multiMatchQueryBuilder21.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.getPROTOTYPE();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test11176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11176");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        multiMatchQueryBuilder4.maxExpansions = 35;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder15 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params16 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder4.doXContent(xContentBuilder15, params16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(params16);
    }

    @Test
    public void test11177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11177");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder4.cutoffFrequency = 10.0f;
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!^97.0\", \"\", \"hi!^97.0\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.boost((float) 0);
        java.lang.String str21 = multiMatchQueryBuilder20.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.lenient(false);
        org.elasticsearch.common.xcontent.XContentType xContentType24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference25 = multiMatchQueryBuilder20.buildAsBytes(xContentType24);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test11178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11178");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        java.lang.Float float13 = multiMatchQueryBuilder4.getcutoffFrequency();
        multiMatchQueryBuilder4.prefixLength = 100;
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.slop((int) 'a');
        multiMatchQueryBuilder19.slop = 1;
        java.lang.String str22 = multiMatchQueryBuilder19.rewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder19.maxExpansions((int) (short) 0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test11179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11179");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.boost((float) ' ');
        java.lang.String[] strArray15 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray15);
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException21 = multiMatchQueryBuilder16.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder16.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.Operator operator26 = null;
        multiMatchQueryBuilder16.setoperator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type28 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type29 = type28.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder16.type(type28);
        multiMatchQueryBuilder11.settype(type28);
        org.elasticsearch.common.ParseField parseField32 = type28.parseField();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(queryValidationException21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type28.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type29.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(parseField32);
    }

    @Test
    public void test11180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11180");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.prefixLength = 10;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.setfieldsBoosts(strObjectFloatHashMap13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("", (float) (byte) 100);
        java.lang.String str18 = multiMatchQueryBuilder17.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder17.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.slop((int) (short) 100);
        org.elasticsearch.index.query.Operator operator23 = null;
        multiMatchQueryBuilder20.setoperator(operator23);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test11181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11181");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type8 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type9 = type8.matchQueryType();
        float float10 = type8.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type8);
        multiMatchQueryBuilder11.useDisMax = false;
        multiMatchQueryBuilder11.useDisMax = false;
        multiMatchQueryBuilder11.maxExpansions = 10;
        java.lang.Boolean boolean18 = multiMatchQueryBuilder11.getlenient();
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException28 = multiMatchQueryBuilder23.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder23.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder23.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness35 = multiMatchQueryBuilder23.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder23.slop((int) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder23.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder23.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        boolean boolean42 = multiMatchQueryBuilder11.equals((java.lang.Object) "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type8.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type9.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(queryValidationException28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(fuzziness35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test11182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11182");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Object obj10 = multiMatchQueryBuilder4.text;
        float float11 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float14 = multiMatchQueryBuilder4.gettieBreaker();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException24 = multiMatchQueryBuilder19.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.cutoffFrequency((float) (byte) 100);
        float float27 = multiMatchQueryBuilder19.boost();
        multiMatchQueryBuilder19.setanalyzer("");
        java.lang.Boolean boolean30 = multiMatchQueryBuilder19.getuseDisMax();
        java.lang.String str31 = multiMatchQueryBuilder19.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder19.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray37 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray37);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.operator(operator39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder38.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder42.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness47 = multiMatchQueryBuilder42.getfuzziness();
        multiMatchQueryBuilder33.fuzziness = fuzziness47;
        multiMatchQueryBuilder4.setfuzziness(fuzziness47);
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type52 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) 0.0d);
        multiMatchQueryBuilder54.prefixLength = (-1);
        multiMatchQueryBuilder54.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder54.cutoffFrequency = (-1.0f);
        java.lang.String str61 = multiMatchQueryBuilder54.getrewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "multi_match" + "'", obj10, "multi_match");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 1.0f + "'", float11 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(queryValidationException24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(fuzziness47);
        org.junit.Assert.assertNull(type52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test11183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11183");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        java.lang.String str18 = multiMatchQueryBuilder17.fuzzyRewrite;
        java.lang.Boolean boolean19 = multiMatchQueryBuilder17.useDisMax;
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.operator(operator20);
        multiMatchQueryBuilder21.rewrite = "";
        multiMatchQueryBuilder21.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"tieBreaker\" : 1.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        multiMatchQueryBuilder21.setzeroTermsQuery(zeroTermsQuery26);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test11184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11184");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        float float13 = multiMatchQueryBuilder10.boost();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 1.0f + "'", float13 == 1.0f);
    }

    @Test
    public void test11185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11185");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Object obj10 = multiMatchQueryBuilder4.text;
        float float11 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float14 = multiMatchQueryBuilder4.gettieBreaker();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException24 = multiMatchQueryBuilder19.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.cutoffFrequency((float) (byte) 100);
        float float27 = multiMatchQueryBuilder19.boost();
        multiMatchQueryBuilder19.setanalyzer("");
        java.lang.Boolean boolean30 = multiMatchQueryBuilder19.getuseDisMax();
        java.lang.String str31 = multiMatchQueryBuilder19.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder19.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray37 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray37);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.operator(operator39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder38.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder42.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness47 = multiMatchQueryBuilder42.getfuzziness();
        multiMatchQueryBuilder33.fuzziness = fuzziness47;
        multiMatchQueryBuilder4.setfuzziness(fuzziness47);
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type52 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) 0.0d);
        multiMatchQueryBuilder54.prefixLength = (-1);
        multiMatchQueryBuilder54.cutoffFrequency = 1.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder54.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean61 = multiMatchQueryBuilder60.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "multi_match" + "'", obj10, "multi_match");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 1.0f + "'", float11 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(queryValidationException24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(fuzziness47);
        org.junit.Assert.assertNull(type52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNull(boolean61);
    }

    @Test
    public void test11186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11186");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator15 = multiMatchQueryBuilder14.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str18 = multiMatchQueryBuilder17.queryName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(operator15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}" + "'", str18, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test11187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11187");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap13;
        multiMatchQueryBuilder4.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery17);
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = null;
        multiMatchQueryBuilder18.fuzziness = fuzziness19;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder18.maxExpansions((int) (short) 100);
        java.util.List<java.lang.String> strList25 = multiMatchQueryBuilder18.getfields();
        java.lang.String str26 = multiMatchQueryBuilder18.getfuzzyRewrite();
        multiMatchQueryBuilder18.tieBreaker = 0.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test11188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11188");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.lang.Integer int8 = multiMatchQueryBuilder4.getmaxExpansions();
        multiMatchQueryBuilder4.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder4.getminimumShouldMatch();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = multiMatchQueryBuilder4.getfieldsBoosts();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = multiMatchQueryBuilder4.fieldsBoosts;
        java.lang.Object obj16 = multiMatchQueryBuilder4.gettext();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strObjectFloatHashMap14);
        org.junit.Assert.assertNull(strObjectFloatHashMap15);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "multi_match" + "'", obj16, "multi_match");
    }

    @Test
    public void test11189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11189");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.cutoffFrequency((-1.0f));
        multiMatchQueryBuilder24.lenient = false;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test11190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11190");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int13 = multiMatchQueryBuilder12.prefixLength;
        multiMatchQueryBuilder12.maxExpansions = 0;
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder12.fuzziness;
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap26 = multiMatchQueryBuilder25.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder25.zeroTermsQuery(zeroTermsQuery27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder25.lenient(false);
        multiMatchQueryBuilder25.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder25.zeroTermsQuery(zeroTermsQuery33);
        multiMatchQueryBuilder25.tieBreaker = 10.0f;
        java.lang.String[] strArray40 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray40);
        org.elasticsearch.index.query.Operator operator42 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.operator(operator42);
        multiMatchQueryBuilder41.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder41.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.maxExpansions((int) (short) 10);
        java.lang.String[] strArray53 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray53);
        org.elasticsearch.index.query.Operator operator55 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.operator(operator55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder54.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder58.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness63 = multiMatchQueryBuilder58.getfuzziness();
        multiMatchQueryBuilder47.fuzziness = fuzziness63;
        multiMatchQueryBuilder25.setfuzziness(fuzziness63);
        multiMatchQueryBuilder12.setfuzziness(fuzziness63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder12.getPROTOTYPE();
        multiMatchQueryBuilder67.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"analyzer\" : \"\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder67.prefixLength((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type72 = multiMatchQueryBuilder67.gettype();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(strObjectFloatHashMap26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(fuzziness63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
// flaky:         org.junit.Assert.assertTrue("'" + type72 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type72.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
    }

    @Test
    public void test11191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11191");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Object obj10 = multiMatchQueryBuilder4.text;
        float float11 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.boost(0.0f);
        org.elasticsearch.index.query.Operator operator14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.operator(operator14);
        java.lang.String str16 = multiMatchQueryBuilder13.fuzzyRewrite;
        java.lang.String str17 = multiMatchQueryBuilder13.fuzzyRewrite;
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder22.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder22.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str34 = multiMatchQueryBuilder33.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder33.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.slop(32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder13.fuzziness((java.lang.Object) multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "multi_match" + "'", obj10, "multi_match");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 1.0f + "'", float11 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
    }

    @Test
    public void test11192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11192");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 10,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(fuzziness8);
    }

    @Test
    public void test11193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11193");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (byte) 0);
        org.elasticsearch.common.unit.Fuzziness fuzziness14 = multiMatchQueryBuilder8.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float17 = multiMatchQueryBuilder16.cutoffFrequency;
        multiMatchQueryBuilder16.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap20 = multiMatchQueryBuilder16.fieldsBoosts;
        multiMatchQueryBuilder16.tieBreaker = 35.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(strObjectFloatHashMap11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(fuzziness14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNull(strObjectFloatHashMap20);
    }

    @Test
    public void test11194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11194");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.Operator operator10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.operator(operator10);
        java.lang.Float float12 = multiMatchQueryBuilder4.gettieBreaker();
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness13;
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) 10);
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException26 = multiMatchQueryBuilder21.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj29 = multiMatchQueryBuilder21.text;
        java.lang.String str30 = multiMatchQueryBuilder21.getName();
        java.lang.Object obj31 = multiMatchQueryBuilder21.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type32 = multiMatchQueryBuilder21.gettype();
        multiMatchQueryBuilder21.fuzzyRewrite = "";
        multiMatchQueryBuilder21.maxExpansions = 0;
        java.lang.String str37 = multiMatchQueryBuilder21.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder21.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder39);
        multiMatchQueryBuilder4.cutoffFrequency = (-1.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(queryValidationException26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertEquals("'" + obj29 + "' != '" + "multi_match" + "'", obj29, "multi_match");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "multi_match" + "'", str30, "multi_match");
        org.junit.Assert.assertEquals("'" + obj31 + "' != '" + "multi_match" + "'", obj31, "multi_match");
        org.junit.Assert.assertNull(type32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 0,\n    \"fuzzyRewrite\" : \"\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str37, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 0,\n    \"fuzzyRewrite\" : \"\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
    }

    @Test
    public void test11195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11195");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        java.lang.Object obj5 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder4.tieBreaker((float) (byte) 10);
        java.lang.String str8 = multiMatchQueryBuilder7.getName();
        org.elasticsearch.index.query.Operator operator9 = null;
        multiMatchQueryBuilder7.setoperator(operator9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder7.gettype();
        java.lang.Integer int12 = multiMatchQueryBuilder7.prefixLength;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + "multi_match" + "'", obj5, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "multi_match" + "'", str8, "multi_match");
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test11196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11196");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap13;
        multiMatchQueryBuilder4.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery17);
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = null;
        multiMatchQueryBuilder18.fuzziness = fuzziness19;
        java.lang.String str21 = multiMatchQueryBuilder18.getrewrite();
        java.lang.String str22 = multiMatchQueryBuilder18.toString();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params24 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = multiMatchQueryBuilder18.toXContent(xContentBuilder23, params24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str22, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(params24);
    }

    @Test
    public void test11197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11197");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        float float7 = multiMatchQueryBuilder4.boost();
        java.lang.Float float8 = multiMatchQueryBuilder4.tieBreaker;
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) 1);
        java.lang.Integer int11 = multiMatchQueryBuilder4.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 1.0f + "'", float7 == 1.0f);
        org.junit.Assert.assertNull(float8);
        org.junit.Assert.assertNull(int11);
    }

    @Test
    public void test11198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11198");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        java.lang.String str19 = multiMatchQueryBuilder4.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap20 = multiMatchQueryBuilder4.fieldsBoosts;
        org.elasticsearch.index.query.Operator operator21 = multiMatchQueryBuilder4.operator;
        java.lang.String str22 = multiMatchQueryBuilder4.queryName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap20);
        org.junit.Assert.assertNull(operator21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test11199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11199");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.slop((int) (short) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str26 = multiMatchQueryBuilder25.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str26, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test11200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11200");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        org.elasticsearch.index.query.QueryValidationException queryValidationException14 = multiMatchQueryBuilder13.validate();
        java.lang.String str15 = multiMatchQueryBuilder13.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder13.zeroTermsQuery = zeroTermsQuery16;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.tieBreaker(0.0f);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder13.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}", (float) (short) -1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder13.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(queryValidationException14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(zeroTermsQuery25);
    }

    @Test
    public void test11201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11201");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.prefixLength = 10;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.setfieldsBoosts(strObjectFloatHashMap13);
        java.lang.String str15 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.String str16 = multiMatchQueryBuilder4.getrewrite();
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException26 = multiMatchQueryBuilder21.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder21.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder21.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness33 = multiMatchQueryBuilder21.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder21.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder21.zeroTermsQuery(zeroTermsQuery36);
        java.lang.String[] strArray41 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray41);
        org.elasticsearch.index.query.Operator operator43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.operator(operator43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException47 = multiMatchQueryBuilder42.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder42.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder42.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder42.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type54 = multiMatchQueryBuilder42.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type55 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField56 = type55.parseField();
        multiMatchQueryBuilder42.type = type55;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder37.type(type55);
        multiMatchQueryBuilder58.rewrite = "multi_match";
        multiMatchQueryBuilder58.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Object obj63 = multiMatchQueryBuilder58.gettext();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery64 = null;
        multiMatchQueryBuilder58.zeroTermsQuery = zeroTermsQuery64;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type66 = multiMatchQueryBuilder58.type;
        multiMatchQueryBuilder4.type = type66;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery68 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery68);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "multi_match" + "'", str15, "multi_match");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(queryValidationException26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(fuzziness33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNull(queryValidationException47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNull(type54);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type55.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertEquals("'" + obj63 + "' != '" + "multi_match" + "'", obj63, "multi_match");
        org.junit.Assert.assertTrue("'" + type66 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type66.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
    }

    @Test
    public void test11202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11202");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder13.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        multiMatchQueryBuilder23.setzeroTermsQuery(zeroTermsQuery24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.maxExpansions((int) (short) -1);
        java.lang.String str28 = multiMatchQueryBuilder23.rewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder23.getPROTOTYPE();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder30 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params31 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder23.doXContent(xContentBuilder30, params31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str28, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(params31);
    }

    @Test
    public void test11203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11203");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.tieBreaker((float) 1L);
        multiMatchQueryBuilder18.setcutoffFrequency((java.lang.Float) 0.0f);
        java.lang.Integer int21 = multiMatchQueryBuilder18.prefixLength;
        multiMatchQueryBuilder18.prefixLength = 1;
        multiMatchQueryBuilder18.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(int21);
    }

    @Test
    public void test11204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11204");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        float float33 = multiMatchQueryBuilder25.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type35 = type34.matchQueryType();
        multiMatchQueryBuilder25.settype(type34);
        multiMatchQueryBuilder4.type = type34;
        java.lang.String str38 = multiMatchQueryBuilder4.fuzzyRewrite;
        multiMatchQueryBuilder4.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException50 = multiMatchQueryBuilder45.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder45.cutoffFrequency((float) (byte) 100);
        java.lang.String str53 = multiMatchQueryBuilder45.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder45.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder45.tieBreaker((-1.0f));
        multiMatchQueryBuilder57.setlenient((java.lang.Boolean) false);
        boolean boolean60 = multiMatchQueryBuilder4.equals((java.lang.Object) multiMatchQueryBuilder57);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery61 = null;
        multiMatchQueryBuilder57.zeroTermsQuery = zeroTermsQuery61;
        java.lang.String str63 = multiMatchQueryBuilder57.getminimumShouldMatch();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 1.0f + "'", float33 == 1.0f);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type35.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(queryValidationException50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test11205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11205");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        org.elasticsearch.index.query.Operator operator11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.operator(operator11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.prefixLength(100);
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder14.fields;
        multiMatchQueryBuilder14.setprefixLength((java.lang.Integer) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder14.maxExpansions(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.slop((int) ' ');
        org.elasticsearch.index.query.Operator operator22 = multiMatchQueryBuilder19.getoperator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(operator22);
    }

    @Test
    public void test11206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11206");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.lang.Float float16 = multiMatchQueryBuilder8.gettieBreaker();
        java.lang.String str17 = multiMatchQueryBuilder8.toString();
        multiMatchQueryBuilder8.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder8.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str17, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test11207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11207");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.slop((int) (short) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery22);
        java.lang.Object obj24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.type(obj24);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap26 = multiMatchQueryBuilder23.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(strObjectFloatHashMap26);
    }

    @Test
    public void test11208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11208");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        float float15 = multiMatchQueryBuilder14.boost();
        multiMatchQueryBuilder14.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str18 = multiMatchQueryBuilder14.analyzer;
        multiMatchQueryBuilder14.tieBreaker = 1.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder14.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str23 = multiMatchQueryBuilder14.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder14.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : 10,\n    \"maxExpansions\" : -1,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray29 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray29);
        org.elasticsearch.index.query.Operator operator31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.operator(operator31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder30.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap35 = multiMatchQueryBuilder34.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder34.zeroTermsQuery(zeroTermsQuery36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder34.lenient(false);
        multiMatchQueryBuilder34.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery42 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder34.zeroTermsQuery(zeroTermsQuery42);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.cutoffFrequency((float) 10);
        java.lang.String str46 = multiMatchQueryBuilder43.fuzzyRewrite;
        java.lang.String str47 = multiMatchQueryBuilder43.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder43.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray53 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray53);
        org.elasticsearch.index.query.Operator operator55 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.operator(operator55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder54.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap59 = multiMatchQueryBuilder58.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder58.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder61.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder63.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder63.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type67 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField68 = type67.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type69 = type67.matchQueryType();
        org.elasticsearch.common.ParseField parseField70 = type67.parseField();
        multiMatchQueryBuilder66.type = type67;
        multiMatchQueryBuilder43.type = type67;
        org.elasticsearch.common.ParseField parseField73 = type67.parseField();
        multiMatchQueryBuilder25.settype(type67);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str23, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(strObjectFloatHashMap35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "multi_match" + "'", str47, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNull(strObjectFloatHashMap59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + type67 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type67.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField68);
        org.junit.Assert.assertTrue("'" + type69 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type69.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField70);
        org.junit.Assert.assertNotNull(parseField73);
    }

    @Test
    public void test11209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11209");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 0);
        multiMatchQueryBuilder8.fuzzyRewrite = "";
        java.lang.Boolean boolean15 = multiMatchQueryBuilder8.lenient;
        multiMatchQueryBuilder8.cutoffFrequency = 1.0f;
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder8.getfuzziness();
        java.lang.Boolean boolean19 = multiMatchQueryBuilder8.lenient;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = multiMatchQueryBuilder8.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNotNull(fuzziness18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNull(zeroTermsQuery20);
    }

    @Test
    public void test11210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11210");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.queryName("");
        multiMatchQueryBuilder14.setslop((java.lang.Integer) 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type23 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float24 = type23.tieBreaker();
        org.elasticsearch.common.ParseField parseField25 = type23.parseField();
        float float26 = type23.tieBreaker();
        multiMatchQueryBuilder22.settype(type23);
        org.elasticsearch.common.ParseField parseField28 = type23.parseField();
        float float29 = type23.tieBreaker();
        org.elasticsearch.common.ParseField parseField30 = type23.parseField();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type23.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 0.0f + "'", float24 == 0.0f);
        org.junit.Assert.assertNotNull(parseField25);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertNotNull(parseField28);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(parseField30);
    }

    @Test
    public void test11211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11211");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        java.lang.String str9 = multiMatchQueryBuilder4.rewrite;
        java.lang.String[] strArray13 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray13);
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.operator(operator15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException19 = multiMatchQueryBuilder14.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.cutoffFrequency((float) (byte) 100);
        float float22 = multiMatchQueryBuilder14.boost();
        multiMatchQueryBuilder14.setanalyzer("");
        multiMatchQueryBuilder14.setcutoffFrequency((java.lang.Float) 0.0f);
        boolean boolean27 = multiMatchQueryBuilder4.equals((java.lang.Object) multiMatchQueryBuilder14);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery28);
        java.lang.Boolean boolean30 = multiMatchQueryBuilder29.getlenient();
        java.lang.String str31 = multiMatchQueryBuilder29.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder29.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder29.useDisMax(false);
        multiMatchQueryBuilder29.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"prefixLength\" : 32,\n    \"maxExpansions\" : 10,\n    \"tieBreaker\" : 100.0,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int38 = multiMatchQueryBuilder29.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(queryValidationException19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 1.0f + "'", float22 == 1.0f);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(int38);
    }

    @Test
    public void test11212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11212");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        java.lang.String str9 = multiMatchQueryBuilder4.rewrite;
        java.lang.Boolean boolean10 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setrewrite("");
        multiMatchQueryBuilder4.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.slop((int) (byte) 1);
        java.util.List<java.lang.String> strList17 = multiMatchQueryBuilder4.getfields();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test11213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11213");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        java.lang.String str12 = multiMatchQueryBuilder11.toString();
        java.lang.String str13 = multiMatchQueryBuilder11.queryName();
        java.lang.Integer int14 = multiMatchQueryBuilder11.prefixLength;
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException24 = multiMatchQueryBuilder19.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.cutoffFrequency((float) (byte) 100);
        float float27 = multiMatchQueryBuilder19.boost();
        multiMatchQueryBuilder19.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder19.rewrite("multi_match");
        java.lang.String str32 = multiMatchQueryBuilder31.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap33 = null;
        multiMatchQueryBuilder31.fieldsBoosts = strObjectFloatHashMap33;
        java.util.List<java.lang.String> strList35 = multiMatchQueryBuilder31.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = multiMatchQueryBuilder31.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder31.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        java.lang.String str46 = multiMatchQueryBuilder43.getWriteableName();
        java.lang.Boolean boolean47 = multiMatchQueryBuilder43.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder43.getPROTOTYPE();
        multiMatchQueryBuilder43.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray54 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray54);
        org.elasticsearch.index.query.Operator operator56 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.operator(operator56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder55.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException60 = multiMatchQueryBuilder55.validate();
        java.lang.Integer int61 = multiMatchQueryBuilder55.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery62 = multiMatchQueryBuilder55.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder55.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder55.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder55.boost((float) 0);
        java.lang.String str70 = multiMatchQueryBuilder55.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap71 = multiMatchQueryBuilder55.fieldsBoosts;
        multiMatchQueryBuilder43.fieldsBoosts = strObjectFloatHashMap71;
        multiMatchQueryBuilder31.setfieldsBoosts(strObjectFloatHashMap71);
        multiMatchQueryBuilder11.fieldsBoosts = strObjectFloatHashMap71;
        java.lang.String str75 = multiMatchQueryBuilder11.rewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str12, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(queryValidationException24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNull(type36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "multi_match" + "'", str46, "multi_match");
        org.junit.Assert.assertNull(boolean47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(queryValidationException60);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNull(zeroTermsQuery62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap71);
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test11214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11214");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test11215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11215");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        multiMatchQueryBuilder13.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder19.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\" ],\\n    \\\"boost\\\" : 0.0,\\n    \\\"Name\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : \\\\\\\"multi_match\\\\\\\",\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"multi_match\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"minimum_should_match\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"lenient\\\\\\\" : true,\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\"\\n  }\\n}\"\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test11216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11216");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder6.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder6.cutoffFrequency((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"prefixLength\" : -1,\n    \"maxExpansions\" : 100,\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str16 = multiMatchQueryBuilder15.getWriteableName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "multi_match" + "'", str16, "multi_match");
    }

    @Test
    public void test11217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11217");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Integer int15 = multiMatchQueryBuilder14.getprefixLength();
        java.lang.Object obj16 = null;
        boolean boolean17 = multiMatchQueryBuilder14.equals(obj16);
        java.lang.String str18 = multiMatchQueryBuilder14.getWriteableName();
        multiMatchQueryBuilder14.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "multi_match" + "'", str18, "multi_match");
    }

    @Test
    public void test11218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11218");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.fields;
        multiMatchQueryBuilder4.cutoffFrequency = 0.0f;
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder4.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type14 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float15 = type14.tieBreaker();
        org.elasticsearch.common.ParseField parseField16 = type14.parseField();
        float float17 = type14.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type18 = type14.matchQueryType();
        float float19 = type14.tieBreaker();
        float float20 = type14.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.type(type14);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type14.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.0f + "'", float15 == 0.0f);
        org.junit.Assert.assertNotNull(parseField16);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type18.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test11219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11219");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder11.getfieldsBoosts();
        java.lang.Object obj13 = multiMatchQueryBuilder11.text;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = multiMatchQueryBuilder11.getfieldsBoosts();
        java.lang.Integer int15 = multiMatchQueryBuilder11.getprefixLength();
        org.elasticsearch.index.query.Operator operator16 = multiMatchQueryBuilder11.operator;
        org.elasticsearch.common.unit.Fuzziness fuzziness17 = multiMatchQueryBuilder11.getfuzziness();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + "multi_match" + "'", obj13, "multi_match");
        org.junit.Assert.assertNull(strObjectFloatHashMap14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNull(fuzziness17);
    }

    @Test
    public void test11220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11220");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        java.lang.String str20 = multiMatchQueryBuilder8.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder8.tieBreaker(0.0f);
        java.lang.String str23 = multiMatchQueryBuilder8.getWriteableName();
        multiMatchQueryBuilder8.settieBreaker((java.lang.Float) 0.0f);
        multiMatchQueryBuilder8.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder28 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params29 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder30 = multiMatchQueryBuilder8.toXContent(xContentBuilder28, params29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "multi_match" + "'", str23, "multi_match");
        org.junit.Assert.assertNotNull(params29);
    }

    @Test
    public void test11221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11221");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float21 = multiMatchQueryBuilder20.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.rewrite("multi_match");
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.field("");
        java.lang.String str33 = multiMatchQueryBuilder28.getrewrite();
        java.lang.Object obj34 = multiMatchQueryBuilder28.text;
        float float35 = multiMatchQueryBuilder28.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder28.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float38 = multiMatchQueryBuilder28.gettieBreaker();
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException48 = multiMatchQueryBuilder43.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder43.cutoffFrequency((float) (byte) 100);
        float float51 = multiMatchQueryBuilder43.boost();
        multiMatchQueryBuilder43.setanalyzer("");
        java.lang.Boolean boolean54 = multiMatchQueryBuilder43.getuseDisMax();
        java.lang.String str55 = multiMatchQueryBuilder43.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder43.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray61 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray61);
        org.elasticsearch.index.query.Operator operator63 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.operator(operator63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder62.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder66.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder66.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness71 = multiMatchQueryBuilder66.getfuzziness();
        multiMatchQueryBuilder57.fuzziness = fuzziness71;
        multiMatchQueryBuilder28.setfuzziness(fuzziness71);
        java.lang.String[] strArray78 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray78);
        java.lang.String[] strArray84 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray84);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray78, strArray84);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) fuzziness71, strArray84);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder20, strArray84);
        java.lang.Boolean boolean89 = multiMatchQueryBuilder88.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(float21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "multi_match" + "'", obj34, "multi_match");
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 1.0f + "'", float35 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(float38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(queryValidationException48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 1.0f + "'", float51 == 1.0f);
        org.junit.Assert.assertNull(boolean54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(fuzziness71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNull(boolean89);
    }

    @Test
    public void test11222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11222");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        java.lang.Object obj5 = multiMatchQueryBuilder4.text;
        java.lang.String[] strArray9 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray9);
        org.elasticsearch.index.query.Operator operator11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.operator(operator11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = multiMatchQueryBuilder14.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder14.lenient(false);
        multiMatchQueryBuilder14.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery22);
        multiMatchQueryBuilder14.tieBreaker = 10.0f;
        java.lang.String[] strArray29 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray29);
        org.elasticsearch.index.query.Operator operator31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.operator(operator31);
        multiMatchQueryBuilder30.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder30.operator(operator35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.maxExpansions((int) (short) 10);
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder47.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness52 = multiMatchQueryBuilder47.getfuzziness();
        multiMatchQueryBuilder36.fuzziness = fuzziness52;
        multiMatchQueryBuilder14.setfuzziness(fuzziness52);
        multiMatchQueryBuilder4.fuzziness = fuzziness52;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder4.tieBreaker((-1.0f));
        multiMatchQueryBuilder57.setcutoffFrequency((java.lang.Float) 0.0f);
        multiMatchQueryBuilder57.setmaxExpansions((java.lang.Integer) 0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + "multi_match" + "'", obj5, "multi_match");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(strObjectFloatHashMap15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(fuzziness52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
    }

    @Test
    public void test11223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11223");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        java.lang.String str15 = multiMatchQueryBuilder14.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str15, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test11224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11224");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.Operator operator9 = null;
        multiMatchQueryBuilder4.setoperator(operator9);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder4.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        multiMatchQueryBuilder4.useDisMax = false;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
    }

    @Test
    public void test11225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11225");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        float float33 = multiMatchQueryBuilder25.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type35 = type34.matchQueryType();
        multiMatchQueryBuilder25.settype(type34);
        multiMatchQueryBuilder4.type = type34;
        java.lang.String str38 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder4.cutoffFrequency((float) 100L);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery41 = null;
        multiMatchQueryBuilder40.setzeroTermsQuery(zeroTermsQuery41);
        multiMatchQueryBuilder40.maxExpansions = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type45 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder40.type = type45;
        java.lang.Object obj47 = multiMatchQueryBuilder40.gettext();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 1.0f + "'", float33 == 1.0f);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type35.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type45.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertEquals("'" + obj47 + "' != '" + "multi_match" + "'", obj47, "multi_match");
    }

    @Test
    public void test11226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11226");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = null;
        multiMatchQueryBuilder13.fuzziness = fuzziness16;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.rewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.slop((int) (short) 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test11227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11227");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList18 = multiMatchQueryBuilder4.fields;
        multiMatchQueryBuilder4.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.slop(32);
        java.lang.String str23 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Integer int24 = multiMatchQueryBuilder4.prefixLength;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "multi_match" + "'", str23, "multi_match");
        org.junit.Assert.assertNull(int24);
    }

    @Test
    public void test11228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11228");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        java.lang.Float float16 = multiMatchQueryBuilder15.cutoffFrequency;
        multiMatchQueryBuilder15.useDisMax = true;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = null;
        multiMatchQueryBuilder15.setfieldsBoosts(strObjectFloatHashMap19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder15.getzeroTermsQuery();
        org.elasticsearch.index.query.Operator operator22 = null;
        multiMatchQueryBuilder15.setoperator(operator22);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params25 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder15.doXContent(xContentBuilder24, params25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNotNull(params25);
    }

    @Test
    public void test11229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11229");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.field("hi!", (float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.slop(1);
        java.lang.Boolean boolean21 = multiMatchQueryBuilder20.lenient;
        java.util.List<java.lang.String> strList22 = multiMatchQueryBuilder20.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(strList22);
    }

    @Test
    public void test11230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11230");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        org.elasticsearch.index.query.QueryValidationException queryValidationException14 = multiMatchQueryBuilder13.validate();
        java.lang.String str15 = multiMatchQueryBuilder13.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder13.zeroTermsQuery = zeroTermsQuery16;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.tieBreaker(0.0f);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        java.lang.String str27 = multiMatchQueryBuilder24.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness28 = multiMatchQueryBuilder24.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder24.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.cutoffFrequency((float) '4');
        float float33 = multiMatchQueryBuilder32.boost();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery34 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder32.zeroTermsQuery(zeroTermsQuery34);
        boolean boolean36 = multiMatchQueryBuilder13.equals((java.lang.Object) multiMatchQueryBuilder35);
        org.elasticsearch.index.query.Operator operator37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder13.operator(operator37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException50 = multiMatchQueryBuilder45.validate();
        java.lang.Integer int51 = multiMatchQueryBuilder45.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery52 = multiMatchQueryBuilder45.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder45.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder45.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder45.boost((float) 0);
        java.lang.String str60 = multiMatchQueryBuilder45.fuzzyRewrite;
        java.lang.String[] strArray64 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray64);
        org.elasticsearch.index.query.Operator operator66 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder65.operator(operator66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder65.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap70 = multiMatchQueryBuilder69.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery71 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder69.zeroTermsQuery(zeroTermsQuery71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder69.lenient(false);
        multiMatchQueryBuilder69.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery77 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder69.zeroTermsQuery(zeroTermsQuery77);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder78.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type81 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder78.settype(type81);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder45.fuzziness((java.lang.Object) type81);
        float float84 = type81.tieBreaker();
        multiMatchQueryBuilder13.type = type81;
        org.elasticsearch.index.search.MatchQuery.Type type86 = type81.matchQueryType();
        float float87 = type81.tieBreaker();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(queryValidationException14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "multi_match" + "'", str27, "multi_match");
        org.junit.Assert.assertNull(fuzziness28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 1.0f + "'", float33 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(queryValidationException50);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertNull(zeroTermsQuery52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNull(strObjectFloatHashMap70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertTrue("'" + type81 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type81.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + 0.0f + "'", float84 == 0.0f);
        org.junit.Assert.assertTrue("'" + type86 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type86.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + 0.0f + "'", float87 == 0.0f);
    }

    @Test
    public void test11231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11231");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String str16 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) ' ');
        java.lang.Integer int19 = multiMatchQueryBuilder4.getslop();
        java.lang.String str20 = multiMatchQueryBuilder4.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.useDisMax(false);
        java.lang.Object obj23 = multiMatchQueryBuilder22.text;
        multiMatchQueryBuilder22.rewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}";
        float float26 = multiMatchQueryBuilder22.boost();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + "multi_match" + "'", obj23, "multi_match");
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 32.0f + "'", float26 == 32.0f);
    }

    @Test
    public void test11232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11232");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.getPROTOTYPE();
        multiMatchQueryBuilder11.cutoffFrequency = 0.0f;
        java.lang.String str17 = multiMatchQueryBuilder11.fuzzyRewrite;
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.lenient(false);
        java.lang.Integer int27 = multiMatchQueryBuilder26.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder26.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str30 = multiMatchQueryBuilder26.minimumShouldMatch;
        java.lang.String[] strArray34 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray34);
        org.elasticsearch.index.query.Operator operator36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.operator(operator36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder35.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException40 = multiMatchQueryBuilder35.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder35.cutoffFrequency((float) (byte) 100);
        java.lang.String str43 = multiMatchQueryBuilder35.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder35.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness46 = multiMatchQueryBuilder35.getfuzziness();
        org.elasticsearch.common.unit.Fuzziness fuzziness47 = null;
        multiMatchQueryBuilder35.fuzziness = fuzziness47;
        java.lang.Integer int49 = multiMatchQueryBuilder35.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery50 = multiMatchQueryBuilder35.zeroTermsQuery;
        boolean boolean51 = multiMatchQueryBuilder26.equals((java.lang.Object) zeroTermsQuery50);
        java.lang.String[] strArray56 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray56);
        java.lang.String[] strArray62 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray56, strArray62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean51, strArray56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str17, strArray56);
        org.elasticsearch.index.query.Operator operator67 = multiMatchQueryBuilder66.operator;
        java.lang.String[] strArray71 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray71);
        org.elasticsearch.index.query.Operator operator73 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder72.operator(operator73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder72.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException77 = multiMatchQueryBuilder72.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder72.cutoffFrequency((float) (byte) 100);
        java.lang.String str80 = multiMatchQueryBuilder72.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery81 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder72.zeroTermsQuery(zeroTermsQuery81);
        multiMatchQueryBuilder72.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder72.setmaxExpansions((java.lang.Integer) 10);
        java.lang.Integer int87 = multiMatchQueryBuilder72.prefixLength;
        multiMatchQueryBuilder72.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = multiMatchQueryBuilder72.cutoffFrequency(52.0f);
        boolean boolean92 = multiMatchQueryBuilder66.equals((java.lang.Object) multiMatchQueryBuilder72);
        java.lang.Integer int93 = multiMatchQueryBuilder66.getprefixLength();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery94 = multiMatchQueryBuilder66.zeroTermsQuery;
        java.lang.Boolean boolean95 = multiMatchQueryBuilder66.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder97 = multiMatchQueryBuilder66.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"prefixLength\" : 0,\n    \"tieBreaker\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap98 = multiMatchQueryBuilder97.fieldsBoosts;
        org.elasticsearch.index.query.QueryValidationException queryValidationException99 = multiMatchQueryBuilder97.validate();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(queryValidationException40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(fuzziness46);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNull(zeroTermsQuery50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNull(operator67);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNull(queryValidationException77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNull(int87);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(int93);
        org.junit.Assert.assertNull(zeroTermsQuery94);
        org.junit.Assert.assertNull(boolean95);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder97);
        org.junit.Assert.assertNull(strObjectFloatHashMap98);
        org.junit.Assert.assertNull(queryValidationException99);
    }

    @Test
    public void test11233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11233");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder13.setprefixLength((java.lang.Integer) 10);
        multiMatchQueryBuilder13.settieBreaker((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder13.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder25.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str28 = multiMatchQueryBuilder25.minimumShouldMatch;
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder25.operator(operator29);
        org.elasticsearch.index.query.Operator operator31 = multiMatchQueryBuilder25.getoperator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str28, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(operator31);
    }

    @Test
    public void test11234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11234");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        multiMatchQueryBuilder4.setminimumShouldMatch("");
        java.lang.String str18 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.tieBreaker((float) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.Boolean boolean23 = multiMatchQueryBuilder22.getlenient();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder22.zeroTermsQuery(zeroTermsQuery24);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test11235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11235");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        multiMatchQueryBuilder13.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.prefixLength((int) (short) 100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException29 = multiMatchQueryBuilder24.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder24.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder24.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder24.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = multiMatchQueryBuilder24.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField38 = type37.parseField();
        multiMatchQueryBuilder24.type = type37;
        boolean boolean40 = multiMatchQueryBuilder17.equals((java.lang.Object) multiMatchQueryBuilder24);
        java.lang.Integer int41 = multiMatchQueryBuilder24.slop;
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 52);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(queryValidationException29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(type36);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type37.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(int41);
    }

    @Test
    public void test11236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11236");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        multiMatchQueryBuilder11.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = multiMatchQueryBuilder16.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap32 = multiMatchQueryBuilder31.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder31.lenient(false);
        multiMatchQueryBuilder31.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery39);
        multiMatchQueryBuilder31.tieBreaker = 10.0f;
        java.util.List<java.lang.String> strList43 = multiMatchQueryBuilder31.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder31.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}", (float) 0L);
        java.lang.String[] strArray50 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray50);
        org.elasticsearch.index.query.Operator operator52 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.operator(operator52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder51.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException56 = multiMatchQueryBuilder51.validate();
        java.lang.Integer int57 = multiMatchQueryBuilder51.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery58 = multiMatchQueryBuilder51.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder51.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        multiMatchQueryBuilder51.maxExpansions = 100;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery64 = multiMatchQueryBuilder51.getzeroTermsQuery();
        java.lang.Boolean boolean65 = multiMatchQueryBuilder51.useDisMax;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap66 = multiMatchQueryBuilder51.fieldsBoosts;
        multiMatchQueryBuilder46.setfieldsBoosts(strObjectFloatHashMap66);
        multiMatchQueryBuilder22.fieldsBoosts = strObjectFloatHashMap66;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(zeroTermsQuery17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(strObjectFloatHashMap32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNull(queryValidationException56);
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertNull(zeroTermsQuery58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNull(zeroTermsQuery64);
        org.junit.Assert.assertNull(boolean65);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap66);
    }

    @Test
    public void test11237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11237");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder4.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.tieBreaker(0.0f);
        multiMatchQueryBuilder4.prefixLength = 1;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = multiMatchQueryBuilder4.fieldsBoosts;
        multiMatchQueryBuilder4.minimumShouldMatch = "";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(strObjectFloatHashMap18);
    }

    @Test
    public void test11238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11238");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField11 = type10.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type12 = type10.matchQueryType();
        multiMatchQueryBuilder4.type = type10;
        org.elasticsearch.index.query.QueryValidationException queryValidationException14 = multiMatchQueryBuilder4.validate();
        java.lang.String str15 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder18.getPROTOTYPE();
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException29 = multiMatchQueryBuilder24.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder24.cutoffFrequency((float) (byte) 100);
        java.lang.String str32 = multiMatchQueryBuilder24.getanalyzer();
        java.lang.String str33 = multiMatchQueryBuilder24.fuzzyRewrite;
        java.lang.String[] strArray37 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray37);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.operator(operator39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder38.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException43 = multiMatchQueryBuilder38.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder38.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap46 = multiMatchQueryBuilder45.getfieldsBoosts();
        java.lang.String[] strArray50 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray50);
        org.elasticsearch.index.query.Operator operator52 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.operator(operator52);
        java.lang.String str54 = multiMatchQueryBuilder51.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness55 = multiMatchQueryBuilder51.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder51.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type58 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder51.settype(type58);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder45.type(type58);
        org.elasticsearch.index.search.MatchQuery.Type type61 = type58.matchQueryType();
        multiMatchQueryBuilder24.type = type58;
        multiMatchQueryBuilder19.type = type58;
        org.elasticsearch.index.search.MatchQuery.Type type64 = type58.matchQueryType();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type10.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type12.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNull(queryValidationException14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(queryValidationException29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(queryValidationException43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(strObjectFloatHashMap46);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "multi_match" + "'", str54, "multi_match");
        org.junit.Assert.assertNull(fuzziness55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type58.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertTrue("'" + type61 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type61.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type64 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type64.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test11239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11239");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 10);
        java.lang.Integer int19 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.useDisMax = false;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = multiMatchQueryBuilder4.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(strObjectFloatHashMap22);
    }

    @Test
    public void test11240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11240");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String str16 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery21;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"slop\" : 0,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder24.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test11241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11241");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery10);
        multiMatchQueryBuilder11.maxExpansions = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str16 = multiMatchQueryBuilder15.getminimumShouldMatch();
        java.lang.Object obj17 = multiMatchQueryBuilder15.gettext();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder15.getuseDisMax();
        java.lang.Object obj19 = null;
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        java.lang.Boolean boolean27 = multiMatchQueryBuilder24.getlenient();
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder24.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder24.tieBreaker((float) (-1));
        multiMatchQueryBuilder24.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder24.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.common.ParseField parseField39 = type38.parseField();
        org.elasticsearch.common.ParseField parseField40 = type38.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder37.type(type38);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery42 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.zeroTermsQuery(zeroTermsQuery42);
        java.lang.String[] strArray47 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray47);
        org.elasticsearch.index.query.Operator operator49 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.operator(operator49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder48.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException53 = multiMatchQueryBuilder48.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder48.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder48.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder48.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness60 = multiMatchQueryBuilder48.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder48.slop((int) (short) 0);
        multiMatchQueryBuilder48.setslop((java.lang.Integer) 100);
        java.lang.Boolean boolean65 = multiMatchQueryBuilder48.getuseDisMax();
        java.lang.String str66 = multiMatchQueryBuilder48.fuzzyRewrite;
        java.lang.String[] strArray71 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray71);
        java.lang.String[] strArray77 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray77);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray71, strArray77);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str66, strArray71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder43, strArray71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj19, strArray71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder15, strArray71);
        java.lang.Integer int84 = multiMatchQueryBuilder83.getmaxExpansions();
        java.lang.String str85 = multiMatchQueryBuilder83.getanalyzer();
        java.lang.Integer int86 = multiMatchQueryBuilder83.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(boolean27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(parseField39);
        org.junit.Assert.assertNotNull(parseField40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(queryValidationException53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(fuzziness60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNull(boolean65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNull(int84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNull(int86);
    }

    @Test
    public void test11242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11242");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = multiMatchQueryBuilder4.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.slop(0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
    }

    @Test
    public void test11243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11243");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.getfuzziness();
        org.elasticsearch.index.query.Operator operator13 = null;
        multiMatchQueryBuilder11.setoperator(operator13);
        java.lang.Boolean boolean15 = multiMatchQueryBuilder11.lenient;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.slop((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.cutoffFrequency(1.0f);
        org.elasticsearch.index.query.QueryShardContext queryShardContext20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query21 = multiMatchQueryBuilder19.toQuery(queryShardContext20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test11244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11244");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        java.lang.String str12 = multiMatchQueryBuilder11.toString();
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.String str20 = multiMatchQueryBuilder17.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder17.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.cutoffFrequency((float) '4');
        boolean boolean26 = multiMatchQueryBuilder11.equals((java.lang.Object) multiMatchQueryBuilder23);
        multiMatchQueryBuilder23.maxExpansions = (-1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = null;
        multiMatchQueryBuilder23.setzeroTermsQuery(zeroTermsQuery29);
        java.lang.String str31 = multiMatchQueryBuilder23.rewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap32 = multiMatchQueryBuilder23.getfieldsBoosts();
        org.elasticsearch.common.xcontent.XContentType xContentType33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference34 = multiMatchQueryBuilder23.buildAsBytes(xContentType33);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str12, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(strObjectFloatHashMap32);
    }

    @Test
    public void test11245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11245");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String str16 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.boost(10.0f);
        java.lang.String str24 = multiMatchQueryBuilder23.getNAME();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
    }

    @Test
    public void test11246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11246");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str18 = multiMatchQueryBuilder17.getrewrite();
        java.lang.String str19 = multiMatchQueryBuilder17.getfuzzyRewrite();
        org.elasticsearch.common.io.stream.StreamInput streamInput20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.readFrom(streamInput20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test11247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11247");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder4.minimumShouldMatch;
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 0);
        java.lang.Boolean boolean24 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        multiMatchQueryBuilder4.setzeroTermsQuery(zeroTermsQuery25);
        java.lang.String[] strArray30 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray30);
        org.elasticsearch.index.query.Operator operator32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.operator(operator32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.field("");
        java.lang.String str36 = multiMatchQueryBuilder31.getrewrite();
        java.lang.Object obj37 = multiMatchQueryBuilder31.text;
        float float38 = multiMatchQueryBuilder31.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder31.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float41 = multiMatchQueryBuilder31.gettieBreaker();
        java.lang.String[] strArray45 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray45);
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.operator(operator47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder46.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException51 = multiMatchQueryBuilder46.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder46.cutoffFrequency((float) (byte) 100);
        float float54 = multiMatchQueryBuilder46.boost();
        multiMatchQueryBuilder46.setanalyzer("");
        java.lang.Boolean boolean57 = multiMatchQueryBuilder46.getuseDisMax();
        java.lang.String str58 = multiMatchQueryBuilder46.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder46.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray64 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray64);
        org.elasticsearch.index.query.Operator operator66 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder65.operator(operator66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder65.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder69.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder69.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness74 = multiMatchQueryBuilder69.getfuzziness();
        multiMatchQueryBuilder60.fuzziness = fuzziness74;
        multiMatchQueryBuilder31.setfuzziness(fuzziness74);
        java.lang.String[] strArray81 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray81);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray81);
        java.lang.String[] strArray87 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray87);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray81, strArray87);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) fuzziness74, strArray87);
        multiMatchQueryBuilder4.setfuzziness(fuzziness74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = multiMatchQueryBuilder4.maxExpansions((int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + obj37 + "' != '" + "multi_match" + "'", obj37, "multi_match");
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 1.0f + "'", float38 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(float41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(queryValidationException51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 1.0f + "'", float54 == 1.0f);
        org.junit.Assert.assertNull(boolean57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(fuzziness74);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder93);
    }

    @Test
    public void test11248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11248");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        multiMatchQueryBuilder8.setanalyzer("hi!");
        java.lang.Integer int14 = multiMatchQueryBuilder8.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder8.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"tie_breaker\" : 52.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}", (float) 100);
        multiMatchQueryBuilder21.setcutoffFrequency((java.lang.Float) 10.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test11249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11249");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder25.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder25.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = multiMatchQueryBuilder25.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField39 = type38.parseField();
        multiMatchQueryBuilder25.type = type38;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder20.type(type38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str44 = multiMatchQueryBuilder41.rewrite;
        java.lang.Boolean boolean45 = multiMatchQueryBuilder41.getuseDisMax();
        java.lang.Integer int46 = multiMatchQueryBuilder41.getmaxExpansions();
        java.lang.Integer int47 = multiMatchQueryBuilder41.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(type37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(boolean45);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNull(int47);
    }

    @Test
    public void test11250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11250");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder11.getfieldsBoosts();
        java.lang.String str13 = multiMatchQueryBuilder11.getWriteableName();
        java.lang.Integer int14 = multiMatchQueryBuilder11.slop;
        multiMatchQueryBuilder11.setlenient((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test11251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11251");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder11.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.lenient(false);
        multiMatchQueryBuilder14.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.prefixLength((int) (short) 100);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test11252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11252");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        java.lang.String str12 = multiMatchQueryBuilder11.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder11.maxExpansions = 100;
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        multiMatchQueryBuilder21.setrewrite("");
        java.util.List<java.lang.String> strList26 = multiMatchQueryBuilder21.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField28 = type27.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type29 = type27.matchQueryType();
        multiMatchQueryBuilder21.type = type27;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder11.type(type27);
        java.lang.Object obj32 = multiMatchQueryBuilder11.text;
        java.lang.Integer int33 = multiMatchQueryBuilder11.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder11.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"type\" : \"phrase\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator36 = multiMatchQueryBuilder35.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField28);
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type29.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + "multi_match" + "'", obj32, "multi_match");
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(operator36);
    }

    @Test
    public void test11253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11253");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField11 = type10.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type12 = type10.matchQueryType();
        multiMatchQueryBuilder4.type = type10;
        org.elasticsearch.index.query.QueryValidationException queryValidationException14 = multiMatchQueryBuilder4.validate();
        java.lang.String str15 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder18.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryShardContext queryShardContext22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query23 = multiMatchQueryBuilder21.toFilter(queryShardContext22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type10.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type12.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNull(queryValidationException14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test11254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11254");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder8.setanalyzer("multi_match");
        org.elasticsearch.index.query.QueryValidationException queryValidationException13 = multiMatchQueryBuilder8.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder8.zeroTermsQuery;
        java.lang.String str15 = multiMatchQueryBuilder8.getrewrite();
        multiMatchQueryBuilder8.lenient = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder8.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) 100);
        org.elasticsearch.index.query.Operator operator21 = null;
        multiMatchQueryBuilder8.operator = operator21;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder8.prefixLength(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder8.tieBreaker((float) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.tieBreaker((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type29 = multiMatchQueryBuilder26.gettype();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(queryValidationException13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(type29);
    }

    @Test
    public void test11255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11255");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        float float33 = multiMatchQueryBuilder25.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type35 = type34.matchQueryType();
        multiMatchQueryBuilder25.settype(type34);
        multiMatchQueryBuilder4.type = type34;
        java.lang.String str38 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.String str39 = multiMatchQueryBuilder4.minimumShouldMatch;
        multiMatchQueryBuilder4.slop = 0;
        java.lang.String[] strArray45 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray45);
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.operator(operator47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder46.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException51 = multiMatchQueryBuilder46.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder46.cutoffFrequency((float) (byte) 100);
        float float54 = multiMatchQueryBuilder46.boost();
        multiMatchQueryBuilder46.setanalyzer("");
        java.lang.Boolean boolean57 = multiMatchQueryBuilder46.getuseDisMax();
        java.lang.String str58 = multiMatchQueryBuilder46.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder46.boost((float) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) ' ');
        java.lang.String[] strArray65 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray65);
        org.elasticsearch.index.query.Operator operator67 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder66.operator(operator67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder66.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap71 = multiMatchQueryBuilder70.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery72 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder70.zeroTermsQuery(zeroTermsQuery72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder70.lenient(false);
        multiMatchQueryBuilder70.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery78 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder70.zeroTermsQuery(zeroTermsQuery78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder79.cutoffFrequency((float) 10);
        java.lang.String str82 = multiMatchQueryBuilder79.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder79.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder84);
        java.lang.String str86 = multiMatchQueryBuilder4.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 1.0f + "'", float33 == 1.0f);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type35.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(queryValidationException51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 1.0f + "'", float54 == 1.0f);
        org.junit.Assert.assertNull(boolean57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNull(strObjectFloatHashMap71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str82, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
    }

    @Test
    public void test11256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11256");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.Operator operator10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.operator(operator10);
        org.elasticsearch.index.query.Operator operator12 = null;
        multiMatchQueryBuilder11.operator = operator12;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
    }

    @Test
    public void test11257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11257");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.getPROTOTYPE();
        java.lang.Integer int17 = multiMatchQueryBuilder4.prefixLength;
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        java.lang.Integer int28 = multiMatchQueryBuilder22.slop;
        multiMatchQueryBuilder22.prefixLength = 10;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap31 = null;
        multiMatchQueryBuilder22.setfieldsBoosts(strObjectFloatHashMap31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder22.field("", (float) (byte) 100);
        java.lang.String str36 = multiMatchQueryBuilder35.getminimumShouldMatch();
        org.elasticsearch.index.query.Operator operator37 = multiMatchQueryBuilder35.getoperator();
        boolean boolean38 = multiMatchQueryBuilder4.equals((java.lang.Object) multiMatchQueryBuilder35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.Object obj40 = multiMatchQueryBuilder39.text;
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException50 = multiMatchQueryBuilder45.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder45.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder45.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder45.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type57 = multiMatchQueryBuilder45.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type58 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField59 = type58.parseField();
        multiMatchQueryBuilder45.type = type58;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder39.type(type58);
        org.elasticsearch.common.ParseField parseField62 = type58.parseField();
        org.elasticsearch.common.ParseField parseField63 = type58.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder4.type(type58);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder4.boost((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder4.useDisMax(false);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder69 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params70 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder68.doXContent(xContentBuilder69, params70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(operator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(queryValidationException50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNull(type57);
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type58.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(parseField62);
        org.junit.Assert.assertNotNull(parseField63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(params70);
    }

    @Test
    public void test11258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11258");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.String str1 = multiMatchQueryBuilder0.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery2 = multiMatchQueryBuilder0.zeroTermsQuery;
        java.lang.String[] strArray6 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray6);
        org.elasticsearch.index.query.Operator operator8 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder7.operator(operator8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder7.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException12 = multiMatchQueryBuilder7.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder7.cutoffFrequency((float) (byte) 100);
        java.lang.String str15 = multiMatchQueryBuilder7.getanalyzer();
        multiMatchQueryBuilder7.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str18 = multiMatchQueryBuilder7.fuzzyRewrite;
        java.lang.Integer int19 = multiMatchQueryBuilder7.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder7.boost((float) (short) 1);
        java.lang.String[] strArray25 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray25);
        org.elasticsearch.index.query.Operator operator27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.operator(operator27);
        java.lang.Boolean boolean29 = multiMatchQueryBuilder26.getlenient();
        multiMatchQueryBuilder26.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder26.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness34 = multiMatchQueryBuilder33.fuzziness;
        multiMatchQueryBuilder33.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder47.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness52 = multiMatchQueryBuilder47.getfuzziness();
        multiMatchQueryBuilder33.fuzziness = fuzziness52;
        multiMatchQueryBuilder21.setfuzziness(fuzziness52);
        multiMatchQueryBuilder0.fuzziness = fuzziness52;
        org.elasticsearch.index.query.Operator operator56 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder0.operator(operator56);
        org.elasticsearch.index.query.Operator operator58 = null;
        multiMatchQueryBuilder0.operator = operator58;
        java.lang.String[] strArray63 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray63);
        org.elasticsearch.index.query.Operator operator65 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.operator(operator65);
        java.lang.String str67 = multiMatchQueryBuilder66.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type68 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type69 = type68.matchQueryType();
        float float70 = type68.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder66.type(type68);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder71.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}", (float) 100L);
        java.lang.Boolean boolean75 = multiMatchQueryBuilder74.getuseDisMax();
        org.elasticsearch.common.unit.Fuzziness fuzziness76 = multiMatchQueryBuilder74.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder74.getPROTOTYPE();
        org.elasticsearch.common.unit.Fuzziness fuzziness78 = multiMatchQueryBuilder77.getfuzziness();
        multiMatchQueryBuilder0.fuzziness = fuzziness78;
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str1, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(zeroTermsQuery2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(queryValidationException12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(boolean29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(fuzziness34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(fuzziness52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "multi_match" + "'", str67, "multi_match");
        org.junit.Assert.assertTrue("'" + type68 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type68.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type69 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type69.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + 0.0f + "'", float70 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNull(boolean75);
        org.junit.Assert.assertNull(fuzziness76);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(fuzziness78);
    }

    @Test
    public void test11259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11259");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.Object obj1 = multiMatchQueryBuilder0.text;
        java.util.List<java.lang.String> strList2 = multiMatchQueryBuilder0.fields;
        multiMatchQueryBuilder0.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"max_expansions\" : -1,\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder0.boost((float) 1L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder0);
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
    }

    @Test
    public void test11260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11260");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.getPROTOTYPE();
        multiMatchQueryBuilder14.settieBreaker((java.lang.Float) 0.0f);
        multiMatchQueryBuilder14.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.tieBreaker((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.maxExpansions((int) (byte) -1);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder20.operator(operator25);
        multiMatchQueryBuilder26.setslop((java.lang.Integer) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : -1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder26.tieBreaker = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder26.getPROTOTYPE();
        org.elasticsearch.index.query.Operator operator34 = multiMatchQueryBuilder26.operator;
        java.lang.String str35 = multiMatchQueryBuilder26.getminimumShouldMatch();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(operator34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str35, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test11261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11261");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.boost((float) '4');
        java.util.List<java.lang.String> strList21 = multiMatchQueryBuilder4.fields;
        java.lang.String str22 = multiMatchQueryBuilder4.getNAME();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder4.tieBreaker((float) 0);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder4.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder26.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"maxExpansions\" : 52,\n    \"useDisMax\" : false,\n    \"boost\" : 1.0\n  }\n}", (float) 35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder26.prefixLength(10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test11262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11262");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) 0);
        multiMatchQueryBuilder4.lenient = false;
        multiMatchQueryBuilder4.prefixLength = 1;
        java.lang.String[] strArray28 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray28);
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.operator(operator30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder29.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException34 = multiMatchQueryBuilder29.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder29.cutoffFrequency((float) (byte) 100);
        java.lang.String str37 = multiMatchQueryBuilder29.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder29.zeroTermsQuery(zeroTermsQuery38);
        multiMatchQueryBuilder29.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder29.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder29.tieBreaker((float) 100);
        multiMatchQueryBuilder29.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String str48 = multiMatchQueryBuilder29.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) str48);
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder4.useDisMax(false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(queryValidationException34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str48, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
    }

    @Test
    public void test11263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11263");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        org.elasticsearch.index.query.QueryValidationException queryValidationException14 = multiMatchQueryBuilder13.validate();
        java.lang.String str15 = multiMatchQueryBuilder13.getanalyzer();
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder13.fields;
        multiMatchQueryBuilder13.setlenient((java.lang.Boolean) false);
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = multiMatchQueryBuilder13.getfuzziness();
        java.lang.String str20 = multiMatchQueryBuilder13.getWriteableName();
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder13.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 52,\n    \"rewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 100,\\n    \\\"rewrite\\\" : \\\"multi_match\\\",\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 10.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(queryValidationException14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNull(fuzziness19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test11264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11264");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        java.lang.Integer int21 = multiMatchQueryBuilder4.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        multiMatchQueryBuilder4.setzeroTermsQuery(zeroTermsQuery24);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test11265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11265");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int16 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.QueryValidationException queryValidationException19 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.Operator operator20 = multiMatchQueryBuilder4.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.field("", (float) (byte) 100);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(queryValidationException19);
        org.junit.Assert.assertNull(operator20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test11266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11266");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setrewrite("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap15;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.lenient(false);
        java.lang.String str28 = multiMatchQueryBuilder27.getWriteableName();
        multiMatchQueryBuilder27.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str31 = multiMatchQueryBuilder27.getWriteableName();
        java.lang.String[] strArray35 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray35);
        org.elasticsearch.index.query.Operator operator37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.operator(operator37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder36.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap41 = multiMatchQueryBuilder40.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery42 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder40.zeroTermsQuery(zeroTermsQuery42);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder40.lenient(false);
        java.lang.Object obj46 = multiMatchQueryBuilder45.gettext();
        java.lang.Integer int47 = multiMatchQueryBuilder45.getslop();
        multiMatchQueryBuilder45.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder45.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException52 = multiMatchQueryBuilder51.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder51.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder51.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type57 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        multiMatchQueryBuilder56.type = type57;
        multiMatchQueryBuilder27.type = type57;
        multiMatchQueryBuilder18.settype(type57);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "multi_match" + "'", str28, "multi_match");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "multi_match" + "'", str31, "multi_match");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(strObjectFloatHashMap41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertEquals("'" + obj46 + "' != '" + "multi_match" + "'", obj46, "multi_match");
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(queryValidationException52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertTrue("'" + type57 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type57.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
    }

    @Test
    public void test11267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11267");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str20 = multiMatchQueryBuilder19.fuzzyRewrite;
        java.lang.String str21 = multiMatchQueryBuilder19.fuzzyRewrite;
        java.lang.String str22 = multiMatchQueryBuilder19.analyzer;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap23 = multiMatchQueryBuilder19.getfieldsBoosts();
        java.lang.Float float24 = multiMatchQueryBuilder19.getcutoffFrequency();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder19.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder19.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : 10,\n    \"maxExpansions\" : -1,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput28 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder27.writeTo(streamOutput28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str22, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(strObjectFloatHashMap23);
        org.junit.Assert.assertNull(float24);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test11268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11268");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.common.unit.Fuzziness fuzziness10 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness10;
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.tieBreaker((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder14.setcutoffFrequency((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder14.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder14.maxExpansions = 10;
        multiMatchQueryBuilder14.setmaxExpansions((java.lang.Integer) 32);
        java.lang.Integer int27 = multiMatchQueryBuilder14.prefixLength;
        java.lang.String[] strArray31 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray31);
        org.elasticsearch.index.query.Operator operator33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.operator(operator33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException37 = multiMatchQueryBuilder32.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder32.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery40 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.zeroTermsQuery(zeroTermsQuery40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder39.maxExpansions((-1));
        multiMatchQueryBuilder39.maxExpansions = 100;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery46 = null;
        multiMatchQueryBuilder39.zeroTermsQuery = zeroTermsQuery46;
        java.lang.String[] strArray51 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray51);
        org.elasticsearch.index.query.Operator operator53 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.operator(operator53);
        java.lang.String str55 = multiMatchQueryBuilder52.getWriteableName();
        java.lang.Boolean boolean56 = multiMatchQueryBuilder52.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder52.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder52.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str61 = multiMatchQueryBuilder52.toString();
        multiMatchQueryBuilder52.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray67 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray67);
        org.elasticsearch.index.query.Operator operator69 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder68.operator(operator69);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder68.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap73 = multiMatchQueryBuilder72.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery74 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder72.zeroTermsQuery(zeroTermsQuery74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder72.lenient(false);
        multiMatchQueryBuilder72.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery80 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder72.zeroTermsQuery(zeroTermsQuery80);
        multiMatchQueryBuilder72.tieBreaker = 10.0f;
        java.util.List<java.lang.String> strList84 = multiMatchQueryBuilder72.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder52.fuzziness((java.lang.Object) multiMatchQueryBuilder72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder52.cutoffFrequency((float) (-1L));
        org.elasticsearch.common.unit.Fuzziness fuzziness88 = multiMatchQueryBuilder87.getfuzziness();
        multiMatchQueryBuilder39.fuzziness = fuzziness88;
        multiMatchQueryBuilder14.fuzziness = fuzziness88;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(queryValidationException37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "multi_match" + "'", str55, "multi_match");
        org.junit.Assert.assertNull(boolean56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str61, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNull(strObjectFloatHashMap73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertNotNull(fuzziness88);
    }

    @Test
    public void test11269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11269");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        java.lang.Float float13 = multiMatchQueryBuilder4.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
    }

    @Test
    public void test11270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11270");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        java.lang.String str10 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder4.gettype();
        java.lang.String str12 = multiMatchQueryBuilder4.getminimumShouldMatch();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test11271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11271");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str16 = multiMatchQueryBuilder4.minimumShouldMatch;
        multiMatchQueryBuilder4.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzyRewrite\\\" : \\\"hi!\\\",\\n    \\\"tieBreaker\\\" : 100.0,\\n    \\\"cutoffFrequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 0.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test11272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11272");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        float float7 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery8 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery8);
        java.lang.Integer int10 = multiMatchQueryBuilder9.getslop();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder9.setzeroTermsQuery(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 1.0f + "'", float7 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test11273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11273");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        multiMatchQueryBuilder4.setminimumShouldMatch("");
        java.lang.String str18 = multiMatchQueryBuilder4.rewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.useDisMax(true);
        java.lang.Object obj21 = multiMatchQueryBuilder20.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = multiMatchQueryBuilder20.gettype();
        java.lang.String str23 = multiMatchQueryBuilder20.getminimumShouldMatch();
        org.elasticsearch.index.query.QueryShardContext queryShardContext24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query25 = multiMatchQueryBuilder20.toQuery(queryShardContext24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + "multi_match" + "'", obj21, "multi_match");
        org.junit.Assert.assertNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test11274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11274");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"max_expansions\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test11275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11275");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.Operator operator10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.operator(operator10);
        org.elasticsearch.index.query.Operator operator12 = null;
        multiMatchQueryBuilder4.setoperator(operator12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type14 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField15 = type14.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type16 = type14.matchQueryType();
        org.elasticsearch.common.ParseField parseField17 = type14.parseField();
        org.elasticsearch.common.ParseField parseField18 = type14.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type19 = type14.matchQueryType();
        multiMatchQueryBuilder4.settype(type14);
        org.elasticsearch.index.query.Operator operator21 = null;
        multiMatchQueryBuilder4.operator = operator21;
        java.lang.Class<?> wildcardClass23 = multiMatchQueryBuilder4.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type14.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField15);
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type16.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField17);
        org.junit.Assert.assertNotNull(parseField18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type19.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test11276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11276");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder0.boost((float) 1);
        java.lang.String[] strArray6 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray6);
        org.elasticsearch.index.query.Operator operator8 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder7.operator(operator8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder7.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException12 = multiMatchQueryBuilder7.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder7.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder7.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder7.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = multiMatchQueryBuilder7.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder7.slop((int) (short) 0);
        multiMatchQueryBuilder7.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException33 = multiMatchQueryBuilder28.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder28.cutoffFrequency((float) (byte) 100);
        float float36 = multiMatchQueryBuilder28.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type38 = type37.matchQueryType();
        multiMatchQueryBuilder28.settype(type37);
        multiMatchQueryBuilder7.type = type37;
        java.lang.String str41 = multiMatchQueryBuilder7.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder7.cutoffFrequency((float) 100L);
        java.lang.String[] strArray47 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray47);
        org.elasticsearch.index.query.Operator operator49 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.operator(operator49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder48.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException53 = multiMatchQueryBuilder48.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder48.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder48.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder48.fuzzyRewrite("hi!");
        java.lang.String[] strArray63 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray63);
        org.elasticsearch.index.query.Operator operator65 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.operator(operator65);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder64.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder68.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder68.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness73 = multiMatchQueryBuilder68.getfuzziness();
        multiMatchQueryBuilder48.setfuzziness(fuzziness73);
        multiMatchQueryBuilder7.fuzziness = fuzziness73;
        multiMatchQueryBuilder0.setfuzziness(fuzziness73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder0.slop((int) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder78.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder78.useDisMax(false);
        multiMatchQueryBuilder82.setslop((java.lang.Integer) 32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder82.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\" ],\\n    \\\"boost\\\" : 0.0,\\n    \\\"Name\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : \\\\\\\"multi_match\\\\\\\",\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"multi_match\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"minimum_should_match\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"lenient\\\\\\\" : true,\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\"\\n  }\\n}\",\n    \"prefix_length\" : 0,\n    \"use_dis_max\" : true,\n    \"boost\" : 1.0\n  }\n}", 1.0f);
        multiMatchQueryBuilder82.settieBreaker((java.lang.Float) 10.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder0);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(queryValidationException12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(fuzziness19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(queryValidationException33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 1.0f + "'", float36 == 1.0f);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type37.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type38.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(queryValidationException53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(fuzziness73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
    }

    @Test
    public void test11277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11277");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.maxExpansions((-1));
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder15.getfuzziness();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.zeroTermsQuery(zeroTermsQuery17);
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException28 = multiMatchQueryBuilder23.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.cutoffFrequency((float) (byte) 100);
        float float31 = multiMatchQueryBuilder23.boost();
        multiMatchQueryBuilder23.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder23.rewrite("multi_match");
        java.lang.String str36 = multiMatchQueryBuilder35.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap37 = null;
        multiMatchQueryBuilder35.fieldsBoosts = strObjectFloatHashMap37;
        java.lang.Boolean boolean39 = multiMatchQueryBuilder35.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder35.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"slop\" : 10,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}", (float) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder18.type((java.lang.Object) (-1L));
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [-1]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(queryValidationException28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 1.0f + "'", float31 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(boolean39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
    }

    @Test
    public void test11278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11278");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.useDisMax(false);
        java.lang.Integer int18 = multiMatchQueryBuilder15.getprefixLength();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = multiMatchQueryBuilder15.getfieldsBoosts();
        java.lang.Integer int20 = multiMatchQueryBuilder15.getmaxExpansions();
        java.util.List<java.lang.String> strList21 = multiMatchQueryBuilder15.getfields();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNull(strObjectFloatHashMap19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test11279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11279");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.getPROTOTYPE();
        multiMatchQueryBuilder22.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test11280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11280");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.Boolean boolean17 = multiMatchQueryBuilder4.getuseDisMax();
        org.elasticsearch.index.query.Operator operator18 = null;
        multiMatchQueryBuilder4.operator = operator18;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        multiMatchQueryBuilder4.setzeroTermsQuery(zeroTermsQuery20);
        org.elasticsearch.common.unit.Fuzziness fuzziness22 = multiMatchQueryBuilder4.getfuzziness();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNull(fuzziness22);
    }

    @Test
    public void test11281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11281");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder4.lenient(false);
        java.lang.String str10 = multiMatchQueryBuilder9.getNAME();
        org.elasticsearch.index.query.Operator operator11 = multiMatchQueryBuilder9.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "multi_match" + "'", str10, "multi_match");
        org.junit.Assert.assertNull(operator11);
    }

    @Test
    public void test11282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11282");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        multiMatchQueryBuilder10.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}";
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException22 = multiMatchQueryBuilder17.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.cutoffFrequency((float) (byte) 100);
        java.lang.String str25 = multiMatchQueryBuilder17.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder17.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder17.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        float float31 = type30.tieBreaker();
        multiMatchQueryBuilder17.settype(type30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder10.type(type30);
        java.lang.String str34 = multiMatchQueryBuilder10.getrewrite();
        multiMatchQueryBuilder10.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str37 = multiMatchQueryBuilder10.getrewrite();
        java.lang.String str38 = multiMatchQueryBuilder10.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(queryValidationException22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type30.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 1.0f + "'", float31 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
    }

    @Test
    public void test11283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11283");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField11 = type10.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type12 = type10.matchQueryType();
        multiMatchQueryBuilder4.type = type10;
        org.elasticsearch.index.query.QueryValidationException queryValidationException14 = multiMatchQueryBuilder4.validate();
        java.lang.String str15 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder18.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray25 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray25);
        org.elasticsearch.index.query.Operator operator27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.operator(operator27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException31 = multiMatchQueryBuilder26.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder26.cutoffFrequency((float) (byte) 100);
        java.lang.String str34 = multiMatchQueryBuilder26.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder26.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness37 = multiMatchQueryBuilder26.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder26.getPROTOTYPE();
        java.lang.Integer int39 = multiMatchQueryBuilder26.slop;
        java.lang.String[] strArray43 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray43);
        org.elasticsearch.index.query.Operator operator45 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.operator(operator45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder44.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException49 = multiMatchQueryBuilder44.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder44.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder44.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder44.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness56 = multiMatchQueryBuilder44.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder44.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder44.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        java.util.List<java.lang.String> strList61 = multiMatchQueryBuilder60.getfields();
        java.lang.String[] strArray65 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray65);
        org.elasticsearch.index.query.Operator operator67 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder66.operator(operator67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder66.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException71 = multiMatchQueryBuilder66.validate();
        java.lang.Integer int72 = multiMatchQueryBuilder66.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery73 = multiMatchQueryBuilder66.getzeroTermsQuery();
        org.elasticsearch.index.query.QueryValidationException queryValidationException74 = multiMatchQueryBuilder66.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type75 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type76 = type75.matchQueryType();
        multiMatchQueryBuilder66.settype(type75);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder60.type(type75);
        org.elasticsearch.index.search.MatchQuery.Type type79 = type75.matchQueryType();
        multiMatchQueryBuilder26.type = type75;
        multiMatchQueryBuilder21.settype(type75);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type10.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type12.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNull(queryValidationException14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(queryValidationException31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(fuzziness37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNull(queryValidationException49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNull(fuzziness56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNull(queryValidationException71);
        org.junit.Assert.assertNull(int72);
        org.junit.Assert.assertNull(zeroTermsQuery73);
        org.junit.Assert.assertNull(queryValidationException74);
        org.junit.Assert.assertTrue("'" + type75 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type75.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type76 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type76.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertTrue("'" + type79 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type79.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test11284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11284");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        java.lang.String str12 = multiMatchQueryBuilder11.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str15 = multiMatchQueryBuilder11.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) 97);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery19);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "multi_match" + "'", str15, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test11285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11285");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.String str1 = multiMatchQueryBuilder0.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery2 = multiMatchQueryBuilder0.zeroTermsQuery;
        multiMatchQueryBuilder0.setuseDisMax((java.lang.Boolean) false);
        java.lang.Boolean boolean5 = multiMatchQueryBuilder0.getuseDisMax();
        java.lang.Boolean boolean6 = multiMatchQueryBuilder0.getuseDisMax();
        org.elasticsearch.index.query.Operator operator7 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder0.operator(operator7);
        java.lang.String str9 = multiMatchQueryBuilder0.fuzzyRewrite;
        java.util.List<java.lang.String> strList10 = multiMatchQueryBuilder0.fields;
        multiMatchQueryBuilder0.cutoffFrequency = 35.0f;
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str1, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(zeroTermsQuery2);
        org.junit.Assert.assertEquals("'" + boolean5 + "' != '" + false + "'", boolean5, false);
        org.junit.Assert.assertEquals("'" + boolean6 + "' != '" + false + "'", boolean6, false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"boost\" : 1.0\n  }\n}" + "'", str9, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test11286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11286");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Object obj10 = multiMatchQueryBuilder4.text;
        float float11 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float14 = multiMatchQueryBuilder4.gettieBreaker();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException24 = multiMatchQueryBuilder19.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.cutoffFrequency((float) (byte) 100);
        float float27 = multiMatchQueryBuilder19.boost();
        multiMatchQueryBuilder19.setanalyzer("");
        java.lang.Boolean boolean30 = multiMatchQueryBuilder19.getuseDisMax();
        java.lang.String str31 = multiMatchQueryBuilder19.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder19.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray37 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray37);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.operator(operator39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder38.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder42.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness47 = multiMatchQueryBuilder42.getfuzziness();
        multiMatchQueryBuilder33.fuzziness = fuzziness47;
        multiMatchQueryBuilder4.setfuzziness(fuzziness47);
        multiMatchQueryBuilder4.maxExpansions = 10;
        java.lang.Integer int52 = multiMatchQueryBuilder4.prefixLength;
        org.elasticsearch.index.query.Operator operator53 = null;
        multiMatchQueryBuilder4.operator = operator53;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "multi_match" + "'", obj10, "multi_match");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 1.0f + "'", float11 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(queryValidationException24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(fuzziness47);
        org.junit.Assert.assertNull(int52);
    }

    @Test
    public void test11287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11287");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        multiMatchQueryBuilder4.slop = 10;
        java.lang.String str15 = multiMatchQueryBuilder4.getrewrite();
        java.lang.String str16 = multiMatchQueryBuilder4.rewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test11288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11288");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder8.type = type18;
        java.lang.Integer int20 = multiMatchQueryBuilder8.getslop();
        java.lang.Integer int21 = multiMatchQueryBuilder8.getprefixLength();
        java.lang.Integer int22 = multiMatchQueryBuilder8.slop;
        multiMatchQueryBuilder8.rewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.common.unit.Fuzziness fuzziness25 = multiMatchQueryBuilder8.getfuzziness();
        java.lang.Float float26 = multiMatchQueryBuilder8.cutoffFrequency;
        java.lang.Boolean boolean27 = multiMatchQueryBuilder8.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(fuzziness25);
        org.junit.Assert.assertNull(float26);
        org.junit.Assert.assertNull(boolean27);
    }

    @Test
    public void test11289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11289");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        multiMatchQueryBuilder4.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException29 = multiMatchQueryBuilder24.validate();
        java.lang.Integer int30 = multiMatchQueryBuilder24.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = multiMatchQueryBuilder24.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder24.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        float float35 = multiMatchQueryBuilder34.boost();
        multiMatchQueryBuilder34.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}";
        boolean boolean38 = multiMatchQueryBuilder4.equals((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.slop = 35;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(queryValidationException29);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNull(zeroTermsQuery31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 1.0f + "'", float35 == 1.0f);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test11290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11290");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        java.lang.Float float12 = multiMatchQueryBuilder11.cutoffFrequency;
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder17.getlenient();
        multiMatchQueryBuilder17.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.cutoffFrequency(0.0f);
        java.lang.String str25 = multiMatchQueryBuilder24.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder24.maxExpansions = 100;
        java.lang.String[] strArray33 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray33);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        multiMatchQueryBuilder34.setrewrite("");
        java.util.List<java.lang.String> strList39 = multiMatchQueryBuilder34.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type40 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField41 = type40.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type42 = type40.matchQueryType();
        multiMatchQueryBuilder34.type = type40;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder24.type(type40);
        org.elasticsearch.common.ParseField parseField45 = type40.parseField();
        org.elasticsearch.common.ParseField parseField46 = type40.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder11.type(type40);
        multiMatchQueryBuilder47.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder47.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.Object obj52 = multiMatchQueryBuilder51.gettext();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type40.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField41);
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type42.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(parseField45);
        org.junit.Assert.assertNotNull(parseField46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertEquals("'" + obj52 + "' != '" + "multi_match" + "'", obj52, "multi_match");
    }

    @Test
    public void test11291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11291");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.tieBreaker((float) (short) 0);
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) true);
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        multiMatchQueryBuilder10.slop = 10;
        java.lang.Object obj16 = multiMatchQueryBuilder10.gettext();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "multi_match" + "'", obj16, "multi_match");
    }

    @Test
    public void test11292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11292");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        multiMatchQueryBuilder13.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.prefixLength((int) (short) 100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException29 = multiMatchQueryBuilder24.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder24.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder24.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder24.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = multiMatchQueryBuilder24.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField38 = type37.parseField();
        multiMatchQueryBuilder24.type = type37;
        boolean boolean40 = multiMatchQueryBuilder17.equals((java.lang.Object) multiMatchQueryBuilder24);
        java.lang.Integer int41 = multiMatchQueryBuilder24.prefixLength;
        java.lang.Integer int42 = multiMatchQueryBuilder24.prefixLength;
        java.lang.String str43 = multiMatchQueryBuilder24.getanalyzer();
        multiMatchQueryBuilder24.tieBreaker = 32.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(queryValidationException29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(type36);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type37.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test11293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11293");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.prefixLength((int) (byte) 10);
        java.lang.String[] strArray17 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray17);
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.operator(operator19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap23 = multiMatchQueryBuilder22.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder22.zeroTermsQuery(zeroTermsQuery24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder22.useDisMax(false);
        java.lang.Object obj28 = multiMatchQueryBuilder27.text;
        java.lang.String[] strArray32 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray32);
        org.elasticsearch.index.query.Operator operator34 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.operator(operator34);
        java.lang.Boolean boolean36 = multiMatchQueryBuilder33.getlenient();
        multiMatchQueryBuilder33.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type39 = multiMatchQueryBuilder33.gettype();
        multiMatchQueryBuilder33.setslop((java.lang.Integer) (-1));
        java.lang.String[] strArray45 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray45);
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.operator(operator47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder46.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException51 = multiMatchQueryBuilder46.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder46.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder46.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder46.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness58 = multiMatchQueryBuilder46.getfuzziness();
        java.lang.Boolean boolean59 = multiMatchQueryBuilder46.getuseDisMax();
        org.elasticsearch.index.query.Operator operator60 = null;
        multiMatchQueryBuilder46.operator = operator60;
        java.lang.String[] strArray65 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray65);
        org.elasticsearch.index.query.Operator operator67 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder66.operator(operator67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder66.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException71 = multiMatchQueryBuilder66.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder66.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder66.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder66.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type78 = multiMatchQueryBuilder66.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type79 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField80 = type79.parseField();
        multiMatchQueryBuilder66.type = type79;
        multiMatchQueryBuilder46.settype(type79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder33.type(type79);
        multiMatchQueryBuilder27.type = type79;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder4.type(type79);
        java.lang.String str86 = multiMatchQueryBuilder4.rewrite;
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = multiMatchQueryBuilder4.tieBreaker((float) 'a');
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap91 = multiMatchQueryBuilder90.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(strObjectFloatHashMap23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertEquals("'" + obj28 + "' != '" + "multi_match" + "'", obj28, "multi_match");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(boolean36);
        org.junit.Assert.assertNull(type39);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(queryValidationException51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNull(fuzziness58);
        org.junit.Assert.assertNull(boolean59);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNull(queryValidationException71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNull(type78);
        org.junit.Assert.assertTrue("'" + type79 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type79.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder90);
        org.junit.Assert.assertNull(strObjectFloatHashMap91);
    }

    @Test
    public void test11294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11294");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder13.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder13.slop(0);
        org.elasticsearch.index.query.QueryShardContext queryShardContext23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query24 = multiMatchQueryBuilder13.toQuery(queryShardContext23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test11295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11295");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery19);
        multiMatchQueryBuilder20.useDisMax = true;
        multiMatchQueryBuilder20.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator25 = multiMatchQueryBuilder20.operator;
        multiMatchQueryBuilder20.setmaxExpansions((java.lang.Integer) 35);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(operator25);
    }

    @Test
    public void test11296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11296");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder21.settieBreaker((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        multiMatchQueryBuilder21.setzeroTermsQuery(zeroTermsQuery24);
        java.util.List<java.lang.String> strList26 = multiMatchQueryBuilder21.fields;
        java.lang.Object obj27 = multiMatchQueryBuilder21.text;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = multiMatchQueryBuilder21.getzeroTermsQuery();
        java.lang.Boolean boolean29 = multiMatchQueryBuilder21.useDisMax;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + "multi_match" + "'", obj27, "multi_match");
        org.junit.Assert.assertNull(zeroTermsQuery28);
        org.junit.Assert.assertNull(boolean29);
    }

    @Test
    public void test11297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11297");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.queryName("");
        java.util.List<java.lang.String> strList18 = multiMatchQueryBuilder4.fields;
        float float19 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean22 = multiMatchQueryBuilder21.lenient;
        org.elasticsearch.index.query.QueryValidationException queryValidationException23 = multiMatchQueryBuilder21.validate();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 1.0f + "'", float19 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertNull(queryValidationException23);
    }

    @Test
    public void test11298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11298");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Integer int10 = multiMatchQueryBuilder4.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.cutoffFrequency((float) 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
    }

    @Test
    public void test11299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11299");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.maxExpansions((int) (short) 10);
        org.elasticsearch.index.query.Operator operator13 = multiMatchQueryBuilder12.getoperator();
        java.lang.Integer int14 = multiMatchQueryBuilder12.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder12.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzziness\" : \"10\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}", (float) 10L);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(operator13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test11300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11300");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.prefixLength((-1));
        multiMatchQueryBuilder23.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}";
        org.elasticsearch.index.query.Operator operator26 = null;
        multiMatchQueryBuilder23.operator = operator26;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}", (-1.0f));
        java.lang.String str31 = multiMatchQueryBuilder30.rewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test11301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11301");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder11.getfieldsBoosts();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder11.fieldsBoosts = strObjectFloatHashMap13;
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder11.getfuzziness();
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.operator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = multiMatchQueryBuilder11.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder11.slop((int) ' ');
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNull(fuzziness15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(type19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test11302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11302");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder25.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder25.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = multiMatchQueryBuilder25.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField39 = type38.parseField();
        multiMatchQueryBuilder25.type = type38;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder20.type(type38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder20.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str44 = multiMatchQueryBuilder43.getName();
        java.lang.Object obj45 = null;
        boolean boolean46 = multiMatchQueryBuilder43.equals(obj45);
        multiMatchQueryBuilder43.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(type37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "multi_match" + "'", str44, "multi_match");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test11303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11303");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        java.lang.String str12 = multiMatchQueryBuilder11.minimumShouldMatch;
        java.lang.String str13 = multiMatchQueryBuilder11.fuzzyRewrite;
        java.lang.String str14 = multiMatchQueryBuilder11.getfuzzyRewrite();
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder11.fuzziness;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(fuzziness15);
    }

    @Test
    public void test11304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11304");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.slop((int) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder8.zeroTermsQuery;
        java.lang.String[] strArray15 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray15);
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException21 = multiMatchQueryBuilder16.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap24 = multiMatchQueryBuilder23.getfieldsBoosts();
        java.lang.String[] strArray28 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray28);
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.operator(operator30);
        java.lang.String str32 = multiMatchQueryBuilder29.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness33 = multiMatchQueryBuilder29.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder29.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder29.settype(type36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder23.type(type36);
        org.elasticsearch.index.search.MatchQuery.Type type39 = type36.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type40 = type36.matchQueryType();
        float float41 = type36.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type42 = type36.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder8.type(type36);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(queryValidationException21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(strObjectFloatHashMap24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "multi_match" + "'", str32, "multi_match");
        org.junit.Assert.assertNull(fuzziness33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type39.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type40.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 1.0f + "'", float41 == 1.0f);
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type42.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
    }

    @Test
    public void test11305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11305");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String str16 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = null;
        multiMatchQueryBuilder18.fieldsBoosts = strObjectFloatHashMap19;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        multiMatchQueryBuilder18.zeroTermsQuery = zeroTermsQuery21;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test11306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11306");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.gettype();
        multiMatchQueryBuilder10.tieBreaker = 1.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery14);
        org.elasticsearch.index.query.Operator operator16 = multiMatchQueryBuilder10.operator;
        java.lang.String str17 = multiMatchQueryBuilder10.toString();
        org.elasticsearch.index.query.QueryShardContext queryShardContext18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query19 = multiMatchQueryBuilder10.toQuery(queryShardContext18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 1.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str17, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test11307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11307");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str16 = multiMatchQueryBuilder4.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.tieBreaker((float) (short) 10);
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        java.lang.Boolean boolean26 = multiMatchQueryBuilder23.getlenient();
        multiMatchQueryBuilder23.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness31 = multiMatchQueryBuilder30.fuzziness;
        java.lang.Integer int32 = multiMatchQueryBuilder30.slop;
        multiMatchQueryBuilder30.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder30.prefixLength((int) (short) 1);
        java.lang.String str37 = multiMatchQueryBuilder36.getminimumShouldMatch();
        java.lang.String str38 = multiMatchQueryBuilder36.getrewrite();
        java.lang.String str39 = multiMatchQueryBuilder36.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder36.boost((float) 0);
        boolean boolean42 = multiMatchQueryBuilder18.equals((java.lang.Object) multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(fuzziness31);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test11308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11308");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type8 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type9 = type8.matchQueryType();
        float float10 = type8.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = multiMatchQueryBuilder11.zeroTermsQuery;
        java.lang.Boolean boolean13 = multiMatchQueryBuilder11.useDisMax;
        float float14 = multiMatchQueryBuilder11.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.prefixLength((int) (short) -1);
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        multiMatchQueryBuilder21.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder21.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder21.maxExpansions((int) (short) 10);
        java.lang.Object obj30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder21.type(obj30);
        boolean boolean32 = multiMatchQueryBuilder16.equals((java.lang.Object) multiMatchQueryBuilder21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder16.getPROTOTYPE();
        java.util.List<java.lang.String> strList34 = multiMatchQueryBuilder33.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type8.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type9.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(zeroTermsQuery12);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strList34);
    }

    @Test
    public void test11309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11309");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str16 = multiMatchQueryBuilder15.getNAME();
        multiMatchQueryBuilder15.prefixLength = (-1);
        org.elasticsearch.index.query.Operator operator19 = multiMatchQueryBuilder15.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "multi_match" + "'", str16, "multi_match");
        org.junit.Assert.assertNull(operator19);
    }

    @Test
    public void test11310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11310");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        java.lang.String str19 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap29 = multiMatchQueryBuilder28.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.zeroTermsQuery(zeroTermsQuery30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder28.lenient(false);
        multiMatchQueryBuilder28.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder28.zeroTermsQuery(zeroTermsQuery36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type40 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder37.settype(type40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) type40);
        java.lang.String str43 = multiMatchQueryBuilder42.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder42.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.slop(52);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(strObjectFloatHashMap29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type40.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
    }

    @Test
    public void test11311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11311");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.getPROTOTYPE();
        multiMatchQueryBuilder14.settieBreaker((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = multiMatchQueryBuilder14.zeroTermsQuery;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = multiMatchQueryBuilder14.getzeroTermsQuery();
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        java.lang.String str26 = multiMatchQueryBuilder25.getName();
        multiMatchQueryBuilder25.prefixLength = 10;
        java.lang.String[] strArray32 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray32);
        org.elasticsearch.index.query.Operator operator34 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.operator(operator34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder33.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException38 = multiMatchQueryBuilder33.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder33.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder33.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder33.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness45 = multiMatchQueryBuilder33.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder33.slop((int) (short) 0);
        multiMatchQueryBuilder33.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray53 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray53);
        org.elasticsearch.index.query.Operator operator55 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.operator(operator55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder54.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException59 = multiMatchQueryBuilder54.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder54.cutoffFrequency((float) (byte) 100);
        float float62 = multiMatchQueryBuilder54.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type63 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type64 = type63.matchQueryType();
        multiMatchQueryBuilder54.settype(type63);
        multiMatchQueryBuilder33.type = type63;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder25.fuzziness((java.lang.Object) type63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder14.type(type63);
        multiMatchQueryBuilder14.tieBreaker = 0.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery71 = multiMatchQueryBuilder14.getzeroTermsQuery();
        multiMatchQueryBuilder14.maxExpansions = 52;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(zeroTermsQuery17);
        org.junit.Assert.assertNull(zeroTermsQuery18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "multi_match" + "'", str26, "multi_match");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(queryValidationException38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(fuzziness45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNull(queryValidationException59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + 1.0f + "'", float62 == 1.0f);
        org.junit.Assert.assertTrue("'" + type63 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type63.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type64 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type64.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNull(zeroTermsQuery71);
    }

    @Test
    public void test11312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11312");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder8.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = null;
        multiMatchQueryBuilder8.setfuzziness(fuzziness13);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = multiMatchQueryBuilder8.zeroTermsQuery;
        multiMatchQueryBuilder8.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.tieBreaker((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder21.settieBreaker((java.lang.Float) 10.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(zeroTermsQuery15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test11313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11313");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        java.lang.String str18 = multiMatchQueryBuilder17.fuzzyRewrite;
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = null;
        multiMatchQueryBuilder17.setfuzziness(fuzziness19);
        org.elasticsearch.index.query.Operator operator21 = null;
        multiMatchQueryBuilder17.setoperator(operator21);
        java.lang.String str23 = multiMatchQueryBuilder17.minimumShouldMatch;
        org.elasticsearch.index.query.Operator operator24 = multiMatchQueryBuilder17.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(operator24);
    }

    @Test
    public void test11314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11314");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.prefixLength((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type14 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.common.ParseField parseField15 = type14.parseField();
        org.elasticsearch.common.ParseField parseField16 = type14.parseField();
        multiMatchQueryBuilder13.settype(type14);
        java.lang.String str18 = multiMatchQueryBuilder13.getrewrite();
        java.lang.String str19 = multiMatchQueryBuilder13.getanalyzer();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type14.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(parseField15);
        org.junit.Assert.assertNotNull(parseField16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test11315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11315");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = multiMatchQueryBuilder12.getfuzziness();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder12.setzeroTermsQuery(zeroTermsQuery14);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}", (float) 97);
        java.lang.Integer int19 = multiMatchQueryBuilder18.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(fuzziness13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(int19);
    }

    @Test
    public void test11316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11316");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        java.lang.String str18 = multiMatchQueryBuilder17.fuzzyRewrite;
        java.lang.Boolean boolean19 = multiMatchQueryBuilder17.useDisMax;
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.operator(operator20);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = multiMatchQueryBuilder21.zeroTermsQuery;
        java.util.List<java.lang.String> strList23 = multiMatchQueryBuilder21.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : {\n      \"multiMatch\" : {\n        \"query\" : \"multi_match\",\n        \"fields\" : [ \"multi_match\", \"hi!\" ],\n        \"slop\" : -1,\n        \"minimumShouldMatch\" : \"\",\n        \"fuzzyRewrite\" : \"hi!\",\n        \"boost\" : 1.0\n      }\n    },\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"cutoff_frequency\\\" : -1.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder21.slop((int) (byte) 0);
        java.util.List<java.lang.String> strList28 = multiMatchQueryBuilder21.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(zeroTermsQuery22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strList28);
    }

    @Test
    public void test11317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11317");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String str16 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder18.fuzzyRewrite = "hi!";
        java.lang.Float float21 = multiMatchQueryBuilder18.gettieBreaker();
        java.lang.String str22 = multiMatchQueryBuilder18.getName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(float21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
    }

    @Test
    public void test11318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11318");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) 1.0f);
        java.lang.Integer int16 = multiMatchQueryBuilder8.maxExpansions;
        java.lang.Integer int17 = multiMatchQueryBuilder8.maxExpansions;
        multiMatchQueryBuilder8.cutoffFrequency = (-1.0f);
        java.lang.String str20 = multiMatchQueryBuilder8.queryName();
        java.lang.String str21 = multiMatchQueryBuilder8.getWriteableName();
        multiMatchQueryBuilder8.setuseDisMax((java.lang.Boolean) false);
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder32.setanalyzer("multi_match");
        org.elasticsearch.index.query.QueryValidationException queryValidationException37 = multiMatchQueryBuilder32.validate();
        multiMatchQueryBuilder32.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder32.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness42 = multiMatchQueryBuilder32.fuzziness;
        multiMatchQueryBuilder8.fuzziness = fuzziness42;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(queryValidationException37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(fuzziness42);
    }

    @Test
    public void test11319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11319");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder8.setanalyzer("multi_match");
        org.elasticsearch.index.query.QueryValidationException queryValidationException13 = multiMatchQueryBuilder8.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder8.zeroTermsQuery;
        java.lang.String str15 = multiMatchQueryBuilder8.getrewrite();
        multiMatchQueryBuilder8.lenient = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder8.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) 100);
        multiMatchQueryBuilder20.setuseDisMax((java.lang.Boolean) true);
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap32 = multiMatchQueryBuilder31.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery33);
        multiMatchQueryBuilder31.setanalyzer("hi!");
        java.lang.Integer int37 = multiMatchQueryBuilder31.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder31.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder31.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzziness\" : \"FALSE\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 0.0\n  }\n}");
        multiMatchQueryBuilder41.setlenient((java.lang.Boolean) false);
        boolean boolean46 = multiMatchQueryBuilder20.equals((java.lang.Object) multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(queryValidationException13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(strObjectFloatHashMap32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test11320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11320");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        org.elasticsearch.index.query.QueryValidationException queryValidationException14 = multiMatchQueryBuilder13.validate();
        java.lang.String str15 = multiMatchQueryBuilder13.getanalyzer();
        java.lang.Boolean boolean16 = multiMatchQueryBuilder13.useDisMax;
        java.util.List<java.lang.String> strList17 = multiMatchQueryBuilder13.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.prefixLength(52);
        java.lang.Float float20 = multiMatchQueryBuilder13.gettieBreaker();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(queryValidationException14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(float20);
    }

    @Test
    public void test11321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11321");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        java.lang.String str12 = multiMatchQueryBuilder8.fuzzyRewrite;
        multiMatchQueryBuilder8.settieBreaker((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.cutoffFrequency((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.cutoffFrequency((float) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.slop(35);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test11322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11322");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = multiMatchQueryBuilder12.getfuzziness();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = multiMatchQueryBuilder12.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(fuzziness13);
        org.junit.Assert.assertNull(strObjectFloatHashMap14);
    }

    @Test
    public void test11323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11323");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.String str9 = multiMatchQueryBuilder8.getWriteableName();
        java.lang.String str10 = multiMatchQueryBuilder8.fuzzyRewrite;
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 1);
        java.lang.Object obj13 = multiMatchQueryBuilder8.gettext();
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 97);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multi_match" + "'", str9, "multi_match");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + "multi_match" + "'", obj13, "multi_match");
    }

    @Test
    public void test11324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11324");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.queryName("");
        multiMatchQueryBuilder14.setslop((java.lang.Integer) 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type23 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float24 = type23.tieBreaker();
        org.elasticsearch.common.ParseField parseField25 = type23.parseField();
        float float26 = type23.tieBreaker();
        multiMatchQueryBuilder22.settype(type23);
        org.elasticsearch.index.search.MatchQuery.Type type28 = type23.matchQueryType();
        org.elasticsearch.common.ParseField parseField29 = type23.parseField();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type23.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 0.0f + "'", float24 == 0.0f);
        org.junit.Assert.assertNotNull(parseField25);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField29);
    }

    @Test
    public void test11325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11325");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.Integer int17 = multiMatchQueryBuilder4.slop;
        java.lang.String str18 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test11326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11326");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        java.lang.String str9 = multiMatchQueryBuilder4.rewrite;
        java.lang.String str10 = multiMatchQueryBuilder4.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!^97.0\", \"\", \"hi!^97.0\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.io.stream.StreamInput streamInput13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.readFrom(streamInput13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
    }

    @Test
    public void test11327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11327");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        java.lang.Object obj19 = multiMatchQueryBuilder4.text;
        java.lang.String str20 = multiMatchQueryBuilder4.getNAME();
        java.lang.Object obj21 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.Operator operator24 = multiMatchQueryBuilder4.operator;
        multiMatchQueryBuilder4.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder4.cutoffFrequency((float) 35);
        multiMatchQueryBuilder28.rewrite = "";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + "multi_match" + "'", obj19, "multi_match");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + "multi_match" + "'", obj21, "multi_match");
        org.junit.Assert.assertNull(operator24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test11328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11328");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.maxExpansions((int) (short) 10);
        org.elasticsearch.index.query.Operator operator13 = multiMatchQueryBuilder10.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.slop((int) 'a');
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder17.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder17.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"maxExpansions\" : 100,\n    \"useDisMax\" : false,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder20.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"max_expansions\" : -1,\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder20.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(operator13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(fuzziness18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test11329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11329");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.minimumShouldMatch("");
        java.lang.Boolean boolean12 = multiMatchQueryBuilder11.getuseDisMax();
        multiMatchQueryBuilder11.setlenient((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(boolean12);
    }

    @Test
    public void test11330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11330");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder25.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder25.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = multiMatchQueryBuilder25.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField39 = type38.parseField();
        multiMatchQueryBuilder25.type = type38;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder20.type(type38);
        multiMatchQueryBuilder20.setrewrite("");
        org.elasticsearch.index.query.Operator operator44 = multiMatchQueryBuilder20.getoperator();
        java.lang.Object obj45 = multiMatchQueryBuilder20.gettext();
        org.elasticsearch.index.query.Operator operator46 = null;
        multiMatchQueryBuilder20.operator = operator46;
        java.lang.String str48 = multiMatchQueryBuilder20.getNAME();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(type37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(operator44);
        org.junit.Assert.assertEquals("'" + obj45 + "' != '" + "multi_match" + "'", obj45, "multi_match");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "multi_match" + "'", str48, "multi_match");
    }

    @Test
    public void test11331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11331");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.maxExpansions((-1));
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder11.getfields();
        multiMatchQueryBuilder11.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.useDisMax(true);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        multiMatchQueryBuilder20.zeroTermsQuery = zeroTermsQuery21;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.maxExpansions(52);
        multiMatchQueryBuilder24.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test11332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11332");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder4.settype(type11);
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.lenient;
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder4.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type11.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test11333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11333");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int13 = multiMatchQueryBuilder12.prefixLength;
        multiMatchQueryBuilder12.maxExpansions = 0;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.tieBreaker((float) (byte) 0);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = multiMatchQueryBuilder12.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder12.boost((float) 10);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder12.operator(operator21);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(strObjectFloatHashMap18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test11334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11334");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        java.lang.Float float12 = multiMatchQueryBuilder11.cutoffFrequency;
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder17.getlenient();
        multiMatchQueryBuilder17.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder17.tieBreaker((float) (-1));
        multiMatchQueryBuilder17.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder17.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder11.fuzziness((java.lang.Object) multiMatchQueryBuilder17);
        java.lang.Boolean boolean32 = multiMatchQueryBuilder11.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder11.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder11.boost((float) (-1L));
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(boolean32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
    }

    @Test
    public void test11335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11335");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        multiMatchQueryBuilder13.tieBreaker = (-1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField21 = type20.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type22 = type20.matchQueryType();
        org.elasticsearch.common.ParseField parseField23 = type20.parseField();
        float float24 = type20.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder13.type(type20);
        multiMatchQueryBuilder13.settieBreaker((java.lang.Float) 52.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder13.slop((int) ' ');
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type20.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField21);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type22.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField23);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 1.0f + "'", float24 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test11336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11336");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.Object obj17 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.tieBreaker = (-1.0f);
        java.lang.String str20 = multiMatchQueryBuilder4.getName();
        multiMatchQueryBuilder4.prefixLength = 1;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
    }

    @Test
    public void test11337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11337");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException22 = multiMatchQueryBuilder17.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder17.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder17.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness29 = multiMatchQueryBuilder17.getfuzziness();
        java.lang.Boolean boolean30 = multiMatchQueryBuilder17.getuseDisMax();
        org.elasticsearch.index.query.Operator operator31 = null;
        multiMatchQueryBuilder17.operator = operator31;
        java.lang.String[] strArray36 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray36);
        org.elasticsearch.index.query.Operator operator38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.operator(operator38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder37.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException42 = multiMatchQueryBuilder37.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder37.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder37.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder37.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type49 = multiMatchQueryBuilder37.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type50 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField51 = type50.parseField();
        multiMatchQueryBuilder37.type = type50;
        multiMatchQueryBuilder17.settype(type50);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder4.type(type50);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder4.tieBreaker((float) '#');
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(queryValidationException22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(fuzziness29);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(queryValidationException42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNull(type49);
        org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type50.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
    }

    @Test
    public void test11338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11338");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.slop((int) (short) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery22);
        java.lang.Object obj24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.type(obj24);
        java.lang.String str26 = multiMatchQueryBuilder23.analyzer;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery27 = null;
        multiMatchQueryBuilder23.setzeroTermsQuery(zeroTermsQuery27);
        java.lang.String str29 = multiMatchQueryBuilder23.getrewrite();
        java.lang.String str30 = multiMatchQueryBuilder23.getminimumShouldMatch();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test11339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11339");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 10);
        java.lang.Integer int19 = multiMatchQueryBuilder4.prefixLength;
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray25 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray25);
        org.elasticsearch.index.query.Operator operator27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.operator(operator27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException31 = multiMatchQueryBuilder26.validate();
        java.lang.Integer int32 = multiMatchQueryBuilder26.slop;
        multiMatchQueryBuilder26.prefixLength = 10;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap35 = null;
        multiMatchQueryBuilder26.setfieldsBoosts(strObjectFloatHashMap35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder26.field("", (float) (byte) 100);
        java.lang.String str40 = multiMatchQueryBuilder39.getminimumShouldMatch();
        org.elasticsearch.index.query.Operator operator41 = multiMatchQueryBuilder39.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder39.boost((float) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder39.fuzzyRewrite("multi_match");
        java.lang.Object obj46 = multiMatchQueryBuilder45.gettext();
        java.lang.String[] strArray50 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray50);
        org.elasticsearch.index.query.Operator operator52 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.operator(operator52);
        java.lang.Boolean boolean54 = multiMatchQueryBuilder51.getlenient();
        multiMatchQueryBuilder51.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder51.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder51.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.QueryValidationException queryValidationException61 = multiMatchQueryBuilder51.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type62 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float63 = type62.tieBreaker();
        org.elasticsearch.common.ParseField parseField64 = type62.parseField();
        float float65 = type62.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type66 = type62.matchQueryType();
        float float67 = type62.tieBreaker();
        float float68 = type62.tieBreaker();
        multiMatchQueryBuilder51.type = type62;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder45.type(type62);
        org.elasticsearch.common.ParseField parseField71 = type62.parseField();
        multiMatchQueryBuilder4.type = type62;
        java.lang.String str73 = multiMatchQueryBuilder4.queryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery74 = null;
        multiMatchQueryBuilder4.setzeroTermsQuery(zeroTermsQuery74);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(queryValidationException31);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(operator41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertEquals("'" + obj46 + "' != '" + "multi_match" + "'", obj46, "multi_match");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNull(boolean54);
        org.junit.Assert.assertNull(queryValidationException61);
        org.junit.Assert.assertTrue("'" + type62 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type62.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + 0.0f + "'", float63 == 0.0f);
        org.junit.Assert.assertNotNull(parseField64);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + 0.0f + "'", float65 == 0.0f);
        org.junit.Assert.assertTrue("'" + type66 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type66.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + 0.0f + "'", float67 == 0.0f);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + 0.0f + "'", float68 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(parseField71);
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test11340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11340");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = multiMatchQueryBuilder4.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(strObjectFloatHashMap19);
    }

    @Test
    public void test11341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11341");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery8 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder6.zeroTermsQuery(zeroTermsQuery8);
        multiMatchQueryBuilder9.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder9.tieBreaker((float) (short) 1);
        multiMatchQueryBuilder13.prefixLength = 0;
        java.lang.Float float16 = multiMatchQueryBuilder13.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder13.slop((int) (byte) -1);
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        java.lang.Boolean boolean26 = multiMatchQueryBuilder23.getlenient();
        multiMatchQueryBuilder23.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder23.tieBreaker((float) (-1));
        multiMatchQueryBuilder23.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder23.getPROTOTYPE();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap36 = multiMatchQueryBuilder23.getfieldsBoosts();
        multiMatchQueryBuilder23.setslop((java.lang.Integer) (-1));
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException48 = multiMatchQueryBuilder43.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder43.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj51 = multiMatchQueryBuilder43.text;
        multiMatchQueryBuilder43.setrewrite("");
        java.lang.String str54 = multiMatchQueryBuilder43.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder43.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder43.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList60 = multiMatchQueryBuilder57.fields;
        multiMatchQueryBuilder57.useDisMax = false;
        multiMatchQueryBuilder57.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness65 = multiMatchQueryBuilder57.getfuzziness();
        multiMatchQueryBuilder23.fuzziness = fuzziness65;
        multiMatchQueryBuilder18.fuzziness = fuzziness65;
        java.lang.Class<?> wildcardClass68 = multiMatchQueryBuilder18.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(strObjectFloatHashMap36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(queryValidationException48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertEquals("'" + obj51 + "' != '" + "multi_match" + "'", obj51, "multi_match");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNotNull(fuzziness65);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test11342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11342");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (byte) 0);
        org.elasticsearch.common.unit.Fuzziness fuzziness14 = multiMatchQueryBuilder8.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float17 = multiMatchQueryBuilder16.cutoffFrequency;
        multiMatchQueryBuilder16.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        multiMatchQueryBuilder16.setzeroTermsQuery(zeroTermsQuery20);
        multiMatchQueryBuilder16.tieBreaker = 10.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(strObjectFloatHashMap11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(fuzziness14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(float17);
    }

    @Test
    public void test11343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11343");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        multiMatchQueryBuilder11.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder11.slop = 10;
        java.lang.String str19 = multiMatchQueryBuilder11.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}" + "'", str19, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test11344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11344");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.QueryValidationException queryValidationException12 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type14 = type13.matchQueryType();
        multiMatchQueryBuilder4.settype(type13);
        java.lang.Float float16 = multiMatchQueryBuilder4.gettieBreaker();
        java.lang.String str17 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.getPROTOTYPE();
        multiMatchQueryBuilder20.maxExpansions = 100;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNull(queryValidationException12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type14.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test11345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11345");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        java.lang.String str14 = multiMatchQueryBuilder8.rewrite;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        multiMatchQueryBuilder8.zeroTermsQuery = zeroTermsQuery15;
        java.lang.Float float17 = multiMatchQueryBuilder8.gettieBreaker();
        java.lang.Object obj18 = multiMatchQueryBuilder8.gettext();
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder8.operator(operator19);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap21 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + "multi_match" + "'", obj18, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(strObjectFloatHashMap21);
    }

    @Test
    public void test11346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11346");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.operator(operator16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.rewrite("hi!");
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder19.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder19.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str23 = multiMatchQueryBuilder22.getNAME();
        java.lang.Boolean boolean24 = multiMatchQueryBuilder22.getuseDisMax();
        org.elasticsearch.index.query.Operator operator25 = multiMatchQueryBuilder22.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "multi_match" + "'", str23, "multi_match");
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNull(operator25);
    }

    @Test
    public void test11347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11347");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setrewrite("");
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 32);
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        multiMatchQueryBuilder21.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder21.operator(operator26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder21.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder21.prefixLength(100);
        java.util.List<java.lang.String> strList32 = multiMatchQueryBuilder31.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) strList32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
    }

    @Test
    public void test11348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11348");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.type(type22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.rewrite("");
        java.lang.String[] strArray29 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray29);
        org.elasticsearch.index.query.Operator operator31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.operator(operator31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder30.field("");
        java.lang.String str35 = multiMatchQueryBuilder30.getrewrite();
        java.lang.Object obj36 = multiMatchQueryBuilder30.text;
        float float37 = multiMatchQueryBuilder30.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder30.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float40 = multiMatchQueryBuilder30.gettieBreaker();
        multiMatchQueryBuilder30.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder25.fuzziness((java.lang.Object) multiMatchQueryBuilder30);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput44 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder30.writeTo(streamOutput44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type22.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + "multi_match" + "'", obj36, "multi_match");
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 1.0f + "'", float37 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(float40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
    }

    @Test
    public void test11349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11349");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        multiMatchQueryBuilder8.setanalyzer("hi!");
        java.lang.Integer int14 = multiMatchQueryBuilder8.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder8.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"tie_breaker\" : 52.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}", (float) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder21.getPROTOTYPE();
        org.elasticsearch.index.query.QueryValidationException queryValidationException23 = multiMatchQueryBuilder21.validate();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(queryValidationException23);
    }

    @Test
    public void test11350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11350");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.lang.Integer int8 = multiMatchQueryBuilder4.getmaxExpansions();
        multiMatchQueryBuilder4.useDisMax = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.prefixLength(0);
        java.lang.Boolean boolean13 = multiMatchQueryBuilder12.getuseDisMax();
        multiMatchQueryBuilder12.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}";
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap25 = multiMatchQueryBuilder24.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder24.lenient(false);
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder33.settype(type36);
        multiMatchQueryBuilder12.settype(type36);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder12.operator(operator39);
        java.lang.Float float41 = multiMatchQueryBuilder12.tieBreaker;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + boolean13 + "' != '" + true + "'", boolean13, true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(strObjectFloatHashMap25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(float41);
    }

    @Test
    public void test11351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11351");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        multiMatchQueryBuilder4.maxExpansions = 100;
        org.elasticsearch.index.query.Operator operator17 = multiMatchQueryBuilder4.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = multiMatchQueryBuilder4.type;
        org.elasticsearch.index.query.Operator operator19 = null;
        multiMatchQueryBuilder4.setoperator(operator19);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(operator17);
        org.junit.Assert.assertNull(type18);
    }

    @Test
    public void test11352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11352");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.getPROTOTYPE();
        multiMatchQueryBuilder16.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.operator(operator19);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(fuzziness15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test11353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11353");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.type;
        org.elasticsearch.index.query.Operator operator11 = null;
        multiMatchQueryBuilder4.setoperator(operator11);
        java.lang.String str13 = multiMatchQueryBuilder4.toString();
        multiMatchQueryBuilder4.cutoffFrequency = 10.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str18 = multiMatchQueryBuilder17.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}", (float) 1);
        multiMatchQueryBuilder21.useDisMax = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = multiMatchQueryBuilder21.type;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(type24);
    }

    @Test
    public void test11354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11354");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.boost((float) 10L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.rewrite("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness22 = multiMatchQueryBuilder8.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder8.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder8.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str30 = multiMatchQueryBuilder29.getminimumShouldMatch();
        float float31 = multiMatchQueryBuilder29.boost();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(fuzziness22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 10.0f + "'", float31 == 10.0f);
    }

    @Test
    public void test11355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11355");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery8 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder6.zeroTermsQuery(zeroTermsQuery8);
        multiMatchQueryBuilder9.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}";
        org.elasticsearch.index.query.Operator operator12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder9.operator(operator12);
        java.lang.String str14 = multiMatchQueryBuilder13.analyzer;
        multiMatchQueryBuilder13.maxExpansions = 100;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder13.lenient(true);
        java.lang.String str19 = multiMatchQueryBuilder13.getrewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}" + "'", str14, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test11356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11356");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.String str1 = multiMatchQueryBuilder0.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery2 = multiMatchQueryBuilder0.zeroTermsQuery;
        multiMatchQueryBuilder0.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder0.zeroTermsQuery(zeroTermsQuery5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type7 = multiMatchQueryBuilder6.type;
        java.lang.Boolean boolean8 = multiMatchQueryBuilder6.getlenient();
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str1, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(zeroTermsQuery2);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type7.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + false + "'", boolean8, false);
    }

    @Test
    public void test11357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11357");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        java.lang.String str14 = multiMatchQueryBuilder12.getfuzzyRewrite();
        multiMatchQueryBuilder12.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder12.setmaxExpansions((java.lang.Integer) (-1));
        java.lang.Integer int19 = multiMatchQueryBuilder12.prefixLength;
        multiMatchQueryBuilder12.tieBreaker = 52.0f;
        java.lang.Boolean boolean22 = multiMatchQueryBuilder12.useDisMax;
        java.lang.String str23 = multiMatchQueryBuilder12.getminimumShouldMatch();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
    }

    @Test
    public void test11358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11358");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder11.getfieldsBoosts();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder11.fieldsBoosts = strObjectFloatHashMap13;
        java.lang.Boolean boolean15 = multiMatchQueryBuilder11.getuseDisMax();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap16 = null;
        multiMatchQueryBuilder11.setfieldsBoosts(strObjectFloatHashMap16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : -1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test11359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11359");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type8 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type9 = type8.matchQueryType();
        float float10 = type8.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type8);
        org.elasticsearch.index.query.Operator operator12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder6.operator(operator12);
        org.elasticsearch.index.query.Operator operator14 = null;
        multiMatchQueryBuilder6.setoperator(operator14);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder6.getPROTOTYPE();
        multiMatchQueryBuilder6.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : 10,\n    \"useDisMax\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type8.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type9.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test11360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11360");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.String str20 = multiMatchQueryBuilder17.getWriteableName();
        java.lang.Boolean boolean21 = multiMatchQueryBuilder17.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.getPROTOTYPE();
        multiMatchQueryBuilder17.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray28 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray28);
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.operator(operator30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder29.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException34 = multiMatchQueryBuilder29.validate();
        java.lang.Integer int35 = multiMatchQueryBuilder29.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = multiMatchQueryBuilder29.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder29.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder29.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder29.boost((float) 0);
        java.lang.String str44 = multiMatchQueryBuilder29.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap45 = multiMatchQueryBuilder29.fieldsBoosts;
        multiMatchQueryBuilder17.fieldsBoosts = strObjectFloatHashMap45;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap45;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder4.analyzer("");
        multiMatchQueryBuilder4.setcutoffFrequency((java.lang.Float) 52.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(queryValidationException34);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNull(zeroTermsQuery36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
    }

    @Test
    public void test11361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11361");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery10);
        multiMatchQueryBuilder11.maxExpansions = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str16 = multiMatchQueryBuilder15.getminimumShouldMatch();
        multiMatchQueryBuilder15.prefixLength = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder15.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap21 = multiMatchQueryBuilder15.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(strObjectFloatHashMap21);
    }

    @Test
    public void test11362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11362");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        multiMatchQueryBuilder4.maxExpansions = 100;
        org.elasticsearch.index.query.Operator operator17 = multiMatchQueryBuilder4.operator;
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder26.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness31 = multiMatchQueryBuilder26.getfuzziness();
        multiMatchQueryBuilder4.fuzziness = fuzziness31;
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        multiMatchQueryBuilder4.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder4.useDisMax(false);
        org.elasticsearch.index.query.Operator operator39 = null;
        multiMatchQueryBuilder38.operator = operator39;
        multiMatchQueryBuilder38.setslop((java.lang.Integer) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder38.useDisMax(true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(operator17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(fuzziness31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
    }

    @Test
    public void test11363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11363");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        java.lang.String str12 = multiMatchQueryBuilder11.toString();
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.String str20 = multiMatchQueryBuilder17.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder17.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.cutoffFrequency((float) '4');
        boolean boolean26 = multiMatchQueryBuilder11.equals((java.lang.Object) multiMatchQueryBuilder23);
        multiMatchQueryBuilder23.maxExpansions = (-1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = null;
        multiMatchQueryBuilder23.setzeroTermsQuery(zeroTermsQuery29);
        java.lang.String str31 = multiMatchQueryBuilder23.rewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap32 = multiMatchQueryBuilder23.getfieldsBoosts();
        java.lang.Object obj33 = multiMatchQueryBuilder23.text;
        multiMatchQueryBuilder23.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str12, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(strObjectFloatHashMap32);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + "multi_match" + "'", obj33, "multi_match");
    }

    @Test
    public void test11364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11364");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        java.lang.String str9 = multiMatchQueryBuilder4.rewrite;
        java.lang.String[] strArray13 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray13);
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.operator(operator15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException19 = multiMatchQueryBuilder14.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.cutoffFrequency((float) (byte) 100);
        float float22 = multiMatchQueryBuilder14.boost();
        multiMatchQueryBuilder14.setanalyzer("");
        multiMatchQueryBuilder14.setcutoffFrequency((java.lang.Float) 0.0f);
        boolean boolean27 = multiMatchQueryBuilder4.equals((java.lang.Object) multiMatchQueryBuilder14);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder14.getPROTOTYPE();
        multiMatchQueryBuilder28.setprefixLength((java.lang.Integer) 1);
        multiMatchQueryBuilder28.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"prefixLength\" : 32,\n    \"maxExpansions\" : 10,\n    \"tieBreaker\" : 100.0,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(queryValidationException19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 1.0f + "'", float22 == 1.0f);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test11365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11365");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder17.getlenient();
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder17.getfuzziness();
        java.lang.String str22 = multiMatchQueryBuilder17.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray28 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray28);
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.operator(operator30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder29.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder33.setanalyzer("multi_match");
        org.elasticsearch.index.query.QueryValidationException queryValidationException38 = multiMatchQueryBuilder33.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery39 = multiMatchQueryBuilder33.zeroTermsQuery;
        java.lang.String str40 = multiMatchQueryBuilder33.getrewrite();
        multiMatchQueryBuilder33.lenient = true;
        java.lang.String[] strArray46 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray46);
        org.elasticsearch.index.query.Operator operator48 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.operator(operator48);
        java.lang.String str50 = multiMatchQueryBuilder47.getWriteableName();
        java.lang.Boolean boolean51 = multiMatchQueryBuilder47.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder47.getPROTOTYPE();
        multiMatchQueryBuilder47.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray58 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray58);
        org.elasticsearch.index.query.Operator operator60 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder59.operator(operator60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder59.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException64 = multiMatchQueryBuilder59.validate();
        java.lang.Integer int65 = multiMatchQueryBuilder59.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery66 = multiMatchQueryBuilder59.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder59.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder59.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder59.boost((float) 0);
        java.lang.String str74 = multiMatchQueryBuilder59.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap75 = multiMatchQueryBuilder59.fieldsBoosts;
        multiMatchQueryBuilder47.fieldsBoosts = strObjectFloatHashMap75;
        multiMatchQueryBuilder33.fieldsBoosts = strObjectFloatHashMap75;
        multiMatchQueryBuilder24.fieldsBoosts = strObjectFloatHashMap75;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap75;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder4.maxExpansions((int) (short) 0);
        org.elasticsearch.index.query.Operator operator82 = null;
        multiMatchQueryBuilder81.operator = operator82;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(queryValidationException38);
        org.junit.Assert.assertNull(zeroTermsQuery39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "multi_match" + "'", str50, "multi_match");
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNull(queryValidationException64);
        org.junit.Assert.assertNull(int65);
        org.junit.Assert.assertNull(zeroTermsQuery66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
    }

    @Test
    public void test11366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11366");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.maxExpansions((int) (short) 1);
        multiMatchQueryBuilder18.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"max_expansions\" : -1,\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test11367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11367");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder8.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = null;
        multiMatchQueryBuilder8.setfuzziness(fuzziness13);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery15);
        multiMatchQueryBuilder8.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"multi_match\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        java.lang.Boolean boolean26 = multiMatchQueryBuilder23.getlenient();
        multiMatchQueryBuilder23.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.cutoffFrequency(0.0f);
        java.lang.String str31 = multiMatchQueryBuilder30.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder30.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder30.maxExpansions = 100;
        java.lang.String[] strArray39 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray39);
        org.elasticsearch.index.query.Operator operator41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.operator(operator41);
        multiMatchQueryBuilder40.setrewrite("");
        java.util.List<java.lang.String> strList45 = multiMatchQueryBuilder40.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type46 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField47 = type46.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type48 = type46.matchQueryType();
        multiMatchQueryBuilder40.type = type46;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder30.type(type46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder50.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        float float54 = multiMatchQueryBuilder50.boost();
        multiMatchQueryBuilder50.prefixLength = 52;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type46.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField47);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type48.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 1.0f + "'", float54 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
    }

    @Test
    public void test11368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11368");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        java.lang.String str19 = multiMatchQueryBuilder18.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        multiMatchQueryBuilder18.zeroTermsQuery = zeroTermsQuery20;
        multiMatchQueryBuilder18.setprefixLength((java.lang.Integer) 100);
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder18.getfuzziness();
        multiMatchQueryBuilder18.slop = 97;
        multiMatchQueryBuilder18.setmaxExpansions((java.lang.Integer) 0);
        java.lang.String[] strArray32 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray32);
        org.elasticsearch.index.query.Operator operator34 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.operator(operator34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder33.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException38 = multiMatchQueryBuilder33.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder33.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder33.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder33.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness45 = multiMatchQueryBuilder33.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder33.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery48 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder33.zeroTermsQuery(zeroTermsQuery48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder51.cutoffFrequency = 10.0f;
        multiMatchQueryBuilder51.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        boolean boolean56 = multiMatchQueryBuilder18.equals((java.lang.Object) multiMatchQueryBuilder51);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput57 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder51.writeTo(streamOutput57);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str19, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(fuzziness24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(queryValidationException38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(fuzziness45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test11369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11369");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder13.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        multiMatchQueryBuilder23.setzeroTermsQuery(zeroTermsQuery24);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = multiMatchQueryBuilder23.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder23.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.cutoffFrequency((float) (byte) 10);
        java.lang.String str31 = multiMatchQueryBuilder30.getName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(zeroTermsQuery26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "multi_match" + "'", str31, "multi_match");
    }

    @Test
    public void test11370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11370");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder4.cutoffFrequency = 10.0f;
        java.lang.Object obj17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.type(obj17);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        multiMatchQueryBuilder4.setzeroTermsQuery(zeroTermsQuery19);
        java.lang.Integer int21 = multiMatchQueryBuilder4.getprefixLength();
        java.lang.String str22 = multiMatchQueryBuilder4.getminimumShouldMatch();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test11371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11371");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder19.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.maxExpansions((int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test11372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11372");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"\\\"\\n  }\\n}\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test11373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11373");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.getfuzziness();
        org.elasticsearch.index.query.Operator operator13 = null;
        multiMatchQueryBuilder11.setoperator(operator13);
        java.lang.Integer int15 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.Operator operator16 = multiMatchQueryBuilder11.getoperator();
        multiMatchQueryBuilder11.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String str19 = multiMatchQueryBuilder11.fuzzyRewrite;
        java.lang.Object obj20 = multiMatchQueryBuilder11.text;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str19, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + "multi_match" + "'", obj20, "multi_match");
    }

    @Test
    public void test11374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11374");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = null;
        multiMatchQueryBuilder13.fuzziness = fuzziness16;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.rewrite("");
        multiMatchQueryBuilder19.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean22 = multiMatchQueryBuilder19.getuseDisMax();
        org.elasticsearch.index.query.Operator operator23 = multiMatchQueryBuilder19.operator;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder19.zeroTermsQuery(zeroTermsQuery24);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder19.zeroTermsQuery(zeroTermsQuery26);
        multiMatchQueryBuilder27.setprefixLength((java.lang.Integer) 52);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertNull(operator23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test11375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11375");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder4.getPROTOTYPE();
        java.lang.String str10 = multiMatchQueryBuilder4.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
    }

    @Test
    public void test11376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11376");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.queryName("");
        multiMatchQueryBuilder14.setslop((java.lang.Integer) 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray20);
        org.elasticsearch.index.query.Operator operator23 = multiMatchQueryBuilder22.getoperator();
        multiMatchQueryBuilder22.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.lang.String str26 = multiMatchQueryBuilder22.queryName();
        java.lang.Boolean boolean27 = multiMatchQueryBuilder22.useDisMax;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNull(operator23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(boolean27);
    }

    @Test
    public void test11377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11377");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type16 = type15.matchQueryType();
        float float17 = type15.tieBreaker();
        float float18 = type15.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) type15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.useDisMax(false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type15.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type16.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test11378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11378");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator21 = null;
        multiMatchQueryBuilder4.setoperator(operator21);
        multiMatchQueryBuilder4.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"prefixLength\" : -1,\n    \"maxExpansions\" : 100,\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test11379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11379");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str16 = multiMatchQueryBuilder15.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder20.rewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 1,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test11380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11380");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = multiMatchQueryBuilder4.type;
        java.lang.String str21 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.String str22 = multiMatchQueryBuilder4.getWriteableName();
        java.util.List<java.lang.String> strList23 = multiMatchQueryBuilder4.getfields();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type20.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNotNull(strList23);
    }

    @Test
    public void test11381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11381");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.String str9 = multiMatchQueryBuilder8.getWriteableName();
        java.lang.String str10 = multiMatchQueryBuilder8.fuzzyRewrite;
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 1);
        java.lang.Object obj13 = multiMatchQueryBuilder8.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"maxExpansions\" : 1,\n    \"useDisMax\" : false,\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multi_match" + "'", str9, "multi_match");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + "multi_match" + "'", obj13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
    }

    @Test
    public void test11382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11382");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        java.lang.String str7 = multiMatchQueryBuilder4.rewrite;
        org.elasticsearch.index.query.Operator operator8 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder4.operator(operator8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : 10,\n    \"maxExpansions\" : -1,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
    }

    @Test
    public void test11383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11383");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.useDisMax(true);
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        java.lang.Boolean boolean30 = multiMatchQueryBuilder27.getlenient();
        multiMatchQueryBuilder27.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type33 = multiMatchQueryBuilder27.gettype();
        multiMatchQueryBuilder27.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder27.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder27.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder27.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder18.fuzziness((java.lang.Object) "multi_match");
        java.lang.String str43 = multiMatchQueryBuilder18.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder18.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!^97.0\", \"\", \"hi!^97.0\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder45.settieBreaker((java.lang.Float) (-1.0f));
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNull(type33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "multi_match" + "'", str43, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
    }

    @Test
    public void test11384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11384");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.lang.Integer int8 = multiMatchQueryBuilder4.getmaxExpansions();
        multiMatchQueryBuilder4.useDisMax = false;
        java.lang.Integer int11 = multiMatchQueryBuilder4.slop;
        java.lang.Float float12 = multiMatchQueryBuilder4.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Boolean boolean15 = multiMatchQueryBuilder14.getuseDisMax();
        multiMatchQueryBuilder14.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"maxExpansions\" : -1,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder14.lenient = false;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + boolean15 + "' != '" + false + "'", boolean15, false);
    }

    @Test
    public void test11385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11385");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Integer int15 = multiMatchQueryBuilder14.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.maxExpansions((int) (byte) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float19 = type18.tieBreaker();
        org.elasticsearch.common.ParseField parseField20 = type18.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.type((java.lang.Object) parseField20);
        multiMatchQueryBuilder21.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = multiMatchQueryBuilder21.zeroTermsQuery;
        java.lang.String[] strArray28 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray28);
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.operator(operator30);
        java.lang.Boolean boolean32 = multiMatchQueryBuilder29.getlenient();
        multiMatchQueryBuilder29.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder29.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness37 = multiMatchQueryBuilder36.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder36.zeroTermsQuery(zeroTermsQuery38);
        java.lang.Boolean boolean40 = multiMatchQueryBuilder36.lenient;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap41 = null;
        multiMatchQueryBuilder36.setfieldsBoosts(strObjectFloatHashMap41);
        java.lang.String str43 = multiMatchQueryBuilder36.getminimumShouldMatch();
        java.lang.Integer int44 = multiMatchQueryBuilder36.getslop();
        java.lang.String str45 = multiMatchQueryBuilder36.getNAME();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder36.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"max_expansions\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder36.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzziness\" : \"FALSE\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 0.0\n  }\n}");
        java.lang.String[] strArray53 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray53);
        org.elasticsearch.index.query.Operator operator55 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.operator(operator55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder54.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException59 = multiMatchQueryBuilder54.validate();
        java.lang.Integer int60 = multiMatchQueryBuilder54.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery61 = multiMatchQueryBuilder54.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder54.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder54.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder54.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder54.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str71 = multiMatchQueryBuilder54.minimumShouldMatch;
        multiMatchQueryBuilder54.setslop((java.lang.Integer) 0);
        java.lang.Boolean boolean74 = multiMatchQueryBuilder54.useDisMax;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap75 = multiMatchQueryBuilder54.fieldsBoosts;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap76 = multiMatchQueryBuilder54.getfieldsBoosts();
        multiMatchQueryBuilder36.setfieldsBoosts(strObjectFloatHashMap76);
        multiMatchQueryBuilder21.setfieldsBoosts(strObjectFloatHashMap76);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertNotNull(parseField20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(zeroTermsQuery24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(boolean32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(fuzziness37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(boolean40);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "multi_match" + "'", str45, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNull(queryValidationException59);
        org.junit.Assert.assertNull(int60);
        org.junit.Assert.assertNull(zeroTermsQuery61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(boolean74);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap75);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap76);
    }

    @Test
    public void test11386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11386");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        multiMatchQueryBuilder4.maxExpansions = 1;
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder17.getlenient();
        multiMatchQueryBuilder17.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) 100);
        multiMatchQueryBuilder23.setanalyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.tieBreaker(52.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.String[] strArray33 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray33);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        java.lang.String str37 = multiMatchQueryBuilder34.getWriteableName();
        java.lang.Boolean boolean38 = multiMatchQueryBuilder34.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder34.getPROTOTYPE();
        multiMatchQueryBuilder34.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray45 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray45);
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.operator(operator47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder46.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException51 = multiMatchQueryBuilder46.validate();
        java.lang.Integer int52 = multiMatchQueryBuilder46.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery53 = multiMatchQueryBuilder46.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder46.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder46.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder46.boost((float) 0);
        java.lang.String str61 = multiMatchQueryBuilder46.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap62 = multiMatchQueryBuilder46.fieldsBoosts;
        multiMatchQueryBuilder34.fieldsBoosts = strObjectFloatHashMap62;
        multiMatchQueryBuilder29.fieldsBoosts = strObjectFloatHashMap62;
        multiMatchQueryBuilder29.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : 10,\n    \"maxExpansions\" : -1,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int67 = multiMatchQueryBuilder29.getprefixLength();
        java.lang.String str68 = multiMatchQueryBuilder29.getanalyzer();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "multi_match" + "'", str37, "multi_match");
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(queryValidationException51);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNull(zeroTermsQuery53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap62);
        org.junit.Assert.assertNull(int67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : 10,\n    \"maxExpansions\" : -1,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str68, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : 10,\n    \"maxExpansions\" : -1,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test11387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11387");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException20 = multiMatchQueryBuilder19.validate();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap21 = multiMatchQueryBuilder19.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        float float23 = type22.tieBreaker();
        multiMatchQueryBuilder19.type = type22;
        org.elasticsearch.index.search.MatchQuery.Type type25 = type22.matchQueryType();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(queryValidationException20);
        org.junit.Assert.assertNull(strObjectFloatHashMap21);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type22.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE + "'", type25.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE));
    }

    @Test
    public void test11388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11388");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float12 = multiMatchQueryBuilder8.gettieBreaker();
        multiMatchQueryBuilder8.setminimumShouldMatch("");
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException24 = multiMatchQueryBuilder19.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.cutoffFrequency((float) (byte) 100);
        float float27 = multiMatchQueryBuilder19.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type28 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type29 = type28.matchQueryType();
        multiMatchQueryBuilder19.settype(type28);
        org.elasticsearch.common.ParseField parseField31 = type28.parseField();
        multiMatchQueryBuilder8.type = type28;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder8.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.useDisMax(false);
        java.lang.Boolean boolean37 = multiMatchQueryBuilder34.lenient;
        multiMatchQueryBuilder34.slop = (-1);
        multiMatchQueryBuilder34.setcutoffFrequency((java.lang.Float) 1.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(queryValidationException24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type28.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type29.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertEquals("'" + boolean37 + "' != '" + false + "'", boolean37, false);
    }

    @Test
    public void test11389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11389");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\" ],\\n    \\\"slop\\\" : -1,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"useDisMax\\\" : true,\\n    \\\"cutoffFrequency\\\" : 52.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^10.0\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"useDisMax\" : false,\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test11390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11390");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.tieBreaker((-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField18 = type17.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type19 = type17.matchQueryType();
        org.elasticsearch.common.ParseField parseField20 = type17.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.type(type17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str24 = multiMatchQueryBuilder23.fuzzyRewrite;
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.operator(operator25);
        java.lang.Integer int27 = multiMatchQueryBuilder23.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type17.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type19.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(int27);
    }

    @Test
    public void test11391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11391");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap13;
        multiMatchQueryBuilder4.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery17);
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = null;
        multiMatchQueryBuilder18.fuzziness = fuzziness19;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery21);
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        java.lang.Boolean boolean30 = multiMatchQueryBuilder27.getlenient();
        multiMatchQueryBuilder27.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder27.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness35 = multiMatchQueryBuilder34.fuzziness;
        java.lang.Integer int36 = multiMatchQueryBuilder34.slop;
        multiMatchQueryBuilder34.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder34.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder18.fuzziness((java.lang.Object) multiMatchQueryBuilder40);
        multiMatchQueryBuilder18.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.boost((float) (short) 0);
        float float48 = multiMatchQueryBuilder45.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder45.prefixLength(1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(fuzziness35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + 0.0f + "'", float48 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
    }

    @Test
    public void test11392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11392");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.operator(operator16);
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj30 = multiMatchQueryBuilder22.text;
        multiMatchQueryBuilder22.setrewrite("");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder22.zeroTermsQuery(zeroTermsQuery33);
        boolean boolean35 = multiMatchQueryBuilder17.equals((java.lang.Object) multiMatchQueryBuilder22);
        java.lang.String str36 = multiMatchQueryBuilder17.getrewrite();
        java.lang.Integer int37 = multiMatchQueryBuilder17.getslop();
        org.elasticsearch.index.query.QueryValidationException queryValidationException38 = multiMatchQueryBuilder17.validate();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertEquals("'" + obj30 + "' != '" + "multi_match" + "'", obj30, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNull(queryValidationException38);
    }

    @Test
    public void test11393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11393");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.fields;
        java.lang.Boolean boolean10 = multiMatchQueryBuilder4.lenient;
        multiMatchQueryBuilder4.setcutoffFrequency((java.lang.Float) 0.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNull(boolean10);
    }

    @Test
    public void test11394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11394");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("hi!", (float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"Name\" : \"multi_match\"\n  }\n}");
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.prefixLength = 10;
        java.lang.Float float21 = multiMatchQueryBuilder4.getcutoffFrequency();
        java.lang.Float float22 = multiMatchQueryBuilder4.cutoffFrequency;
        org.elasticsearch.index.query.QueryShardContext queryShardContext23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query24 = multiMatchQueryBuilder4.toQuery(queryShardContext23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(float21);
        org.junit.Assert.assertNull(float22);
    }

    @Test
    public void test11395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11395");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.queryName("");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        multiMatchQueryBuilder4.rewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery14);
        multiMatchQueryBuilder4.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"Name\" : \"multi_match\"\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(zeroTermsQuery18);
    }

    @Test
    public void test11396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11396");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.lang.Integer int8 = multiMatchQueryBuilder4.getmaxExpansions();
        multiMatchQueryBuilder4.useDisMax = false;
        java.lang.Integer int11 = multiMatchQueryBuilder4.slop;
        java.lang.Float float12 = multiMatchQueryBuilder4.cutoffFrequency;
        java.lang.String str13 = multiMatchQueryBuilder4.getfuzzyRewrite();
        java.lang.String str14 = multiMatchQueryBuilder4.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder4.type;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(type15);
    }

    @Test
    public void test11397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11397");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.maxExpansions = 0;
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.lenient;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type16 = multiMatchQueryBuilder4.type;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(type16);
    }

    @Test
    public void test11398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11398");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.Object obj17 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int20 = multiMatchQueryBuilder19.getprefixLength();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(int20);
    }

    @Test
    public void test11399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11399");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Object obj15 = multiMatchQueryBuilder4.gettext();
        java.lang.Object obj16 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField20 = type19.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.common.ParseField parseField22 = type19.parseField();
        float float23 = type19.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder4.type((java.lang.Object) type19);
        java.lang.Integer int25 = multiMatchQueryBuilder4.getmaxExpansions();
        multiMatchQueryBuilder4.useDisMax = false;
        java.lang.Integer int28 = multiMatchQueryBuilder4.getslop();
        java.util.List<java.lang.String> strList29 = multiMatchQueryBuilder4.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "multi_match" + "'", obj15, "multi_match");
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "multi_match" + "'", obj16, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField20);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 1.0f + "'", float23 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(strList29);
    }

    @Test
    public void test11400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11400");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList17 = multiMatchQueryBuilder16.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 100,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tieBreaker\" : 52.0,\n    \"boost\" : 1.0\n  }\n}", (float) (short) 10);
        java.lang.Integer int21 = multiMatchQueryBuilder20.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(int21);
    }

    @Test
    public void test11401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11401");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) false);
        multiMatchQueryBuilder4.minimumShouldMatch = "";
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.elasticsearch.index.query.Operator operator20 = null;
        multiMatchQueryBuilder17.operator = operator20;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.fuzzyRewrite("multi_match");
        multiMatchQueryBuilder23.tieBreaker = 0.0f;
        java.lang.String str26 = multiMatchQueryBuilder23.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder4.type((java.lang.Object) str26);
        java.lang.String str28 = multiMatchQueryBuilder27.fuzzyRewrite;
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder27.operator = operator29;
        java.lang.Integer int31 = multiMatchQueryBuilder27.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder27.getPROTOTYPE();
        multiMatchQueryBuilder32.setslop((java.lang.Integer) 1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
    }

    @Test
    public void test11402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11402");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.Boolean boolean16 = multiMatchQueryBuilder12.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder12.operator(operator19);
        java.lang.Float float21 = multiMatchQueryBuilder12.cutoffFrequency;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(float21);
    }

    @Test
    public void test11403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11403");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str20 = multiMatchQueryBuilder19.fuzzyRewrite;
        java.lang.String str21 = multiMatchQueryBuilder19.fuzzyRewrite;
        multiMatchQueryBuilder19.prefixLength = 10;
        multiMatchQueryBuilder19.rewrite = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder19.lenient(false);
        multiMatchQueryBuilder27.prefixLength = 10;
        multiMatchQueryBuilder27.setprefixLength((java.lang.Integer) 1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test11404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11404");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder8.type = type18;
        java.lang.Integer int20 = multiMatchQueryBuilder8.getslop();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder8.getzeroTermsQuery();
        java.lang.String str22 = multiMatchQueryBuilder8.getminimumShouldMatch();
        java.util.List<java.lang.String> strList23 = multiMatchQueryBuilder8.fields;
        org.elasticsearch.index.query.Operator operator24 = multiMatchQueryBuilder8.getoperator();
        multiMatchQueryBuilder8.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap27 = multiMatchQueryBuilder8.getfieldsBoosts();
        java.lang.String[] strArray31 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray31);
        org.elasticsearch.index.query.Operator operator33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.operator(operator33);
        java.lang.Boolean boolean35 = multiMatchQueryBuilder32.getlenient();
        multiMatchQueryBuilder32.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = multiMatchQueryBuilder32.gettype();
        multiMatchQueryBuilder32.setslop((java.lang.Integer) (-1));
        java.lang.String str41 = multiMatchQueryBuilder32.getWriteableName();
        java.lang.String str42 = multiMatchQueryBuilder32.queryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery43 = null;
        multiMatchQueryBuilder32.zeroTermsQuery = zeroTermsQuery43;
        java.lang.Boolean boolean45 = multiMatchQueryBuilder32.getuseDisMax();
        java.lang.String[] strArray49 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray49);
        org.elasticsearch.index.query.Operator operator51 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.operator(operator51);
        java.lang.Boolean boolean53 = multiMatchQueryBuilder50.getlenient();
        multiMatchQueryBuilder50.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder50.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness58 = multiMatchQueryBuilder57.fuzziness;
        multiMatchQueryBuilder57.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder57.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray66 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray66);
        org.elasticsearch.index.query.Operator operator68 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.operator(operator68);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder67.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder71.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder71.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness76 = multiMatchQueryBuilder71.getfuzziness();
        multiMatchQueryBuilder57.fuzziness = fuzziness76;
        multiMatchQueryBuilder32.fuzziness = fuzziness76;
        multiMatchQueryBuilder8.fuzziness = fuzziness76;
        java.util.List<java.lang.String> strList80 = multiMatchQueryBuilder8.getfields();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNull(operator24);
        org.junit.Assert.assertNull(strObjectFloatHashMap27);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(boolean35);
        org.junit.Assert.assertNull(type38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multi_match" + "'", str41, "multi_match");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(boolean45);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(boolean53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNull(fuzziness58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(fuzziness76);
        org.junit.Assert.assertNotNull(strList80);
    }

    @Test
    public void test11405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11405");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.Operator operator10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.operator(operator10);
        java.lang.Float float12 = multiMatchQueryBuilder4.gettieBreaker();
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = multiMatchQueryBuilder16.gettype();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(type17);
    }

    @Test
    public void test11406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11406");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder17.setuseDisMax((java.lang.Boolean) true);
        multiMatchQueryBuilder17.setprefixLength((java.lang.Integer) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.tieBreaker((float) 100);
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        multiMatchQueryBuilder28.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder28.operator(operator33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder28.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder28.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder23.fuzziness((java.lang.Object) multiMatchQueryBuilder38);
        java.lang.String[] strArray43 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray43);
        org.elasticsearch.index.query.Operator operator45 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.operator(operator45);
        java.lang.Boolean boolean47 = multiMatchQueryBuilder44.getlenient();
        java.lang.Integer int48 = multiMatchQueryBuilder44.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder44.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        boolean boolean51 = multiMatchQueryBuilder39.equals((java.lang.Object) multiMatchQueryBuilder44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder44.useDisMax(false);
        multiMatchQueryBuilder44.tieBreaker = 100.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNull(boolean47);
        org.junit.Assert.assertNull(int48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
    }

    @Test
    public void test11407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11407");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 1);
        java.lang.Float float12 = multiMatchQueryBuilder11.gettieBreaker();
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.operator(operator13);
        java.lang.Float float15 = multiMatchQueryBuilder14.tieBreaker;
        multiMatchQueryBuilder14.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"\\\"\\n  }\\n}\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(float15);
    }

    @Test
    public void test11408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11408");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder11.getfieldsBoosts();
        java.lang.Object obj13 = multiMatchQueryBuilder11.text;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = multiMatchQueryBuilder11.getfieldsBoosts();
        multiMatchQueryBuilder11.setslop((java.lang.Integer) 10);
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean20 = multiMatchQueryBuilder19.getlenient();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput21 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder19.writeTo(streamOutput21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + "multi_match" + "'", obj13, "multi_match");
        org.junit.Assert.assertNull(strObjectFloatHashMap14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean20);
    }

    @Test
    public void test11409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11409");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.common.unit.Fuzziness fuzziness10 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness10;
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = multiMatchQueryBuilder4.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(zeroTermsQuery15);
    }

    @Test
    public void test11410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11410");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.Operator operator18 = null;
        multiMatchQueryBuilder15.operator = operator18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = multiMatchQueryBuilder15.type;
        multiMatchQueryBuilder15.setuseDisMax((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(type20);
    }

    @Test
    public void test11411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11411");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder24.setoperator(operator29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder24.zeroTermsQuery = zeroTermsQuery31;
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        multiMatchQueryBuilder37.maxExpansions = 0;
        java.lang.Boolean boolean40 = multiMatchQueryBuilder37.lenient;
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap50 = multiMatchQueryBuilder49.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.minimumShouldMatch("multi_match");
        java.lang.String str53 = multiMatchQueryBuilder52.toString();
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.Operator operator59 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.operator(operator59);
        java.lang.String str61 = multiMatchQueryBuilder58.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness62 = multiMatchQueryBuilder58.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder58.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.cutoffFrequency((float) '4');
        boolean boolean67 = multiMatchQueryBuilder52.equals((java.lang.Object) multiMatchQueryBuilder64);
        multiMatchQueryBuilder64.setmaxExpansions((java.lang.Integer) (-1));
        multiMatchQueryBuilder64.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder37.fuzziness((java.lang.Object) multiMatchQueryBuilder64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder64.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder73.boost((float) (short) 0);
        java.lang.String str76 = multiMatchQueryBuilder73.rewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(boolean40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(strObjectFloatHashMap50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str53, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "multi_match" + "'", str61, "multi_match");
        org.junit.Assert.assertNull(fuzziness62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}" + "'", str76, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test11412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11412");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.maxExpansions((int) (byte) 0);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params25 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder23.doXContent(xContentBuilder24, params25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test11413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11413");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery8 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder6.zeroTermsQuery(zeroTermsQuery8);
        multiMatchQueryBuilder9.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder9.tieBreaker((float) (short) 1);
        java.lang.String str14 = multiMatchQueryBuilder9.minimumShouldMatch;
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap24 = multiMatchQueryBuilder23.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder23.setminimumShouldMatch("multi_match");
        java.lang.Float float29 = multiMatchQueryBuilder23.getcutoffFrequency();
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder23.operator(operator30);
        java.lang.String str32 = multiMatchQueryBuilder23.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder23.prefixLength((int) 'a');
        java.lang.String[] strArray38 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray38);
        org.elasticsearch.index.query.Operator operator40 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.operator(operator40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder39.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException44 = multiMatchQueryBuilder39.validate();
        java.lang.Integer int45 = multiMatchQueryBuilder39.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery46 = multiMatchQueryBuilder39.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder39.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        multiMatchQueryBuilder39.maxExpansions = 100;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery52 = multiMatchQueryBuilder39.getzeroTermsQuery();
        java.lang.Boolean boolean53 = multiMatchQueryBuilder39.useDisMax;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap54 = multiMatchQueryBuilder39.fieldsBoosts;
        java.lang.String[] strArray58 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray58);
        org.elasticsearch.index.query.Operator operator60 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder59.operator(operator60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder59.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException64 = multiMatchQueryBuilder59.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder59.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder59.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.Operator operator69 = null;
        multiMatchQueryBuilder59.setoperator(operator69);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type71 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type72 = type71.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder59.type(type71);
        org.elasticsearch.common.ParseField parseField74 = type71.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder39.type(type71);
        float float76 = type71.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder34.type(type71);
        multiMatchQueryBuilder9.type = type71;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder9.tieBreaker((float) 1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(strObjectFloatHashMap24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(float29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "multi_match" + "'", str32, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(queryValidationException44);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNull(zeroTermsQuery46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(zeroTermsQuery52);
        org.junit.Assert.assertNull(boolean53);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap54);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNull(queryValidationException64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + type71 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type71.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type72 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type72.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(parseField74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertTrue("'" + float76 + "' != '" + 0.0f + "'", float76 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
    }

    @Test
    public void test11414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11414");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness8;
        java.lang.String str10 = multiMatchQueryBuilder4.getanalyzer();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = multiMatchQueryBuilder4.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1L));
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = multiMatchQueryBuilder4.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery15;
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 97);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery19;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strObjectFloatHashMap11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(strObjectFloatHashMap14);
    }

    @Test
    public void test11415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11415");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.tieBreaker((float) 100);
        java.lang.Object obj21 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        multiMatchQueryBuilder4.setzeroTermsQuery(zeroTermsQuery22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder4.operator(operator24);
        org.elasticsearch.index.query.Operator operator26 = multiMatchQueryBuilder4.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float28 = type27.tieBreaker();
        org.elasticsearch.common.ParseField parseField29 = type27.parseField();
        float float30 = type27.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type31 = type27.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder4.type(type27);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + "multi_match" + "'", obj21, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(operator26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 0.0f + "'", float28 == 0.0f);
        org.junit.Assert.assertNotNull(parseField29);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 0.0f + "'", float30 == 0.0f);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type31.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
    }

    @Test
    public void test11416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11416");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        multiMatchQueryBuilder13.setzeroTermsQuery(zeroTermsQuery22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder13.slop((int) ' ');
        java.lang.String str26 = multiMatchQueryBuilder25.getNAME();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap27 = multiMatchQueryBuilder25.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.maxExpansions((int) (short) 1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "multi_match" + "'", str26, "multi_match");
        org.junit.Assert.assertNull(strObjectFloatHashMap27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test11417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11417");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        multiMatchQueryBuilder4.lenient = true;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test11418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11418");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        java.lang.String str13 = multiMatchQueryBuilder4.getName();
        multiMatchQueryBuilder4.slop = 1;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.queryName("{\n  \"multiMatch\" : {\n    \"query\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str20 = multiMatchQueryBuilder19.getNAME();
        java.lang.Integer int21 = multiMatchQueryBuilder19.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNull(int21);
    }

    @Test
    public void test11419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11419");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        java.lang.String[] strArray14 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray14);
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.operator(operator16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException20 = multiMatchQueryBuilder15.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder15.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.zeroTermsQuery(zeroTermsQuery23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.maxExpansions((-1));
        multiMatchQueryBuilder22.maxExpansions = 100;
        multiMatchQueryBuilder22.setslop((java.lang.Integer) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.lenient(true);
        org.elasticsearch.index.query.Operator operator38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.operator(operator38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder37.rewrite("");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(queryValidationException20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
    }

    @Test
    public void test11420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11420");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        float float15 = multiMatchQueryBuilder14.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.maxExpansions((int) (byte) 10);
        java.lang.Boolean boolean18 = multiMatchQueryBuilder14.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"analyzer\" : \"multi_match\",\n    \"fuzziness\" : \"FALSE\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 0.0\n  }\n}", (float) (byte) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = multiMatchQueryBuilder14.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(zeroTermsQuery22);
    }

    @Test
    public void test11421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11421");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException25 = multiMatchQueryBuilder20.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.cutoffFrequency((float) (byte) 100);
        java.lang.String str28 = multiMatchQueryBuilder20.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder20.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness31 = multiMatchQueryBuilder20.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder20.getPROTOTYPE();
        java.lang.String[] strArray36 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder32, strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) multiMatchQueryBuilder38);
        java.lang.String str40 = multiMatchQueryBuilder38.rewrite;
        java.lang.Integer int41 = multiMatchQueryBuilder38.getmaxExpansions();
        multiMatchQueryBuilder38.tieBreaker = 32.0f;
        multiMatchQueryBuilder38.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator46 = multiMatchQueryBuilder38.getoperator();
        org.elasticsearch.index.query.QueryShardContext queryShardContext47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query48 = multiMatchQueryBuilder38.toFilter(queryShardContext47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(queryValidationException25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(fuzziness31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNull(operator46);
    }

    @Test
    public void test11422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11422");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        java.lang.Float float14 = multiMatchQueryBuilder8.getcutoffFrequency();
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.operator(operator15);
        java.lang.String str17 = multiMatchQueryBuilder8.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = multiMatchQueryBuilder8.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder8.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        multiMatchQueryBuilder20.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"prefixLength\" : 0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multi_match" + "'", str17, "multi_match");
        org.junit.Assert.assertNull(type18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test11423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11423");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList18 = multiMatchQueryBuilder4.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.rewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder31.setanalyzer("multi_match");
        org.elasticsearch.index.query.QueryValidationException queryValidationException36 = multiMatchQueryBuilder31.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = multiMatchQueryBuilder31.zeroTermsQuery;
        java.lang.String str38 = multiMatchQueryBuilder31.getrewrite();
        multiMatchQueryBuilder31.lenient = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder31.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.prefixLength((int) ' ');
        java.lang.String[] strArray49 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray49);
        org.elasticsearch.index.query.Operator operator51 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.operator(operator51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder50.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException55 = multiMatchQueryBuilder50.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder50.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder50.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder50.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness62 = multiMatchQueryBuilder50.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder50.slop((int) (short) 0);
        multiMatchQueryBuilder50.setslop((java.lang.Integer) 100);
        java.lang.Boolean boolean67 = multiMatchQueryBuilder50.getuseDisMax();
        java.lang.String str68 = multiMatchQueryBuilder50.fuzzyRewrite;
        java.lang.String[] strArray73 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray73);
        java.lang.String[] strArray79 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray73, strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str68, strArray73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) ' ', strArray73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder4, strArray73);
        multiMatchQueryBuilder84.tieBreaker = 0.0f;
        multiMatchQueryBuilder84.prefixLength = 0;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(queryValidationException36);
        org.junit.Assert.assertNull(zeroTermsQuery37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(queryValidationException55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNull(fuzziness62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNull(boolean67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray79);
    }

    @Test
    public void test11424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11424");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setrewrite("");
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.String str16 = multiMatchQueryBuilder4.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.QueryValidationException queryValidationException18 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.operator(operator19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.tieBreaker((float) 0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput23 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder20.writeTo(streamOutput23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(type17);
        org.junit.Assert.assertNull(queryValidationException18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test11425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11425");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.cutoffFrequency((float) (-1L));
        multiMatchQueryBuilder12.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"\"\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.getPROTOTYPE();
        java.lang.String str18 = multiMatchQueryBuilder12.rewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}" + "'", str18, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test11426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11426");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Object obj10 = multiMatchQueryBuilder4.text;
        float float11 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float14 = multiMatchQueryBuilder4.gettieBreaker();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException24 = multiMatchQueryBuilder19.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.cutoffFrequency((float) (byte) 100);
        float float27 = multiMatchQueryBuilder19.boost();
        multiMatchQueryBuilder19.setanalyzer("");
        java.lang.Boolean boolean30 = multiMatchQueryBuilder19.getuseDisMax();
        java.lang.String str31 = multiMatchQueryBuilder19.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder19.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray37 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray37);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.operator(operator39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder38.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder42.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness47 = multiMatchQueryBuilder42.getfuzziness();
        multiMatchQueryBuilder33.fuzziness = fuzziness47;
        multiMatchQueryBuilder4.setfuzziness(fuzziness47);
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type52 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) 0.0d);
        multiMatchQueryBuilder54.prefixLength = (-1);
        multiMatchQueryBuilder54.cutoffFrequency = 1.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder54.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder60.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzziness\" : \"10\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder60.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 1,\n    \"maxExpansions\" : 100,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder65.setslop((java.lang.Integer) 1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "multi_match" + "'", obj10, "multi_match");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 1.0f + "'", float11 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(queryValidationException24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(fuzziness47);
        org.junit.Assert.assertNull(type52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
    }

    @Test
    public void test11427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11427");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        float float7 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        multiMatchQueryBuilder4.tieBreaker = 100.0f;
        multiMatchQueryBuilder4.cutoffFrequency = 10.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.lenient(true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 1.0f + "'", float7 == 1.0f);
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
    }

    @Test
    public void test11428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11428");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.type;
        org.elasticsearch.index.query.Operator operator11 = null;
        multiMatchQueryBuilder4.setoperator(operator11);
        org.elasticsearch.index.query.Operator operator13 = null;
        multiMatchQueryBuilder4.operator = operator13;
        java.lang.String str15 = multiMatchQueryBuilder4.queryName();
        java.lang.Boolean boolean16 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.tieBreaker((float) (short) -1);
        org.elasticsearch.common.io.stream.StreamInput streamInput19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.readFrom(streamInput19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test11429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11429");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.type;
        org.elasticsearch.index.query.Operator operator11 = null;
        multiMatchQueryBuilder4.setoperator(operator11);
        java.lang.String str13 = multiMatchQueryBuilder4.toString();
        multiMatchQueryBuilder4.cutoffFrequency = 10.0f;
        java.lang.Boolean boolean16 = multiMatchQueryBuilder4.getuseDisMax();
        org.elasticsearch.common.unit.Fuzziness fuzziness17 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.String str18 = multiMatchQueryBuilder4.getNAME();
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        java.lang.Boolean boolean26 = multiMatchQueryBuilder23.getlenient();
        multiMatchQueryBuilder23.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder23.tieBreaker((float) (-1));
        multiMatchQueryBuilder23.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder23.useDisMax(true);
        multiMatchQueryBuilder36.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException48 = multiMatchQueryBuilder43.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder43.cutoffFrequency((float) (byte) 100);
        float float51 = multiMatchQueryBuilder43.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type52 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type53 = type52.matchQueryType();
        multiMatchQueryBuilder43.settype(type52);
        org.elasticsearch.index.search.MatchQuery.Type type55 = type52.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder36.type(type52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder36.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type59 = multiMatchQueryBuilder36.gettype();
        org.elasticsearch.index.search.MatchQuery.Type type60 = type59.matchQueryType();
        multiMatchQueryBuilder4.settype(type59);
        org.elasticsearch.index.search.MatchQuery.Type type62 = type59.matchQueryType();
        org.elasticsearch.common.ParseField parseField63 = type59.parseField();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNull(fuzziness17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "multi_match" + "'", str18, "multi_match");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(queryValidationException48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 1.0f + "'", float51 == 1.0f);
        org.junit.Assert.assertTrue("'" + type52 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type52.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type53 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type53.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type55.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertTrue("'" + type59 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type59.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type60 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type60.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type62 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type62.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField63);
    }

    @Test
    public void test11430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11430");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"slop\" : 10,\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder18.setuseDisMax((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test11431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11431");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.getPROTOTYPE();
        multiMatchQueryBuilder11.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = multiMatchQueryBuilder11.gettype();
        java.lang.Integer int20 = multiMatchQueryBuilder11.getmaxExpansions();
        java.lang.String str21 = multiMatchQueryBuilder11.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder11.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"slop\" : 0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int24 = multiMatchQueryBuilder11.getprefixLength();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(type19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(int24);
    }

    @Test
    public void test11432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11432");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Object obj15 = multiMatchQueryBuilder4.gettext();
        java.lang.Object obj16 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField20 = type19.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type21 = type19.matchQueryType();
        org.elasticsearch.common.ParseField parseField22 = type19.parseField();
        float float23 = type19.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder4.type((java.lang.Object) type19);
        multiMatchQueryBuilder24.useDisMax = true;
        multiMatchQueryBuilder24.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"prefixLength\" : -1,\n    \"maxExpansions\" : 100,\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String str29 = multiMatchQueryBuilder24.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "multi_match" + "'", obj15, "multi_match");
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "multi_match" + "'", obj16, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField20);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 1.0f + "'", float23 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test11433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11433");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.fuzzyRewrite("");
        multiMatchQueryBuilder14.slop = (-1);
        multiMatchQueryBuilder14.setuseDisMax((java.lang.Boolean) false);
        java.lang.Object obj19 = multiMatchQueryBuilder14.gettext();
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException29 = multiMatchQueryBuilder24.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder24.cutoffFrequency((float) (byte) 100);
        float float32 = multiMatchQueryBuilder24.boost();
        multiMatchQueryBuilder24.setanalyzer("");
        java.lang.Boolean boolean35 = multiMatchQueryBuilder24.getuseDisMax();
        java.lang.String str36 = multiMatchQueryBuilder24.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder24.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder38.fuzzyRewrite = "hi!";
        java.lang.Float float41 = multiMatchQueryBuilder38.gettieBreaker();
        boolean boolean42 = multiMatchQueryBuilder14.equals((java.lang.Object) multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + "multi_match" + "'", obj19, "multi_match");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(queryValidationException29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 1.0f + "'", float32 == 1.0f);
        org.junit.Assert.assertNull(boolean35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(float41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test11434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11434");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery18;
        java.lang.Integer int20 = multiMatchQueryBuilder4.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.maxExpansions = 1;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder4.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type26 = multiMatchQueryBuilder4.gettype();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(type26);
    }

    @Test
    public void test11435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11435");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.maxExpansions = 0;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type16 = type15.matchQueryType();
        multiMatchQueryBuilder4.settype(type15);
        java.lang.String str18 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type15.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type16.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test11436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11436");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.boost((float) (short) 0);
        java.lang.Object obj22 = multiMatchQueryBuilder21.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) 10);
        multiMatchQueryBuilder21.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder21.slop((int) ' ');
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + "multi_match" + "'", obj22, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test11437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11437");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.common.unit.Fuzziness fuzziness9 = multiMatchQueryBuilder8.fuzziness;
        java.util.List<java.lang.String> strList10 = multiMatchQueryBuilder8.fields;
        java.util.List<java.lang.String> strList11 = multiMatchQueryBuilder8.getfields();
        java.lang.Boolean boolean12 = multiMatchQueryBuilder8.getlenient();
        java.lang.Object obj13 = multiMatchQueryBuilder8.text;
        multiMatchQueryBuilder8.useDisMax = false;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(fuzziness9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + "multi_match" + "'", obj13, "multi_match");
    }

    @Test
    public void test11438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11438");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.maxExpansions((int) ' ');
        multiMatchQueryBuilder23.tieBreaker = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"\\\"\\n  }\\n}\",\n    \"maxExpansions\" : -1,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"cutoff_frequency\\\" : -1.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test11439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11439");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("hi!");
        java.lang.Integer int12 = multiMatchQueryBuilder8.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder14.getfuzziness();
        multiMatchQueryBuilder14.cutoffFrequency = 0.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(fuzziness15);
    }

    @Test
    public void test11440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11440");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder11.getfieldsBoosts();
        java.lang.Object obj13 = multiMatchQueryBuilder11.text;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = multiMatchQueryBuilder11.getfieldsBoosts();
        multiMatchQueryBuilder11.setslop((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.slop((int) ' ');
        multiMatchQueryBuilder18.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"slop\" : 0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder18.rewrite;
        java.lang.Integer int22 = multiMatchQueryBuilder18.prefixLength;
        org.elasticsearch.index.query.QueryValidationException queryValidationException23 = multiMatchQueryBuilder18.validate();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap24 = multiMatchQueryBuilder18.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + "multi_match" + "'", obj13, "multi_match");
        org.junit.Assert.assertNull(strObjectFloatHashMap14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(queryValidationException23);
        org.junit.Assert.assertNull(strObjectFloatHashMap24);
    }

    @Test
    public void test11441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11441");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder16.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder16.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder16.tieBreaker((float) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder16.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type28 = null;
        multiMatchQueryBuilder27.type = type28;
        java.util.List<java.lang.String> strList30 = multiMatchQueryBuilder27.getfields();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strList30);
    }

    @Test
    public void test11442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11442");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.lang.String[] strArray4 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder5 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray4);
        org.elasticsearch.index.query.Operator operator6 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder5.operator(operator6);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder5.field("");
        multiMatchQueryBuilder5.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder5.lenient(true);
        java.lang.String str14 = multiMatchQueryBuilder13.toString();
        java.lang.String str15 = multiMatchQueryBuilder13.getfuzzyRewrite();
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        multiMatchQueryBuilder20.minimumShouldMatch = "hi!";
        java.lang.Float float27 = multiMatchQueryBuilder20.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type28 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type29 = type28.matchQueryType();
        float float30 = type28.tieBreaker();
        multiMatchQueryBuilder20.type = type28;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder13.type(type28);
        multiMatchQueryBuilder32.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator35 = null;
        multiMatchQueryBuilder32.operator = operator35;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder32.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException48 = multiMatchQueryBuilder43.validate();
        java.lang.Integer int49 = multiMatchQueryBuilder43.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery50 = multiMatchQueryBuilder43.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder43.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder43.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder43.boost((float) 0);
        java.lang.String str58 = multiMatchQueryBuilder43.fuzzyRewrite;
        multiMatchQueryBuilder43.setanalyzer("multi_match");
        java.lang.String str61 = multiMatchQueryBuilder43.getrewrite();
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion62 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE;
        java.lang.Class<?> wildcardClass63 = fieldCaseConversion62.getClass();
        java.lang.String[] strArray67 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray67);
        org.elasticsearch.index.query.Operator operator69 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder68.operator(operator69);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder68.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException73 = multiMatchQueryBuilder68.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder68.cutoffFrequency((float) (byte) 100);
        java.lang.String str76 = multiMatchQueryBuilder68.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder68.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness79 = multiMatchQueryBuilder68.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder68.getPROTOTYPE();
        java.lang.String[] strArray84 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray84);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder80, strArray84);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass63, strArray84);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str61, strArray84);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder32, strArray84);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder90 = org.elasticsearch.common.xcontent.XContentBuilder.builder(xContent0, strArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str14, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(float27);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type28.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type29.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 0.0f + "'", float30 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(queryValidationException48);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNull(zeroTermsQuery50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + fieldCaseConversion62 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE + "'", fieldCaseConversion62.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE));
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNull(queryValidationException73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNull(fuzziness79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNotNull(strArray84);
    }

    @Test
    public void test11443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11443");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Integer int15 = multiMatchQueryBuilder14.getprefixLength();
        java.lang.Object obj16 = null;
        boolean boolean17 = multiMatchQueryBuilder14.equals(obj16);
        java.lang.String str18 = multiMatchQueryBuilder14.getWriteableName();
        java.lang.Object obj19 = multiMatchQueryBuilder14.gettext();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "multi_match" + "'", str18, "multi_match");
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + "multi_match" + "'", obj19, "multi_match");
    }

    @Test
    public void test11444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11444");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.useDisMax(false);
        java.lang.String str25 = multiMatchQueryBuilder22.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        multiMatchQueryBuilder22.zeroTermsQuery = zeroTermsQuery26;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test11445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11445");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap16 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder8.lenient(true);
        multiMatchQueryBuilder18.tieBreaker = 100.0f;
        java.lang.String str21 = multiMatchQueryBuilder18.getrewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test11446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11446");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.boost((float) 10L);
        java.lang.Integer int20 = multiMatchQueryBuilder19.getprefixLength();
        java.lang.Boolean boolean21 = multiMatchQueryBuilder19.getlenient();
        java.lang.String str22 = multiMatchQueryBuilder19.getrewrite();
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        multiMatchQueryBuilder27.minimumShouldMatch = "hi!";
        java.lang.Float float34 = multiMatchQueryBuilder27.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type35 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type36 = type35.matchQueryType();
        float float37 = type35.tieBreaker();
        multiMatchQueryBuilder27.type = type35;
        org.elasticsearch.index.search.MatchQuery.Type type39 = type35.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder19.type(type35);
        float float41 = type35.tieBreaker();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + false + "'", boolean21, false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(float34);
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type35.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type36.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 0.0f + "'", float37 == 0.0f);
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type39.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 0.0f + "'", float41 == 0.0f);
    }

    @Test
    public void test11447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11447");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder25.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder25.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = multiMatchQueryBuilder25.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField39 = type38.parseField();
        multiMatchQueryBuilder25.type = type38;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder20.type(type38);
        multiMatchQueryBuilder20.setrewrite("");
        multiMatchQueryBuilder20.setprefixLength((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type46 = multiMatchQueryBuilder20.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder20.prefixLength(0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(type37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type46.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
    }

    @Test
    public void test11448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11448");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.maxExpansions(10);
        java.lang.String str22 = multiMatchQueryBuilder21.rewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test11449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11449");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        float float15 = multiMatchQueryBuilder14.boost();
        multiMatchQueryBuilder14.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str18 = multiMatchQueryBuilder14.analyzer;
        multiMatchQueryBuilder14.tieBreaker = 1.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder14.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str23 = multiMatchQueryBuilder14.fuzzyRewrite;
        java.lang.String str24 = multiMatchQueryBuilder14.getminimumShouldMatch();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str23, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test11450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11450");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException25 = multiMatchQueryBuilder20.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.zeroTermsQuery(zeroTermsQuery28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.maxExpansions((-1));
        java.util.List<java.lang.String> strList32 = multiMatchQueryBuilder27.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.Object obj34 = multiMatchQueryBuilder33.text;
        java.lang.String[] strArray38 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray38);
        org.elasticsearch.index.query.Operator operator40 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.operator(operator40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder39.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException44 = multiMatchQueryBuilder39.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder39.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder39.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder39.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type51 = multiMatchQueryBuilder39.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type52 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField53 = type52.parseField();
        multiMatchQueryBuilder39.type = type52;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder33.type(type52);
        org.elasticsearch.index.search.MatchQuery.Type type56 = type52.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder27.type(type52);
        org.elasticsearch.common.ParseField parseField58 = type52.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder8.type(type52);
        org.elasticsearch.common.ParseField parseField60 = type52.parseField();
        float float61 = type52.tieBreaker();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(queryValidationException25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(queryValidationException44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(type51);
        org.junit.Assert.assertTrue("'" + type52 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type52.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type56.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(parseField58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(parseField60);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + 1.0f + "'", float61 == 1.0f);
    }

    @Test
    public void test11451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11451");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery19);
        java.lang.Integer int21 = multiMatchQueryBuilder18.getslop();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(int21);
    }

    @Test
    public void test11452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11452");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        multiMatchQueryBuilder4.setminimumShouldMatch("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = multiMatchQueryBuilder4.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = multiMatchQueryBuilder4.zeroTermsQuery;
        java.lang.String str20 = multiMatchQueryBuilder4.getNAME();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(strObjectFloatHashMap18);
        org.junit.Assert.assertNull(zeroTermsQuery19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
    }

    @Test
    public void test11453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11453");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.cutoffFrequency((float) '4');
        float float13 = multiMatchQueryBuilder12.boost();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery14);
        java.lang.Integer int16 = multiMatchQueryBuilder15.maxExpansions;
        multiMatchQueryBuilder15.prefixLength = 0;
        java.lang.String str19 = multiMatchQueryBuilder15.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder15.cutoffFrequency((float) 0L);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 1.0f + "'", float13 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test11454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11454");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.getPROTOTYPE();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder4.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder19.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}", (float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) -1);
        java.lang.String str25 = multiMatchQueryBuilder24.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test11455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11455");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder17.setuseDisMax((java.lang.Boolean) true);
        multiMatchQueryBuilder17.setprefixLength((java.lang.Integer) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.tieBreaker((float) 100);
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        multiMatchQueryBuilder28.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder28.operator(operator33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder28.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder28.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder23.fuzziness((java.lang.Object) multiMatchQueryBuilder38);
        org.elasticsearch.common.unit.Fuzziness fuzziness40 = multiMatchQueryBuilder39.getfuzziness();
        multiMatchQueryBuilder39.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder39.maxExpansions = 32;
        java.util.List<java.lang.String> strList45 = multiMatchQueryBuilder39.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(fuzziness40);
        org.junit.Assert.assertNotNull(strList45);
    }

    @Test
    public void test11456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11456");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.lang.Integer int8 = multiMatchQueryBuilder4.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean11 = multiMatchQueryBuilder4.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
    }

    @Test
    public void test11457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11457");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.String[] strArray5 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray5);
        org.elasticsearch.index.query.Operator operator7 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.operator(operator7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder6.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = multiMatchQueryBuilder10.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.lenient(false);
        org.elasticsearch.index.query.QueryValidationException queryValidationException16 = multiMatchQueryBuilder15.validate();
        java.lang.String str17 = multiMatchQueryBuilder15.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder15.zeroTermsQuery = zeroTermsQuery18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder15.tieBreaker(0.0f);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder15.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.String str25 = multiMatchQueryBuilder24.getminimumShouldMatch();
        multiMatchQueryBuilder24.maxExpansions = 100;
        java.lang.String[] strArray31 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray31);
        org.elasticsearch.index.query.Operator operator33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.operator(operator33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.lenient(false);
        java.lang.Integer int37 = multiMatchQueryBuilder36.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder36.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str40 = multiMatchQueryBuilder36.minimumShouldMatch;
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException50 = multiMatchQueryBuilder45.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder45.cutoffFrequency((float) (byte) 100);
        java.lang.String str53 = multiMatchQueryBuilder45.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder45.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness56 = multiMatchQueryBuilder45.getfuzziness();
        org.elasticsearch.common.unit.Fuzziness fuzziness57 = null;
        multiMatchQueryBuilder45.fuzziness = fuzziness57;
        java.lang.Integer int59 = multiMatchQueryBuilder45.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery60 = multiMatchQueryBuilder45.zeroTermsQuery;
        boolean boolean61 = multiMatchQueryBuilder36.equals((java.lang.Object) zeroTermsQuery60);
        java.lang.String[] strArray66 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray66);
        java.lang.String[] strArray72 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray66, strArray72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean61, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 100, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) operator22, strArray66);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder78 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(strObjectFloatHashMap11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(queryValidationException16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str25, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(queryValidationException50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNull(fuzziness56);
        org.junit.Assert.assertNull(int59);
        org.junit.Assert.assertNull(zeroTermsQuery60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray72);
    }

    @Test
    public void test11458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11458");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery27 = multiMatchQueryBuilder4.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder4.field("", 100.0f);
        org.elasticsearch.index.query.Operator operator31 = null;
        multiMatchQueryBuilder30.setoperator(operator31);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(zeroTermsQuery27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
    }

    @Test
    public void test11459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11459");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type16 = type15.matchQueryType();
        float float17 = type15.tieBreaker();
        float float18 = type15.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) type15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) -1);
        multiMatchQueryBuilder21.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"slop\" : 0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str24 = multiMatchQueryBuilder21.minimumShouldMatch;
        multiMatchQueryBuilder21.settieBreaker((java.lang.Float) 52.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.slop((int) '#');
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap29 = multiMatchQueryBuilder28.getfieldsBoosts();
        java.lang.String str30 = multiMatchQueryBuilder28.queryName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type15.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type16.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(strObjectFloatHashMap29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test11460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11460");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.cutoffFrequency((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.slop(0);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = null;
        multiMatchQueryBuilder10.setfieldsBoosts(strObjectFloatHashMap15);
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        multiMatchQueryBuilder21.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder21.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.maxExpansions((int) (short) 10);
        java.lang.String[] strArray33 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray33);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder38.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness43 = multiMatchQueryBuilder38.getfuzziness();
        multiMatchQueryBuilder27.fuzziness = fuzziness43;
        multiMatchQueryBuilder10.setfuzziness(fuzziness43);
        java.lang.String str46 = multiMatchQueryBuilder10.rewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type47 = multiMatchQueryBuilder10.gettype();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(fuzziness43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(type47);
    }

    @Test
    public void test11461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11461");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        java.lang.String str20 = multiMatchQueryBuilder8.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder8.tieBreaker(0.0f);
        java.lang.String str23 = multiMatchQueryBuilder8.getWriteableName();
        multiMatchQueryBuilder8.settieBreaker((java.lang.Float) 0.0f);
        multiMatchQueryBuilder8.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "multi_match" + "'", str23, "multi_match");
    }

    @Test
    public void test11462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11462");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("hi!");
        java.lang.Integer int12 = multiMatchQueryBuilder8.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder14.getfuzziness();
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        java.lang.String str23 = multiMatchQueryBuilder20.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder20.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder20.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.cutoffFrequency((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.slop(0);
        java.lang.Integer int31 = multiMatchQueryBuilder26.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder26.boost((float) (-1));
        java.lang.String str34 = multiMatchQueryBuilder26.fuzzyRewrite;
        boolean boolean35 = multiMatchQueryBuilder14.equals((java.lang.Object) multiMatchQueryBuilder26);
        java.lang.Integer int36 = multiMatchQueryBuilder14.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(fuzziness15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "multi_match" + "'", str23, "multi_match");
        org.junit.Assert.assertNull(fuzziness24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(int36);
    }

    @Test
    public void test11463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11463");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = null;
        multiMatchQueryBuilder13.fuzziness = fuzziness16;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = multiMatchQueryBuilder13.zeroTermsQuery;
        org.elasticsearch.index.query.Operator operator19 = multiMatchQueryBuilder13.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.boost((float) 32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.queryName("");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(zeroTermsQuery18);
        org.junit.Assert.assertNull(operator19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test11464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11464");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList18 = multiMatchQueryBuilder4.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.prefixLength((int) ' ');
        java.util.List<java.lang.String> strList21 = multiMatchQueryBuilder20.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test11465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11465");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        java.lang.Object obj11 = multiMatchQueryBuilder10.gettext();
        java.lang.String[] strArray15 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray15);
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap21 = multiMatchQueryBuilder20.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.zeroTermsQuery(zeroTermsQuery22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder20.lenient(false);
        java.lang.Object obj26 = multiMatchQueryBuilder25.gettext();
        java.lang.Integer int27 = multiMatchQueryBuilder25.getslop();
        multiMatchQueryBuilder25.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder25.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder25.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder25.prefixLength((int) '#');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = multiMatchQueryBuilder35.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = multiMatchQueryBuilder35.type;
        boolean boolean38 = multiMatchQueryBuilder10.equals((java.lang.Object) multiMatchQueryBuilder35);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder10.operator(operator39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.tieBreaker((float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.tieBreaker(10.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "multi_match" + "'", obj11, "multi_match");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(strObjectFloatHashMap21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + "multi_match" + "'", obj26, "multi_match");
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(zeroTermsQuery36);
        org.junit.Assert.assertNull(type37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
    }

    @Test
    public void test11466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11466");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.Operator operator10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.operator(operator10);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) (-1.0f));
        java.lang.String[] strArray17 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray17);
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.operator(operator19);
        java.lang.Boolean boolean21 = multiMatchQueryBuilder18.getlenient();
        multiMatchQueryBuilder18.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder18.tieBreaker((float) (-1));
        java.lang.Integer int28 = multiMatchQueryBuilder27.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type29 = multiMatchQueryBuilder27.gettype();
        java.lang.String[] strArray33 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray33);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        java.lang.String str37 = multiMatchQueryBuilder34.getWriteableName();
        java.lang.Boolean boolean38 = multiMatchQueryBuilder34.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder34.getPROTOTYPE();
        multiMatchQueryBuilder34.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray45 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray45);
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.operator(operator47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder46.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException51 = multiMatchQueryBuilder46.validate();
        java.lang.Integer int52 = multiMatchQueryBuilder46.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery53 = multiMatchQueryBuilder46.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder46.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder46.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder46.boost((float) 0);
        java.lang.String str61 = multiMatchQueryBuilder46.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap62 = multiMatchQueryBuilder46.fieldsBoosts;
        multiMatchQueryBuilder34.fieldsBoosts = strObjectFloatHashMap62;
        multiMatchQueryBuilder27.setfieldsBoosts(strObjectFloatHashMap62);
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap62;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder67.getPROTOTYPE();
        multiMatchQueryBuilder67.cutoffFrequency = 97.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNull(type29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "multi_match" + "'", str37, "multi_match");
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(queryValidationException51);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNull(zeroTermsQuery53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
    }

    @Test
    public void test11467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11467");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"boost\" : 10.0\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test11468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11468");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int22 = multiMatchQueryBuilder16.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder16.prefixLength((int) ' ');
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test11469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11469");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setrewrite("");
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.lenient(false);
        java.lang.String str20 = multiMatchQueryBuilder17.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 100,\n    \"rewrite\" : \"multi_match\",\n    \"lenient\" : false,\n    \"boost\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.maxExpansions((int) (byte) 10);
        java.lang.String[] strArray28 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray28);
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.operator(operator30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder29.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException34 = multiMatchQueryBuilder29.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder29.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj37 = multiMatchQueryBuilder29.text;
        java.lang.String str38 = multiMatchQueryBuilder29.getName();
        java.lang.Object obj39 = multiMatchQueryBuilder29.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type40 = multiMatchQueryBuilder29.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder29.fuzziness((java.lang.Object) 10.0d);
        boolean boolean43 = multiMatchQueryBuilder24.equals((java.lang.Object) multiMatchQueryBuilder29);
        java.lang.String str44 = multiMatchQueryBuilder24.getWriteableName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(queryValidationException34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertEquals("'" + obj37 + "' != '" + "multi_match" + "'", obj37, "multi_match");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "multi_match" + "'", str38, "multi_match");
        org.junit.Assert.assertEquals("'" + obj39 + "' != '" + "multi_match" + "'", obj39, "multi_match");
        org.junit.Assert.assertNull(type40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "multi_match" + "'", str44, "multi_match");
    }

    @Test
    public void test11470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11470");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.queryName("");
        multiMatchQueryBuilder14.setslop((java.lang.Integer) 0);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params18 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder14.doXContent(xContentBuilder17, params18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(params18);
    }

    @Test
    public void test11471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11471");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int16 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.QueryValidationException queryValidationException19 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.maxExpansions((int) (byte) 1);
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder4.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(queryValidationException19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test11472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11472");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        multiMatchQueryBuilder4.setcutoffFrequency((java.lang.Float) 0.0f);
        multiMatchQueryBuilder4.slop = 0;
        java.lang.Boolean boolean22 = multiMatchQueryBuilder4.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.boost((float) 1);
        java.lang.String str26 = multiMatchQueryBuilder25.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = multiMatchQueryBuilder25.gettype();
        float float28 = type27.tieBreaker();
        multiMatchQueryBuilder4.type = type27;
        org.elasticsearch.common.ParseField parseField30 = type27.parseField();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}" + "'", str26, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"slop\" : 10,\n    \"maxExpansions\" : 1,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0,\\n    \\\"_name\\\" : \\\"multi_match\\\"\\n  }\\n}\",\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 1.0f + "'", float28 == 1.0f);
        org.junit.Assert.assertNotNull(parseField30);
    }

    @Test
    public void test11473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11473");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        java.lang.String str14 = multiMatchQueryBuilder4.getrewrite();
        multiMatchQueryBuilder4.useDisMax = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) (short) -1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery19;
        org.elasticsearch.index.query.QueryValidationException queryValidationException21 = multiMatchQueryBuilder4.validate();
        multiMatchQueryBuilder4.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\" ],\\n    \\\"boost\\\" : 0.0,\\n    \\\"Name\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : \\\\\\\"multi_match\\\\\\\",\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"multi_match\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"minimum_should_match\\\\\\\" : \\\\\\\"hi!\\\\\\\",\\\\n    \\\\\\\"lenient\\\\\\\" : true,\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\"\\n  }\\n}\",\n    \"prefix_length\" : 0,\n    \"use_dis_max\" : true,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(queryValidationException21);
    }

    @Test
    public void test11474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11474");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion15 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.CAMELCASE;
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion15);
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.fuzziness((java.lang.Object) fieldCaseConversion15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder20.getfuzzyRewrite();
        java.lang.Object obj22 = multiMatchQueryBuilder20.text;
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap32 = multiMatchQueryBuilder31.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder31.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException48 = multiMatchQueryBuilder43.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder43.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder43.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder43.fuzzyRewrite("hi!");
        multiMatchQueryBuilder43.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery57 = null;
        multiMatchQueryBuilder43.zeroTermsQuery = zeroTermsQuery57;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder43.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder60.prefixLength((-1));
        multiMatchQueryBuilder62.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder62.lenient(true);
        java.lang.String[] strArray70 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray70);
        org.elasticsearch.index.query.Operator operator72 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder71.operator(operator72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder71.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder75.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder75.setanalyzer("multi_match");
        org.elasticsearch.index.query.QueryValidationException queryValidationException80 = multiMatchQueryBuilder75.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery81 = multiMatchQueryBuilder75.zeroTermsQuery;
        java.lang.String str82 = multiMatchQueryBuilder75.getrewrite();
        multiMatchQueryBuilder75.lenient = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder75.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap88 = multiMatchQueryBuilder75.fieldsBoosts;
        multiMatchQueryBuilder66.fieldsBoosts = strObjectFloatHashMap88;
        multiMatchQueryBuilder34.setfieldsBoosts(strObjectFloatHashMap88);
        multiMatchQueryBuilder20.fieldsBoosts = strObjectFloatHashMap88;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + fieldCaseConversion15 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.CAMELCASE + "'", fieldCaseConversion15.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.CAMELCASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + "multi_match" + "'", obj22, "multi_match");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(strObjectFloatHashMap32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(queryValidationException48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNull(queryValidationException80);
        org.junit.Assert.assertNull(zeroTermsQuery81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap88);
    }

    @Test
    public void test11475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11475");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder16.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.operator(operator21);
        java.lang.Float float23 = multiMatchQueryBuilder22.tieBreaker;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = multiMatchQueryBuilder22.getzeroTermsQuery();
        java.lang.String str25 = multiMatchQueryBuilder22.getfuzzyRewrite();
        java.lang.Integer int26 = multiMatchQueryBuilder22.prefixLength;
        java.lang.String str27 = multiMatchQueryBuilder22.fuzzyRewrite;
        java.lang.String[] strArray31 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray31);
        org.elasticsearch.index.query.Operator operator33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.operator(operator33);
        java.lang.Boolean boolean35 = multiMatchQueryBuilder32.getlenient();
        multiMatchQueryBuilder32.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder32.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness40 = multiMatchQueryBuilder39.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder39.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.Integer int43 = multiMatchQueryBuilder39.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder39.getPROTOTYPE();
        java.lang.Object obj45 = multiMatchQueryBuilder44.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder44.boost((float) (short) 1);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap48 = multiMatchQueryBuilder47.fieldsBoosts;
        multiMatchQueryBuilder22.setfieldsBoosts(strObjectFloatHashMap48);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(float23);
        org.junit.Assert.assertNull(zeroTermsQuery24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(boolean35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(fuzziness40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap48);
    }

    @Test
    public void test11476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11476");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder11.getfieldsBoosts();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder11.fieldsBoosts = strObjectFloatHashMap13;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery15);
        org.elasticsearch.index.query.QueryValidationException queryValidationException17 = multiMatchQueryBuilder11.validate();
        java.lang.String str18 = multiMatchQueryBuilder11.getanalyzer();
        java.lang.Object obj19 = multiMatchQueryBuilder11.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder11.prefixLength((int) (byte) 10);
        org.elasticsearch.index.query.QueryValidationException queryValidationException22 = multiMatchQueryBuilder11.validate();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap23 = multiMatchQueryBuilder11.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(queryValidationException17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + "multi_match" + "'", obj19, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(queryValidationException22);
        org.junit.Assert.assertNull(strObjectFloatHashMap23);
    }

    @Test
    public void test11477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11477");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        java.lang.String str14 = multiMatchQueryBuilder12.getfuzzyRewrite();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        multiMatchQueryBuilder19.minimumShouldMatch = "hi!";
        java.lang.Float float26 = multiMatchQueryBuilder19.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type28 = type27.matchQueryType();
        float float29 = type27.tieBreaker();
        multiMatchQueryBuilder19.type = type27;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder12.type(type27);
        multiMatchQueryBuilder31.maxExpansions = 100;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.prefixLength((int) (short) 0);
        org.elasticsearch.index.query.Operator operator36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.operator(operator36);
        java.lang.Float float38 = multiMatchQueryBuilder37.tieBreaker;
        java.lang.Integer int39 = multiMatchQueryBuilder37.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder37.getPROTOTYPE();
        float float41 = multiMatchQueryBuilder40.boost();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(float38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 1.0f + "'", float41 == 1.0f);
    }

    @Test
    public void test11478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11478");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery8 = multiMatchQueryBuilder4.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str11 = multiMatchQueryBuilder4.rewrite;
        java.lang.Integer int12 = multiMatchQueryBuilder4.getprefixLength();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNull(zeroTermsQuery8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test11479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11479");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setrewrite("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap15;
        org.elasticsearch.common.unit.Fuzziness fuzziness17 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.cutoffFrequency((float) 'a');
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 97);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(fuzziness17);
        org.junit.Assert.assertNull(fuzziness18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test11480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11480");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.useDisMax(false);
        multiMatchQueryBuilder14.tieBreaker = 52.0f;
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.operator(operator17);
        multiMatchQueryBuilder14.tieBreaker = 97.0f;
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        java.lang.Boolean boolean28 = multiMatchQueryBuilder25.getlenient();
        multiMatchQueryBuilder25.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type31 = multiMatchQueryBuilder25.gettype();
        multiMatchQueryBuilder25.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder25.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.useDisMax(false);
        java.lang.String str38 = multiMatchQueryBuilder37.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder37.field("multi_match");
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.lenient(false);
        java.lang.Integer int50 = multiMatchQueryBuilder49.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float53 = multiMatchQueryBuilder49.gettieBreaker();
        multiMatchQueryBuilder49.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}";
        org.elasticsearch.common.unit.Fuzziness fuzziness56 = multiMatchQueryBuilder49.fuzziness;
        java.lang.String[] strArray60 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray60);
        org.elasticsearch.index.query.Operator operator62 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder61.operator(operator62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder61.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap66 = multiMatchQueryBuilder65.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery67 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder65.zeroTermsQuery(zeroTermsQuery67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder65.lenient(false);
        multiMatchQueryBuilder65.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery73 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder65.zeroTermsQuery(zeroTermsQuery73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder74.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type77 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder74.settype(type77);
        multiMatchQueryBuilder49.type = type77;
        multiMatchQueryBuilder40.type = type77;
        org.elasticsearch.common.ParseField parseField81 = type77.parseField();
        float float82 = type77.tieBreaker();
        multiMatchQueryBuilder14.type = type77;
        org.elasticsearch.index.search.MatchQuery.Type type84 = type77.matchQueryType();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "multi_match" + "'", str12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(boolean28);
        org.junit.Assert.assertNull(type31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(float53);
        org.junit.Assert.assertNull(fuzziness56);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNull(strObjectFloatHashMap66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertTrue("'" + type77 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type77.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(parseField81);
        org.junit.Assert.assertTrue("'" + float82 + "' != '" + 0.0f + "'", float82 == 0.0f);
        org.junit.Assert.assertTrue("'" + type84 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type84.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test11481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11481");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.Integer int14 = multiMatchQueryBuilder13.slop;
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.Operator operator22 = null;
        multiMatchQueryBuilder19.operator = operator22;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder19.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = multiMatchQueryBuilder19.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        multiMatchQueryBuilder19.type = type27;
        multiMatchQueryBuilder13.settype(type27);
        multiMatchQueryBuilder13.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(zeroTermsQuery26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
    }

    @Test
    public void test11482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11482");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder14.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test11483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11483");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float12 = multiMatchQueryBuilder8.gettieBreaker();
        multiMatchQueryBuilder8.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder18.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        multiMatchQueryBuilder25.operator = operator26;
        org.elasticsearch.common.unit.Fuzziness fuzziness28 = multiMatchQueryBuilder25.getfuzziness();
        multiMatchQueryBuilder25.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder25.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap34 = null;
        multiMatchQueryBuilder25.fieldsBoosts = strObjectFloatHashMap34;
        multiMatchQueryBuilder25.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder25.zeroTermsQuery(zeroTermsQuery38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder18.fuzziness((java.lang.Object) multiMatchQueryBuilder25);
        java.lang.String str41 = multiMatchQueryBuilder25.getName();
        java.lang.Boolean boolean42 = multiMatchQueryBuilder25.getlenient();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNull(fuzziness28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multi_match" + "'", str41, "multi_match");
        org.junit.Assert.assertNull(boolean42);
    }

    @Test
    public void test11484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11484");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.common.unit.Fuzziness fuzziness11 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery12);
        java.util.List<java.lang.String> strList14 = multiMatchQueryBuilder13.getfields();
        java.lang.String str15 = multiMatchQueryBuilder13.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(fuzziness11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test11485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11485");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder4.toString();
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion16 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE;
        java.lang.Class<?> wildcardClass17 = fieldCaseConversion16.getClass();
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        java.lang.String str30 = multiMatchQueryBuilder22.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder22.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness33 = multiMatchQueryBuilder22.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder22.getPROTOTYPE();
        java.lang.String[] strArray38 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder34, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass17, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) strArray38);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertTrue("'" + fieldCaseConversion16 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE + "'", fieldCaseConversion16.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(fuzziness33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
    }

    @Test
    public void test11486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11486");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder21.settieBreaker((java.lang.Float) (-1.0f));
        java.lang.Integer int24 = multiMatchQueryBuilder21.prefixLength;
        java.lang.Boolean boolean25 = multiMatchQueryBuilder21.useDisMax;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(boolean25);
    }

    @Test
    public void test11487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11487");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder24.setoperator(operator29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder24.zeroTermsQuery = zeroTermsQuery31;
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        multiMatchQueryBuilder37.maxExpansions = 0;
        java.lang.Boolean boolean40 = multiMatchQueryBuilder37.lenient;
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap50 = multiMatchQueryBuilder49.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.minimumShouldMatch("multi_match");
        java.lang.String str53 = multiMatchQueryBuilder52.toString();
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.Operator operator59 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.operator(operator59);
        java.lang.String str61 = multiMatchQueryBuilder58.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness62 = multiMatchQueryBuilder58.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder58.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.cutoffFrequency((float) '4');
        boolean boolean67 = multiMatchQueryBuilder52.equals((java.lang.Object) multiMatchQueryBuilder64);
        multiMatchQueryBuilder64.setmaxExpansions((java.lang.Integer) (-1));
        multiMatchQueryBuilder64.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder37.fuzziness((java.lang.Object) multiMatchQueryBuilder64);
        org.elasticsearch.index.query.Operator operator73 = null;
        multiMatchQueryBuilder37.operator = operator73;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder37.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"boost\" : 1.0\n  }\n}", (float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder37.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}", (float) 1L);
        multiMatchQueryBuilder37.minimumShouldMatch = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder37.maxExpansions(1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(boolean40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(strObjectFloatHashMap50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str53, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "multi_match" + "'", str61, "multi_match");
        org.junit.Assert.assertNull(fuzziness62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
    }

    @Test
    public void test11488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11488");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.tieBreaker(10.0f);
        java.lang.Integer int16 = multiMatchQueryBuilder15.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test11489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11489");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        multiMatchQueryBuilder4.setminimumShouldMatch("");
        java.lang.String str18 = multiMatchQueryBuilder4.rewrite;
        java.lang.String str19 = multiMatchQueryBuilder4.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = multiMatchQueryBuilder4.type;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder4.getzeroTermsQuery();
        java.lang.Integer int22 = multiMatchQueryBuilder4.slop;
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException32 = multiMatchQueryBuilder27.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder27.cutoffFrequency((float) (byte) 100);
        java.lang.String str35 = multiMatchQueryBuilder27.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder27.queryName("");
        multiMatchQueryBuilder37.setslop((java.lang.Integer) 0);
        java.lang.String[] strArray43 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) int22, strArray43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder46.getPROTOTYPE();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multi_match" + "'", str19, "multi_match");
        org.junit.Assert.assertNull(type20);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(queryValidationException32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
    }

    @Test
    public void test11490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11490");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder18.type;
        java.lang.Boolean boolean22 = multiMatchQueryBuilder18.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type23 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField24 = type23.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type25 = type23.matchQueryType();
        float float26 = type23.tieBreaker();
        float float27 = type23.tieBreaker();
        multiMatchQueryBuilder18.type = type23;
        java.lang.Integer int29 = multiMatchQueryBuilder18.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type23.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField24);
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type25.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 1.0f + "'", float26 == 1.0f);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertNull(int29);
    }

    @Test
    public void test11491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11491");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.slop((-1));
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
    }

    @Test
    public void test11492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11492");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap13;
        java.lang.Object obj15 = multiMatchQueryBuilder4.gettext();
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        multiMatchQueryBuilder20.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder20.lenient(true);
        java.lang.String str29 = multiMatchQueryBuilder28.toString();
        java.lang.String str30 = multiMatchQueryBuilder28.getfuzzyRewrite();
        multiMatchQueryBuilder28.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder28.fuzzyRewrite = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder4.field("", (float) ' ');
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder39 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params40 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder4.doXContent(xContentBuilder39, params40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "multi_match" + "'", obj15, "multi_match");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str29, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(params40);
    }

    @Test
    public void test11493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11493");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.getPROTOTYPE();
        multiMatchQueryBuilder4.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzziness\" : \"10\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentType xContentType26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference27 = multiMatchQueryBuilder4.buildAsBytes(xContentType26);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test11494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11494");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float12 = multiMatchQueryBuilder8.gettieBreaker();
        multiMatchQueryBuilder8.setminimumShouldMatch("");
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException24 = multiMatchQueryBuilder19.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.cutoffFrequency((float) (byte) 100);
        float float27 = multiMatchQueryBuilder19.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type28 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type29 = type28.matchQueryType();
        multiMatchQueryBuilder19.settype(type28);
        org.elasticsearch.common.ParseField parseField31 = type28.parseField();
        multiMatchQueryBuilder8.type = type28;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder8.queryName("multi_match");
        java.lang.Integer int35 = multiMatchQueryBuilder34.slop;
        org.elasticsearch.index.query.Operator operator36 = null;
        multiMatchQueryBuilder34.operator = operator36;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(queryValidationException24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type28.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type29.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(int35);
    }

    @Test
    public void test11495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11495");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        java.lang.Object obj11 = multiMatchQueryBuilder10.gettext();
        java.lang.String[] strArray15 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray15);
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap21 = multiMatchQueryBuilder20.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.zeroTermsQuery(zeroTermsQuery22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder20.lenient(false);
        java.lang.Object obj26 = multiMatchQueryBuilder25.gettext();
        java.lang.Integer int27 = multiMatchQueryBuilder25.getslop();
        multiMatchQueryBuilder25.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder25.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder25.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder25.prefixLength((int) '#');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = multiMatchQueryBuilder35.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = multiMatchQueryBuilder35.type;
        boolean boolean38 = multiMatchQueryBuilder10.equals((java.lang.Object) multiMatchQueryBuilder35);
        org.elasticsearch.index.query.Operator operator39 = multiMatchQueryBuilder10.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder10.slop((int) '4');
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "multi_match" + "'", obj11, "multi_match");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(strObjectFloatHashMap21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + "multi_match" + "'", obj26, "multi_match");
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(zeroTermsQuery36);
        org.junit.Assert.assertNull(type37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(operator39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
    }

    @Test
    public void test11496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11496");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.slop((int) (short) 0);
        multiMatchQueryBuilder14.cutoffFrequency = 10.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test11497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11497");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        java.lang.String[] strArray11 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray11);
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder16.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.lenient(false);
        multiMatchQueryBuilder16.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery24);
        boolean boolean26 = multiMatchQueryBuilder6.equals((java.lang.Object) multiMatchQueryBuilder25);
        multiMatchQueryBuilder25.tieBreaker = 1.0f;
        java.lang.String str29 = multiMatchQueryBuilder25.minimumShouldMatch;
        java.lang.String str30 = multiMatchQueryBuilder25.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = multiMatchQueryBuilder25.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"tieBreaker\" : 1.0,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}" + "'", str30, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"tieBreaker\" : 1.0,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(zeroTermsQuery31);
    }

    @Test
    public void test11498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11498");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.maxExpansions((-1));
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder11.getfields();
        multiMatchQueryBuilder11.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.useDisMax(true);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        java.lang.String str33 = multiMatchQueryBuilder25.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder25.queryName("");
        multiMatchQueryBuilder35.setslop((java.lang.Integer) 0);
        java.lang.String[] strArray41 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) true, strArray41);
        java.lang.Integer int45 = multiMatchQueryBuilder44.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNull(int45);
    }

    @Test
    public void test11499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11499");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.type;
        org.elasticsearch.index.query.Operator operator11 = null;
        multiMatchQueryBuilder4.setoperator(operator11);
        java.lang.String str13 = multiMatchQueryBuilder4.toString();
        multiMatchQueryBuilder4.cutoffFrequency = 10.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean18 = multiMatchQueryBuilder17.lenient;
        java.lang.String str19 = multiMatchQueryBuilder17.rewrite;
        java.lang.Boolean boolean20 = multiMatchQueryBuilder17.lenient;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.slop((int) 'a');
        java.lang.String str23 = multiMatchQueryBuilder22.getWriteableName();
        java.lang.String str24 = multiMatchQueryBuilder22.minimumShouldMatch;
        multiMatchQueryBuilder22.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 0,\n    \"prefixLength\" : 35,\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "multi_match" + "'", str23, "multi_match");
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test11500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11500");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        java.lang.Float float12 = multiMatchQueryBuilder11.cutoffFrequency;
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder17.getlenient();
        multiMatchQueryBuilder17.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.cutoffFrequency(0.0f);
        java.lang.String str25 = multiMatchQueryBuilder24.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder24.maxExpansions = 100;
        java.lang.String[] strArray33 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray33);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        multiMatchQueryBuilder34.setrewrite("");
        java.util.List<java.lang.String> strList39 = multiMatchQueryBuilder34.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type40 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField41 = type40.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type42 = type40.matchQueryType();
        multiMatchQueryBuilder34.type = type40;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder24.type(type40);
        org.elasticsearch.common.ParseField parseField45 = type40.parseField();
        org.elasticsearch.common.ParseField parseField46 = type40.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder11.type(type40);
        multiMatchQueryBuilder47.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator50 = multiMatchQueryBuilder47.operator;
        multiMatchQueryBuilder47.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"hi!\\\",\\n    \\\"slop\\\" : 0,\\n    \\\"minimum_should_match\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : \\\\\\\"multi_match\\\\\\\",\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"multi_match\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"minimum_should_match\\\\\\\" : \\\\\\\"multi_match\\\\\\\",\\\\n    \\\\\\\"boost\\\\\\\" : 1.0\\\\n  }\\\\n}\\\",\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type40.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField41);
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type42.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(parseField45);
        org.junit.Assert.assertNotNull(parseField46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(operator50);
    }
}
