import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test01001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01001");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        org.elasticsearch.index.query.QueryValidationException queryValidationException14 = multiMatchQueryBuilder13.validate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass15 = queryValidationException14.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(queryValidationException14);
    }

    @Test
    public void test01002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01002");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.useDisMax(true);
        multiMatchQueryBuilder17.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException29 = multiMatchQueryBuilder24.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder24.cutoffFrequency((float) (byte) 100);
        float float32 = multiMatchQueryBuilder24.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type33 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type34 = type33.matchQueryType();
        multiMatchQueryBuilder24.settype(type33);
        org.elasticsearch.index.search.MatchQuery.Type type36 = type33.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder17.type(type33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder17.lenient(false);
        java.lang.Boolean boolean40 = multiMatchQueryBuilder17.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(queryValidationException29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 1.0f + "'", float32 == 1.0f);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type33.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type34.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type36.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertEquals("'" + boolean40 + "' != '" + true + "'", boolean40, true);
    }

    @Test
    public void test01003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01003");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
    }

    @Test
    public void test01004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01004");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.common.unit.Fuzziness fuzziness10 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness10;
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 10);
        multiMatchQueryBuilder4.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test01005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01005");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion15 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.CAMELCASE;
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion15);
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.fuzziness((java.lang.Object) fieldCaseConversion15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap21 = multiMatchQueryBuilder20.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + fieldCaseConversion15 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.CAMELCASE + "'", fieldCaseConversion15.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.CAMELCASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(strObjectFloatHashMap21);
    }

    @Test
    public void test01006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01006");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        java.lang.String str14 = multiMatchQueryBuilder11.toString();
        multiMatchQueryBuilder11.useDisMax = false;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder11.getfieldsBoosts();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder18 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params19 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = multiMatchQueryBuilder11.toXContent(xContentBuilder18, params19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"Name\" : \"multi_match\"\n  }\n}" + "'", str14, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"Name\" : \"multi_match\"\n  }\n}");
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNotNull(params19);
    }

    @Test
    public void test01007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01007");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Integer int14 = multiMatchQueryBuilder13.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test01008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01008");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder24.setoperator(operator29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder24.zeroTermsQuery = zeroTermsQuery31;
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        multiMatchQueryBuilder37.maxExpansions = 0;
        multiMatchQueryBuilder37.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : 100,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder42 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params43 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder44 = multiMatchQueryBuilder37.toXContent(xContentBuilder42, params43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(params43);
    }

    @Test
    public void test01009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01009");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery8 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder6.zeroTermsQuery(zeroTermsQuery8);
        org.elasticsearch.index.query.Operator operator10 = multiMatchQueryBuilder6.getoperator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNull(operator10);
    }

    @Test
    public void test01010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01010");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.lang.Integer int8 = multiMatchQueryBuilder4.getmaxExpansions();
        multiMatchQueryBuilder4.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean13 = multiMatchQueryBuilder12.lenient;
        multiMatchQueryBuilder12.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}";
        multiMatchQueryBuilder12.setuseDisMax((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(boolean13);
    }

    @Test
    public void test01011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01011");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("hi!");
        java.lang.Integer int12 = multiMatchQueryBuilder8.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int17 = multiMatchQueryBuilder14.getprefixLength();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test01012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01012");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        java.lang.Object obj5 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder4.tieBreaker((float) (byte) 10);
        java.lang.String str8 = multiMatchQueryBuilder4.minimumShouldMatch;
        multiMatchQueryBuilder4.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.maxExpansions = 97;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + "multi_match" + "'", obj5, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test01013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01013");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        multiMatchQueryBuilder16.setzeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params24 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder22.doXContent(xContentBuilder23, params24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test01014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01014");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.rewrite = "hi!";
        org.elasticsearch.common.io.stream.StreamOutput streamOutput15 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder4.writeTo(streamOutput15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
    }

    @Test
    public void test01015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01015");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.Operator operator9 = null;
        multiMatchQueryBuilder4.setoperator(operator9);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder4.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type14 = multiMatchQueryBuilder13.gettype();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(type14);
    }

    @Test
    public void test01016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01016");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.type;
        org.elasticsearch.index.query.Operator operator11 = null;
        multiMatchQueryBuilder4.setoperator(operator11);
        java.lang.String str13 = multiMatchQueryBuilder4.toString();
        multiMatchQueryBuilder4.cutoffFrequency = 10.0f;
        java.lang.Boolean boolean16 = multiMatchQueryBuilder4.getuseDisMax();
        multiMatchQueryBuilder4.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(boolean16);
    }

    @Test
    public void test01017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01017");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.lang.Integer int8 = multiMatchQueryBuilder4.getmaxExpansions();
        multiMatchQueryBuilder4.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder4.getName();
        java.lang.Boolean boolean14 = multiMatchQueryBuilder4.getlenient();
        java.lang.Class<?> wildcardClass15 = multiMatchQueryBuilder4.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test01018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01018");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.getPROTOTYPE();
        multiMatchQueryBuilder16.setmaxExpansions((java.lang.Integer) 100);
        java.lang.Boolean boolean19 = multiMatchQueryBuilder16.useDisMax;
        org.elasticsearch.index.query.QueryShardContext queryShardContext20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query21 = multiMatchQueryBuilder16.toFilter(queryShardContext20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(fuzziness15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
// flaky:         org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + false + "'", boolean19, false);
    }

    @Test
    public void test01019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01019");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        multiMatchQueryBuilder4.setminimumShouldMatch("");
        java.lang.String str18 = multiMatchQueryBuilder4.rewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.useDisMax(true);
        java.lang.Object obj21 = multiMatchQueryBuilder20.text;
        multiMatchQueryBuilder20.rewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException33 = multiMatchQueryBuilder28.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder28.cutoffFrequency((float) (byte) 100);
        java.lang.String str36 = multiMatchQueryBuilder28.getanalyzer();
        multiMatchQueryBuilder28.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str39 = multiMatchQueryBuilder28.fuzzyRewrite;
        java.lang.Integer int40 = multiMatchQueryBuilder28.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder28.boost((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.cutoffFrequency((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder44.getPROTOTYPE();
        boolean boolean46 = multiMatchQueryBuilder20.equals((java.lang.Object) multiMatchQueryBuilder44);
        java.lang.Float float47 = multiMatchQueryBuilder44.tieBreaker;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + "multi_match" + "'", obj21, "multi_match");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(queryValidationException33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(float47);
    }

    @Test
    public void test01020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01020");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder17.setuseDisMax((java.lang.Boolean) true);
        multiMatchQueryBuilder17.setprefixLength((java.lang.Integer) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.tieBreaker((float) 100);
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        multiMatchQueryBuilder28.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder28.operator(operator33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder28.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder28.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder23.fuzziness((java.lang.Object) multiMatchQueryBuilder38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray45 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray45);
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.operator(operator47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder46.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException51 = multiMatchQueryBuilder46.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder46.cutoffFrequency((float) (byte) 100);
        java.lang.String str54 = multiMatchQueryBuilder46.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery55 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder46.zeroTermsQuery(zeroTermsQuery55);
        multiMatchQueryBuilder46.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder46.setmaxExpansions((java.lang.Integer) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder39.type((java.lang.Object) multiMatchQueryBuilder46);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multimatch\" : {?    \"query\" : \"multi_match\",?    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],?    \"maxexpansions\" : 10,?    \"cutofffrequency\" : 100.0,?    \"boost\" : 1.0?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(queryValidationException51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
    }

    @Test
    public void test01021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01021");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = multiMatchQueryBuilder4.getzeroTermsQuery();
        java.lang.String str16 = multiMatchQueryBuilder4.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(zeroTermsQuery15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test01022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01022");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.String str11 = multiMatchQueryBuilder8.getName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "multi_match" + "'", str11, "multi_match");
    }

    @Test
    public void test01023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01023");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder21.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str24 = multiMatchQueryBuilder21.toString();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput25 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder21.writeTo(streamOutput25);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"slop\" : 0,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str24, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"slop\" : 0,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test01024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01024");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.type;
        java.lang.Integer int11 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.setminimumShouldMatch("");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNull(int11);
    }

    @Test
    public void test01025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01025");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        java.lang.String str7 = multiMatchQueryBuilder4.rewrite;
        org.elasticsearch.index.query.Operator operator8 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder4.operator(operator8);
        java.lang.Float float10 = multiMatchQueryBuilder9.tieBreaker;
        java.lang.String[] strArray14 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray14);
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.operator(operator16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder19.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder19.getfuzziness();
        multiMatchQueryBuilder9.fuzziness = fuzziness24;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNull(float10);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(fuzziness24);
    }

    @Test
    public void test01026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01026");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Object obj10 = multiMatchQueryBuilder4.text;
        java.lang.Integer int11 = multiMatchQueryBuilder4.getslop();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.String str13 = multiMatchQueryBuilder4.analyzer;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "multi_match" + "'", obj10, "multi_match");
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test01027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01027");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.type;
        org.elasticsearch.index.query.Operator operator11 = null;
        multiMatchQueryBuilder4.setoperator(operator11);
        org.elasticsearch.index.query.Operator operator13 = null;
        multiMatchQueryBuilder4.operator = operator13;
        java.lang.String str15 = multiMatchQueryBuilder4.queryName();
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder4.fields;
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException26 = multiMatchQueryBuilder21.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.zeroTermsQuery(zeroTermsQuery29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.getPROTOTYPE();
        multiMatchQueryBuilder31.settieBreaker((java.lang.Float) 0.0f);
        multiMatchQueryBuilder31.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder31.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.String[] strArray41 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray41);
        org.elasticsearch.index.query.Operator operator43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.operator(operator43);
        java.lang.String str45 = multiMatchQueryBuilder42.getWriteableName();
        java.lang.Boolean boolean46 = multiMatchQueryBuilder42.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder42.getPROTOTYPE();
        multiMatchQueryBuilder42.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray53 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray53);
        org.elasticsearch.index.query.Operator operator55 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.operator(operator55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder54.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException59 = multiMatchQueryBuilder54.validate();
        java.lang.Integer int60 = multiMatchQueryBuilder54.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery61 = multiMatchQueryBuilder54.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder54.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder54.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder54.boost((float) 0);
        java.lang.String str69 = multiMatchQueryBuilder54.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap70 = multiMatchQueryBuilder54.fieldsBoosts;
        multiMatchQueryBuilder42.fieldsBoosts = strObjectFloatHashMap70;
        multiMatchQueryBuilder37.fieldsBoosts = strObjectFloatHashMap70;
        multiMatchQueryBuilder4.setfieldsBoosts(strObjectFloatHashMap70);
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(queryValidationException26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "multi_match" + "'", str45, "multi_match");
        org.junit.Assert.assertNull(boolean46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNull(queryValidationException59);
        org.junit.Assert.assertNull(int60);
        org.junit.Assert.assertNull(zeroTermsQuery61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap70);
    }

    @Test
    public void test01028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01028");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.type;
        org.elasticsearch.index.query.Operator operator11 = null;
        multiMatchQueryBuilder4.setoperator(operator11);
        org.elasticsearch.index.query.Operator operator13 = null;
        multiMatchQueryBuilder4.operator = operator13;
        java.lang.String str15 = multiMatchQueryBuilder4.queryName();
        java.lang.Boolean boolean16 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.QueryShardContext queryShardContext17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query18 = multiMatchQueryBuilder4.toFilter(queryShardContext17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(boolean16);
    }

    @Test
    public void test01029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01029");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("hi!");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = multiMatchQueryBuilder18.getfieldsBoosts();
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException29 = multiMatchQueryBuilder24.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder24.cutoffFrequency((float) (byte) 100);
        float float32 = multiMatchQueryBuilder24.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type33 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type34 = type33.matchQueryType();
        multiMatchQueryBuilder24.settype(type33);
        org.elasticsearch.index.search.MatchQuery.Type type36 = type33.matchQueryType();
        org.elasticsearch.common.ParseField parseField37 = type33.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder18.type(type33);
        multiMatchQueryBuilder18.setprefixLength((java.lang.Integer) 10);
        multiMatchQueryBuilder18.maxExpansions = 1;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(strObjectFloatHashMap19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(queryValidationException29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 1.0f + "'", float32 == 1.0f);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type33.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type34.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type36.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
    }

    @Test
    public void test01030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01030");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setrewrite("");
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.lenient(false);
        org.elasticsearch.index.query.Operator operator20 = null;
        multiMatchQueryBuilder19.operator = operator20;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test01031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01031");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        java.lang.Object obj5 = multiMatchQueryBuilder4.text;
        java.lang.String[] strArray9 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray9);
        org.elasticsearch.index.query.Operator operator11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.operator(operator11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = multiMatchQueryBuilder14.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder14.lenient(false);
        multiMatchQueryBuilder14.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery22);
        multiMatchQueryBuilder14.tieBreaker = 10.0f;
        java.lang.String[] strArray29 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray29);
        org.elasticsearch.index.query.Operator operator31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.operator(operator31);
        multiMatchQueryBuilder30.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder30.operator(operator35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.maxExpansions((int) (short) 10);
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder47.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness52 = multiMatchQueryBuilder47.getfuzziness();
        multiMatchQueryBuilder36.fuzziness = fuzziness52;
        multiMatchQueryBuilder14.setfuzziness(fuzziness52);
        multiMatchQueryBuilder4.fuzziness = fuzziness52;
        multiMatchQueryBuilder4.tieBreaker = (-1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder4.boost((float) 1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + "multi_match" + "'", obj5, "multi_match");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(strObjectFloatHashMap15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(fuzziness52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
    }

    @Test
    public void test01032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01032");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type8 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type9 = type8.matchQueryType();
        float float10 = type8.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}", (float) 100L);
        java.lang.String str15 = multiMatchQueryBuilder11.getminimumShouldMatch();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type8.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type9.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test01033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01033");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 10);
        java.lang.Integer int19 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder4.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int19);
    }

    @Test
    public void test01034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01034");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int16 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.QueryValidationException queryValidationException19 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.maxExpansions((int) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str24 = multiMatchQueryBuilder23.getNAME();
        multiMatchQueryBuilder23.setlenient((java.lang.Boolean) false);
        java.lang.String str27 = multiMatchQueryBuilder23.queryName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(queryValidationException19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test01035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01035");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder25.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder25.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = multiMatchQueryBuilder25.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField39 = type38.parseField();
        multiMatchQueryBuilder25.type = type38;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder20.type(type38);
        multiMatchQueryBuilder20.setrewrite("");
        org.elasticsearch.index.query.Operator operator44 = multiMatchQueryBuilder20.getoperator();
        java.lang.String[] strArray48 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray48);
        org.elasticsearch.index.query.Operator operator50 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.operator(operator50);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder49.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.fuzziness((java.lang.Object) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap56 = multiMatchQueryBuilder53.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder53.boost((float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder53.cutoffFrequency((float) 0);
        org.elasticsearch.common.unit.Fuzziness fuzziness61 = multiMatchQueryBuilder53.getfuzziness();
        multiMatchQueryBuilder20.setfuzziness(fuzziness61);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder20.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"fuzziness\" : \"BEST_FIELDS\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery65 = multiMatchQueryBuilder64.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(type37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(operator44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNull(strObjectFloatHashMap56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(fuzziness61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNull(zeroTermsQuery65);
    }

    @Test
    public void test01036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01036");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.lang.String[] strArray4 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder5 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray4);
        org.elasticsearch.index.query.Operator operator6 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder5.operator(operator6);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder5.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException10 = multiMatchQueryBuilder5.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder5.cutoffFrequency((float) (byte) 100);
        float float13 = multiMatchQueryBuilder5.boost();
        multiMatchQueryBuilder5.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder5.rewrite("multi_match");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = multiMatchQueryBuilder5.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder5.boost((float) 0L);
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = null;
        multiMatchQueryBuilder5.setfuzziness(fuzziness21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder5.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.String str26 = multiMatchQueryBuilder25.getminimumShouldMatch();
        multiMatchQueryBuilder25.maxExpansions = 100;
        java.lang.String[] strArray32 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray32);
        org.elasticsearch.index.query.Operator operator34 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.operator(operator34);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.lenient(false);
        java.lang.Integer int38 = multiMatchQueryBuilder37.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder37.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str41 = multiMatchQueryBuilder37.minimumShouldMatch;
        java.lang.String[] strArray45 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray45);
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.operator(operator47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder46.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException51 = multiMatchQueryBuilder46.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder46.cutoffFrequency((float) (byte) 100);
        java.lang.String str54 = multiMatchQueryBuilder46.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder46.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness57 = multiMatchQueryBuilder46.getfuzziness();
        org.elasticsearch.common.unit.Fuzziness fuzziness58 = null;
        multiMatchQueryBuilder46.fuzziness = fuzziness58;
        java.lang.Integer int60 = multiMatchQueryBuilder46.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery61 = multiMatchQueryBuilder46.zeroTermsQuery;
        boolean boolean62 = multiMatchQueryBuilder37.equals((java.lang.Object) zeroTermsQuery61);
        java.lang.String[] strArray67 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray67);
        java.lang.String[] strArray73 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray67, strArray73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean62, strArray67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 100, strArray67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder24, strArray67);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder79 = org.elasticsearch.common.xcontent.XContentBuilder.builder(xContent0, strArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNull(queryValidationException10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 1.0f + "'", float13 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(strObjectFloatHashMap18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str26, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(queryValidationException51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNull(fuzziness57);
        org.junit.Assert.assertNull(int60);
        org.junit.Assert.assertNull(zeroTermsQuery61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray73);
    }

    @Test
    public void test01037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01037");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        java.lang.Object obj11 = multiMatchQueryBuilder10.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder13.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!^97.0\", \"\", \"hi!^97.0\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "multi_match" + "'", obj11, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
    }

    @Test
    public void test01038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01038");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.getPROTOTYPE();
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder16, strArray20);
        java.lang.Boolean boolean23 = multiMatchQueryBuilder22.getlenient();
        multiMatchQueryBuilder22.setprefixLength((java.lang.Integer) 1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(fuzziness15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNull(boolean23);
    }

    @Test
    public void test01039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01039");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.lang.Integer int8 = multiMatchQueryBuilder4.getmaxExpansions();
        multiMatchQueryBuilder4.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder4.getminimumShouldMatch();
        java.lang.String str14 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int15 = multiMatchQueryBuilder4.maxExpansions;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(int15);
    }

    @Test
    public void test01040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01040");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 10.0f);
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
    }

    @Test
    public void test01041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01041");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int13 = multiMatchQueryBuilder12.prefixLength;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder14 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params15 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder16 = multiMatchQueryBuilder12.toXContent(xContentBuilder14, params15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(params15);
    }

    @Test
    public void test01042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01042");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.Object obj2 = null;
        java.lang.String[] strArray6 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray6);
        org.elasticsearch.index.query.Operator operator8 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder7.operator(operator8);
        java.lang.Boolean boolean10 = multiMatchQueryBuilder7.getlenient();
        multiMatchQueryBuilder7.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder7.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder7.tieBreaker((float) (-1));
        multiMatchQueryBuilder7.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder7.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.common.ParseField parseField22 = type21.parseField();
        org.elasticsearch.common.ParseField parseField23 = type21.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.type(type21);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery25);
        java.lang.String[] strArray30 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray30);
        org.elasticsearch.index.query.Operator operator32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.operator(operator32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException36 = multiMatchQueryBuilder31.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder31.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder31.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder31.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness43 = multiMatchQueryBuilder31.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder31.slop((int) (short) 0);
        multiMatchQueryBuilder31.setslop((java.lang.Integer) 100);
        java.lang.Boolean boolean48 = multiMatchQueryBuilder31.getuseDisMax();
        java.lang.String str49 = multiMatchQueryBuilder31.fuzzyRewrite;
        java.lang.String[] strArray54 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray54);
        java.lang.String[] strArray60 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray54, strArray60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str49, strArray54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder26, strArray54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj2, strArray54);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder66 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type21.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(parseField22);
        org.junit.Assert.assertNotNull(parseField23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(queryValidationException36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(fuzziness43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(boolean48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray60);
    }

    @Test
    public void test01043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01043");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.getPROTOTYPE();
        multiMatchQueryBuilder14.settieBreaker((java.lang.Float) 0.0f);
        multiMatchQueryBuilder14.lenient = false;
        multiMatchQueryBuilder14.setmaxExpansions((java.lang.Integer) (-1));
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
    }

    @Test
    public void test01044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01044");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Class<?> wildcardClass19 = multiMatchQueryBuilder4.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test01045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01045");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = multiMatchQueryBuilder4.fuzziness;
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException25 = multiMatchQueryBuilder20.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.cutoffFrequency((float) (byte) 100);
        java.lang.String str28 = multiMatchQueryBuilder20.getanalyzer();
        multiMatchQueryBuilder20.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str31 = multiMatchQueryBuilder20.fuzzyRewrite;
        java.lang.Integer int32 = multiMatchQueryBuilder20.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder20.boost((float) (short) 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray38);
        org.elasticsearch.index.query.Operator operator40 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.operator(operator40);
        java.lang.Boolean boolean42 = multiMatchQueryBuilder39.getlenient();
        multiMatchQueryBuilder39.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder39.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness47 = multiMatchQueryBuilder46.fuzziness;
        multiMatchQueryBuilder46.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder46.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray55 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray55);
        org.elasticsearch.index.query.Operator operator57 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.operator(operator57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder56.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder60.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder60.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness65 = multiMatchQueryBuilder60.getfuzziness();
        multiMatchQueryBuilder46.fuzziness = fuzziness65;
        multiMatchQueryBuilder34.setfuzziness(fuzziness65);
        multiMatchQueryBuilder4.fuzziness = fuzziness65;
        org.elasticsearch.index.query.Operator operator69 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder4.operator(operator69);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap71 = multiMatchQueryBuilder70.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(fuzziness13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(queryValidationException25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(boolean42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNull(fuzziness47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(fuzziness65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNull(strObjectFloatHashMap71);
    }

    @Test
    public void test01046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01046");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.Object obj2 = null;
        java.lang.String[] strArray6 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray6);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj2, strArray6);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
    }

    @Test
    public void test01047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01047");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        multiMatchQueryBuilder4.maxExpansions = 100;
        org.elasticsearch.index.query.Operator operator17 = multiMatchQueryBuilder4.operator;
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder26.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness31 = multiMatchQueryBuilder26.getfuzziness();
        multiMatchQueryBuilder4.fuzziness = fuzziness31;
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder4.boost((float) 1L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.maxExpansions((int) '4');
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(operator17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(fuzziness31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
    }

    @Test
    public void test01048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01048");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery8 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder6.zeroTermsQuery(zeroTermsQuery8);
        java.lang.Integer int10 = multiMatchQueryBuilder9.getmaxExpansions();
        multiMatchQueryBuilder9.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.QueryShardContext queryShardContext13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query14 = multiMatchQueryBuilder9.toQuery(queryShardContext13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test01049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01049");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        java.lang.String str20 = multiMatchQueryBuilder17.fuzzyRewrite;
        multiMatchQueryBuilder17.minimumShouldMatch = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.slop((int) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.tieBreaker((float) (short) 100);
        java.lang.Boolean boolean27 = multiMatchQueryBuilder24.lenient;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + boolean27 + "' != '" + false + "'", boolean27, false);
    }

    @Test
    public void test01050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01050");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery10);
        java.lang.Float float12 = multiMatchQueryBuilder4.getcutoffFrequency();
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder17.getlenient();
        multiMatchQueryBuilder17.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness25 = multiMatchQueryBuilder24.fuzziness;
        multiMatchQueryBuilder24.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder24.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray33 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray33);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder38.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness43 = multiMatchQueryBuilder38.getfuzziness();
        multiMatchQueryBuilder24.fuzziness = fuzziness43;
        multiMatchQueryBuilder4.setfuzziness(fuzziness43);
        java.lang.Class<?> wildcardClass46 = fuzziness43.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(fuzziness25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(fuzziness43);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test01051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01051");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder8.type = type18;
        java.lang.Integer int20 = multiMatchQueryBuilder8.getslop();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder8.getzeroTermsQuery();
        java.lang.String str22 = multiMatchQueryBuilder8.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder8.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 1);
        java.lang.Object obj27 = multiMatchQueryBuilder8.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder8.lenient(true);
        java.lang.String str30 = multiMatchQueryBuilder8.fuzzyRewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + "multi_match" + "'", obj27, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str30, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test01052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01052");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01053");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.util.List<java.lang.String> strList8 = multiMatchQueryBuilder4.fields;
        java.lang.String[] strArray12 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray12);
        org.elasticsearch.index.query.Operator operator14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.operator(operator14);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException18 = multiMatchQueryBuilder13.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = multiMatchQueryBuilder13.getzeroTermsQuery();
        java.lang.Object obj20 = multiMatchQueryBuilder13.text;
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap33 = multiMatchQueryBuilder32.getfieldsBoosts();
        java.lang.String[] strArray37 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray37);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.operator(operator39);
        java.lang.String str41 = multiMatchQueryBuilder38.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness42 = multiMatchQueryBuilder38.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder38.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type45 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder38.settype(type45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder32.type(type45);
        org.elasticsearch.index.search.MatchQuery.Type type48 = type45.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type49 = type45.matchQueryType();
        multiMatchQueryBuilder13.settype(type45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder4.type(type45);
        java.lang.Class<?> wildcardClass52 = type45.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(queryValidationException18);
        org.junit.Assert.assertNull(zeroTermsQuery19);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + "multi_match" + "'", obj20, "multi_match");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(strObjectFloatHashMap33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multi_match" + "'", str41, "multi_match");
        org.junit.Assert.assertNull(fuzziness42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type45.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type48.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type49.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test01054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01054");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        float float15 = multiMatchQueryBuilder14.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.slop((int) (short) 10);
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap30 = multiMatchQueryBuilder29.getfieldsBoosts();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap31 = null;
        multiMatchQueryBuilder29.fieldsBoosts = strObjectFloatHashMap31;
        java.lang.Boolean boolean33 = multiMatchQueryBuilder29.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder29.settype(type34);
        multiMatchQueryBuilder17.type = type34;
        java.lang.Object obj37 = multiMatchQueryBuilder17.text;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(strObjectFloatHashMap30);
        org.junit.Assert.assertNull(boolean33);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertEquals("'" + obj37 + "' != '" + "multi_match" + "'", obj37, "multi_match");
    }

    @Test
    public void test01055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01055");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.boost(100.0f);
        java.lang.Integer int20 = multiMatchQueryBuilder19.getslop();
        java.lang.Object obj21 = multiMatchQueryBuilder19.text;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + "multi_match" + "'", obj21, "multi_match");
    }

    @Test
    public void test01056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01056");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.queryName("");
        multiMatchQueryBuilder14.setrewrite("");
        multiMatchQueryBuilder14.useDisMax = true;
        java.lang.Integer int19 = multiMatchQueryBuilder14.getmaxExpansions();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = multiMatchQueryBuilder14.toXContent(xContentBuilder20, params21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(params21);
    }

    @Test
    public void test01057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01057");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String str16 = multiMatchQueryBuilder4.analyzer;
        multiMatchQueryBuilder4.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryShardContext queryShardContext19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query20 = multiMatchQueryBuilder4.toQuery(queryShardContext19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test01058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01058");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder8.type = type18;
        java.lang.Float float20 = multiMatchQueryBuilder8.gettieBreaker();
        java.lang.String str21 = multiMatchQueryBuilder8.getNAME();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(float20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
    }

    @Test
    public void test01059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01059");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        java.lang.String str9 = multiMatchQueryBuilder4.rewrite;
        java.lang.String str10 = multiMatchQueryBuilder4.getfuzzyRewrite();
        java.lang.Boolean boolean11 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String[] strArray15 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray15);
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException21 = multiMatchQueryBuilder16.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.cutoffFrequency((float) (byte) 100);
        java.lang.String str24 = multiMatchQueryBuilder16.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery25);
        java.lang.Object obj27 = multiMatchQueryBuilder16.gettext();
        java.lang.Object obj28 = multiMatchQueryBuilder16.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder16.boost((float) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type31 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField32 = type31.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type33 = type31.matchQueryType();
        org.elasticsearch.common.ParseField parseField34 = type31.parseField();
        float float35 = type31.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder16.type((java.lang.Object) type31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.type(type31);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = multiMatchQueryBuilder37.getzeroTermsQuery();
        java.lang.Integer int39 = multiMatchQueryBuilder37.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(queryValidationException21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + "multi_match" + "'", obj27, "multi_match");
        org.junit.Assert.assertEquals("'" + obj28 + "' != '" + "multi_match" + "'", obj28, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type31.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField32);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type33.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField34);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 1.0f + "'", float35 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(zeroTermsQuery38);
        org.junit.Assert.assertNull(int39);
    }

    @Test
    public void test01060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01060");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean21 = multiMatchQueryBuilder20.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.boost((float) (-1));
        java.lang.String str24 = multiMatchQueryBuilder23.queryName();
        multiMatchQueryBuilder23.setslop((java.lang.Integer) 100);
        org.elasticsearch.common.xcontent.XContentType xContentType27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference28 = multiMatchQueryBuilder23.buildAsBytes(xContentType27);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test01061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01061");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        java.lang.Object obj5 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder4.tieBreaker((float) (byte) 10);
        java.lang.String str8 = multiMatchQueryBuilder4.minimumShouldMatch;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder4.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + "multi_match" + "'", obj5, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
    }

    @Test
    public void test01062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01062");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.lang.Integer int8 = multiMatchQueryBuilder4.getmaxExpansions();
        multiMatchQueryBuilder4.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder4.getminimumShouldMatch();
        java.lang.String str14 = multiMatchQueryBuilder4.fuzzyRewrite;
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 97);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test01063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01063");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.tieBreaker((float) 10);
        java.lang.Object obj17 = multiMatchQueryBuilder16.gettext();
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder22.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder22.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness34 = multiMatchQueryBuilder22.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder22.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder22.zeroTermsQuery(zeroTermsQuery37);
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException48 = multiMatchQueryBuilder43.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder43.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder43.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder43.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type55 = multiMatchQueryBuilder43.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type56 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField57 = type56.parseField();
        multiMatchQueryBuilder43.type = type56;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder38.type(type56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder16.fuzziness((java.lang.Object) multiMatchQueryBuilder59);
        java.lang.String str61 = multiMatchQueryBuilder59.toString();
        org.elasticsearch.index.query.Operator operator62 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder59.operator(operator62);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput64 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder63.writeTo(streamOutput64);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(fuzziness34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(queryValidationException48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(type55);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type56.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str61, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
    }

    @Test
    public void test01064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01064");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.String str1 = multiMatchQueryBuilder0.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery2 = multiMatchQueryBuilder0.zeroTermsQuery;
        java.lang.String[] strArray6 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray6);
        org.elasticsearch.index.query.Operator operator8 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder7.operator(operator8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder7.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException12 = multiMatchQueryBuilder7.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder7.cutoffFrequency((float) (byte) 100);
        java.lang.String str15 = multiMatchQueryBuilder7.getanalyzer();
        multiMatchQueryBuilder7.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str18 = multiMatchQueryBuilder7.fuzzyRewrite;
        java.lang.Integer int19 = multiMatchQueryBuilder7.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder7.boost((float) (short) 1);
        java.lang.String[] strArray25 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray25);
        org.elasticsearch.index.query.Operator operator27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.operator(operator27);
        java.lang.Boolean boolean29 = multiMatchQueryBuilder26.getlenient();
        multiMatchQueryBuilder26.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder26.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness34 = multiMatchQueryBuilder33.fuzziness;
        multiMatchQueryBuilder33.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder47.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness52 = multiMatchQueryBuilder47.getfuzziness();
        multiMatchQueryBuilder33.fuzziness = fuzziness52;
        multiMatchQueryBuilder21.setfuzziness(fuzziness52);
        multiMatchQueryBuilder0.fuzziness = fuzziness52;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder56 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params57 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder0.doXContent(xContentBuilder56, params57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str1, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(zeroTermsQuery2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(queryValidationException12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(boolean29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(fuzziness34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(fuzziness52);
        org.junit.Assert.assertNotNull(params57);
    }

    @Test
    public void test01065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01065");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        org.elasticsearch.common.unit.Fuzziness fuzziness20 = null;
        multiMatchQueryBuilder4.setfuzziness(fuzziness20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder23.setuseDisMax((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test01066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01066");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 10);
        java.lang.Integer int19 = multiMatchQueryBuilder4.prefixLength;
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.QueryShardContext queryShardContext24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query25 = multiMatchQueryBuilder23.toQuery(queryShardContext24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test01067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01067");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder11.getfieldsBoosts();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder11.fieldsBoosts = strObjectFloatHashMap13;
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder11.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test01068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01068");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.maxExpansions((-1));
        java.lang.String str16 = multiMatchQueryBuilder15.getNAME();
        java.lang.String str17 = multiMatchQueryBuilder15.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.boost((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder15.boost((float) 1L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "multi_match" + "'", str16, "multi_match");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test01069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01069");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder8.fields;
        java.lang.Object obj13 = multiMatchQueryBuilder8.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj16 = multiMatchQueryBuilder15.gettext();
        java.lang.String str17 = multiMatchQueryBuilder15.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + "multi_match" + "'", obj13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "multi_match" + "'", obj16, "multi_match");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multi_match" + "'", str17, "multi_match");
    }

    @Test
    public void test01070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01070");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.type;
        java.lang.Integer int11 = multiMatchQueryBuilder4.slop;
        java.lang.Boolean boolean12 = multiMatchQueryBuilder4.useDisMax;
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException22 = multiMatchQueryBuilder17.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery25);
        multiMatchQueryBuilder26.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.prefixLength((int) (short) 100);
        java.lang.Boolean boolean33 = multiMatchQueryBuilder30.useDisMax;
        java.lang.String str34 = multiMatchQueryBuilder30.getWriteableName();
        float float35 = multiMatchQueryBuilder30.boost();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder4.type((java.lang.Object) multiMatchQueryBuilder30);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multimatch\" : {?    \"query\" : \"multi_match\",?    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],?    \"analyzer\" : \"multi_match\",?    \"prefixlength\" : 100,?    \"cutofffrequency\" : 100.0,?    \"boost\" : 1.0?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(queryValidationException22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(boolean33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "multi_match" + "'", str34, "multi_match");
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 1.0f + "'", float35 == 1.0f);
    }

    @Test
    public void test01071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01071");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
    }

    @Test
    public void test01072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01072");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Object obj11 = multiMatchQueryBuilder10.gettext();
        java.lang.String str12 = multiMatchQueryBuilder10.getrewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "multi_match" + "'", obj11, "multi_match");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test01073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01073");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder8.setanalyzer("multi_match");
        org.elasticsearch.index.query.QueryValidationException queryValidationException13 = multiMatchQueryBuilder8.validate();
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder8.fuzziness;
        org.elasticsearch.index.query.QueryShardContext queryShardContext19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query20 = multiMatchQueryBuilder8.toFilter(queryShardContext19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(queryValidationException13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(fuzziness18);
    }

    @Test
    public void test01074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01074");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.tieBreaker((float) (byte) -1);
        java.lang.Integer int16 = multiMatchQueryBuilder11.getslop();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test01075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01075");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int13 = multiMatchQueryBuilder12.prefixLength;
        multiMatchQueryBuilder12.maxExpansions = 0;
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder12.fuzziness;
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type26 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type27 = type26.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder23.type(type26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder12.type(type26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean32 = multiMatchQueryBuilder29.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type26.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type27.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(boolean32);
    }

    @Test
    public void test01076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01076");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean21 = multiMatchQueryBuilder20.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.boost((float) (-1));
        java.lang.String str24 = multiMatchQueryBuilder23.queryName();
        multiMatchQueryBuilder23.useDisMax = false;
        org.elasticsearch.index.query.QueryShardContext queryShardContext27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query28 = multiMatchQueryBuilder23.toFilter(queryShardContext27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test01077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01077");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int16 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.cutoffFrequency((float) 1);
        multiMatchQueryBuilder18.prefixLength = (-1);
        org.elasticsearch.common.io.stream.StreamInput streamInput23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder18.readFrom(streamInput23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test01078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01078");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.prefixLength(0);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder15 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params16 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = multiMatchQueryBuilder4.toXContent(xContentBuilder15, params16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(params16);
    }

    @Test
    public void test01079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01079");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        multiMatchQueryBuilder4.maxExpansions = 100;
        org.elasticsearch.index.query.Operator operator17 = multiMatchQueryBuilder4.operator;
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder26.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness31 = multiMatchQueryBuilder26.getfuzziness();
        multiMatchQueryBuilder4.fuzziness = fuzziness31;
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        multiMatchQueryBuilder4.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder4.useDisMax(false);
        org.elasticsearch.index.query.QueryShardContext queryShardContext39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query40 = multiMatchQueryBuilder38.toQuery(queryShardContext39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(operator17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(fuzziness31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
    }

    @Test
    public void test01080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01080");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder20.setminimumShouldMatch("");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test01081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01081");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        java.lang.String str14 = multiMatchQueryBuilder12.getfuzzyRewrite();
        multiMatchQueryBuilder12.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder12.fuzzyRewrite = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = multiMatchQueryBuilder12.gettype();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = multiMatchQueryBuilder12.getzeroTermsQuery();
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        multiMatchQueryBuilder25.setrewrite("");
        java.util.List<java.lang.String> strList30 = multiMatchQueryBuilder25.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.maxExpansions(100);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder12.type((java.lang.Object) multiMatchQueryBuilder32);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multimatch\" : {?    \"query\" : \"multi_match\",?    \"fields\" : [ \"multi_match\", \"hi!\" ],?    \"maxexpansions\" : 100,?    \"rewrite\" : \"\",?    \"boost\" : 1.0?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(type19);
        org.junit.Assert.assertNull(zeroTermsQuery20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
    }

    @Test
    public void test01082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01082");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        java.lang.String str13 = multiMatchQueryBuilder4.getName();
        multiMatchQueryBuilder4.slop = 1;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.minimumShouldMatch("");
        multiMatchQueryBuilder17.maxExpansions = 100;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test01083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01083");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        java.lang.String str19 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Class<?> wildcardClass20 = multiMatchQueryBuilder4.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test01084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01084");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Object obj10 = multiMatchQueryBuilder4.text;
        float float11 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str14 = multiMatchQueryBuilder4.queryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery15;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "multi_match" + "'", obj10, "multi_match");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 1.0f + "'", float11 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test01085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01085");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.getPROTOTYPE();
        org.elasticsearch.index.query.Operator operator16 = multiMatchQueryBuilder4.getoperator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(operator16);
    }

    @Test
    public void test01086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01086");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.String[] strArray5 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray5);
        org.elasticsearch.index.query.Operator operator7 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.operator(operator7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder6.field("");
        org.elasticsearch.common.unit.Fuzziness fuzziness11 = null;
        multiMatchQueryBuilder6.fuzziness = fuzziness11;
        java.lang.String str13 = multiMatchQueryBuilder6.toString();
        java.lang.String[] strArray17 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray17);
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.operator(operator19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException23 = multiMatchQueryBuilder18.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.zeroTermsQuery(zeroTermsQuery26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder25.getPROTOTYPE();
        multiMatchQueryBuilder25.cutoffFrequency = 0.0f;
        java.lang.String str31 = multiMatchQueryBuilder25.fuzzyRewrite;
        java.lang.String[] strArray35 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray35);
        org.elasticsearch.index.query.Operator operator37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.operator(operator37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.lenient(false);
        java.lang.Integer int41 = multiMatchQueryBuilder40.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder40.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str44 = multiMatchQueryBuilder40.minimumShouldMatch;
        java.lang.String[] strArray48 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray48);
        org.elasticsearch.index.query.Operator operator50 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.operator(operator50);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder49.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException54 = multiMatchQueryBuilder49.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder49.cutoffFrequency((float) (byte) 100);
        java.lang.String str57 = multiMatchQueryBuilder49.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder49.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness60 = multiMatchQueryBuilder49.getfuzziness();
        org.elasticsearch.common.unit.Fuzziness fuzziness61 = null;
        multiMatchQueryBuilder49.fuzziness = fuzziness61;
        java.lang.Integer int63 = multiMatchQueryBuilder49.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery64 = multiMatchQueryBuilder49.zeroTermsQuery;
        boolean boolean65 = multiMatchQueryBuilder40.equals((java.lang.Object) zeroTermsQuery64);
        java.lang.String[] strArray70 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray70);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray70);
        java.lang.String[] strArray76 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray76);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray70, strArray76);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean65, strArray70);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str31, strArray70);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str13, strArray70);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder82 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(queryValidationException23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNull(queryValidationException54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(fuzziness60);
        org.junit.Assert.assertNull(int63);
        org.junit.Assert.assertNull(zeroTermsQuery64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray76);
    }

    @Test
    public void test01087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01087");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder12.setzeroTermsQuery(zeroTermsQuery13);
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException24 = multiMatchQueryBuilder19.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.cutoffFrequency((float) (byte) 100);
        float float27 = multiMatchQueryBuilder19.boost();
        multiMatchQueryBuilder19.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type31 = type30.matchQueryType();
        float float32 = type30.tieBreaker();
        float float33 = type30.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder19.fuzziness((java.lang.Object) type30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder12.type(type30);
        multiMatchQueryBuilder12.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder12.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        java.lang.Float float40 = multiMatchQueryBuilder12.tieBreaker;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(queryValidationException24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type30.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type31.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 0.0f + "'", float32 == 0.0f);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(float40);
    }

    @Test
    public void test01088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01088");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = multiMatchQueryBuilder4.getzeroTermsQuery();
        java.lang.Object obj11 = multiMatchQueryBuilder4.text;
        java.lang.String[] strArray15 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray15);
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException21 = multiMatchQueryBuilder16.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap24 = multiMatchQueryBuilder23.getfieldsBoosts();
        java.lang.String[] strArray28 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray28);
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.operator(operator30);
        java.lang.String str32 = multiMatchQueryBuilder29.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness33 = multiMatchQueryBuilder29.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder29.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder29.settype(type36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder23.type(type36);
        org.elasticsearch.index.search.MatchQuery.Type type39 = type36.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type40 = type36.matchQueryType();
        multiMatchQueryBuilder4.settype(type36);
        java.lang.Class<?> wildcardClass42 = multiMatchQueryBuilder4.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(zeroTermsQuery10);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "multi_match" + "'", obj11, "multi_match");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(queryValidationException21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(strObjectFloatHashMap24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "multi_match" + "'", str32, "multi_match");
        org.junit.Assert.assertNull(fuzziness33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type39.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type40.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test01089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01089");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 0);
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        java.lang.Boolean boolean22 = multiMatchQueryBuilder19.getlenient();
        java.util.List<java.lang.String> strList23 = multiMatchQueryBuilder19.fields;
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException33 = multiMatchQueryBuilder28.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery34 = multiMatchQueryBuilder28.getzeroTermsQuery();
        java.lang.Object obj35 = multiMatchQueryBuilder28.text;
        java.lang.String[] strArray39 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray39);
        org.elasticsearch.index.query.Operator operator41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.operator(operator41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException45 = multiMatchQueryBuilder40.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder40.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap48 = multiMatchQueryBuilder47.getfieldsBoosts();
        java.lang.String[] strArray52 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray52);
        org.elasticsearch.index.query.Operator operator54 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.operator(operator54);
        java.lang.String str56 = multiMatchQueryBuilder53.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness57 = multiMatchQueryBuilder53.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder53.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type60 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder53.settype(type60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder47.type(type60);
        org.elasticsearch.index.search.MatchQuery.Type type63 = type60.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type64 = type60.matchQueryType();
        multiMatchQueryBuilder28.settype(type60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder19.type(type60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder14.type(type60);
        java.util.List<java.lang.String> strList68 = multiMatchQueryBuilder67.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(queryValidationException33);
        org.junit.Assert.assertNull(zeroTermsQuery34);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + "multi_match" + "'", obj35, "multi_match");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(queryValidationException45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(strObjectFloatHashMap48);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "multi_match" + "'", str56, "multi_match");
        org.junit.Assert.assertNull(fuzziness57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertTrue("'" + type60 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type60.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertTrue("'" + type63 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type63.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type64 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type64.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(strList68);
    }

    @Test
    public void test01090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01090");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList18 = multiMatchQueryBuilder4.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.rewrite("hi!");
        java.lang.String str21 = multiMatchQueryBuilder20.getfuzzyRewrite();
        java.lang.Boolean boolean22 = multiMatchQueryBuilder20.getlenient();
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException32 = multiMatchQueryBuilder27.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder27.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder27.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder27.fuzzyRewrite("hi!");
        multiMatchQueryBuilder27.analyzer = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder27.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray46 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray46);
        org.elasticsearch.index.query.Operator operator48 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.operator(operator48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder47.field("");
        multiMatchQueryBuilder47.minimumShouldMatch = "hi!";
        java.lang.Float float54 = multiMatchQueryBuilder47.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type55 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type56 = type55.matchQueryType();
        float float57 = type55.tieBreaker();
        multiMatchQueryBuilder47.type = type55;
        multiMatchQueryBuilder27.type = type55;
        multiMatchQueryBuilder20.type = type55;
        java.lang.Integer int61 = multiMatchQueryBuilder20.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(queryValidationException32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(float54);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type55.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type56.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + 0.0f + "'", float57 == 0.0f);
        org.junit.Assert.assertNull(int61);
    }

    @Test
    public void test01091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01091");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.queryName("");
        java.util.List<java.lang.String> strList18 = multiMatchQueryBuilder4.fields;
        float float19 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder4.useDisMax(true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 1.0f + "'", float19 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test01092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01092");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentType xContentType12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference13 = multiMatchQueryBuilder4.buildAsBytes(xContentType12);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
    }

    @Test
    public void test01093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01093");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        multiMatchQueryBuilder13.prefixLength = 10;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap16 = multiMatchQueryBuilder13.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder13.cutoffFrequency((float) (short) 0);
        java.lang.String str19 = multiMatchQueryBuilder13.getfuzzyRewrite();
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException29 = multiMatchQueryBuilder24.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder24.cutoffFrequency((float) (byte) 100);
        float float32 = multiMatchQueryBuilder24.boost();
        multiMatchQueryBuilder24.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type35 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type36 = type35.matchQueryType();
        float float37 = type35.tieBreaker();
        float float38 = type35.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder24.fuzziness((java.lang.Object) type35);
        multiMatchQueryBuilder13.settype(type35);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(strObjectFloatHashMap16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(queryValidationException29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 1.0f + "'", float32 == 1.0f);
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type35.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type36.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 0.0f + "'", float37 == 0.0f);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 0.0f + "'", float38 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
    }

    @Test
    public void test01094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01094");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator18 = multiMatchQueryBuilder4.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(operator18);
    }

    @Test
    public void test01095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01095");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        org.elasticsearch.index.query.Operator operator9 = multiMatchQueryBuilder8.operator;
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder8.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(operator9);
    }

    @Test
    public void test01096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01096");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.type;
        org.elasticsearch.index.query.Operator operator11 = null;
        multiMatchQueryBuilder4.setoperator(operator11);
        java.lang.String str13 = multiMatchQueryBuilder4.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int18 = multiMatchQueryBuilder4.prefixLength;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(int18);
    }

    @Test
    public void test01097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01097");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.slop((int) (short) 1);
        multiMatchQueryBuilder23.lenient = false;
        java.util.List<java.lang.String> strList26 = multiMatchQueryBuilder23.getfields();
        java.lang.String str27 = multiMatchQueryBuilder23.getanalyzer();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput28 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder23.writeTo(streamOutput28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test01098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01098");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.String str1 = multiMatchQueryBuilder0.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery2 = multiMatchQueryBuilder0.zeroTermsQuery;
        multiMatchQueryBuilder0.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder0.zeroTermsQuery(zeroTermsQuery5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder0.getuseDisMax();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params9 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder0.doXContent(xContentBuilder8, params9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str1, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(zeroTermsQuery2);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + boolean7 + "' != '" + false + "'", boolean7, false);
        org.junit.Assert.assertNotNull(params9);
    }

    @Test
    public void test01099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01099");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.slop((int) (short) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder12.settieBreaker((java.lang.Float) 52.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator19 = null;
        multiMatchQueryBuilder12.setoperator(operator19);
        multiMatchQueryBuilder12.setmaxExpansions((java.lang.Integer) (-1));
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test01100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01100");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder12.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : {\n      \"multiMatch\" : {\n        \"query\" : \"multi_match\",\n        \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n        \"minimumShouldMatch\" : \"multi_match\",\n        \"lenient\" : true,\n        \"boost\" : 1.0,\n        \"Name\" : \"multi_match\"\n      }\n    },\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
    }

    @Test
    public void test01101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01101");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.Operator operator18 = multiMatchQueryBuilder8.getoperator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(operator18);
    }

    @Test
    public void test01102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01102");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.lang.String[] strArray4 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder5 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray4);
        org.elasticsearch.index.query.Operator operator6 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder5.operator(operator6);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder5.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException10 = multiMatchQueryBuilder5.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder5.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder5.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder5.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder5.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList19 = multiMatchQueryBuilder5.fields;
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strList19, strArray24);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder28 = org.elasticsearch.common.xcontent.XContentBuilder.builder(xContent0, strArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNull(queryValidationException10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strArray24);
    }

    @Test
    public void test01103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01103");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.fields;
        org.elasticsearch.index.query.Operator operator10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.operator(operator10);
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
    }

    @Test
    public void test01104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01104");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.lang.Float float16 = multiMatchQueryBuilder8.gettieBreaker();
        multiMatchQueryBuilder8.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}";
        float float19 = multiMatchQueryBuilder8.boost();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 1.0f + "'", float19 == 1.0f);
    }

    @Test
    public void test01105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01105");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.boost((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder4.type;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(type21);
    }

    @Test
    public void test01106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01106");
        java.lang.String[] strArray4 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder5 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray4);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray4);
        java.lang.String[] strArray10 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray4, strArray10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder14.setcutoffFrequency((java.lang.Float) 0.0f);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
    }

    @Test
    public void test01107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01107");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        multiMatchQueryBuilder13.setzeroTermsQuery(zeroTermsQuery22);
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean35 = multiMatchQueryBuilder32.useDisMax;
        java.lang.String[] strArray39 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray39);
        org.elasticsearch.index.query.Operator operator41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.operator(operator41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException45 = multiMatchQueryBuilder40.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder40.cutoffFrequency((float) (byte) 100);
        java.lang.String str48 = multiMatchQueryBuilder40.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder40.queryName("");
        multiMatchQueryBuilder50.setslop((java.lang.Integer) 0);
        java.lang.String[] strArray56 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean35, strArray56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) zeroTermsQuery22, strArray56);
        java.lang.Float float61 = multiMatchQueryBuilder60.gettieBreaker();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(boolean35);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(queryValidationException45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNull(float61);
    }

    @Test
    public void test01108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01108");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.getPROTOTYPE();
        java.lang.Object obj20 = multiMatchQueryBuilder19.gettext();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test01109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01109");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder13.settieBreaker((java.lang.Float) 0.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test01110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01110");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.slop((int) (short) 0);
        java.lang.Float float17 = multiMatchQueryBuilder16.gettieBreaker();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(float17);
    }

    @Test
    public void test01111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01111");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        java.lang.Integer int14 = multiMatchQueryBuilder13.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = multiMatchQueryBuilder13.getfieldsBoosts();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params20 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder13.doXContent(xContentBuilder19, params20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap18);
        org.junit.Assert.assertNotNull(params20);
    }

    @Test
    public void test01112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01112");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        java.lang.Object obj5 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder4.tieBreaker((float) (byte) 10);
        java.lang.String str8 = multiMatchQueryBuilder7.getName();
        java.lang.String str9 = multiMatchQueryBuilder7.getanalyzer();
        multiMatchQueryBuilder7.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str12 = multiMatchQueryBuilder7.minimumShouldMatch;
        org.elasticsearch.common.xcontent.XContentType xContentType13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference14 = multiMatchQueryBuilder7.buildAsBytes(xContentType13);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + "multi_match" + "'", obj5, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "multi_match" + "'", str8, "multi_match");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test01113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01113");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField11 = type10.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type12 = type10.matchQueryType();
        multiMatchQueryBuilder4.type = type10;
        org.elasticsearch.index.query.QueryValidationException queryValidationException14 = multiMatchQueryBuilder4.validate();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder4.cutoffFrequency = 10.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type10.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type12.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNull(queryValidationException14);
    }

    @Test
    public void test01114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01114");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder4.setcutoffFrequency((java.lang.Float) 1.0f);
        org.elasticsearch.index.query.QueryShardContext queryShardContext13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query14 = multiMatchQueryBuilder4.toFilter(queryShardContext13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
    }

    @Test
    public void test01115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01115");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.prefixLength = 10;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.setfieldsBoosts(strObjectFloatHashMap13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("", (float) (byte) 100);
        java.lang.String str18 = multiMatchQueryBuilder17.getminimumShouldMatch();
        org.elasticsearch.index.query.Operator operator19 = multiMatchQueryBuilder17.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.boost((float) (-1));
        java.lang.String str22 = multiMatchQueryBuilder17.rewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(operator19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test01116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01116");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.QueryValidationException queryValidationException12 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int13 = multiMatchQueryBuilder4.getslop();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNull(queryValidationException12);
        org.junit.Assert.assertNull(int13);
    }

    @Test
    public void test01117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01117");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        float float7 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 1.0f);
        multiMatchQueryBuilder4.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.Integer int14 = multiMatchQueryBuilder13.getslop();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 1.0f + "'", float7 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test01118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01118");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        multiMatchQueryBuilder8.prefixLength = 1;
        java.lang.Integer int14 = multiMatchQueryBuilder8.getslop();
        org.elasticsearch.index.query.QueryValidationException queryValidationException15 = multiMatchQueryBuilder8.validate();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(queryValidationException15);
    }

    @Test
    public void test01119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01119");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException25 = multiMatchQueryBuilder20.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap28 = multiMatchQueryBuilder27.getfieldsBoosts();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap29 = null;
        multiMatchQueryBuilder27.fieldsBoosts = strObjectFloatHashMap29;
        java.lang.Boolean boolean31 = multiMatchQueryBuilder27.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type32 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder27.settype(type32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder13.type(type32);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder35 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params36 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder34.doXContent(xContentBuilder35, params36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(queryValidationException25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(strObjectFloatHashMap28);
        org.junit.Assert.assertNull(boolean31);
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type32.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(params36);
    }

    @Test
    public void test01120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01120");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder11.getfieldsBoosts();
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.String str20 = multiMatchQueryBuilder17.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder17.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder17.settype(type24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder11.type(type24);
        multiMatchQueryBuilder26.settieBreaker((java.lang.Float) 100.0f);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap29 = null;
        multiMatchQueryBuilder26.fieldsBoosts = strObjectFloatHashMap29;
        java.lang.String[] strArray34 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray34);
        org.elasticsearch.index.query.Operator operator36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.operator(operator36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder35.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap40 = multiMatchQueryBuilder39.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder39.zeroTermsQuery(zeroTermsQuery41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder39.lenient(false);
        org.elasticsearch.index.query.QueryValidationException queryValidationException45 = multiMatchQueryBuilder44.validate();
        java.lang.Object obj46 = multiMatchQueryBuilder44.text;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery47 = multiMatchQueryBuilder44.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder26.fuzziness((java.lang.Object) multiMatchQueryBuilder44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder44.field("", (float) (short) 100);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder52 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params53 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder54 = multiMatchQueryBuilder51.toXContent(xContentBuilder52, params53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(strObjectFloatHashMap40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(queryValidationException45);
        org.junit.Assert.assertEquals("'" + obj46 + "' != '" + "multi_match" + "'", obj46, "multi_match");
        org.junit.Assert.assertNull(zeroTermsQuery47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(params53);
    }

    @Test
    public void test01121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01121");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type8 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type9 = type8.matchQueryType();
        float float10 = type8.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type8);
        multiMatchQueryBuilder11.useDisMax = false;
        multiMatchQueryBuilder11.useDisMax = false;
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException25 = multiMatchQueryBuilder20.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder20.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder20.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type32 = multiMatchQueryBuilder20.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type33 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField34 = type33.parseField();
        multiMatchQueryBuilder20.type = type33;
        multiMatchQueryBuilder11.type = type33;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap37 = multiMatchQueryBuilder11.fieldsBoosts;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap38 = multiMatchQueryBuilder11.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type8.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type9.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(queryValidationException25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(type32);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type33.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField34);
        org.junit.Assert.assertNull(strObjectFloatHashMap37);
        org.junit.Assert.assertNull(strObjectFloatHashMap38);
    }

    @Test
    public void test01122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01122");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        java.lang.Boolean boolean19 = multiMatchQueryBuilder4.lenient;
        java.lang.String str20 = multiMatchQueryBuilder4.rewrite;
        java.lang.String str21 = multiMatchQueryBuilder4.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type23 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder4.tieBreaker((float) (byte) -1);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params27 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder4.doXContent(xContentBuilder26, params27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(type22);
        org.junit.Assert.assertNull(type23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(params27);
    }

    @Test
    public void test01123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01123");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        java.lang.Integer int13 = multiMatchQueryBuilder11.slop;
        multiMatchQueryBuilder11.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.prefixLength((int) (short) 1);
        multiMatchQueryBuilder11.lenient = true;
        org.elasticsearch.index.query.QueryValidationException queryValidationException20 = multiMatchQueryBuilder11.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder11.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"boost\" : 10.0,\n    \"Name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"multi_match\\\",\\n    \\\"cutoffFrequency\\\" : -1.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        multiMatchQueryBuilder11.setcutoffFrequency((java.lang.Float) 100.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(queryValidationException20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test01124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01124");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.useDisMax(true);
        java.lang.Integer int18 = multiMatchQueryBuilder17.getslop();
        java.lang.Object obj19 = multiMatchQueryBuilder17.text;
        multiMatchQueryBuilder17.setlenient((java.lang.Boolean) false);
        multiMatchQueryBuilder17.rewrite = "";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + "multi_match" + "'", obj19, "multi_match");
    }

    @Test
    public void test01125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01125");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String str16 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.useDisMax(true);
        float float21 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) (-1));
        java.util.List<java.lang.String> strList24 = multiMatchQueryBuilder4.getfields();
        multiMatchQueryBuilder4.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery27 = multiMatchQueryBuilder4.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 1.0f + "'", float21 == 1.0f);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(zeroTermsQuery27);
    }

    @Test
    public void test01126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01126");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = multiMatchQueryBuilder16.getzeroTermsQuery();
        java.lang.String str18 = multiMatchQueryBuilder16.analyzer;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(zeroTermsQuery17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test01127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01127");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.lang.String str8 = multiMatchQueryBuilder4.getfuzzyRewrite();
        multiMatchQueryBuilder4.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryShardContext queryShardContext11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query12 = multiMatchQueryBuilder4.toFilter(queryShardContext11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test01128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01128");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) 1.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = null;
        multiMatchQueryBuilder8.fuzziness = fuzziness16;
        java.lang.Integer int18 = multiMatchQueryBuilder8.getslop();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params20 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder8.doXContent(xContentBuilder19, params20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(int18);
    }

    @Test
    public void test01129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01129");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str20 = multiMatchQueryBuilder19.fuzzyRewrite;
        multiMatchQueryBuilder19.lenient = true;
        java.lang.Boolean boolean23 = multiMatchQueryBuilder19.lenient;
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        multiMatchQueryBuilder28.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder28.operator(operator33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.maxExpansions((int) (short) 10);
        java.lang.String[] strArray40 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray40);
        org.elasticsearch.index.query.Operator operator42 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.operator(operator42);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder41.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder45.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness50 = multiMatchQueryBuilder45.getfuzziness();
        multiMatchQueryBuilder34.fuzziness = fuzziness50;
        multiMatchQueryBuilder19.fuzziness = fuzziness50;
        java.lang.Integer int53 = multiMatchQueryBuilder19.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + boolean23 + "' != '" + true + "'", boolean23, true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(fuzziness50);
        org.junit.Assert.assertNull(int53);
    }

    @Test
    public void test01130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01130");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01131");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.Operator operator10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.operator(operator10);
        java.lang.String str12 = multiMatchQueryBuilder11.queryName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test01132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01132");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        multiMatchQueryBuilder8.setanalyzer("hi!");
        java.lang.Integer int14 = multiMatchQueryBuilder8.getprefixLength();
        multiMatchQueryBuilder8.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        multiMatchQueryBuilder8.zeroTermsQuery = zeroTermsQuery17;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test01133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01133");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator25 = null;
        multiMatchQueryBuilder24.operator = operator25;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test01134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01134");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder24.setoperator(operator29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder24.zeroTermsQuery = zeroTermsQuery31;
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        multiMatchQueryBuilder37.maxExpansions = 0;
        java.lang.Boolean boolean40 = multiMatchQueryBuilder37.lenient;
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap50 = multiMatchQueryBuilder49.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.minimumShouldMatch("multi_match");
        java.lang.String str53 = multiMatchQueryBuilder52.toString();
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.Operator operator59 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.operator(operator59);
        java.lang.String str61 = multiMatchQueryBuilder58.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness62 = multiMatchQueryBuilder58.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder58.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.cutoffFrequency((float) '4');
        boolean boolean67 = multiMatchQueryBuilder52.equals((java.lang.Object) multiMatchQueryBuilder64);
        multiMatchQueryBuilder64.setmaxExpansions((java.lang.Integer) (-1));
        multiMatchQueryBuilder64.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder37.fuzziness((java.lang.Object) multiMatchQueryBuilder64);
        java.lang.String[] strArray76 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray76);
        org.elasticsearch.index.query.Operator operator78 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder77.operator(operator78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder77.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap82 = multiMatchQueryBuilder81.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder81.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder84.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = multiMatchQueryBuilder86.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder86.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str91 = multiMatchQueryBuilder86.minimumShouldMatch;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = multiMatchQueryBuilder37.type((java.lang.Object) str91);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [multi_match]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(boolean40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(strObjectFloatHashMap50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str53, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "multi_match" + "'", str61, "multi_match");
        org.junit.Assert.assertNull(fuzziness62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNull(strObjectFloatHashMap82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder88);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "multi_match" + "'", str91, "multi_match");
    }

    @Test
    public void test01135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01135");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder11.getfieldsBoosts();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder11.fieldsBoosts = strObjectFloatHashMap13;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery15);
        org.elasticsearch.index.query.QueryValidationException queryValidationException17 = multiMatchQueryBuilder11.validate();
        java.lang.String str18 = multiMatchQueryBuilder11.getanalyzer();
        java.lang.Object obj19 = multiMatchQueryBuilder11.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder11.prefixLength((int) (byte) 10);
        multiMatchQueryBuilder21.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder21.maxExpansions = 10;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(queryValidationException17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + "multi_match" + "'", obj19, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test01136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01136");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.type(type22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness26 = multiMatchQueryBuilder25.fuzziness;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type22.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(fuzziness26);
    }

    @Test
    public void test01137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01137");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int16 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.QueryValidationException queryValidationException19 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.maxExpansions((int) (byte) 1);
        java.lang.String str22 = multiMatchQueryBuilder4.toString();
        multiMatchQueryBuilder4.tieBreaker = 10.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(queryValidationException19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str22, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test01138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01138");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Object obj10 = multiMatchQueryBuilder4.text;
        float float11 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder4.writeTo(streamOutput14);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "multi_match" + "'", obj10, "multi_match");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 1.0f + "'", float11 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
    }

    @Test
    public void test01139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01139");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = multiMatchQueryBuilder4.getzeroTermsQuery();
        java.lang.Integer int11 = multiMatchQueryBuilder4.getmaxExpansions();
        java.lang.Float float12 = multiMatchQueryBuilder4.tieBreaker;
        multiMatchQueryBuilder4.useDisMax = false;
        java.lang.Float float15 = multiMatchQueryBuilder4.getcutoffFrequency();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery16;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.setzeroTermsQuery(zeroTermsQuery18);
        multiMatchQueryBuilder4.setminimumShouldMatch("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params23 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = multiMatchQueryBuilder4.toXContent(xContentBuilder22, params23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(zeroTermsQuery10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNotNull(params23);
    }

    @Test
    public void test01140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01140");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap13;
        multiMatchQueryBuilder4.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery17);
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = null;
        multiMatchQueryBuilder18.fuzziness = fuzziness19;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery21);
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        java.lang.Boolean boolean30 = multiMatchQueryBuilder27.getlenient();
        multiMatchQueryBuilder27.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder27.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness35 = multiMatchQueryBuilder34.fuzziness;
        java.lang.Integer int36 = multiMatchQueryBuilder34.slop;
        multiMatchQueryBuilder34.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder34.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder18.fuzziness((java.lang.Object) multiMatchQueryBuilder40);
        java.lang.Object obj42 = multiMatchQueryBuilder40.gettext();
        org.elasticsearch.common.io.stream.StreamInput streamInput43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.readFrom(streamInput43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(fuzziness35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertEquals("'" + obj42 + "' != '" + "multi_match" + "'", obj42, "multi_match");
    }

    @Test
    public void test01141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01141");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.slop(1);
        multiMatchQueryBuilder17.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder17.setslop((java.lang.Integer) 10);
        java.lang.String str22 = multiMatchQueryBuilder17.getrewrite();
        multiMatchQueryBuilder17.prefixLength = (-1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test01142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01142");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.tieBreaker((float) 10);
        java.lang.Object obj17 = multiMatchQueryBuilder16.gettext();
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder22.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder22.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness34 = multiMatchQueryBuilder22.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder22.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder22.zeroTermsQuery(zeroTermsQuery37);
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException48 = multiMatchQueryBuilder43.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder43.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder43.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder43.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type55 = multiMatchQueryBuilder43.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type56 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField57 = type56.parseField();
        multiMatchQueryBuilder43.type = type56;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder38.type(type56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder16.fuzziness((java.lang.Object) multiMatchQueryBuilder59);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery61 = multiMatchQueryBuilder60.getzeroTermsQuery();
        multiMatchQueryBuilder60.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(fuzziness34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(queryValidationException48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(type55);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type56.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNull(zeroTermsQuery61);
    }

    @Test
    public void test01143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01143");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList18 = multiMatchQueryBuilder4.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.rewrite("hi!");
        java.lang.String str21 = multiMatchQueryBuilder20.getfuzzyRewrite();
        java.lang.Boolean boolean22 = multiMatchQueryBuilder20.getlenient();
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException32 = multiMatchQueryBuilder27.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder27.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder27.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder27.fuzzyRewrite("hi!");
        multiMatchQueryBuilder27.analyzer = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder27.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray46 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray46);
        org.elasticsearch.index.query.Operator operator48 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.operator(operator48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder47.field("");
        multiMatchQueryBuilder47.minimumShouldMatch = "hi!";
        java.lang.Float float54 = multiMatchQueryBuilder47.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type55 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type56 = type55.matchQueryType();
        float float57 = type55.tieBreaker();
        multiMatchQueryBuilder47.type = type55;
        multiMatchQueryBuilder27.type = type55;
        multiMatchQueryBuilder20.type = type55;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder20.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(queryValidationException32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(float54);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type55.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type56.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + 0.0f + "'", float57 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
    }

    @Test
    public void test01144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01144");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.maxExpansions((int) (short) 10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder12.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.lenient(true);
        java.lang.String str16 = multiMatchQueryBuilder15.queryName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test01145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01145");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.common.unit.Fuzziness fuzziness10 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness10;
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.tieBreaker((float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder14.setcutoffFrequency((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.tieBreaker(0.0f);
        java.lang.Integer int21 = multiMatchQueryBuilder14.getmaxExpansions();
        multiMatchQueryBuilder14.setlenient((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(int21);
    }

    @Test
    public void test01146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01146");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.useDisMax(true);
        multiMatchQueryBuilder17.setanalyzer("multi_match");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap20 = multiMatchQueryBuilder17.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        multiMatchQueryBuilder17.setzeroTermsQuery(zeroTermsQuery21);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params24 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = multiMatchQueryBuilder17.toXContent(xContentBuilder23, params24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(strObjectFloatHashMap20);
        org.junit.Assert.assertNotNull(params24);
    }

    @Test
    public void test01147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01147");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.Object obj1 = multiMatchQueryBuilder0.text;
        java.lang.String[] strArray5 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray5);
        org.elasticsearch.index.query.Operator operator7 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.operator(operator7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder6.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException11 = multiMatchQueryBuilder6.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder6.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder6.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder6.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = multiMatchQueryBuilder6.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField20 = type19.parseField();
        multiMatchQueryBuilder6.type = type19;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder0.type(type19);
        org.elasticsearch.index.search.MatchQuery.Type type23 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type24 = type19.matchQueryType();
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder0);
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(queryValidationException11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(type18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type23.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type24.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test01148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01148");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.queryName("");
        java.util.List<java.lang.String> strList18 = multiMatchQueryBuilder4.fields;
        float float19 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder4.maxExpansions((int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 1.0f + "'", float19 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test01149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01149");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        java.lang.Float float14 = multiMatchQueryBuilder8.getcutoffFrequency();
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.operator(operator15);
        multiMatchQueryBuilder16.lenient = false;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test01150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01150");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        java.lang.Float float14 = multiMatchQueryBuilder8.getcutoffFrequency();
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.operator(operator15);
        java.lang.String str17 = multiMatchQueryBuilder8.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = multiMatchQueryBuilder8.gettype();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = multiMatchQueryBuilder8.getfieldsBoosts();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.QueryShardContext queryShardContext22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query23 = multiMatchQueryBuilder8.toQuery(queryShardContext22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multi_match" + "'", str17, "multi_match");
        org.junit.Assert.assertNull(type18);
        org.junit.Assert.assertNull(strObjectFloatHashMap19);
    }

    @Test
    public void test01151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01151");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        org.elasticsearch.index.query.QueryValidationException queryValidationException8 = multiMatchQueryBuilder6.validate();
        java.lang.String str9 = multiMatchQueryBuilder6.getminimumShouldMatch();
        java.lang.Boolean boolean10 = multiMatchQueryBuilder6.lenient;
        multiMatchQueryBuilder6.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder6.tieBreaker(52.0f);
        multiMatchQueryBuilder6.prefixLength = 10;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(queryValidationException8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
    }

    @Test
    public void test01152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01152");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean18 = multiMatchQueryBuilder13.getuseDisMax();
        java.lang.Integer int19 = multiMatchQueryBuilder13.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.cutoffFrequency(1.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test01153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01153");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        float float16 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"Name\" : \"multi_match\"\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 1.0f + "'", float16 == 1.0f);
        org.junit.Assert.assertNull(type17);
    }

    @Test
    public void test01154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01154");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.getPROTOTYPE();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput17 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder4.writeTo(streamOutput17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test01155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01155");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.minimumShouldMatch("");
        java.util.List<java.lang.String> strList17 = multiMatchQueryBuilder14.fields;
        java.lang.String str18 = multiMatchQueryBuilder14.fuzzyRewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test01156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01156");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        multiMatchQueryBuilder8.setanalyzer("hi!");
        java.lang.Integer int14 = multiMatchQueryBuilder8.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.lenient(true);
        multiMatchQueryBuilder16.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"tieBreaker\" : 1.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test01157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01157");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.useDisMax(true);
        multiMatchQueryBuilder17.setanalyzer("multi_match");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap20 = multiMatchQueryBuilder17.getfieldsBoosts();
        java.lang.Boolean boolean21 = multiMatchQueryBuilder17.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(strObjectFloatHashMap20);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + true + "'", boolean21, true);
    }

    @Test
    public void test01158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01158");
        java.lang.String[] strArray4 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder5 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray4);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray4);
        java.lang.String[] strArray10 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray4, strArray10);
        multiMatchQueryBuilder12.setprefixLength((java.lang.Integer) 97);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput15 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder12.writeTo(streamOutput15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray10);
    }

    @Test
    public void test01159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01159");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (short) 10);
        java.lang.Boolean boolean14 = multiMatchQueryBuilder8.lenient;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(boolean14);
    }

    @Test
    public void test01160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01160");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.lang.Integer int8 = multiMatchQueryBuilder4.getmaxExpansions();
        multiMatchQueryBuilder4.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder4.getName();
        java.lang.Boolean boolean14 = multiMatchQueryBuilder4.getlenient();
        java.lang.Object obj15 = multiMatchQueryBuilder4.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Object obj18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzziness(obj18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "multi_match" + "'", obj15, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test01161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01161");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        multiMatchQueryBuilder11.zeroTermsQuery = zeroTermsQuery12;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator16 = multiMatchQueryBuilder15.operator;
        org.elasticsearch.common.io.stream.StreamInput streamInput17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.readFrom(streamInput17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(operator16);
    }

    @Test
    public void test01162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01162");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        float float33 = multiMatchQueryBuilder25.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type35 = type34.matchQueryType();
        multiMatchQueryBuilder25.settype(type34);
        multiMatchQueryBuilder4.type = type34;
        java.lang.String str38 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.String str39 = multiMatchQueryBuilder4.minimumShouldMatch;
        multiMatchQueryBuilder4.slop = 0;
        java.lang.String[] strArray45 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray45);
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.operator(operator47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder46.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException51 = multiMatchQueryBuilder46.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder46.cutoffFrequency((float) (byte) 100);
        float float54 = multiMatchQueryBuilder46.boost();
        multiMatchQueryBuilder46.setanalyzer("");
        java.lang.Boolean boolean57 = multiMatchQueryBuilder46.getuseDisMax();
        java.lang.String str58 = multiMatchQueryBuilder46.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder46.boost((float) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) ' ');
        java.lang.String str62 = multiMatchQueryBuilder4.analyzer;
        org.elasticsearch.index.query.Operator operator63 = multiMatchQueryBuilder4.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 1.0f + "'", float33 == 1.0f);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type35.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(queryValidationException51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 1.0f + "'", float54 == 1.0f);
        org.junit.Assert.assertNull(boolean57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(operator63);
    }

    @Test
    public void test01163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01163");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        java.lang.Boolean boolean26 = multiMatchQueryBuilder23.getlenient();
        multiMatchQueryBuilder23.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness31 = multiMatchQueryBuilder30.fuzziness;
        multiMatchQueryBuilder30.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder30.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = multiMatchQueryBuilder35.zeroTermsQuery;
        java.lang.String[] strArray40 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray40);
        org.elasticsearch.index.query.Operator operator42 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.operator(operator42);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder41.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException46 = multiMatchQueryBuilder41.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder41.cutoffFrequency((float) (byte) 100);
        java.lang.String str49 = multiMatchQueryBuilder41.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder41.queryName("");
        multiMatchQueryBuilder51.setslop((java.lang.Integer) 0);
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder35, strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder4, strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder4.boost((float) 100L);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(fuzziness31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(zeroTermsQuery36);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(queryValidationException46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
    }

    @Test
    public void test01164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01164");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) 1.0f);
        java.lang.Integer int16 = multiMatchQueryBuilder8.maxExpansions;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        multiMatchQueryBuilder8.setzeroTermsQuery(zeroTermsQuery17);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test01165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01165");
        java.lang.String[] strArray4 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder5 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray4);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray4);
        org.elasticsearch.index.query.Operator operator7 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.operator(operator7);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
    }

    @Test
    public void test01166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01166");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.useDisMax(true);
        multiMatchQueryBuilder17.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        java.lang.String str27 = multiMatchQueryBuilder24.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness28 = multiMatchQueryBuilder24.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder24.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type31 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder24.settype(type31);
        multiMatchQueryBuilder17.settype(type31);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery34 = multiMatchQueryBuilder17.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder17.slop((int) (byte) 0);
        multiMatchQueryBuilder36.prefixLength = 97;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "multi_match" + "'", str27, "multi_match");
        org.junit.Assert.assertNull(fuzziness28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type31.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNull(zeroTermsQuery34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
    }

    @Test
    public void test01167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01167");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap17;
        multiMatchQueryBuilder16.setslop((java.lang.Integer) 0);
        java.lang.String str21 = multiMatchQueryBuilder16.queryName();
        java.lang.String str22 = multiMatchQueryBuilder16.getNAME();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
    }

    @Test
    public void test01168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01168");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.queryName("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException13 = multiMatchQueryBuilder12.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder12.zeroTermsQuery;
        java.lang.Boolean boolean15 = multiMatchQueryBuilder12.getlenient();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder12.setzeroTermsQuery(zeroTermsQuery16);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(queryValidationException13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNull(boolean15);
    }

    @Test
    public void test01169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01169");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery18;
        java.lang.Integer int20 = multiMatchQueryBuilder4.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.lenient(true);
        multiMatchQueryBuilder22.setmaxExpansions((java.lang.Integer) 10);
        multiMatchQueryBuilder22.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test01170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01170");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str19 = multiMatchQueryBuilder16.analyzer;
        org.elasticsearch.index.query.QueryShardContext queryShardContext20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query21 = multiMatchQueryBuilder16.toFilter(queryShardContext20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test01171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01171");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder8.type = type18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.slop(10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = null;
        multiMatchQueryBuilder21.setfieldsBoosts(strObjectFloatHashMap22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.fuzzyRewrite("");
        java.lang.String[] strArray29 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray29);
        org.elasticsearch.index.query.Operator operator31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.operator(operator31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder30.field("");
        java.lang.String str35 = multiMatchQueryBuilder30.getrewrite();
        java.lang.Integer int36 = multiMatchQueryBuilder30.maxExpansions;
        org.elasticsearch.index.query.Operator operator37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder30.operator(operator37);
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap48 = multiMatchQueryBuilder47.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery49 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder47.zeroTermsQuery(zeroTermsQuery49);
        multiMatchQueryBuilder47.prefixLength = 1;
        boolean boolean53 = multiMatchQueryBuilder30.equals((java.lang.Object) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder21.type((java.lang.Object) multiMatchQueryBuilder30);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multimatch\" : {?    \"query\" : \"multi_match\",?    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],?    \"boost\" : 1.0?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(strObjectFloatHashMap48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test01172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01172");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = multiMatchQueryBuilder12.getfuzziness();
        java.lang.Integer int14 = multiMatchQueryBuilder12.getmaxExpansions();
        java.lang.Integer int15 = multiMatchQueryBuilder12.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(fuzziness13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(int15);
    }

    @Test
    public void test01173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01173");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        java.lang.String[] strArray11 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray11);
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder16.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.lenient(false);
        multiMatchQueryBuilder16.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery24);
        boolean boolean26 = multiMatchQueryBuilder6.equals((java.lang.Object) multiMatchQueryBuilder25);
        org.elasticsearch.index.query.QueryShardContext queryShardContext27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query28 = multiMatchQueryBuilder25.toFilter(queryShardContext27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test01174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01174");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.slop((int) (short) 0);
        java.lang.Boolean boolean22 = multiMatchQueryBuilder21.getuseDisMax();
        org.elasticsearch.common.io.stream.StreamInput streamInput23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.readFrom(streamInput23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(boolean22);
    }

    @Test
    public void test01175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01175");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.zeroTermsQuery(zeroTermsQuery21);
        java.lang.String str23 = multiMatchQueryBuilder22.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str23, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test01176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01176");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder4.toString();
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion16 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE;
        java.lang.Class<?> wildcardClass17 = fieldCaseConversion16.getClass();
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        java.lang.String str30 = multiMatchQueryBuilder22.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder22.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness33 = multiMatchQueryBuilder22.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder22.getPROTOTYPE();
        java.lang.String[] strArray38 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder34, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass17, strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) strArray38);
        java.util.List<java.lang.String> strList43 = multiMatchQueryBuilder42.fields;
        java.lang.Integer int44 = multiMatchQueryBuilder42.getprefixLength();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertTrue("'" + fieldCaseConversion16 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE + "'", fieldCaseConversion16.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(fuzziness33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNull(int44);
    }

    @Test
    public void test01177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01177");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String str16 = multiMatchQueryBuilder4.analyzer;
        org.elasticsearch.common.unit.Fuzziness fuzziness17 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.lenient = false;
        java.lang.String str20 = multiMatchQueryBuilder4.queryName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(fuzziness17);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test01178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01178");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        multiMatchQueryBuilder16.zeroTermsQuery = zeroTermsQuery17;
        multiMatchQueryBuilder16.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.QueryShardContext queryShardContext21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query22 = multiMatchQueryBuilder16.toQuery(queryShardContext21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test01179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01179");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        float float33 = multiMatchQueryBuilder25.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type35 = type34.matchQueryType();
        multiMatchQueryBuilder25.settype(type34);
        multiMatchQueryBuilder4.type = type34;
        java.lang.String str38 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder39 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params40 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder4.doXContent(xContentBuilder39, params40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 1.0f + "'", float33 == 1.0f);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type35.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(params40);
    }

    @Test
    public void test01180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01180");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.useDisMax(true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
    }

    @Test
    public void test01181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01181");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        multiMatchQueryBuilder12.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float15 = multiMatchQueryBuilder12.gettieBreaker();
        java.lang.String str16 = multiMatchQueryBuilder12.fuzzyRewrite;
        org.elasticsearch.common.unit.Fuzziness fuzziness17 = multiMatchQueryBuilder12.fuzziness;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}" + "'", str16, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(fuzziness17);
    }

    @Test
    public void test01182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01182");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        multiMatchQueryBuilder20.setlenient((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test01183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01183");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        multiMatchQueryBuilder4.setminimumShouldMatch("");
        java.lang.String str18 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.tieBreaker((float) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        float float23 = multiMatchQueryBuilder20.boost();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder20.zeroTermsQuery(zeroTermsQuery24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap28 = multiMatchQueryBuilder25.fieldsBoosts;
        multiMatchQueryBuilder25.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 1.0f + "'", float23 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(strObjectFloatHashMap28);
    }

    @Test
    public void test01184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01184");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type8 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type9 = type8.matchQueryType();
        float float10 = type8.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type8);
        org.elasticsearch.index.query.Operator operator12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder6.operator(operator12);
        multiMatchQueryBuilder13.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"Name\" : \"multi_match\"\n  }\n}");
        multiMatchQueryBuilder13.tieBreaker = 1.0f;
        multiMatchQueryBuilder13.cutoffFrequency = 1.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type8.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type9.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
    }

    @Test
    public void test01185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01185");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multiMatch\" : {\n    \"query\" : null,\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01186");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        java.lang.String[] strArray14 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray14);
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.operator(operator16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException20 = multiMatchQueryBuilder15.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder15.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.zeroTermsQuery(zeroTermsQuery23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.maxExpansions((-1));
        multiMatchQueryBuilder22.maxExpansions = 100;
        multiMatchQueryBuilder22.setslop((java.lang.Integer) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder33.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(queryValidationException20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
    }

    @Test
    public void test01187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01187");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        java.lang.String str12 = multiMatchQueryBuilder11.minimumShouldMatch;
        java.lang.String str13 = multiMatchQueryBuilder11.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.tieBreaker((float) (byte) 100);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder16 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params17 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder11.doXContent(xContentBuilder16, params17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(params17);
    }

    @Test
    public void test01188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01188");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) 1.0f);
        multiMatchQueryBuilder8.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str18 = multiMatchQueryBuilder8.toString();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput19 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder8.writeTo(streamOutput19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str18, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test01189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01189");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.getPROTOTYPE();
        multiMatchQueryBuilder14.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}";
        java.lang.Object obj17 = multiMatchQueryBuilder14.gettext();
        multiMatchQueryBuilder14.slop = 97;
        org.elasticsearch.common.xcontent.XContentType xContentType20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference21 = multiMatchQueryBuilder14.buildAsBytes(xContentType20);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test01190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01190");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        multiMatchQueryBuilder8.setanalyzer("hi!");
        java.lang.Integer int14 = multiMatchQueryBuilder8.maxExpansions;
        org.elasticsearch.index.query.QueryShardContext queryShardContext15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query16 = multiMatchQueryBuilder8.toQuery(queryShardContext15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test01191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01191");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        multiMatchQueryBuilder6.prefixLength = 10;
        java.lang.String[] strArray13 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray13);
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.operator(operator15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException19 = multiMatchQueryBuilder14.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder14.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder14.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness26 = multiMatchQueryBuilder14.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder14.slop((int) (short) 0);
        multiMatchQueryBuilder14.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray34 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray34);
        org.elasticsearch.index.query.Operator operator36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.operator(operator36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder35.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException40 = multiMatchQueryBuilder35.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder35.cutoffFrequency((float) (byte) 100);
        float float43 = multiMatchQueryBuilder35.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type44 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type45 = type44.matchQueryType();
        multiMatchQueryBuilder35.settype(type44);
        multiMatchQueryBuilder14.type = type44;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder6.fuzziness((java.lang.Object) type44);
        multiMatchQueryBuilder6.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder6.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder6.maxExpansions = 100;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(queryValidationException19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(fuzziness26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(queryValidationException40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 1.0f + "'", float43 == 1.0f);
        org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type44.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type45.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
    }

    @Test
    public void test01192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01192");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setrewrite("");
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.lenient(false);
        java.lang.String str20 = multiMatchQueryBuilder17.getanalyzer();
        java.lang.Float float21 = multiMatchQueryBuilder17.gettieBreaker();
        java.lang.String str22 = multiMatchQueryBuilder17.getanalyzer();
        org.elasticsearch.index.query.Operator operator23 = multiMatchQueryBuilder17.getoperator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(float21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(operator23);
    }

    @Test
    public void test01193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01193");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String str16 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.useDisMax(true);
        float float21 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) (-1));
        multiMatchQueryBuilder4.useDisMax = false;
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"lenient\" : false,\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 1.0f + "'", float21 == 1.0f);
    }

    @Test
    public void test01194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01194");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder25.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder25.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = multiMatchQueryBuilder25.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField39 = type38.parseField();
        multiMatchQueryBuilder25.type = type38;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder20.type(type38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean44 = multiMatchQueryBuilder41.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(type37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(boolean44);
    }

    @Test
    public void test01195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01195");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int16 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.operator(operator20);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = multiMatchQueryBuilder21.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(fuzziness19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(zeroTermsQuery22);
    }

    @Test
    public void test01196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01196");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder8.type = type18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.slop(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder8.boost((float) (short) 1);
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException33 = multiMatchQueryBuilder28.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder28.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.zeroTermsQuery(zeroTermsQuery36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder35.maxExpansions((-1));
        java.util.List<java.lang.String> strList40 = multiMatchQueryBuilder35.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.Object obj42 = multiMatchQueryBuilder41.text;
        java.lang.String[] strArray46 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray46);
        org.elasticsearch.index.query.Operator operator48 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.operator(operator48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder47.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException52 = multiMatchQueryBuilder47.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder47.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder47.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder47.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type59 = multiMatchQueryBuilder47.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type60 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField61 = type60.parseField();
        multiMatchQueryBuilder47.type = type60;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder41.type(type60);
        org.elasticsearch.index.search.MatchQuery.Type type64 = type60.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder35.type(type60);
        org.elasticsearch.common.ParseField parseField66 = type60.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type67 = type60.matchQueryType();
        multiMatchQueryBuilder8.settype(type60);
        org.elasticsearch.index.query.QueryShardContext queryShardContext69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query70 = multiMatchQueryBuilder8.toQuery(queryShardContext69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(queryValidationException33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(queryValidationException52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNull(type59);
        org.junit.Assert.assertTrue("'" + type60 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type60.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertTrue("'" + type64 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type64.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(parseField66);
        org.junit.Assert.assertTrue("'" + type67 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type67.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test01197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01197");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = null;
        multiMatchQueryBuilder13.fuzziness = fuzziness16;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.rewrite("");
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        java.lang.Integer int22 = multiMatchQueryBuilder21.slop;
        org.elasticsearch.index.query.QueryShardContext queryShardContext23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query24 = multiMatchQueryBuilder21.toFilter(queryShardContext23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(int22);
    }

    @Test
    public void test01198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01198");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        java.lang.String str14 = multiMatchQueryBuilder12.getfuzzyRewrite();
        multiMatchQueryBuilder12.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder12.fuzzyRewrite = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = multiMatchQueryBuilder12.gettype();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap20 = multiMatchQueryBuilder12.getfieldsBoosts();
        org.elasticsearch.index.query.Operator operator21 = null;
        multiMatchQueryBuilder12.operator = operator21;
        org.elasticsearch.index.query.QueryValidationException queryValidationException23 = multiMatchQueryBuilder12.validate();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(type19);
        org.junit.Assert.assertNull(strObjectFloatHashMap20);
        org.junit.Assert.assertNull(queryValidationException23);
    }

    @Test
    public void test01199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01199");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str12 = multiMatchQueryBuilder8.minimumShouldMatch;
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException22 = multiMatchQueryBuilder17.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.cutoffFrequency((float) (byte) 100);
        java.lang.String str25 = multiMatchQueryBuilder17.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder17.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness28 = multiMatchQueryBuilder17.getfuzziness();
        org.elasticsearch.common.unit.Fuzziness fuzziness29 = null;
        multiMatchQueryBuilder17.fuzziness = fuzziness29;
        java.lang.Integer int31 = multiMatchQueryBuilder17.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = multiMatchQueryBuilder17.zeroTermsQuery;
        boolean boolean33 = multiMatchQueryBuilder8.equals((java.lang.Object) zeroTermsQuery32);
        java.lang.String[] strArray38 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray38);
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray38, strArray44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean33, strArray38);
        java.lang.Float float48 = multiMatchQueryBuilder47.gettieBreaker();
        java.lang.Float float49 = multiMatchQueryBuilder47.gettieBreaker();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(queryValidationException22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(fuzziness28);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(zeroTermsQuery32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNull(float48);
        org.junit.Assert.assertNull(float49);
    }

    @Test
    public void test01200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01200");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.String[] strArray5 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray5);
        org.elasticsearch.index.query.Operator operator7 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.operator(operator7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder6.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException11 = multiMatchQueryBuilder6.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder6.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.zeroTermsQuery(zeroTermsQuery14);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.maxExpansions((-1));
        java.util.List<java.lang.String> strList18 = multiMatchQueryBuilder13.getfields();
        multiMatchQueryBuilder13.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder13.useDisMax(true);
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException32 = multiMatchQueryBuilder27.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder27.cutoffFrequency((float) (byte) 100);
        java.lang.String str35 = multiMatchQueryBuilder27.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder27.queryName("");
        multiMatchQueryBuilder37.setslop((java.lang.Integer) 0);
        java.lang.String[] strArray43 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) true, strArray43);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder47 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(queryValidationException11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(queryValidationException32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(strArray43);
    }

    @Test
    public void test01201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01201");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String str16 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.useDisMax(true);
        float float21 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = multiMatchQueryBuilder4.type;
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion23 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE;
        java.lang.Class<?> wildcardClass24 = fieldCaseConversion23.getClass();
        java.lang.String[] strArray28 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray28);
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.operator(operator30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder29.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException34 = multiMatchQueryBuilder29.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder29.cutoffFrequency((float) (byte) 100);
        java.lang.String str37 = multiMatchQueryBuilder29.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder29.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness40 = multiMatchQueryBuilder29.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder29.getPROTOTYPE();
        java.lang.String[] strArray45 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder41, strArray45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass24, strArray45);
        multiMatchQueryBuilder48.settieBreaker((java.lang.Float) 1.0f);
        multiMatchQueryBuilder48.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray56 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray56);
        org.elasticsearch.index.query.Operator operator58 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.operator(operator58);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder57.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException62 = multiMatchQueryBuilder57.validate();
        java.lang.Integer int63 = multiMatchQueryBuilder57.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery64 = multiMatchQueryBuilder57.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder57.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder57.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder57.boost((float) 0);
        java.lang.String str72 = multiMatchQueryBuilder57.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap73 = multiMatchQueryBuilder57.fieldsBoosts;
        multiMatchQueryBuilder48.setfieldsBoosts(strObjectFloatHashMap73);
        multiMatchQueryBuilder4.setfieldsBoosts(strObjectFloatHashMap73);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 1.0f + "'", float21 == 1.0f);
        org.junit.Assert.assertNull(type22);
        org.junit.Assert.assertTrue("'" + fieldCaseConversion23 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE + "'", fieldCaseConversion23.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE));
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(queryValidationException34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(fuzziness40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNull(queryValidationException62);
        org.junit.Assert.assertNull(int63);
        org.junit.Assert.assertNull(zeroTermsQuery64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap73);
    }

    @Test
    public void test01202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01202");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        multiMatchQueryBuilder12.tieBreaker = 100.0f;
        java.lang.Integer int15 = multiMatchQueryBuilder12.getslop();
        multiMatchQueryBuilder12.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(int15);
    }

    @Test
    public void test01203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01203");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean21 = multiMatchQueryBuilder20.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder20.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test01204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01204");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        java.lang.Integer int14 = multiMatchQueryBuilder13.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder13.gettype();
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        java.lang.String str23 = multiMatchQueryBuilder20.getWriteableName();
        java.lang.Boolean boolean24 = multiMatchQueryBuilder20.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder20.getPROTOTYPE();
        multiMatchQueryBuilder20.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray31 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray31);
        org.elasticsearch.index.query.Operator operator33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.operator(operator33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException37 = multiMatchQueryBuilder32.validate();
        java.lang.Integer int38 = multiMatchQueryBuilder32.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery39 = multiMatchQueryBuilder32.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder32.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder32.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder32.boost((float) 0);
        java.lang.String str47 = multiMatchQueryBuilder32.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap48 = multiMatchQueryBuilder32.fieldsBoosts;
        multiMatchQueryBuilder20.fieldsBoosts = strObjectFloatHashMap48;
        multiMatchQueryBuilder13.setfieldsBoosts(strObjectFloatHashMap48);
        org.elasticsearch.index.query.Operator operator51 = multiMatchQueryBuilder13.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "multi_match" + "'", str23, "multi_match");
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(queryValidationException37);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNull(zeroTermsQuery39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap48);
        org.junit.Assert.assertNull(operator51);
    }

    @Test
    public void test01205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01205");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str20 = multiMatchQueryBuilder19.fuzzyRewrite;
        java.lang.String str21 = multiMatchQueryBuilder19.fuzzyRewrite;
        multiMatchQueryBuilder19.prefixLength = 10;
        multiMatchQueryBuilder19.rewrite = "";
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap26 = multiMatchQueryBuilder19.getfieldsBoosts();
        java.lang.Object obj27 = multiMatchQueryBuilder19.gettext();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(strObjectFloatHashMap26);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + "multi_match" + "'", obj27, "multi_match");
    }

    @Test
    public void test01206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01206");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = multiMatchQueryBuilder4.getzeroTermsQuery();
        java.lang.Object obj11 = multiMatchQueryBuilder4.text;
        java.lang.String[] strArray15 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray15);
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException21 = multiMatchQueryBuilder16.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap24 = multiMatchQueryBuilder23.getfieldsBoosts();
        java.lang.String[] strArray28 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray28);
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.operator(operator30);
        java.lang.String str32 = multiMatchQueryBuilder29.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness33 = multiMatchQueryBuilder29.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder29.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder29.settype(type36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder23.type(type36);
        org.elasticsearch.index.search.MatchQuery.Type type39 = type36.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type40 = type36.matchQueryType();
        multiMatchQueryBuilder4.settype(type36);
        java.lang.String[] strArray45 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray45);
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.operator(operator47);
        java.lang.String str49 = multiMatchQueryBuilder48.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type50 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type51 = type50.matchQueryType();
        float float52 = type50.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder48.type(type50);
        org.elasticsearch.common.ParseField parseField54 = type50.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type55 = type50.matchQueryType();
        multiMatchQueryBuilder4.settype(type50);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(zeroTermsQuery10);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "multi_match" + "'", obj11, "multi_match");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(queryValidationException21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(strObjectFloatHashMap24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "multi_match" + "'", str32, "multi_match");
        org.junit.Assert.assertNull(fuzziness33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type39.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type40.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "multi_match" + "'", str49, "multi_match");
        org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type50.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type51 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type51.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + 0.0f + "'", float52 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(parseField54);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type55.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test01207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01207");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.minimumShouldMatch("");
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder4, strArray19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.useDisMax(false);
        java.lang.Float float25 = multiMatchQueryBuilder22.tieBreaker;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(float25);
    }

    @Test
    public void test01208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01208");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.maxExpansions((-1));
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.QueryShardContext queryShardContext17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query18 = multiMatchQueryBuilder11.toQuery(queryShardContext17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
    }

    @Test
    public void test01209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01209");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException26 = multiMatchQueryBuilder21.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.cutoffFrequency((float) (byte) 100);
        float float29 = multiMatchQueryBuilder21.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type31 = type30.matchQueryType();
        multiMatchQueryBuilder21.settype(type30);
        float float33 = type30.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder16.type((java.lang.Object) type30);
        java.lang.Class<?> wildcardClass35 = multiMatchQueryBuilder34.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(queryValidationException26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 1.0f + "'", float29 == 1.0f);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type30.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type31.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test01210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01210");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder8.settieBreaker((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.Operator operator18 = multiMatchQueryBuilder8.getoperator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(operator18);
    }

    @Test
    public void test01211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01211");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        java.lang.Float float12 = multiMatchQueryBuilder11.cutoffFrequency;
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder17.getlenient();
        multiMatchQueryBuilder17.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder17.tieBreaker((float) (-1));
        multiMatchQueryBuilder17.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder17.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder11.fuzziness((java.lang.Object) multiMatchQueryBuilder17);
        org.elasticsearch.index.query.Operator operator32 = null;
        multiMatchQueryBuilder11.operator = operator32;
        float float34 = multiMatchQueryBuilder11.boost();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 1.0f + "'", float34 == 1.0f);
    }

    @Test
    public void test01212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01212");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        float float18 = type17.tieBreaker();
        multiMatchQueryBuilder4.settype(type17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.slop((int) 'a');
        multiMatchQueryBuilder4.lenient = true;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type17.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 1.0f + "'", float18 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test01213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01213");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.maxExpansions((int) (byte) 100);
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder4.fields;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test01214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01214");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder8.type = type18;
        java.lang.Integer int20 = multiMatchQueryBuilder8.getslop();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder8.getzeroTermsQuery();
        java.lang.String str22 = multiMatchQueryBuilder8.getminimumShouldMatch();
        java.util.List<java.lang.String> strList23 = multiMatchQueryBuilder8.fields;
        org.elasticsearch.index.query.Operator operator24 = multiMatchQueryBuilder8.getoperator();
        multiMatchQueryBuilder8.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        java.lang.String[] strArray30 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray30);
        org.elasticsearch.index.query.Operator operator32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.operator(operator32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder31.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException36 = multiMatchQueryBuilder31.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder31.cutoffFrequency((float) (byte) 100);
        float float39 = multiMatchQueryBuilder31.boost();
        multiMatchQueryBuilder31.setanalyzer("");
        java.lang.Boolean boolean42 = multiMatchQueryBuilder31.getuseDisMax();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder8.type((java.lang.Object) multiMatchQueryBuilder31);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multimatch\" : {?    \"query\" : \"multi_match\",?    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],?    \"analyzer\" : \"\",?    \"cutofffrequency\" : 100.0,?    \"boost\" : 1.0?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNull(operator24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(queryValidationException36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 1.0f + "'", float39 == 1.0f);
        org.junit.Assert.assertNull(boolean42);
    }

    @Test
    public void test01215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01215");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        org.elasticsearch.index.query.QueryValidationException queryValidationException8 = multiMatchQueryBuilder6.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder6.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField14 = type13.parseField();
        multiMatchQueryBuilder10.type = type13;
        java.lang.Boolean boolean16 = multiMatchQueryBuilder10.useDisMax;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(queryValidationException8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type13.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField14);
        org.junit.Assert.assertNull(boolean16);
    }

    @Test
    public void test01216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01216");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        java.lang.Integer int11 = multiMatchQueryBuilder10.getslop();
        multiMatchQueryBuilder10.slop = 1;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery14);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
    }

    @Test
    public void test01217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01217");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String str16 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.useDisMax(true);
        float float21 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = multiMatchQueryBuilder4.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder4.lenient(false);
        multiMatchQueryBuilder24.setprefixLength((java.lang.Integer) 1);
        java.lang.String str27 = multiMatchQueryBuilder24.getrewrite();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder28 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params29 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder24.doXContent(xContentBuilder28, params29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 1.0f + "'", float21 == 1.0f);
        org.junit.Assert.assertNull(type22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(params29);
    }

    @Test
    public void test01218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01218");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap13;
        multiMatchQueryBuilder4.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = multiMatchQueryBuilder18.gettype();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        multiMatchQueryBuilder18.setzeroTermsQuery(zeroTermsQuery20);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(type19);
    }

    @Test
    public void test01219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01219");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        multiMatchQueryBuilder19.minimumShouldMatch = "hi!";
        java.lang.Float float26 = multiMatchQueryBuilder19.tieBreaker;
        java.lang.Object obj27 = multiMatchQueryBuilder19.text;
        multiMatchQueryBuilder19.maxExpansions = 0;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type31 = type30.matchQueryType();
        multiMatchQueryBuilder19.settype(type30);
        multiMatchQueryBuilder4.settype(type30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder4.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) (-1));
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float26);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + "multi_match" + "'", obj27, "multi_match");
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type30.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type31.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
    }

    @Test
    public void test01220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01220");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.slop((int) (short) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder23.getPROTOTYPE();
        multiMatchQueryBuilder23.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"maxExpansions\" : -1,\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test01221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01221");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        multiMatchQueryBuilder4.maxExpansions = 1;
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder17.getlenient();
        multiMatchQueryBuilder17.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) 100);
        java.lang.Object obj24 = multiMatchQueryBuilder23.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.slop(10);
        multiMatchQueryBuilder23.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTIMATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAXEXPANSIONS\\\" : 100,\\n    \\\"USEDISMAX\\\" : TRUE,\\n    \\\"TIEBREAKER\\\" : -1.0,\\n    \\\"CUTOFFFREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder23.setmaxExpansions((java.lang.Integer) 1);
        java.lang.String[] strArray34 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray34);
        org.elasticsearch.index.query.Operator operator36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.operator(operator36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder35.field("");
        org.elasticsearch.index.query.Operator operator40 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder35.operator(operator40);
        java.lang.Object obj42 = multiMatchQueryBuilder41.gettext();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder23.type(obj42);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [multi_match]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + "multi_match" + "'", obj24, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertEquals("'" + obj42 + "' != '" + "multi_match" + "'", obj42, "multi_match");
    }

    @Test
    public void test01222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01222");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzziness\" : \"10\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test01223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01223");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.useDisMax(true);
        multiMatchQueryBuilder17.setanalyzer("multi_match");
        java.lang.Integer int20 = multiMatchQueryBuilder17.slop;
        multiMatchQueryBuilder17.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(int20);
    }

    @Test
    public void test01224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01224");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.boost((float) 10L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.rewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = multiMatchQueryBuilder8.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type23 = multiMatchQueryBuilder8.type;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(zeroTermsQuery22);
        org.junit.Assert.assertNull(type23);
    }

    @Test
    public void test01225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01225");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.tieBreaker((float) (short) 0);
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) true);
        java.lang.String str13 = multiMatchQueryBuilder10.getWriteableName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.slop(0);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap16 = multiMatchQueryBuilder10.fieldsBoosts;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params18 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = multiMatchQueryBuilder10.toXContent(xContentBuilder17, params18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(strObjectFloatHashMap16);
        org.junit.Assert.assertNotNull(params18);
    }

    @Test
    public void test01226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01226");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery19);
        multiMatchQueryBuilder20.useDisMax = true;
        multiMatchQueryBuilder20.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder20.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"multi_match\\\",\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.common.io.stream.StreamInput streamInput27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder20.readFrom(streamInput27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test01227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01227");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01228");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.tieBreaker((float) (short) 0);
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) true);
        java.lang.String str13 = multiMatchQueryBuilder10.getWriteableName();
        java.lang.String str14 = multiMatchQueryBuilder10.getNAME();
        multiMatchQueryBuilder10.prefixLength = 100;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "multi_match" + "'", str14, "multi_match");
    }

    @Test
    public void test01229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01229");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        java.lang.String str13 = multiMatchQueryBuilder4.getName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery14;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.getPROTOTYPE();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test01230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01230");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder13.rewrite = "multi_match";
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        java.lang.String str27 = multiMatchQueryBuilder24.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness28 = multiMatchQueryBuilder24.fuzziness;
        multiMatchQueryBuilder24.setlenient((java.lang.Boolean) false);
        multiMatchQueryBuilder24.minimumShouldMatch = "";
        java.lang.String[] strArray36 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray36);
        org.elasticsearch.index.query.Operator operator38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.operator(operator38);
        org.elasticsearch.index.query.Operator operator40 = null;
        multiMatchQueryBuilder37.operator = operator40;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder37.fuzzyRewrite("multi_match");
        multiMatchQueryBuilder43.tieBreaker = 0.0f;
        java.lang.String str46 = multiMatchQueryBuilder43.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder24.type((java.lang.Object) str46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder24.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray53 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray53);
        org.elasticsearch.index.query.Operator operator55 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.operator(operator55);
        multiMatchQueryBuilder54.setrewrite("");
        java.util.List<java.lang.String> strList59 = multiMatchQueryBuilder54.getfields();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery60 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder54.zeroTermsQuery(zeroTermsQuery60);
        java.lang.Float float62 = multiMatchQueryBuilder54.getcutoffFrequency();
        java.lang.String[] strArray66 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray66);
        org.elasticsearch.index.query.Operator operator68 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.operator(operator68);
        java.lang.Boolean boolean70 = multiMatchQueryBuilder67.getlenient();
        multiMatchQueryBuilder67.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder67.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness75 = multiMatchQueryBuilder74.fuzziness;
        multiMatchQueryBuilder74.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder74.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray83 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray83);
        org.elasticsearch.index.query.Operator operator85 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder84.operator(operator85);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = multiMatchQueryBuilder84.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = multiMatchQueryBuilder88.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder88.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness93 = multiMatchQueryBuilder88.getfuzziness();
        multiMatchQueryBuilder74.fuzziness = fuzziness93;
        multiMatchQueryBuilder54.setfuzziness(fuzziness93);
        multiMatchQueryBuilder24.setfuzziness(fuzziness93);
        multiMatchQueryBuilder13.setfuzziness(fuzziness93);
        java.lang.Integer int98 = multiMatchQueryBuilder13.getprefixLength();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "multi_match" + "'", str27, "multi_match");
        org.junit.Assert.assertNull(fuzziness28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNull(float62);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNull(boolean70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNull(fuzziness75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder88);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder90);
        org.junit.Assert.assertNotNull(fuzziness93);
        org.junit.Assert.assertNull(int98);
    }

    @Test
    public void test01231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01231");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.String str1 = multiMatchQueryBuilder0.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery2 = multiMatchQueryBuilder0.zeroTermsQuery;
        multiMatchQueryBuilder0.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder0.zeroTermsQuery(zeroTermsQuery5);
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = null;
        multiMatchQueryBuilder0.setfuzziness(fuzziness7);
        java.lang.String str9 = multiMatchQueryBuilder0.queryName();
        org.elasticsearch.common.xcontent.XContentType xContentType10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference11 = multiMatchQueryBuilder0.buildAsBytes(xContentType10);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}" + "'", str1, "{\n  \"multiMatch\" : {\n    \"query\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(zeroTermsQuery2);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}" + "'", str9, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
    }

    @Test
    public void test01232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01232");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String str16 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) ' ');
        java.lang.Integer int19 = multiMatchQueryBuilder4.getslop();
        java.lang.String str20 = multiMatchQueryBuilder4.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder4.maxExpansions((int) '#');
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test01233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01233");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness8;
        org.elasticsearch.index.query.Operator operator10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.operator(operator10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder11.fieldsBoosts;
        java.lang.String str13 = multiMatchQueryBuilder11.rewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.String str15 = multiMatchQueryBuilder14.getminimumShouldMatch();
        multiMatchQueryBuilder14.maxExpansions = 100;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder14.zeroTermsQuery = zeroTermsQuery18;
        boolean boolean20 = multiMatchQueryBuilder11.equals((java.lang.Object) zeroTermsQuery18);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}" + "'", str15, "{\n  \"multiMatch\" : {\n    \"query\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test01234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01234");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder16.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder16.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        java.lang.String str31 = multiMatchQueryBuilder28.getWriteableName();
        java.lang.Boolean boolean32 = multiMatchQueryBuilder28.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder28.getPROTOTYPE();
        multiMatchQueryBuilder28.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray39 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray39);
        org.elasticsearch.index.query.Operator operator41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.operator(operator41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException45 = multiMatchQueryBuilder40.validate();
        java.lang.Integer int46 = multiMatchQueryBuilder40.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery47 = multiMatchQueryBuilder40.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder40.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder40.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder40.boost((float) 0);
        java.lang.String str55 = multiMatchQueryBuilder40.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap56 = multiMatchQueryBuilder40.fieldsBoosts;
        multiMatchQueryBuilder28.fieldsBoosts = strObjectFloatHashMap56;
        multiMatchQueryBuilder16.setfieldsBoosts(strObjectFloatHashMap56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder16.lenient(true);
        java.lang.String[] strArray64 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray64);
        org.elasticsearch.index.query.Operator operator66 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder65.operator(operator66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder65.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException70 = multiMatchQueryBuilder65.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery71 = multiMatchQueryBuilder65.getzeroTermsQuery();
        java.lang.Integer int72 = multiMatchQueryBuilder65.getmaxExpansions();
        multiMatchQueryBuilder65.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder16.fuzziness((java.lang.Object) multiMatchQueryBuilder65);
        java.lang.String str76 = multiMatchQueryBuilder75.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "multi_match" + "'", str31, "multi_match");
        org.junit.Assert.assertNull(boolean32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(queryValidationException45);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNull(zeroTermsQuery47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNull(queryValidationException70);
        org.junit.Assert.assertNull(zeroTermsQuery71);
        org.junit.Assert.assertNull(int72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNull(str76);
    }

    @Test
    public void test01235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01235");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.Object obj17 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.tieBreaker = (-1.0f);
        java.lang.String str20 = multiMatchQueryBuilder4.getName();
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.operator(operator21);
        java.lang.String str23 = multiMatchQueryBuilder4.minimumShouldMatch;
        multiMatchQueryBuilder4.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"prefixLength\" : 10,\n    \"maxExpansions\" : -1,\n    \"tieBreaker\" : 0.0,\n    \"cutoffFrequency\" : 52.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput26 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder4.writeTo(streamOutput26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test01236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01236");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (byte) 0);
        org.elasticsearch.common.unit.Fuzziness fuzziness14 = multiMatchQueryBuilder8.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder16.setminimumShouldMatch("hi!");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(strObjectFloatHashMap11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(fuzziness14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test01237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01237");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder4.minimumShouldMatch;
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 0);
        java.lang.String str24 = multiMatchQueryBuilder4.analyzer;
        multiMatchQueryBuilder4.maxExpansions = 97;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str24, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test01238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01238");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("hi!");
        java.lang.String str12 = multiMatchQueryBuilder8.fuzzyRewrite;
        java.lang.Float float13 = multiMatchQueryBuilder8.gettieBreaker();
        java.lang.String[] strArray17 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray17);
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.operator(operator19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.field("");
        multiMatchQueryBuilder18.minimumShouldMatch = "hi!";
        java.lang.Float float25 = multiMatchQueryBuilder18.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type26 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type27 = type26.matchQueryType();
        float float28 = type26.tieBreaker();
        multiMatchQueryBuilder18.type = type26;
        multiMatchQueryBuilder18.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder18.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder18.analyzer = "multi_match";
        org.elasticsearch.common.unit.Fuzziness fuzziness36 = multiMatchQueryBuilder18.getfuzziness();
        org.elasticsearch.common.unit.Fuzziness fuzziness37 = multiMatchQueryBuilder18.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = multiMatchQueryBuilder18.type;
        multiMatchQueryBuilder8.settype(type38);
        java.lang.Boolean boolean40 = multiMatchQueryBuilder8.lenient;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(float25);
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type26.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type27.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 0.0f + "'", float28 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(fuzziness36);
        org.junit.Assert.assertNull(fuzziness37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertEquals("'" + boolean40 + "' != '" + false + "'", boolean40, false);
    }

    @Test
    public void test01239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01239");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder4.toString();
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap25 = multiMatchQueryBuilder24.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder24.lenient(false);
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery32);
        multiMatchQueryBuilder24.tieBreaker = 10.0f;
        java.util.List<java.lang.String> strList36 = multiMatchQueryBuilder24.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder24.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.Operator operator40 = multiMatchQueryBuilder24.operator;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(strObjectFloatHashMap25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(operator40);
    }

    @Test
    public void test01240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01240");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        multiMatchQueryBuilder17.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTIMATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAXEXPANSIONS\\\" : 100,\\n    \\\"USEDISMAX\\\" : TRUE,\\n    \\\"TIEBREAKER\\\" : -1.0,\\n    \\\"CUTOFFFREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test01241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01241");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        java.lang.Integer int13 = multiMatchQueryBuilder11.slop;
        multiMatchQueryBuilder11.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.prefixLength((int) (short) 1);
        multiMatchQueryBuilder11.lenient = true;
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException29 = multiMatchQueryBuilder24.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder24.cutoffFrequency((float) (byte) 100);
        float float32 = multiMatchQueryBuilder24.boost();
        multiMatchQueryBuilder24.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type35 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type36 = type35.matchQueryType();
        float float37 = type35.tieBreaker();
        float float38 = type35.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder24.fuzziness((java.lang.Object) type35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder24.cutoffFrequency((float) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type42 = multiMatchQueryBuilder41.gettype();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder11.fuzziness((java.lang.Object) type42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(queryValidationException29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 1.0f + "'", float32 == 1.0f);
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type35.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type36.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 0.0f + "'", float37 == 0.0f);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 0.0f + "'", float38 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(type42);
    }

    @Test
    public void test01242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01242");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        java.lang.String str19 = multiMatchQueryBuilder18.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        multiMatchQueryBuilder18.zeroTermsQuery = zeroTermsQuery20;
        multiMatchQueryBuilder18.setprefixLength((java.lang.Integer) 100);
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder18.getfuzziness();
        multiMatchQueryBuilder18.slop = 97;
        multiMatchQueryBuilder18.setmaxExpansions((java.lang.Integer) 0);
        multiMatchQueryBuilder18.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"analyzer\" : \"\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str19, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(fuzziness24);
    }

    @Test
    public void test01243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01243");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException25 = multiMatchQueryBuilder20.validate();
        java.lang.Integer int26 = multiMatchQueryBuilder20.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery27 = multiMatchQueryBuilder20.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder20.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder20.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder20.boost((float) 0);
        java.lang.String str35 = multiMatchQueryBuilder20.fuzzyRewrite;
        java.lang.String[] strArray39 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray39);
        org.elasticsearch.index.query.Operator operator41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.operator(operator41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap45 = multiMatchQueryBuilder44.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder44.zeroTermsQuery(zeroTermsQuery46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder44.lenient(false);
        multiMatchQueryBuilder44.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery52 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder44.zeroTermsQuery(zeroTermsQuery52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type56 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder53.settype(type56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder20.fuzziness((java.lang.Object) type56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder13.type(type56);
        java.lang.String str60 = multiMatchQueryBuilder59.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(queryValidationException25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNull(zeroTermsQuery27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(strObjectFloatHashMap45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type56.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test01244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01244");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type9 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type10 = type9.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type9);
        multiMatchQueryBuilder11.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.tieBreaker((float) 10L);
        multiMatchQueryBuilder11.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type9.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type10.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
    }

    @Test
    public void test01245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01245");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.boost((float) (short) 0);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params23 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder19.doXContent(xContentBuilder22, params23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(params23);
    }

    @Test
    public void test01246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01246");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        multiMatchQueryBuilder19.cutoffFrequency = 0.0f;
        java.lang.String str22 = multiMatchQueryBuilder19.fuzzyRewrite;
        java.lang.Boolean boolean23 = multiMatchQueryBuilder19.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
        org.junit.Assert.assertNull(boolean23);
    }

    @Test
    public void test01247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01247");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.getPROTOTYPE();
        multiMatchQueryBuilder14.settieBreaker((java.lang.Float) 0.0f);
        multiMatchQueryBuilder14.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = multiMatchQueryBuilder20.toXContent(xContentBuilder21, params22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(params22);
    }

    @Test
    public void test01248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01248");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.operator(operator16);
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj30 = multiMatchQueryBuilder22.text;
        multiMatchQueryBuilder22.setrewrite("");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder22.zeroTermsQuery(zeroTermsQuery33);
        boolean boolean35 = multiMatchQueryBuilder17.equals((java.lang.Object) multiMatchQueryBuilder22);
        org.elasticsearch.index.query.Operator operator36 = multiMatchQueryBuilder17.getoperator();
        java.lang.String[] strArray40 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray40);
        org.elasticsearch.index.query.Operator operator42 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.operator(operator42);
        java.lang.String str44 = multiMatchQueryBuilder41.getWriteableName();
        java.lang.Boolean boolean45 = multiMatchQueryBuilder41.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder41.getPROTOTYPE();
        multiMatchQueryBuilder41.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray52 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray52);
        org.elasticsearch.index.query.Operator operator54 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.operator(operator54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder53.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException58 = multiMatchQueryBuilder53.validate();
        java.lang.Integer int59 = multiMatchQueryBuilder53.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery60 = multiMatchQueryBuilder53.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder53.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder53.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder53.boost((float) 0);
        java.lang.String str68 = multiMatchQueryBuilder53.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap69 = multiMatchQueryBuilder53.fieldsBoosts;
        multiMatchQueryBuilder41.fieldsBoosts = strObjectFloatHashMap69;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder17.type((java.lang.Object) strObjectFloatHashMap69);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [[{?  \"multi_match\" : {?    \"query\" : \"multi_match\",?    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],?    \"slop\" : 0,?    \"fuzzy_rewrite\" : \"hi!\",?    \"tie_breaker\" : 100.0,?    \"cutoff_frequency\" : 100.0,?    \"boost\" : 1.0?  }?}=>35.0]]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertEquals("'" + obj30 + "' != '" + "multi_match" + "'", obj30, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(operator36);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "multi_match" + "'", str44, "multi_match");
        org.junit.Assert.assertNull(boolean45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNull(queryValidationException58);
        org.junit.Assert.assertNull(int59);
        org.junit.Assert.assertNull(zeroTermsQuery60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap69);
    }

    @Test
    public void test01249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01249");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.prefixLength(0);
        multiMatchQueryBuilder14.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
    }

    @Test
    public void test01250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01250");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"tieBreaker\" : 1.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01251");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        multiMatchQueryBuilder13.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.prefixLength((int) (short) 100);
        org.elasticsearch.common.unit.Fuzziness fuzziness20 = multiMatchQueryBuilder17.getfuzziness();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(fuzziness20);
    }

    @Test
    public void test01252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01252");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float20 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = multiMatchQueryBuilder4.toXContent(xContentBuilder21, params22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(float20);
        org.junit.Assert.assertNotNull(params22);
    }

    @Test
    public void test01253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01253");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.queryName("");
        multiMatchQueryBuilder14.setslop((java.lang.Integer) 0);
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray20);
        org.elasticsearch.index.query.Operator operator23 = multiMatchQueryBuilder22.getoperator();
        java.lang.String str24 = multiMatchQueryBuilder22.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder22.getPROTOTYPE();
        multiMatchQueryBuilder25.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNull(operator23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test01254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01254");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder11.getfieldsBoosts();
        java.lang.Object obj13 = multiMatchQueryBuilder11.text;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.type((java.lang.Object) "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"tieBreaker\" : -1.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multimatch\" : {?    \"query\" : \"multi_match\",?    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],?    \"analyzer\" : \"\",?    \"rewrite\" : \"multi_match\",?    \"tiebreaker\" : -1.0,?    \"cutofffrequency\" : 100.0,?    \"boost\" : 1.0?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + "multi_match" + "'", obj13, "multi_match");
    }

    @Test
    public void test01255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01255");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder11.getfieldsBoosts();
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.String str20 = multiMatchQueryBuilder17.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder17.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder17.settype(type24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder11.type(type24);
        java.lang.Integer int27 = multiMatchQueryBuilder26.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(int27);
    }

    @Test
    public void test01256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01256");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        org.elasticsearch.index.query.QueryValidationException queryValidationException14 = multiMatchQueryBuilder13.validate();
        java.lang.String str15 = multiMatchQueryBuilder13.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder13.zeroTermsQuery = zeroTermsQuery16;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.tieBreaker(0.0f);
        java.lang.Integer int20 = multiMatchQueryBuilder19.prefixLength;
        multiMatchQueryBuilder19.setmaxExpansions((java.lang.Integer) 97);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(queryValidationException14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(int20);
    }

    @Test
    public void test01257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01257");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder8.type = type18;
        java.lang.Integer int20 = multiMatchQueryBuilder8.getslop();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder8.getzeroTermsQuery();
        java.lang.String str22 = multiMatchQueryBuilder8.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder8.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int25 = multiMatchQueryBuilder8.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder8.tieBreaker((float) 10L);
        org.elasticsearch.index.query.Operator operator28 = null;
        multiMatchQueryBuilder8.setoperator(operator28);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test01258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01258");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        java.lang.String str12 = multiMatchQueryBuilder11.toString();
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.String str20 = multiMatchQueryBuilder17.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder17.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.cutoffFrequency((float) '4');
        boolean boolean26 = multiMatchQueryBuilder11.equals((java.lang.Object) multiMatchQueryBuilder23);
        multiMatchQueryBuilder23.maxExpansions = (-1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = null;
        multiMatchQueryBuilder23.setzeroTermsQuery(zeroTermsQuery29);
        java.lang.String str31 = multiMatchQueryBuilder23.rewrite;
        multiMatchQueryBuilder23.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0,\n    \"Name\" : \"\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str12, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test01259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01259");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.common.ParseField parseField19 = type18.parseField();
        org.elasticsearch.common.ParseField parseField20 = type18.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.type(type18);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.zeroTermsQuery(zeroTermsQuery22);
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException33 = multiMatchQueryBuilder28.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder28.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder28.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder28.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness40 = multiMatchQueryBuilder28.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder28.slop((int) (short) 0);
        multiMatchQueryBuilder28.setslop((java.lang.Integer) 100);
        java.lang.Boolean boolean45 = multiMatchQueryBuilder28.getuseDisMax();
        java.lang.String str46 = multiMatchQueryBuilder28.fuzzyRewrite;
        java.lang.String[] strArray51 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray51);
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray51, strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str46, strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder23, strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder23.maxExpansions((int) (short) 10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery64 = multiMatchQueryBuilder63.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(parseField19);
        org.junit.Assert.assertNotNull(parseField20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(queryValidationException33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(fuzziness40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(boolean45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNull(zeroTermsQuery64);
    }

    @Test
    public void test01260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01260");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        java.lang.Float float12 = multiMatchQueryBuilder11.cutoffFrequency;
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder17.getlenient();
        multiMatchQueryBuilder17.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder17.tieBreaker((float) (-1));
        multiMatchQueryBuilder17.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder17.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder11.fuzziness((java.lang.Object) multiMatchQueryBuilder17);
        org.elasticsearch.index.query.QueryShardContext queryShardContext32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query33 = multiMatchQueryBuilder17.toQuery(queryShardContext32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test01261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01261");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Object obj10 = multiMatchQueryBuilder4.text;
        float float11 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str14 = multiMatchQueryBuilder4.queryName();
        java.lang.String str15 = multiMatchQueryBuilder4.getWriteableName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "multi_match" + "'", obj10, "multi_match");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 1.0f + "'", float11 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "multi_match" + "'", str15, "multi_match");
    }

    @Test
    public void test01262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01262");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int13 = multiMatchQueryBuilder12.prefixLength;
        org.elasticsearch.common.unit.Fuzziness fuzziness14 = multiMatchQueryBuilder12.fuzziness;
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap24 = multiMatchQueryBuilder23.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.zeroTermsQuery(zeroTermsQuery25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder23.lenient(false);
        multiMatchQueryBuilder23.setcutoffFrequency((java.lang.Float) 1.0f);
        multiMatchQueryBuilder23.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray36 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray36);
        org.elasticsearch.index.query.Operator operator38 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.operator(operator38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder37.field("");
        java.lang.String str42 = multiMatchQueryBuilder37.getrewrite();
        java.lang.Object obj43 = multiMatchQueryBuilder37.text;
        float float44 = multiMatchQueryBuilder37.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder37.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float47 = multiMatchQueryBuilder37.gettieBreaker();
        java.lang.String[] strArray51 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray51);
        org.elasticsearch.index.query.Operator operator53 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.operator(operator53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder52.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException57 = multiMatchQueryBuilder52.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder52.cutoffFrequency((float) (byte) 100);
        float float60 = multiMatchQueryBuilder52.boost();
        multiMatchQueryBuilder52.setanalyzer("");
        java.lang.Boolean boolean63 = multiMatchQueryBuilder52.getuseDisMax();
        java.lang.String str64 = multiMatchQueryBuilder52.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder52.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray70 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray70);
        org.elasticsearch.index.query.Operator operator72 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder71.operator(operator72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder71.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder75.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder75.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness80 = multiMatchQueryBuilder75.getfuzziness();
        multiMatchQueryBuilder66.fuzziness = fuzziness80;
        multiMatchQueryBuilder37.setfuzziness(fuzziness80);
        multiMatchQueryBuilder23.fuzziness = fuzziness80;
        multiMatchQueryBuilder12.setfuzziness(fuzziness80);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(fuzziness14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(strObjectFloatHashMap24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + obj43 + "' != '" + "multi_match" + "'", obj43, "multi_match");
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 1.0f + "'", float44 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNull(float47);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNull(queryValidationException57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + 1.0f + "'", float60 == 1.0f);
        org.junit.Assert.assertNull(boolean63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(fuzziness80);
    }

    @Test
    public void test01263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01263");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder13.setprefixLength((java.lang.Integer) 10);
        multiMatchQueryBuilder13.settieBreaker((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder13.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder25.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Class<?> wildcardClass28 = multiMatchQueryBuilder25.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test01264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01264");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder0.boost((float) 1);
        java.lang.String[] strArray6 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray6);
        org.elasticsearch.index.query.Operator operator8 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder7.operator(operator8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder7.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException12 = multiMatchQueryBuilder7.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder7.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder7.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder7.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = multiMatchQueryBuilder7.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder7.slop((int) (short) 0);
        multiMatchQueryBuilder7.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException33 = multiMatchQueryBuilder28.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder28.cutoffFrequency((float) (byte) 100);
        float float36 = multiMatchQueryBuilder28.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type38 = type37.matchQueryType();
        multiMatchQueryBuilder28.settype(type37);
        multiMatchQueryBuilder7.type = type37;
        java.lang.String str41 = multiMatchQueryBuilder7.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder7.cutoffFrequency((float) 100L);
        java.lang.String[] strArray47 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray47);
        org.elasticsearch.index.query.Operator operator49 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.operator(operator49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder48.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException53 = multiMatchQueryBuilder48.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder48.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder48.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder48.fuzzyRewrite("hi!");
        java.lang.String[] strArray63 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray63);
        org.elasticsearch.index.query.Operator operator65 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.operator(operator65);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder64.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder68.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder68.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness73 = multiMatchQueryBuilder68.getfuzziness();
        multiMatchQueryBuilder48.setfuzziness(fuzziness73);
        multiMatchQueryBuilder7.fuzziness = fuzziness73;
        multiMatchQueryBuilder0.setfuzziness(fuzziness73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder0.slop((int) '4');
        java.lang.String str79 = multiMatchQueryBuilder0.rewrite;
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder0);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(queryValidationException12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(fuzziness19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(queryValidationException33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 1.0f + "'", float36 == 1.0f);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type37.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type38.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(queryValidationException53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(fuzziness73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test01265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01265");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.boost((float) '4');
        java.lang.Integer int21 = multiMatchQueryBuilder20.prefixLength;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(int21);
    }

    @Test
    public void test01266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01266");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.getfuzziness();
        org.elasticsearch.index.query.Operator operator13 = null;
        multiMatchQueryBuilder11.setoperator(operator13);
        java.lang.Boolean boolean15 = multiMatchQueryBuilder11.lenient;
        multiMatchQueryBuilder11.setslop((java.lang.Integer) 1);
        java.lang.String str18 = multiMatchQueryBuilder11.toString();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params20 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder11.doXContent(xContentBuilder19, params20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 1,\n    \"maxExpansions\" : 100,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str18, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 1,\n    \"maxExpansions\" : 100,\n    \"cutoffFrequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(params20);
    }

    @Test
    public void test01267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01267");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        java.lang.String str19 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Integer int20 = multiMatchQueryBuilder4.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.lenient(true);
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) (-1));
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test01268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01268");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap13;
        java.lang.Object obj15 = multiMatchQueryBuilder4.gettext();
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        multiMatchQueryBuilder20.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder20.lenient(true);
        java.lang.String str29 = multiMatchQueryBuilder28.toString();
        java.lang.String str30 = multiMatchQueryBuilder28.getfuzzyRewrite();
        multiMatchQueryBuilder28.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder28.fuzzyRewrite = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder28);
        java.lang.String str36 = multiMatchQueryBuilder35.queryName();
        java.lang.String str37 = multiMatchQueryBuilder35.analyzer;
        org.elasticsearch.common.xcontent.XContentType xContentType38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference39 = multiMatchQueryBuilder35.buildAsBytes(xContentType38);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "multi_match" + "'", obj15, "multi_match");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str29, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test01269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01269");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        multiMatchQueryBuilder11.prefixLength = 100;
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("");
        multiMatchQueryBuilder21.minimumShouldMatch = "hi!";
        java.lang.Float float28 = multiMatchQueryBuilder21.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type29 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type30 = type29.matchQueryType();
        float float31 = type29.tieBreaker();
        multiMatchQueryBuilder21.type = type29;
        multiMatchQueryBuilder21.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder21.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str37 = multiMatchQueryBuilder36.rewrite;
        java.lang.String[] strArray41 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray41);
        org.elasticsearch.index.query.Operator operator43 = null;
        multiMatchQueryBuilder42.operator = operator43;
        org.elasticsearch.common.unit.Fuzziness fuzziness45 = multiMatchQueryBuilder42.getfuzziness();
        multiMatchQueryBuilder42.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.Operator operator48 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder42.operator(operator48);
        java.lang.String[] strArray53 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray53);
        org.elasticsearch.index.query.Operator operator55 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.operator(operator55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder54.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException59 = multiMatchQueryBuilder54.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder54.cutoffFrequency((float) (byte) 100);
        float float62 = multiMatchQueryBuilder54.boost();
        multiMatchQueryBuilder54.setanalyzer("");
        java.lang.Boolean boolean65 = multiMatchQueryBuilder54.getuseDisMax();
        java.lang.String str66 = multiMatchQueryBuilder54.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder54.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray72 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray72);
        org.elasticsearch.index.query.Operator operator74 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder73.operator(operator74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder73.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder77.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder77.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness82 = multiMatchQueryBuilder77.getfuzziness();
        multiMatchQueryBuilder68.fuzziness = fuzziness82;
        multiMatchQueryBuilder42.fuzziness = fuzziness82;
        multiMatchQueryBuilder36.setfuzziness(fuzziness82);
        multiMatchQueryBuilder11.setfuzziness(fuzziness82);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery87 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery87);
        java.lang.String str89 = multiMatchQueryBuilder11.getName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(float28);
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type29.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type30.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 0.0f + "'", float31 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNull(fuzziness45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNull(queryValidationException59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + 1.0f + "'", float62 == 1.0f);
        org.junit.Assert.assertNull(boolean65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(fuzziness82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "multi_match" + "'", str89, "multi_match");
    }

    @Test
    public void test01270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01270");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.type;
        org.elasticsearch.index.query.Operator operator11 = null;
        multiMatchQueryBuilder4.setoperator(operator11);
        org.elasticsearch.index.query.Operator operator13 = null;
        multiMatchQueryBuilder4.operator = operator13;
        java.lang.String str15 = multiMatchQueryBuilder4.queryName();
        java.lang.Boolean boolean16 = multiMatchQueryBuilder4.useDisMax;
        java.lang.String str17 = multiMatchQueryBuilder4.analyzer;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test01271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01271");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        multiMatchQueryBuilder16.setzeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}");
        java.util.List<java.lang.String> strList23 = multiMatchQueryBuilder22.getfields();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strList23);
    }

    @Test
    public void test01272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01272");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder25.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder25.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = multiMatchQueryBuilder25.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField39 = type38.parseField();
        multiMatchQueryBuilder25.type = type38;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder20.type(type38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder20.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str44 = multiMatchQueryBuilder20.getrewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(type37);
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type38.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test01273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01273");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder8.type = type18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.slop(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder8.boost((float) (short) 1);
        multiMatchQueryBuilder23.cutoffFrequency = 10.0f;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params27 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder23.doXContent(xContentBuilder26, params27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(params27);
    }

    @Test
    public void test01274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01274");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str12 = multiMatchQueryBuilder8.minimumShouldMatch;
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException22 = multiMatchQueryBuilder17.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.cutoffFrequency((float) (byte) 100);
        java.lang.String str25 = multiMatchQueryBuilder17.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder17.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness28 = multiMatchQueryBuilder17.getfuzziness();
        org.elasticsearch.common.unit.Fuzziness fuzziness29 = null;
        multiMatchQueryBuilder17.fuzziness = fuzziness29;
        java.lang.Integer int31 = multiMatchQueryBuilder17.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = multiMatchQueryBuilder17.zeroTermsQuery;
        boolean boolean33 = multiMatchQueryBuilder8.equals((java.lang.Object) zeroTermsQuery32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder8.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params38 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder39 = multiMatchQueryBuilder34.toXContent(xContentBuilder37, params38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(queryValidationException22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(fuzziness28);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(zeroTermsQuery32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(params38);
    }

    @Test
    public void test01275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01275");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        multiMatchQueryBuilder8.setanalyzer("hi!");
        multiMatchQueryBuilder8.settieBreaker((java.lang.Float) (-1.0f));
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
    }

    @Test
    public void test01276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01276");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.Float float9 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.QueryValidationException queryValidationException10 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.Operator operator11 = multiMatchQueryBuilder4.getoperator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float9);
        org.junit.Assert.assertNull(queryValidationException10);
        org.junit.Assert.assertNull(operator11);
    }

    @Test
    public void test01277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01277");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        multiMatchQueryBuilder10.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}";
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException22 = multiMatchQueryBuilder17.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.cutoffFrequency((float) (byte) 100);
        java.lang.String str25 = multiMatchQueryBuilder17.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder17.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder17.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        float float31 = type30.tieBreaker();
        multiMatchQueryBuilder17.settype(type30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder10.type(type30);
        java.lang.Float float34 = multiMatchQueryBuilder33.gettieBreaker();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap35 = multiMatchQueryBuilder33.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder33.cutoffFrequency((float) 100L);
        multiMatchQueryBuilder37.setprefixLength((java.lang.Integer) 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(queryValidationException22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type30.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 1.0f + "'", float31 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(float34);
        org.junit.Assert.assertNull(strObjectFloatHashMap35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
    }

    @Test
    public void test01278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01278");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.tieBreaker((float) (short) 0);
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) true);
        java.lang.String str13 = multiMatchQueryBuilder10.getWriteableName();
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type16 = multiMatchQueryBuilder10.type;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNull(type16);
    }

    @Test
    public void test01279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01279");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        java.lang.String str19 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap29 = multiMatchQueryBuilder28.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.zeroTermsQuery(zeroTermsQuery30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder28.lenient(false);
        multiMatchQueryBuilder28.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder28.zeroTermsQuery(zeroTermsQuery36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type40 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder37.settype(type40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) type40);
        multiMatchQueryBuilder42.maxExpansions = 1;
        multiMatchQueryBuilder42.cutoffFrequency = 52.0f;
        multiMatchQueryBuilder42.setuseDisMax((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(strObjectFloatHashMap29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type40.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
    }

    @Test
    public void test01280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01280");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        multiMatchQueryBuilder11.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params18 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = multiMatchQueryBuilder11.toXContent(xContentBuilder17, params18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(params18);
    }

    @Test
    public void test01281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01281");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder11.getfieldsBoosts();
        java.lang.Object obj13 = multiMatchQueryBuilder11.text;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = multiMatchQueryBuilder11.getfieldsBoosts();
        multiMatchQueryBuilder11.setslop((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.slop((int) ' ');
        multiMatchQueryBuilder18.lenient = false;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + "multi_match" + "'", obj13, "multi_match");
        org.junit.Assert.assertNull(strObjectFloatHashMap14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test01282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01282");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test01283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01283");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setrewrite("");
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.String str16 = multiMatchQueryBuilder4.analyzer;
        java.lang.Boolean boolean17 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.tieBreaker = 52.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"analyzer\" : \"\",\n    \"minimumShouldMatch\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder21.setlenient((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test01284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01284");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder8.type = type18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.slop(10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = null;
        multiMatchQueryBuilder21.setfieldsBoosts(strObjectFloatHashMap22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        multiMatchQueryBuilder25.setlenient((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test01285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01285");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = multiMatchQueryBuilder4.fuzziness;
        multiMatchQueryBuilder4.maxExpansions = 1;
        java.lang.String str16 = multiMatchQueryBuilder4.rewrite;
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(fuzziness13);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test01286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01286");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (short) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = multiMatchQueryBuilder13.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(strObjectFloatHashMap14);
    }

    @Test
    public void test01287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01287");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type8 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type9 = type8.matchQueryType();
        float float10 = type8.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type8);
        multiMatchQueryBuilder11.useDisMax = false;
        multiMatchQueryBuilder11.useDisMax = false;
        org.elasticsearch.index.query.QueryValidationException queryValidationException16 = multiMatchQueryBuilder11.validate();
        multiMatchQueryBuilder11.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimumShouldMatch\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"slop\" : 0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type8.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type9.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(queryValidationException16);
    }

    @Test
    public void test01288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01288");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str15 = multiMatchQueryBuilder14.fuzzyRewrite;
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException25 = multiMatchQueryBuilder20.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.zeroTermsQuery(zeroTermsQuery28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder27.getPROTOTYPE();
        multiMatchQueryBuilder30.settieBreaker((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = multiMatchQueryBuilder30.zeroTermsQuery;
        java.lang.Object obj34 = multiMatchQueryBuilder30.gettext();
        java.lang.String[] strArray38 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray38);
        org.elasticsearch.index.query.Operator operator40 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.operator(operator40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder39.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException44 = multiMatchQueryBuilder39.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder39.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder39.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder39.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness51 = multiMatchQueryBuilder39.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder39.slop((int) (short) 0);
        multiMatchQueryBuilder39.setslop((java.lang.Integer) 100);
        java.lang.Boolean boolean56 = multiMatchQueryBuilder39.getuseDisMax();
        java.lang.String str57 = multiMatchQueryBuilder39.fuzzyRewrite;
        java.lang.String[] strArray62 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray62);
        java.lang.String[] strArray68 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray68);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray62, strArray68);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str57, strArray62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj34, strArray62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str15, strArray62);
        java.lang.String str74 = multiMatchQueryBuilder73.getName();
        multiMatchQueryBuilder73.setrewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(queryValidationException25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(zeroTermsQuery33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(queryValidationException44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(fuzziness51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNull(boolean56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "multi_match" + "'", str74, "multi_match");
    }

    @Test
    public void test01289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01289");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        java.lang.String str9 = multiMatchQueryBuilder4.rewrite;
        java.lang.String[] strArray13 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray13);
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.operator(operator15);
        org.elasticsearch.index.query.Operator operator17 = null;
        multiMatchQueryBuilder14.operator = operator17;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder14.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder14.prefixLength((int) (byte) 10);
        java.lang.Float float24 = multiMatchQueryBuilder14.gettieBreaker();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) float24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float24);
    }

    @Test
    public void test01290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01290");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder15.getfields();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test01291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01291");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        float float33 = multiMatchQueryBuilder25.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type35 = type34.matchQueryType();
        multiMatchQueryBuilder25.settype(type34);
        multiMatchQueryBuilder4.type = type34;
        java.lang.String str38 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) true);
        multiMatchQueryBuilder4.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"fuzziness\" : \"10\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery45 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery45;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 1.0f + "'", float33 == 1.0f);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type35.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
    }

    @Test
    public void test01292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01292");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        multiMatchQueryBuilder12.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float15 = multiMatchQueryBuilder12.gettieBreaker();
        java.lang.String str16 = multiMatchQueryBuilder12.fuzzyRewrite;
        java.lang.Float float17 = multiMatchQueryBuilder12.cutoffFrequency;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}" + "'", str16, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(float17);
    }

    @Test
    public void test01293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01293");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder4.toString();
        org.elasticsearch.common.unit.Fuzziness fuzziness14 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 1);
        org.elasticsearch.common.xcontent.XContentType xContentType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference18 = multiMatchQueryBuilder4.buildAsBytes(xContentType17);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNull(fuzziness14);
    }

    @Test
    public void test01294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01294");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField11 = type10.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type12 = type10.matchQueryType();
        multiMatchQueryBuilder4.type = type10;
        java.lang.Object obj14 = multiMatchQueryBuilder4.text;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type10.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type12.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
    }

    @Test
    public void test01295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01295");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        java.lang.String str13 = multiMatchQueryBuilder4.getName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery14;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int18 = multiMatchQueryBuilder4.maxExpansions;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(int18);
    }

    @Test
    public void test01296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01296");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.Operator operator19 = multiMatchQueryBuilder4.getoperator();
        java.lang.Boolean boolean20 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.Operator operator21 = null;
        multiMatchQueryBuilder4.operator = operator21;
        java.lang.String str23 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.String str24 = multiMatchQueryBuilder4.getNAME();
        multiMatchQueryBuilder4.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(fuzziness18);
        org.junit.Assert.assertNull(operator19);
        org.junit.Assert.assertEquals("'" + boolean20 + "' != '" + false + "'", boolean20, false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "multi_match" + "'", str24, "multi_match");
    }

    @Test
    public void test01297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01297");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness20 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.Operator operator21 = null;
        multiMatchQueryBuilder4.operator = operator21;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentType xContentType25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference26 = multiMatchQueryBuilder24.buildAsBytes(xContentType25);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(fuzziness20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test01298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01298");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.maxExpansions((-1));
        multiMatchQueryBuilder11.maxExpansions = 100;
        multiMatchQueryBuilder11.setslop((java.lang.Integer) 1);
        float float20 = multiMatchQueryBuilder11.boost();
        multiMatchQueryBuilder11.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"Name\" : \"multi_match\"\n  }\n}");
        java.lang.Class<?> wildcardClass23 = multiMatchQueryBuilder11.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 1.0f + "'", float20 == 1.0f);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test01299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01299");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.slop((int) (short) 0);
        java.lang.Class<?> wildcardClass17 = multiMatchQueryBuilder14.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test01300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01300");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.String str1 = multiMatchQueryBuilder0.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery2 = multiMatchQueryBuilder0.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = multiMatchQueryBuilder0.prefixLength((int) (short) -1);
        multiMatchQueryBuilder4.prefixLength = 1;
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str1, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(zeroTermsQuery2);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder4);
    }

    @Test
    public void test01301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01301");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        multiMatchQueryBuilder4.setcutoffFrequency((java.lang.Float) 0.0f);
        multiMatchQueryBuilder4.slop = 0;
        java.lang.String str22 = multiMatchQueryBuilder4.queryName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test01302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01302");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Integer int15 = multiMatchQueryBuilder14.getprefixLength();
        java.lang.Object obj16 = null;
        boolean boolean17 = multiMatchQueryBuilder14.equals(obj16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}", (float) (byte) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap30 = multiMatchQueryBuilder29.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder29.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder29.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder29.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.lang.String[] strArray40 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray40);
        org.elasticsearch.index.query.Operator operator42 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.operator(operator42);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder41.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException46 = multiMatchQueryBuilder41.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder41.cutoffFrequency((float) (byte) 100);
        java.lang.String str49 = multiMatchQueryBuilder41.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder41.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness52 = multiMatchQueryBuilder41.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder41.getPROTOTYPE();
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder53, strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder29.fuzziness((java.lang.Object) multiMatchQueryBuilder59);
        boolean boolean61 = multiMatchQueryBuilder20.equals((java.lang.Object) multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(strObjectFloatHashMap30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(queryValidationException46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(fuzziness52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test01303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01303");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder8.setanalyzer("multi_match");
        org.elasticsearch.index.query.QueryValidationException queryValidationException13 = multiMatchQueryBuilder8.validate();
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.tieBreaker((float) (short) -1);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 97);
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) 0.0f);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput24 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder8.writeTo(streamOutput24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(queryValidationException13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test01304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01304");
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion0 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE;
        java.lang.Class<?> wildcardClass1 = fieldCaseConversion0.getClass();
        java.lang.String[] strArray5 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray5);
        org.elasticsearch.index.query.Operator operator7 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.operator(operator7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder6.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException11 = multiMatchQueryBuilder6.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder6.cutoffFrequency((float) (byte) 100);
        java.lang.String str14 = multiMatchQueryBuilder6.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder6.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness17 = multiMatchQueryBuilder6.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder6.getPROTOTYPE();
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder18, strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass1, strArray22);
        multiMatchQueryBuilder25.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}";
        org.junit.Assert.assertTrue("'" + fieldCaseConversion0 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE + "'", fieldCaseConversion0.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE));
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(queryValidationException11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(fuzziness17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray22);
    }

    @Test
    public void test01305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01305");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.type(type22);
        multiMatchQueryBuilder23.setuseDisMax((java.lang.Boolean) true);
        java.lang.String[] strArray29 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray29);
        org.elasticsearch.index.query.Operator operator31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.operator(operator31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder30.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException35 = multiMatchQueryBuilder30.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder30.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder30.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder30.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness42 = multiMatchQueryBuilder30.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder30.slop((int) (short) 0);
        multiMatchQueryBuilder30.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray50 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray50);
        org.elasticsearch.index.query.Operator operator52 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.operator(operator52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder51.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException56 = multiMatchQueryBuilder51.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder51.cutoffFrequency((float) (byte) 100);
        float float59 = multiMatchQueryBuilder51.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type60 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type61 = type60.matchQueryType();
        multiMatchQueryBuilder51.settype(type60);
        multiMatchQueryBuilder30.type = type60;
        java.lang.String str64 = multiMatchQueryBuilder30.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder30.cutoffFrequency((float) 100L);
        java.lang.String[] strArray70 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray70);
        org.elasticsearch.index.query.Operator operator72 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder71.operator(operator72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder71.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException76 = multiMatchQueryBuilder71.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder71.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder71.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder71.fuzzyRewrite("hi!");
        java.lang.String[] strArray86 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray86);
        org.elasticsearch.index.query.Operator operator88 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = multiMatchQueryBuilder87.operator(operator88);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = multiMatchQueryBuilder87.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = multiMatchQueryBuilder91.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder91.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness96 = multiMatchQueryBuilder91.getfuzziness();
        multiMatchQueryBuilder71.setfuzziness(fuzziness96);
        multiMatchQueryBuilder30.fuzziness = fuzziness96;
        multiMatchQueryBuilder23.setfuzziness(fuzziness96);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type22.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(queryValidationException35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(fuzziness42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNull(queryValidationException56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + 1.0f + "'", float59 == 1.0f);
        org.junit.Assert.assertTrue("'" + type60 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type60.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type61 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type61.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNull(queryValidationException76);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder91);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder93);
        org.junit.Assert.assertNotNull(fuzziness96);
    }

    @Test
    public void test01306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01306");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.QueryShardContext queryShardContext19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query20 = multiMatchQueryBuilder4.toQuery(queryShardContext19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test01307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01307");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.getPROTOTYPE();
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder20.tieBreaker = 52.0f;
        multiMatchQueryBuilder20.setprefixLength((java.lang.Integer) 100);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test01308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01308");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = multiMatchQueryBuilder13.fieldsBoosts;
        java.lang.Boolean boolean19 = multiMatchQueryBuilder13.getlenient();
        multiMatchQueryBuilder13.setslop((java.lang.Integer) (-1));
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(strObjectFloatHashMap18);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + false + "'", boolean19, false);
    }

    @Test
    public void test01309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01309");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) false);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params14 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder10.doXContent(xContentBuilder13, params14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(params14);
    }

    @Test
    public void test01310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01310");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.lang.String[] strArray4 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder5 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray4);
        org.elasticsearch.index.query.Operator operator6 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder5.operator(operator6);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder5.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder9.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder9.setanalyzer("multi_match");
        org.elasticsearch.index.query.QueryValidationException queryValidationException14 = multiMatchQueryBuilder9.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = multiMatchQueryBuilder9.zeroTermsQuery;
        java.lang.String str16 = multiMatchQueryBuilder9.getrewrite();
        multiMatchQueryBuilder9.lenient = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder9.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.prefixLength((int) ' ');
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException33 = multiMatchQueryBuilder28.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder28.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder28.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder28.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness40 = multiMatchQueryBuilder28.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder28.slop((int) (short) 0);
        multiMatchQueryBuilder28.setslop((java.lang.Integer) 100);
        java.lang.Boolean boolean45 = multiMatchQueryBuilder28.getuseDisMax();
        java.lang.String str46 = multiMatchQueryBuilder28.fuzzyRewrite;
        java.lang.String[] strArray51 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray51);
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray51, strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str46, strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) ' ', strArray51);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder62 = org.elasticsearch.common.xcontent.XContentBuilder.builder(xContent0, strArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(queryValidationException14);
        org.junit.Assert.assertNull(zeroTermsQuery15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(queryValidationException33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(fuzziness40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(boolean45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray57);
    }

    @Test
    public void test01311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01311");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        java.lang.String str19 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Integer int20 = multiMatchQueryBuilder4.maxExpansions;
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.operator(operator21);
        java.util.List<java.lang.String> strList23 = multiMatchQueryBuilder4.getfields();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strList23);
    }

    @Test
    public void test01312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01312");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.Object obj17 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.tieBreaker = (-1.0f);
        java.lang.String str20 = multiMatchQueryBuilder4.getName();
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.operator(operator21);
        java.lang.String str23 = multiMatchQueryBuilder4.minimumShouldMatch;
        org.elasticsearch.index.query.Operator operator24 = null;
        multiMatchQueryBuilder4.operator = operator24;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multi_match" + "'", str20, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test01313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01313");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str20 = multiMatchQueryBuilder19.fuzzyRewrite;
        java.lang.String str21 = multiMatchQueryBuilder19.fuzzyRewrite;
        multiMatchQueryBuilder19.prefixLength = 10;
        multiMatchQueryBuilder19.rewrite = "";
        multiMatchQueryBuilder19.cutoffFrequency = 0.0f;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder28 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params29 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder30 = multiMatchQueryBuilder19.toXContent(xContentBuilder28, params29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(params29);
    }

    @Test
    public void test01314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01314");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.getPROTOTYPE();
        multiMatchQueryBuilder14.settieBreaker((java.lang.Float) 0.0f);
        multiMatchQueryBuilder14.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.Boolean boolean21 = multiMatchQueryBuilder20.useDisMax;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + false + "'", boolean21, false);
    }

    @Test
    public void test01315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01315");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.Object obj1 = multiMatchQueryBuilder0.text;
        java.util.List<java.lang.String> strList2 = multiMatchQueryBuilder0.fields;
        java.lang.String[] strArray6 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray6);
        org.elasticsearch.index.query.Operator operator8 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder7.operator(operator8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder7.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException12 = multiMatchQueryBuilder7.validate();
        java.lang.Integer int13 = multiMatchQueryBuilder7.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder7.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder7.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder7.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder7.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder7.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean24 = multiMatchQueryBuilder23.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.boost((float) (-1));
        java.lang.String str27 = multiMatchQueryBuilder26.queryName();
        multiMatchQueryBuilder26.useDisMax = false;
        java.lang.String[] strArray33 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray33);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException39 = multiMatchQueryBuilder34.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder34.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder34.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder34.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness46 = multiMatchQueryBuilder34.getfuzziness();
        java.lang.Boolean boolean47 = multiMatchQueryBuilder34.getuseDisMax();
        org.elasticsearch.index.query.Operator operator48 = null;
        multiMatchQueryBuilder34.operator = operator48;
        java.lang.String[] strArray53 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray53);
        org.elasticsearch.index.query.Operator operator55 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder54.operator(operator55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder54.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException59 = multiMatchQueryBuilder54.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder54.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder54.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder54.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type66 = multiMatchQueryBuilder54.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type67 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField68 = type67.parseField();
        multiMatchQueryBuilder54.type = type67;
        multiMatchQueryBuilder34.settype(type67);
        float float71 = type67.tieBreaker();
        org.elasticsearch.common.ParseField parseField72 = type67.parseField();
        multiMatchQueryBuilder26.settype(type67);
        multiMatchQueryBuilder0.type = type67;
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder0);
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(queryValidationException12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(queryValidationException39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(fuzziness46);
        org.junit.Assert.assertNull(boolean47);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNull(queryValidationException59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNull(type66);
        org.junit.Assert.assertTrue("'" + type67 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type67.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField68);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + 1.0f + "'", float71 == 1.0f);
        org.junit.Assert.assertNotNull(parseField72);
    }

    @Test
    public void test01316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01316");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery7 = multiMatchQueryBuilder6.getzeroTermsQuery();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder6.getfuzziness();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params10 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = multiMatchQueryBuilder6.toXContent(xContentBuilder9, params10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(zeroTermsQuery7);
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(params10);
    }

    @Test
    public void test01317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01317");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        float float33 = multiMatchQueryBuilder25.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type35 = type34.matchQueryType();
        multiMatchQueryBuilder25.settype(type34);
        multiMatchQueryBuilder4.type = type34;
        java.lang.String str38 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder4.operator(operator39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder4.tieBreaker((float) (-1L));
        org.elasticsearch.common.unit.Fuzziness fuzziness43 = multiMatchQueryBuilder42.fuzziness;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 1.0f + "'", float33 == 1.0f);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type35.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(fuzziness43);
    }

    @Test
    public void test01318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01318");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.Operator operator9 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.operator(operator9);
        java.lang.Integer int11 = multiMatchQueryBuilder10.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.slop((int) (byte) 100);
        java.lang.String str14 = multiMatchQueryBuilder13.getNAME();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "multi_match" + "'", str14, "multi_match");
    }

    @Test
    public void test01319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01319");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.analyzer("");
        multiMatchQueryBuilder18.prefixLength = 32;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test01320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01320");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        float float33 = multiMatchQueryBuilder25.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type35 = type34.matchQueryType();
        multiMatchQueryBuilder25.settype(type34);
        multiMatchQueryBuilder4.type = type34;
        java.lang.String str38 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder4.boost((float) '4');
        java.util.List<java.lang.String> strList41 = multiMatchQueryBuilder40.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder40.slop((int) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder40.prefixLength(1);
        java.lang.Class<?> wildcardClass46 = multiMatchQueryBuilder45.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 1.0f + "'", float33 == 1.0f);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type35.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test01321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01321");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type16 = type15.matchQueryType();
        float float17 = type15.tieBreaker();
        float float18 = type15.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) type15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) -1);
        java.lang.String str22 = multiMatchQueryBuilder21.rewrite;
        org.elasticsearch.common.io.stream.StreamOutput streamOutput23 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder21.writeTo(streamOutput23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type15.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type16.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test01322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01322");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.field("hi!", (float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.slop(1);
        org.elasticsearch.index.query.QueryShardContext queryShardContext21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query22 = multiMatchQueryBuilder20.toFilter(queryShardContext21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test01323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01323");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        java.lang.String str12 = multiMatchQueryBuilder11.toString();
        multiMatchQueryBuilder11.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder11.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.getPROTOTYPE();
        org.elasticsearch.common.xcontent.XContentType xContentType18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference19 = multiMatchQueryBuilder17.buildAsBytes(xContentType18);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str12, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(fuzziness15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test01324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01324");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        java.lang.Object obj16 = multiMatchQueryBuilder15.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder15.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder15.getName();
        java.lang.String[] strArray25 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray25);
        org.elasticsearch.index.query.Operator operator27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.operator(operator27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException31 = multiMatchQueryBuilder26.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder26.cutoffFrequency((float) (byte) 100);
        java.lang.String str34 = multiMatchQueryBuilder26.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder26.zeroTermsQuery(zeroTermsQuery35);
        multiMatchQueryBuilder26.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder26.setmaxExpansions((java.lang.Integer) 10);
        java.lang.Integer int41 = multiMatchQueryBuilder26.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder15.fuzziness((java.lang.Object) multiMatchQueryBuilder26);
        java.lang.Boolean boolean43 = multiMatchQueryBuilder15.useDisMax;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "multi_match" + "'", obj16, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(queryValidationException31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(boolean43);
    }

    @Test
    public void test01325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01325");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.prefixLength((int) (byte) 10);
        org.elasticsearch.common.io.stream.StreamInput streamInput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.readFrom(streamInput14);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
    }

    @Test
    public void test01326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01326");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) (-1));
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
    }

    @Test
    public void test01327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01327");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder12.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion15 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE;
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion15);
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion15);
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion15);
        org.elasticsearch.common.xcontent.XContentBuilder.globalFieldCaseConversion(fieldCaseConversion15);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder12.type((java.lang.Object) fieldCaseConversion15);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [none]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertTrue("'" + fieldCaseConversion15 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE + "'", fieldCaseConversion15.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE));
    }

    @Test
    public void test01328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01328");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        java.lang.String str12 = multiMatchQueryBuilder11.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder11.maxExpansions = 100;
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        multiMatchQueryBuilder21.setrewrite("");
        java.util.List<java.lang.String> strList26 = multiMatchQueryBuilder21.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField28 = type27.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type29 = type27.matchQueryType();
        multiMatchQueryBuilder21.type = type27;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder11.type(type27);
        multiMatchQueryBuilder11.prefixLength = 100;
        org.elasticsearch.index.query.QueryShardContext queryShardContext34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query35 = multiMatchQueryBuilder11.toFilter(queryShardContext34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField28);
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type29.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test01329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01329");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery19;
        java.lang.String str21 = multiMatchQueryBuilder4.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test01330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01330");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.Operator operator9 = null;
        multiMatchQueryBuilder4.setoperator(operator9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder12.setslop((java.lang.Integer) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        multiMatchQueryBuilder12.zeroTermsQuery = zeroTermsQuery15;
        org.elasticsearch.common.unit.Fuzziness fuzziness17 = multiMatchQueryBuilder12.fuzziness;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(fuzziness17);
    }

    @Test
    public void test01331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01331");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder13.setuseDisMax((java.lang.Boolean) false);
        multiMatchQueryBuilder13.setminimumShouldMatch("multi_match");
        java.lang.String str22 = multiMatchQueryBuilder13.getrewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test01332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01332");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.lang.Integer int8 = multiMatchQueryBuilder4.getmaxExpansions();
        multiMatchQueryBuilder4.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder4.getName();
        java.lang.Boolean boolean14 = multiMatchQueryBuilder4.getlenient();
        java.lang.Object obj15 = multiMatchQueryBuilder4.gettext();
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap25 = multiMatchQueryBuilder24.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder24.lenient(false);
        java.lang.Object obj30 = multiMatchQueryBuilder29.gettext();
        java.lang.Integer int31 = multiMatchQueryBuilder29.getslop();
        multiMatchQueryBuilder29.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder29.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException36 = multiMatchQueryBuilder35.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder35.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder35.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type41 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        multiMatchQueryBuilder40.type = type41;
        float float43 = type41.tieBreaker();
        float float44 = type41.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder4.type(type41);
        org.elasticsearch.index.query.Operator operator46 = multiMatchQueryBuilder4.getoperator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "multi_match" + "'", obj15, "multi_match");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(strObjectFloatHashMap25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertEquals("'" + obj30 + "' != '" + "multi_match" + "'", obj30, "multi_match");
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(queryValidationException36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type41.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 0.0f + "'", float43 == 0.0f);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 0.0f + "'", float44 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(operator46);
    }

    @Test
    public void test01333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01333");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        java.lang.String str14 = multiMatchQueryBuilder12.getfuzzyRewrite();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        multiMatchQueryBuilder19.minimumShouldMatch = "hi!";
        java.lang.Float float26 = multiMatchQueryBuilder19.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type28 = type27.matchQueryType();
        float float29 = type27.tieBreaker();
        multiMatchQueryBuilder19.type = type27;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder12.type(type27);
        multiMatchQueryBuilder31.maxExpansions = 100;
        java.lang.String[] strArray37 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray37);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.operator(operator39);
        org.elasticsearch.index.query.Operator operator41 = null;
        multiMatchQueryBuilder38.operator = operator41;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder38.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery45 = multiMatchQueryBuilder38.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder38.prefixLength((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type48 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.common.ParseField parseField49 = type48.parseField();
        org.elasticsearch.common.ParseField parseField50 = type48.parseField();
        multiMatchQueryBuilder47.settype(type48);
        org.elasticsearch.common.ParseField parseField52 = type48.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder31.type(type48);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput54 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder31.writeTo(streamOutput54);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(zeroTermsQuery45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type48.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(parseField49);
        org.junit.Assert.assertNotNull(parseField50);
        org.junit.Assert.assertNotNull(parseField52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
    }

    @Test
    public void test01334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01334");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str20 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.tieBreaker((float) 'a');
        org.elasticsearch.index.query.Operator operator23 = multiMatchQueryBuilder4.getoperator();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params25 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = multiMatchQueryBuilder4.toXContent(xContentBuilder24, params25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(operator23);
        org.junit.Assert.assertNotNull(params25);
    }

    @Test
    public void test01335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01335");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.tieBreaker((-1.0f));
        org.elasticsearch.index.query.Operator operator17 = null;
        multiMatchQueryBuilder4.operator = operator17;
        java.util.List<java.lang.String> strList19 = multiMatchQueryBuilder4.getfields();
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        multiMatchQueryBuilder24.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder24.lenient(true);
        java.lang.String str33 = multiMatchQueryBuilder32.toString();
        java.lang.String str34 = multiMatchQueryBuilder32.getfuzzyRewrite();
        java.lang.String[] strArray38 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray38);
        org.elasticsearch.index.query.Operator operator40 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.operator(operator40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder39.field("");
        multiMatchQueryBuilder39.minimumShouldMatch = "hi!";
        java.lang.Float float46 = multiMatchQueryBuilder39.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type47 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type48 = type47.matchQueryType();
        float float49 = type47.tieBreaker();
        multiMatchQueryBuilder39.type = type47;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder32.type(type47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type52 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type53 = type52.matchQueryType();
        float float54 = type52.tieBreaker();
        float float55 = type52.tieBreaker();
        multiMatchQueryBuilder51.type = type52;
        multiMatchQueryBuilder4.settype(type52);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder58 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params59 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder4.doXContent(xContentBuilder58, params59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str33, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(float46);
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type47.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type48.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + 0.0f + "'", float49 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertTrue("'" + type52 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type52.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type53 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type53.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 0.0f + "'", float54 == 0.0f);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + 0.0f + "'", float55 == 0.0f);
        org.junit.Assert.assertNotNull(params59);
    }

    @Test
    public void test01336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01336");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 100);
        multiMatchQueryBuilder8.prefixLength = 100;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery18);
        multiMatchQueryBuilder8.slop = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder8.tieBreaker((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder8.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTIMATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAXEXPANSIONS\\\" : 100,\\n    \\\"USEDISMAX\\\" : TRUE,\\n    \\\"TIEBREAKER\\\" : -1.0,\\n    \\\"CUTOFFFREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder8.setprefixLength((java.lang.Integer) 0);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test01337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01337");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.String str1 = multiMatchQueryBuilder0.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery2 = multiMatchQueryBuilder0.zeroTermsQuery;
        multiMatchQueryBuilder0.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder0.zeroTermsQuery(zeroTermsQuery5);
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = null;
        multiMatchQueryBuilder0.setfuzziness(fuzziness7);
        java.lang.String str9 = multiMatchQueryBuilder0.queryName();
        java.lang.String str10 = multiMatchQueryBuilder0.getWriteableName();
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str1, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNull(zeroTermsQuery2);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}" + "'", str9, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "multi_match" + "'", str10, "multi_match");
    }

    @Test
    public void test01338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01338");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.tieBreaker((float) 10);
        java.lang.Object obj17 = multiMatchQueryBuilder16.gettext();
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder22.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder22.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness34 = multiMatchQueryBuilder22.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder22.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder22.zeroTermsQuery(zeroTermsQuery37);
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException48 = multiMatchQueryBuilder43.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder43.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder43.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder43.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type55 = multiMatchQueryBuilder43.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type56 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField57 = type56.parseField();
        multiMatchQueryBuilder43.type = type56;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder38.type(type56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder16.fuzziness((java.lang.Object) multiMatchQueryBuilder59);
        multiMatchQueryBuilder16.setlenient((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(fuzziness34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(queryValidationException48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(type55);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type56.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
    }

    @Test
    public void test01339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01339");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.fuzzyRewrite("");
        java.lang.String str15 = multiMatchQueryBuilder14.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.maxExpansions((int) (short) 100);
        java.lang.String str18 = multiMatchQueryBuilder17.getminimumShouldMatch();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test01340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01340");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 10);
        java.lang.Integer int19 = multiMatchQueryBuilder4.prefixLength;
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.cutoffFrequency(52.0f);
        org.elasticsearch.index.query.QueryValidationException queryValidationException24 = multiMatchQueryBuilder23.validate();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(queryValidationException24);
    }

    @Test
    public void test01341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01341");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        java.lang.Float float11 = multiMatchQueryBuilder4.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder4.setzeroTermsQuery(zeroTermsQuery14);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
    }

    @Test
    public void test01342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01342");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        java.lang.String str14 = multiMatchQueryBuilder12.getfuzzyRewrite();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        multiMatchQueryBuilder19.minimumShouldMatch = "hi!";
        java.lang.Float float26 = multiMatchQueryBuilder19.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type28 = type27.matchQueryType();
        float float29 = type27.tieBreaker();
        multiMatchQueryBuilder19.type = type27;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder12.type(type27);
        multiMatchQueryBuilder31.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str34 = multiMatchQueryBuilder31.getNAME();
        org.elasticsearch.common.xcontent.XContentType xContentType35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference36 = multiMatchQueryBuilder31.buildAsBytes(xContentType35);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float26);
        org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type27.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 0.0f + "'", float29 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "multi_match" + "'", str34, "multi_match");
    }

    @Test
    public void test01343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01343");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 10);
        java.lang.Integer int19 = multiMatchQueryBuilder4.prefixLength;
        multiMatchQueryBuilder4.rewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery22;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int19);
    }

    @Test
    public void test01344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01344");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery13);
        java.lang.Integer int15 = multiMatchQueryBuilder14.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.maxExpansions((int) (byte) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder14.tieBreaker((float) (short) 100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        multiMatchQueryBuilder24.fuzzyRewrite = "hi!";
        java.lang.String str29 = multiMatchQueryBuilder24.rewrite;
        java.lang.String[] strArray33 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray33);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder34.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException39 = multiMatchQueryBuilder34.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder34.cutoffFrequency((float) (byte) 100);
        float float42 = multiMatchQueryBuilder34.boost();
        multiMatchQueryBuilder34.setanalyzer("");
        multiMatchQueryBuilder34.setcutoffFrequency((java.lang.Float) 0.0f);
        boolean boolean47 = multiMatchQueryBuilder24.equals((java.lang.Object) multiMatchQueryBuilder34);
        java.lang.String[] strArray51 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray51);
        org.elasticsearch.index.query.Operator operator53 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.operator(operator53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder52.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean59 = multiMatchQueryBuilder56.useDisMax;
        java.lang.String[] strArray63 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray63);
        org.elasticsearch.index.query.Operator operator65 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.operator(operator65);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder64.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException69 = multiMatchQueryBuilder64.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder64.cutoffFrequency((float) (byte) 100);
        java.lang.String str72 = multiMatchQueryBuilder64.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder64.queryName("");
        multiMatchQueryBuilder74.setslop((java.lang.Integer) 0);
        java.lang.String[] strArray80 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean59, strArray80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean47, strArray80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (short) 100, strArray80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type86 = multiMatchQueryBuilder85.type;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(queryValidationException39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 1.0f + "'", float42 == 1.0f);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNull(boolean59);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNull(queryValidationException69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNull(type86);
    }

    @Test
    public void test01345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01345");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder8.fields;
        java.lang.Boolean boolean13 = multiMatchQueryBuilder8.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(boolean13);
    }

    @Test
    public void test01346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01346");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = multiMatchQueryBuilder4.getzeroTermsQuery();
        java.lang.Integer int11 = multiMatchQueryBuilder4.getmaxExpansions();
        multiMatchQueryBuilder4.cutoffFrequency = 52.0f;
        org.elasticsearch.index.query.Operator operator14 = multiMatchQueryBuilder4.operator;
        org.elasticsearch.index.query.QueryShardContext queryShardContext15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query16 = multiMatchQueryBuilder4.toQuery(queryShardContext15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(zeroTermsQuery10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(operator14);
    }

    @Test
    public void test01347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01347");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.String[] strArray6 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray6);
        org.elasticsearch.index.query.Operator operator8 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder7.operator(operator8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder7.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException12 = multiMatchQueryBuilder7.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder7.cutoffFrequency((float) (byte) 100);
        float float15 = multiMatchQueryBuilder7.boost();
        multiMatchQueryBuilder7.setanalyzer("");
        java.lang.Boolean boolean18 = multiMatchQueryBuilder7.getuseDisMax();
        multiMatchQueryBuilder7.setminimumShouldMatch("");
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        java.lang.Boolean boolean28 = multiMatchQueryBuilder25.getlenient();
        multiMatchQueryBuilder25.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness33 = multiMatchQueryBuilder32.fuzziness;
        multiMatchQueryBuilder32.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder32.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = multiMatchQueryBuilder37.zeroTermsQuery;
        java.lang.String[] strArray42 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray42);
        org.elasticsearch.index.query.Operator operator44 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder43.operator(operator44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException48 = multiMatchQueryBuilder43.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder43.cutoffFrequency((float) (byte) 100);
        java.lang.String str51 = multiMatchQueryBuilder43.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder43.queryName("");
        multiMatchQueryBuilder53.setslop((java.lang.Integer) 0);
        java.lang.String[] strArray59 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder37, strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "{\n  \"multiMatch\" : {\n    \"query\" : {\n      \"multiMatch\" : {\n        \"query\" : \"multi_match\",\n        \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n        \"minimumShouldMatch\" : \"multi_match\",\n        \"lenient\" : true,\n        \"boost\" : 1.0,\n        \"Name\" : \"multi_match\"\n      }\n    },\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}", strArray59);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(queryValidationException12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(boolean28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(fuzziness33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(zeroTermsQuery38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(queryValidationException48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(strArray59);
    }

    @Test
    public void test01348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01348");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Object obj10 = multiMatchQueryBuilder4.text;
        float float11 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float14 = multiMatchQueryBuilder4.gettieBreaker();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException24 = multiMatchQueryBuilder19.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.cutoffFrequency((float) (byte) 100);
        float float27 = multiMatchQueryBuilder19.boost();
        multiMatchQueryBuilder19.setanalyzer("");
        java.lang.Boolean boolean30 = multiMatchQueryBuilder19.getuseDisMax();
        java.lang.String str31 = multiMatchQueryBuilder19.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder19.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray37 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray37);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.operator(operator39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder38.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder42.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness47 = multiMatchQueryBuilder42.getfuzziness();
        multiMatchQueryBuilder33.fuzziness = fuzziness47;
        multiMatchQueryBuilder4.setfuzziness(fuzziness47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder4.lenient(true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "multi_match" + "'", obj10, "multi_match");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 1.0f + "'", float11 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(queryValidationException24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(fuzziness47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
    }

    @Test
    public void test01349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01349");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness22 = multiMatchQueryBuilder21.getfuzziness();
        org.elasticsearch.index.query.Operator operator23 = null;
        multiMatchQueryBuilder21.setoperator(operator23);
        java.lang.String[] strArray28 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray28);
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.operator(operator30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder29.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException34 = multiMatchQueryBuilder29.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder29.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder29.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder29.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness41 = multiMatchQueryBuilder29.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder29.slop((int) (short) 0);
        multiMatchQueryBuilder29.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray49 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray49);
        org.elasticsearch.index.query.Operator operator51 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.operator(operator51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder50.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException55 = multiMatchQueryBuilder50.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder50.cutoffFrequency((float) (byte) 100);
        float float58 = multiMatchQueryBuilder50.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type59 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type60 = type59.matchQueryType();
        multiMatchQueryBuilder50.settype(type59);
        multiMatchQueryBuilder29.type = type59;
        java.lang.String str63 = multiMatchQueryBuilder29.fuzzyRewrite;
        multiMatchQueryBuilder29.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray69 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray69);
        org.elasticsearch.index.query.Operator operator71 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder70.operator(operator71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder70.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException75 = multiMatchQueryBuilder70.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder70.cutoffFrequency((float) (byte) 100);
        java.lang.String str78 = multiMatchQueryBuilder70.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder70.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder70.tieBreaker((-1.0f));
        multiMatchQueryBuilder82.setlenient((java.lang.Boolean) false);
        boolean boolean85 = multiMatchQueryBuilder29.equals((java.lang.Object) multiMatchQueryBuilder82);
        boolean boolean86 = multiMatchQueryBuilder21.equals((java.lang.Object) multiMatchQueryBuilder82);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(fuzziness22);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(queryValidationException34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(fuzziness41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(queryValidationException55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + 1.0f + "'", float58 == 1.0f);
        org.junit.Assert.assertTrue("'" + type59 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type59.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type60 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type60.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNull(queryValidationException75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test01350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01350");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.useDisMax(false);
        multiMatchQueryBuilder8.setprefixLength((java.lang.Integer) 1);
        java.lang.String str16 = multiMatchQueryBuilder8.fuzzyRewrite;
        org.elasticsearch.index.query.QueryShardContext queryShardContext17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query18 = multiMatchQueryBuilder8.toFilter(queryShardContext17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test01351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01351");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.Operator operator10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.operator(operator10);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) (-1.0f));
        java.lang.String[] strArray17 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray17);
        org.elasticsearch.index.query.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.operator(operator19);
        java.lang.Boolean boolean21 = multiMatchQueryBuilder18.getlenient();
        multiMatchQueryBuilder18.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder18.tieBreaker((float) (-1));
        java.lang.Integer int28 = multiMatchQueryBuilder27.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type29 = multiMatchQueryBuilder27.gettype();
        java.lang.String[] strArray33 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray33);
        org.elasticsearch.index.query.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.operator(operator35);
        java.lang.String str37 = multiMatchQueryBuilder34.getWriteableName();
        java.lang.Boolean boolean38 = multiMatchQueryBuilder34.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder34.getPROTOTYPE();
        multiMatchQueryBuilder34.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray45 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray45);
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.operator(operator47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder46.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException51 = multiMatchQueryBuilder46.validate();
        java.lang.Integer int52 = multiMatchQueryBuilder46.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery53 = multiMatchQueryBuilder46.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder46.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder46.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder46.boost((float) 0);
        java.lang.String str61 = multiMatchQueryBuilder46.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap62 = multiMatchQueryBuilder46.fieldsBoosts;
        multiMatchQueryBuilder34.fieldsBoosts = strObjectFloatHashMap62;
        multiMatchQueryBuilder27.setfieldsBoosts(strObjectFloatHashMap62);
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap62;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str68 = multiMatchQueryBuilder67.queryName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNull(type29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "multi_match" + "'", str37, "multi_match");
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(queryValidationException51);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNull(zeroTermsQuery53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNull(str68);
    }

    @Test
    public void test01352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01352");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder16.getfields();
        java.lang.String str21 = multiMatchQueryBuilder16.minimumShouldMatch;
        java.lang.String[] strArray22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder16, strArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test01353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01353");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap13;
        multiMatchQueryBuilder4.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap21 = multiMatchQueryBuilder20.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.maxExpansions((int) (short) 0);
        java.lang.String str24 = multiMatchQueryBuilder23.analyzer;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(strObjectFloatHashMap21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test01354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01354");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.lang.Float float16 = multiMatchQueryBuilder8.gettieBreaker();
        java.lang.String str17 = multiMatchQueryBuilder8.toString();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder8.getlenient();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params20 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = multiMatchQueryBuilder8.toXContent(xContentBuilder19, params20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str17, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(params20);
    }

    @Test
    public void test01355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01355");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        java.lang.String str18 = multiMatchQueryBuilder17.fuzzyRewrite;
        java.lang.Boolean boolean19 = multiMatchQueryBuilder17.useDisMax;
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!^97.0\", \"\", \"hi!^97.0\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test01356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01356");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.Boolean boolean17 = multiMatchQueryBuilder4.getuseDisMax();
        org.elasticsearch.index.query.Operator operator18 = null;
        multiMatchQueryBuilder4.operator = operator18;
        java.lang.Integer int20 = multiMatchQueryBuilder4.getprefixLength();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNull(int20);
    }

    @Test
    public void test01357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01357");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        multiMatchQueryBuilder4.setcutoffFrequency((java.lang.Float) 0.0f);
        multiMatchQueryBuilder4.setcutoffFrequency((java.lang.Float) 1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.useDisMax = false;
        java.lang.Integer int23 = multiMatchQueryBuilder4.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(int23);
    }

    @Test
    public void test01358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01358");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder4.getPROTOTYPE();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder9.gettype();
        org.elasticsearch.common.ParseField parseField11 = type10.parseField();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type10.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField11);
    }

    @Test
    public void test01359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01359");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery10);
        multiMatchQueryBuilder11.maxExpansions = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.slop((int) (byte) 1);
        java.lang.String str16 = multiMatchQueryBuilder15.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 1,\n    \"max_expansions\" : 10,\n    \"rewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}" + "'", str16, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 1,\n    \"max_expansions\" : 10,\n    \"rewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test01360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01360");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery19);
        java.lang.Integer int21 = multiMatchQueryBuilder18.slop;
        java.lang.Integer int22 = multiMatchQueryBuilder18.getmaxExpansions();
        java.lang.String str23 = multiMatchQueryBuilder18.getName();
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.operator(operator24);
        java.lang.String str26 = multiMatchQueryBuilder18.getNAME();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder18.cutoffFrequency((float) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type29 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type30 = type29.matchQueryType();
        multiMatchQueryBuilder18.type = type29;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "multi_match" + "'", str23, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "multi_match" + "'", str26, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type29.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type30.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test01361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01361");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str13 = multiMatchQueryBuilder12.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.Boolean boolean16 = multiMatchQueryBuilder12.useDisMax;
        java.lang.Float float17 = multiMatchQueryBuilder12.cutoffFrequency;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNull(float17);
    }

    @Test
    public void test01362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01362");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Object obj10 = multiMatchQueryBuilder4.text;
        float float11 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder13.setzeroTermsQuery(zeroTermsQuery14);
        org.elasticsearch.index.query.Operator operator16 = null;
        multiMatchQueryBuilder13.setoperator(operator16);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "multi_match" + "'", obj10, "multi_match");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 1.0f + "'", float11 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
    }

    @Test
    public void test01363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01363");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        java.lang.String str29 = multiMatchQueryBuilder24.getrewrite();
        java.lang.Object obj30 = multiMatchQueryBuilder24.text;
        float float31 = multiMatchQueryBuilder24.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder24.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float34 = multiMatchQueryBuilder24.gettieBreaker();
        java.lang.String[] strArray38 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray38);
        org.elasticsearch.index.query.Operator operator40 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.operator(operator40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder39.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException44 = multiMatchQueryBuilder39.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder39.cutoffFrequency((float) (byte) 100);
        float float47 = multiMatchQueryBuilder39.boost();
        multiMatchQueryBuilder39.setanalyzer("");
        java.lang.Boolean boolean50 = multiMatchQueryBuilder39.getuseDisMax();
        java.lang.String str51 = multiMatchQueryBuilder39.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder39.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.Operator operator59 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.operator(operator59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder58.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder62.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness67 = multiMatchQueryBuilder62.getfuzziness();
        multiMatchQueryBuilder53.fuzziness = fuzziness67;
        multiMatchQueryBuilder24.setfuzziness(fuzziness67);
        java.lang.String[] strArray74 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray74);
        java.lang.String[] strArray80 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray74, strArray80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) fuzziness67, strArray80);
        multiMatchQueryBuilder8.setfuzziness(fuzziness67);
        java.lang.Boolean boolean85 = multiMatchQueryBuilder8.lenient;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery86 = null;
        multiMatchQueryBuilder8.zeroTermsQuery = zeroTermsQuery86;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + obj30 + "' != '" + "multi_match" + "'", obj30, "multi_match");
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 1.0f + "'", float31 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(float34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(queryValidationException44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 1.0f + "'", float47 == 1.0f);
        org.junit.Assert.assertNull(boolean50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(fuzziness67);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertEquals("'" + boolean85 + "' != '" + false + "'", boolean85, false);
    }

    @Test
    public void test01364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01364");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder4.minimumShouldMatch;
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 0);
        java.lang.String str24 = multiMatchQueryBuilder4.analyzer;
        java.lang.Integer int25 = multiMatchQueryBuilder4.maxExpansions;
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder4.operator(operator26);
        java.lang.Boolean boolean28 = multiMatchQueryBuilder27.useDisMax;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str24, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(boolean28);
    }

    @Test
    public void test01365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01365");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder8.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = null;
        multiMatchQueryBuilder8.setfuzziness(fuzziness13);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = multiMatchQueryBuilder8.zeroTermsQuery;
        multiMatchQueryBuilder8.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.tieBreaker((float) (short) 100);
        multiMatchQueryBuilder19.setlenient((java.lang.Boolean) false);
        java.lang.Integer int22 = multiMatchQueryBuilder19.maxExpansions;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(zeroTermsQuery15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(int22);
    }

    @Test
    public void test01366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01366");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setrewrite("");
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.String str16 = multiMatchQueryBuilder4.analyzer;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        multiMatchQueryBuilder4.setzeroTermsQuery(zeroTermsQuery17);
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 0);
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 10);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test01367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01367");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.cutoffFrequency((float) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.slop(0);
        java.lang.Boolean boolean15 = multiMatchQueryBuilder14.lenient;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(boolean15);
    }

    @Test
    public void test01368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01368");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 1,\n    \"max_expansions\" : 100,\n    \"cutoff_frequency\" : 0.0,\n    \"boost\" : 1.0\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01369");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.Integer int15 = multiMatchQueryBuilder11.getprefixLength();
        multiMatchQueryBuilder11.tieBreaker = 100.0f;
        org.elasticsearch.index.query.Operator operator18 = null;
        multiMatchQueryBuilder11.setoperator(operator18);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int15);
    }

    @Test
    public void test01370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01370");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder24.setoperator(operator29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder24.zeroTermsQuery = zeroTermsQuery31;
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        multiMatchQueryBuilder4.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery40 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery40;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type42 = multiMatchQueryBuilder4.gettype();
        float float43 = type42.tieBreaker();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type42.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 0.0f + "'", float43 == 0.0f);
    }

    @Test
    public void test01371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01371");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        org.elasticsearch.index.query.QueryValidationException queryValidationException8 = multiMatchQueryBuilder6.validate();
        java.lang.String str9 = multiMatchQueryBuilder6.getminimumShouldMatch();
        java.lang.Boolean boolean10 = multiMatchQueryBuilder6.lenient;
        multiMatchQueryBuilder6.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder6.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(queryValidationException8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test01372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01372");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.Object obj10 = multiMatchQueryBuilder4.text;
        float float11 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float14 = multiMatchQueryBuilder4.gettieBreaker();
        java.lang.String[] strArray18 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray18);
        org.elasticsearch.index.query.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException24 = multiMatchQueryBuilder19.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.cutoffFrequency((float) (byte) 100);
        float float27 = multiMatchQueryBuilder19.boost();
        multiMatchQueryBuilder19.setanalyzer("");
        java.lang.Boolean boolean30 = multiMatchQueryBuilder19.getuseDisMax();
        java.lang.String str31 = multiMatchQueryBuilder19.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder19.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray37 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray37);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.operator(operator39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder38.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder42.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness47 = multiMatchQueryBuilder42.getfuzziness();
        multiMatchQueryBuilder33.fuzziness = fuzziness47;
        multiMatchQueryBuilder4.setfuzziness(fuzziness47);
        java.lang.String[] strArray54 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray54);
        java.lang.String[] strArray60 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray54, strArray60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) fuzziness47, strArray60);
        java.lang.String str64 = multiMatchQueryBuilder63.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "multi_match" + "'", obj10, "multi_match");
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 1.0f + "'", float11 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(queryValidationException24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(fuzziness47);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test01373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01373");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder12.analyzer;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}" + "'", str13, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test01374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01374");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        java.lang.Integer int17 = multiMatchQueryBuilder4.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.tieBreaker((float) 100);
        java.lang.String str20 = multiMatchQueryBuilder19.rewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test01375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01375");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery10);
        multiMatchQueryBuilder4.tieBreaker = 1.0f;
        org.elasticsearch.common.io.stream.StreamOutput streamOutput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder4.writeTo(streamOutput14);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
    }

    @Test
    public void test01376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01376");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.Operator operator7 = null;
        multiMatchQueryBuilder4.operator = operator7;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.fuzzyRewrite("multi_match");
        java.lang.Float float11 = multiMatchQueryBuilder4.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder14 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params15 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder13.doXContent(xContentBuilder14, params15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(params15);
    }

    @Test
    public void test01377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01377");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException25 = multiMatchQueryBuilder20.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.cutoffFrequency((float) (byte) 100);
        java.lang.String str28 = multiMatchQueryBuilder20.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder20.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness31 = multiMatchQueryBuilder20.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder20.getPROTOTYPE();
        java.lang.String[] strArray36 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder32, strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) multiMatchQueryBuilder38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.queryName("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery42 = multiMatchQueryBuilder39.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type43 = multiMatchQueryBuilder39.gettype();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(queryValidationException25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(fuzziness31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(zeroTermsQuery42);
        org.junit.Assert.assertNull(type43);
    }

    @Test
    public void test01378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01378");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean13 = multiMatchQueryBuilder4.lenient;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder4.zeroTermsQuery;
        java.lang.String str15 = multiMatchQueryBuilder4.getWriteableName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "multi_match" + "'", str15, "multi_match");
    }

    @Test
    public void test01379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01379");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.getfuzziness();
        org.elasticsearch.index.query.Operator operator13 = null;
        multiMatchQueryBuilder11.setoperator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float17 = multiMatchQueryBuilder16.gettieBreaker();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = multiMatchQueryBuilder16.fieldsBoosts;
        multiMatchQueryBuilder16.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNull(strObjectFloatHashMap18);
    }

    @Test
    public void test01380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01380");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        java.lang.String str19 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap29 = multiMatchQueryBuilder28.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.zeroTermsQuery(zeroTermsQuery30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder28.lenient(false);
        multiMatchQueryBuilder28.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder28.zeroTermsQuery(zeroTermsQuery36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder37.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type40 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder37.settype(type40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) type40);
        multiMatchQueryBuilder42.maxExpansions = 1;
        java.lang.String str45 = multiMatchQueryBuilder42.queryName();
        java.lang.String str46 = multiMatchQueryBuilder42.fuzzyRewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(strObjectFloatHashMap29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type40.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test01381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01381");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.common.ParseField parseField19 = type18.parseField();
        org.elasticsearch.common.ParseField parseField20 = type18.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.type(type18);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.zeroTermsQuery(zeroTermsQuery22);
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException33 = multiMatchQueryBuilder28.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder28.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder28.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder28.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness40 = multiMatchQueryBuilder28.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder28.slop((int) (short) 0);
        multiMatchQueryBuilder28.setslop((java.lang.Integer) 100);
        java.lang.Boolean boolean45 = multiMatchQueryBuilder28.getuseDisMax();
        java.lang.String str46 = multiMatchQueryBuilder28.fuzzyRewrite;
        java.lang.String[] strArray51 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray51);
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray51, strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str46, strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder23, strArray51);
        java.lang.String[] strArray65 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray65);
        org.elasticsearch.index.query.Operator operator67 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder66.operator(operator67);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder66.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException71 = multiMatchQueryBuilder66.validate();
        java.lang.Integer int72 = multiMatchQueryBuilder66.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery73 = multiMatchQueryBuilder66.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder66.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        float float77 = multiMatchQueryBuilder76.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder76.maxExpansions((int) (byte) 10);
        java.lang.Boolean boolean80 = multiMatchQueryBuilder76.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder61.type((java.lang.Object) boolean80);
        multiMatchQueryBuilder81.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        multiMatchQueryBuilder81.setlenient((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(parseField19);
        org.junit.Assert.assertNotNull(parseField20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(queryValidationException33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(fuzziness40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(boolean45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNull(queryValidationException71);
        org.junit.Assert.assertNull(int72);
        org.junit.Assert.assertNull(zeroTermsQuery73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + 1.0f + "'", float77 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNull(boolean80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
    }

    @Test
    public void test01382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01382");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        multiMatchQueryBuilder4.maxExpansions = 100;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = multiMatchQueryBuilder4.getzeroTermsQuery();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder4.useDisMax;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = multiMatchQueryBuilder4.fieldsBoosts;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder4.doXContent(xContentBuilder20, params21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(zeroTermsQuery17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap19);
        org.junit.Assert.assertNotNull(params21);
    }

    @Test
    public void test01383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01383");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder21.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder21.analyzer = "";
        org.elasticsearch.common.io.stream.StreamInput streamInput26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder21.readFrom(streamInput26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test01384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01384");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        org.elasticsearch.index.query.QueryValidationException queryValidationException8 = multiMatchQueryBuilder6.validate();
        java.lang.String str9 = multiMatchQueryBuilder6.getminimumShouldMatch();
        java.lang.Boolean boolean10 = multiMatchQueryBuilder6.lenient;
        multiMatchQueryBuilder6.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder6.useDisMax(true);
        java.lang.String str15 = multiMatchQueryBuilder6.getanalyzer();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(queryValidationException8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test01385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01385");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness8;
        java.lang.String str10 = multiMatchQueryBuilder4.getanalyzer();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = multiMatchQueryBuilder4.getfieldsBoosts();
        java.lang.String[] strArray15 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray15);
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        java.lang.Boolean boolean19 = multiMatchQueryBuilder16.getlenient();
        multiMatchQueryBuilder16.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder16.tieBreaker((float) (-1));
        java.lang.Integer int26 = multiMatchQueryBuilder25.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap30 = multiMatchQueryBuilder25.getfieldsBoosts();
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap30;
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 97);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strObjectFloatHashMap11);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap30);
    }

    @Test
    public void test01386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01386");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.operator(operator16);
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder22.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder22.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj30 = multiMatchQueryBuilder22.text;
        multiMatchQueryBuilder22.setrewrite("");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder22.zeroTermsQuery(zeroTermsQuery33);
        boolean boolean35 = multiMatchQueryBuilder17.equals((java.lang.Object) multiMatchQueryBuilder22);
        multiMatchQueryBuilder22.cutoffFrequency = 10.0f;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertEquals("'" + obj30 + "' != '" + "multi_match" + "'", obj30, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test01387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01387");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.slop(1);
        java.lang.String str18 = multiMatchQueryBuilder17.getName();
        multiMatchQueryBuilder17.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "multi_match" + "'", str18, "multi_match");
    }

    @Test
    public void test01388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01388");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        float float7 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        java.lang.String str9 = multiMatchQueryBuilder4.rewrite;
        org.elasticsearch.index.query.Operator operator10 = multiMatchQueryBuilder4.operator;
        multiMatchQueryBuilder4.cutoffFrequency = 1.0f;
        java.lang.Object obj13 = multiMatchQueryBuilder4.gettext();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 1.0f + "'", float7 == 1.0f);
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(operator10);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + "multi_match" + "'", obj13, "multi_match");
    }

    @Test
    public void test01389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01389");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!^97.0\", \"\", \"hi!^97.0\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01390");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        multiMatchQueryBuilder13.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder17.getPROTOTYPE();
        multiMatchQueryBuilder17.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String str21 = multiMatchQueryBuilder17.queryName();
        org.elasticsearch.index.query.QueryShardContext queryShardContext22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query23 = multiMatchQueryBuilder17.toFilter(queryShardContext22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test01391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01391");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        java.lang.String str19 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Float float20 = multiMatchQueryBuilder4.tieBreaker;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(float20);
    }

    @Test
    public void test01392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01392");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.Operator operator10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.operator(operator10);
        java.lang.String str12 = multiMatchQueryBuilder11.analyzer;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test01393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01393");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList9 = multiMatchQueryBuilder4.getfields();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery10);
        java.lang.Float float12 = multiMatchQueryBuilder4.getcutoffFrequency();
        java.lang.String str13 = multiMatchQueryBuilder4.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test01394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01394");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder13.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str20 = multiMatchQueryBuilder13.toString();
        java.lang.String str21 = multiMatchQueryBuilder13.minimumShouldMatch;
        java.lang.String str22 = multiMatchQueryBuilder13.getWriteableName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}" + "'", str20, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multi_match" + "'", str22, "multi_match");
    }

    @Test
    public void test01395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01395");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        multiMatchQueryBuilder18.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"slop\" : 97,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test01396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01396");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.operator(operator13);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput15 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder4.writeTo(streamOutput15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
    }

    @Test
    public void test01397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01397");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        multiMatchQueryBuilder11.setslop((java.lang.Integer) 100);
        multiMatchQueryBuilder11.slop = (-1);
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.operator(operator16);
        multiMatchQueryBuilder17.prefixLength = 52;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test01398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01398");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder4.fields;
        java.lang.String str13 = multiMatchQueryBuilder4.getNAME();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type14 = multiMatchQueryBuilder4.type;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNull(type14);
    }

    @Test
    public void test01399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01399");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        java.lang.String str9 = multiMatchQueryBuilder4.rewrite;
        java.lang.String str10 = multiMatchQueryBuilder4.getfuzzyRewrite();
        java.lang.Boolean boolean11 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String[] strArray15 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray15);
        org.elasticsearch.index.query.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.operator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException21 = multiMatchQueryBuilder16.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder16.cutoffFrequency((float) (byte) 100);
        java.lang.String str24 = multiMatchQueryBuilder16.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery25);
        java.lang.Object obj27 = multiMatchQueryBuilder16.gettext();
        java.lang.Object obj28 = multiMatchQueryBuilder16.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder16.boost((float) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type31 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField32 = type31.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type33 = type31.matchQueryType();
        org.elasticsearch.common.ParseField parseField34 = type31.parseField();
        float float35 = type31.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder16.type((java.lang.Object) type31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.type(type31);
        float float38 = type31.tieBreaker();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(queryValidationException21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + "multi_match" + "'", obj27, "multi_match");
        org.junit.Assert.assertEquals("'" + obj28 + "' != '" + "multi_match" + "'", obj28, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type31.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField32);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type33.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField34);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 1.0f + "'", float35 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 1.0f + "'", float38 == 1.0f);
    }

    @Test
    public void test01400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01400");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int16 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) (short) 1);
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        java.lang.Boolean boolean26 = multiMatchQueryBuilder23.getlenient();
        multiMatchQueryBuilder23.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness31 = multiMatchQueryBuilder30.fuzziness;
        multiMatchQueryBuilder30.setcutoffFrequency((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder30.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray39 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray39);
        org.elasticsearch.index.query.Operator operator41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.operator(operator41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder44.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness49 = multiMatchQueryBuilder44.getfuzziness();
        multiMatchQueryBuilder30.fuzziness = fuzziness49;
        multiMatchQueryBuilder18.setfuzziness(fuzziness49);
        java.lang.String str52 = multiMatchQueryBuilder18.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(fuzziness31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(fuzziness49);
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test01401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01401");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.slop((int) (short) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder23.getPROTOTYPE();
        multiMatchQueryBuilder23.useDisMax = false;
        java.lang.Object obj27 = multiMatchQueryBuilder23.gettext();
        multiMatchQueryBuilder23.rewrite = "{\n  \"multiMatch\" : {\n    \"query\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\" ],\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + "multi_match" + "'", obj27, "multi_match");
    }

    @Test
    public void test01402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01402");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        java.lang.String str12 = multiMatchQueryBuilder11.toString();
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException22 = multiMatchQueryBuilder17.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.getPROTOTYPE();
        multiMatchQueryBuilder27.settieBreaker((java.lang.Float) 0.0f);
        multiMatchQueryBuilder27.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder27.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.String[] strArray37 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray37);
        org.elasticsearch.index.query.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.operator(operator39);
        java.lang.String str41 = multiMatchQueryBuilder38.getWriteableName();
        java.lang.Boolean boolean42 = multiMatchQueryBuilder38.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder38.getPROTOTYPE();
        multiMatchQueryBuilder38.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray49 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray49);
        org.elasticsearch.index.query.Operator operator51 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder50.operator(operator51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder50.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException55 = multiMatchQueryBuilder50.validate();
        java.lang.Integer int56 = multiMatchQueryBuilder50.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery57 = multiMatchQueryBuilder50.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder50.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder50.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder50.boost((float) 0);
        java.lang.String str65 = multiMatchQueryBuilder50.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap66 = multiMatchQueryBuilder50.fieldsBoosts;
        multiMatchQueryBuilder38.fieldsBoosts = strObjectFloatHashMap66;
        multiMatchQueryBuilder33.fieldsBoosts = strObjectFloatHashMap66;
        multiMatchQueryBuilder11.setfieldsBoosts(strObjectFloatHashMap66);
        org.elasticsearch.index.query.QueryShardContext queryShardContext70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query71 = multiMatchQueryBuilder11.toFilter(queryShardContext70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str12, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(queryValidationException22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multi_match" + "'", str41, "multi_match");
        org.junit.Assert.assertNull(boolean42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(queryValidationException55);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNull(zeroTermsQuery57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap66);
    }

    @Test
    public void test01403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01403");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = null;
        multiMatchQueryBuilder4.fuzziness = fuzziness8;
        org.elasticsearch.index.query.Operator operator10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.operator(operator10);
        java.lang.Boolean boolean12 = multiMatchQueryBuilder4.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(boolean12);
    }

    @Test
    public void test01404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01404");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str20 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.tieBreaker((float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type23 = multiMatchQueryBuilder22.gettype();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type23.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
    }

    @Test
    public void test01405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01405");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.queryName("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("multi_match");
        java.lang.Object obj16 = multiMatchQueryBuilder15.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder15.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder15.getName();
        java.lang.String[] strArray25 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray25);
        org.elasticsearch.index.query.Operator operator27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.operator(operator27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException31 = multiMatchQueryBuilder26.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder26.cutoffFrequency((float) (byte) 100);
        java.lang.String str34 = multiMatchQueryBuilder26.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder26.zeroTermsQuery(zeroTermsQuery35);
        multiMatchQueryBuilder26.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder26.setmaxExpansions((java.lang.Integer) 10);
        java.lang.Integer int41 = multiMatchQueryBuilder26.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder15.fuzziness((java.lang.Object) multiMatchQueryBuilder26);
        java.util.List<java.lang.String> strList43 = multiMatchQueryBuilder15.getfields();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "multi_match" + "'", obj16, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "multi_match" + "'", str21, "multi_match");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(queryValidationException31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(strList43);
    }

    @Test
    public void test01406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01406");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap9;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
    }

    @Test
    public void test01407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01407");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap13;
        multiMatchQueryBuilder4.cutoffFrequency = (-1.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap21 = multiMatchQueryBuilder20.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.maxExpansions((int) (short) 0);
        multiMatchQueryBuilder20.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}";
        java.lang.Boolean boolean26 = multiMatchQueryBuilder20.useDisMax;
        org.elasticsearch.index.query.Operator operator27 = multiMatchQueryBuilder20.getoperator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(strObjectFloatHashMap21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + boolean26 + "' != '" + false + "'", boolean26, false);
        org.junit.Assert.assertNull(operator27);
    }

    @Test
    public void test01408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01408");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int13 = multiMatchQueryBuilder12.prefixLength;
        multiMatchQueryBuilder12.maxExpansions = 0;
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException25 = multiMatchQueryBuilder20.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.cutoffFrequency((float) (byte) 100);
        float float28 = multiMatchQueryBuilder20.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type29 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type30 = type29.matchQueryType();
        multiMatchQueryBuilder20.settype(type29);
        org.elasticsearch.index.search.MatchQuery.Type type32 = type29.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder12.type(type29);
        java.lang.Float float34 = multiMatchQueryBuilder12.tieBreaker;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap35 = multiMatchQueryBuilder12.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(queryValidationException25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 1.0f + "'", float28 == 1.0f);
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type29.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type30.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type32.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(float34);
        org.junit.Assert.assertNull(strObjectFloatHashMap35);
    }

    @Test
    public void test01409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01409");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        multiMatchQueryBuilder13.tieBreaker = (-1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.lenient(false);
        multiMatchQueryBuilder17.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.Object obj20 = multiMatchQueryBuilder17.gettext();
        multiMatchQueryBuilder17.slop = 0;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + "multi_match" + "'", obj20, "multi_match");
    }

    @Test
    public void test01410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01410");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.useDisMax(true);
        multiMatchQueryBuilder4.setcutoffFrequency((java.lang.Float) 1.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test01411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01411");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = multiMatchQueryBuilder4.getzeroTermsQuery();
        java.lang.Integer int11 = multiMatchQueryBuilder4.getmaxExpansions();
        java.lang.Float float12 = multiMatchQueryBuilder4.tieBreaker;
        multiMatchQueryBuilder4.useDisMax = false;
        java.lang.Float float15 = multiMatchQueryBuilder4.getcutoffFrequency();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery16;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.setzeroTermsQuery(zeroTermsQuery18);
        multiMatchQueryBuilder4.tieBreaker = 100.0f;
        multiMatchQueryBuilder4.setprefixLength((java.lang.Integer) 97);
        multiMatchQueryBuilder4.maxExpansions = 97;
        org.elasticsearch.index.query.QueryValidationException queryValidationException26 = multiMatchQueryBuilder4.validate();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(zeroTermsQuery10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNull(queryValidationException26);
    }

    @Test
    public void test01412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01412");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        java.lang.String str17 = multiMatchQueryBuilder16.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness22 = multiMatchQueryBuilder21.getfuzziness();
        java.lang.String[] strArray26 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray26);
        org.elasticsearch.index.query.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.operator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap32 = multiMatchQueryBuilder31.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder31.zeroTermsQuery(zeroTermsQuery33);
        java.lang.Float float35 = multiMatchQueryBuilder34.cutoffFrequency;
        java.lang.String[] strArray39 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray39);
        org.elasticsearch.index.query.Operator operator41 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder40.operator(operator41);
        java.lang.Boolean boolean43 = multiMatchQueryBuilder40.getlenient();
        multiMatchQueryBuilder40.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder40.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder40.tieBreaker((float) (-1));
        multiMatchQueryBuilder40.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder40.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder34.fuzziness((java.lang.Object) multiMatchQueryBuilder40);
        java.lang.String str55 = multiMatchQueryBuilder40.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery56 = multiMatchQueryBuilder40.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder40.tieBreaker((float) (byte) 0);
        multiMatchQueryBuilder40.prefixLength = (-1);
        multiMatchQueryBuilder40.prefixLength = 0;
        java.lang.String[] strArray66 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray66);
        org.elasticsearch.index.query.Operator operator68 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.operator(operator68);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder67.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = multiMatchQueryBuilder71.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder71.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness76 = multiMatchQueryBuilder71.getfuzziness();
        multiMatchQueryBuilder40.fuzziness = fuzziness76;
        multiMatchQueryBuilder21.setfuzziness(fuzziness76);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(fuzziness22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(strObjectFloatHashMap32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(float35);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(boolean43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str55, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNull(zeroTermsQuery56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder73);
        org.junit.Assert.assertNotNull(fuzziness76);
    }

    @Test
    public void test01413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01413");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        java.lang.String str20 = multiMatchQueryBuilder17.toString();
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.operator(operator21);
        java.lang.String str23 = multiMatchQueryBuilder17.getanalyzer();
        java.lang.Integer int24 = multiMatchQueryBuilder17.prefixLength;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str20, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(int24);
    }

    @Test
    public void test01414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01414");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.lang.String[] strArray4 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder5 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray4);
        org.elasticsearch.index.query.Operator operator6 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = multiMatchQueryBuilder5.operator(operator6);
        java.lang.String str8 = multiMatchQueryBuilder5.getWriteableName();
        java.lang.Boolean boolean9 = multiMatchQueryBuilder5.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder5.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder5.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str14 = multiMatchQueryBuilder5.toString();
        multiMatchQueryBuilder5.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion17 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE;
        java.lang.Class<?> wildcardClass18 = fieldCaseConversion17.getClass();
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException28 = multiMatchQueryBuilder23.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.cutoffFrequency((float) (byte) 100);
        java.lang.String str31 = multiMatchQueryBuilder23.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder23.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness34 = multiMatchQueryBuilder23.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder23.getPROTOTYPE();
        java.lang.String[] strArray39 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder35, strArray39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass18, strArray39);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder5.fuzziness((java.lang.Object) strArray39);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder44 = org.elasticsearch.common.xcontent.XContentBuilder.builder(xContent0, strArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "multi_match" + "'", str8, "multi_match");
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str14, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertTrue("'" + fieldCaseConversion17 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE + "'", fieldCaseConversion17.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE));
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(queryValidationException28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(fuzziness34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
    }

    @Test
    public void test01415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01415");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"fuzziness\" : \"BEST_FIELDS\",\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 0.0\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01416");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.Operator operator18 = null;
        multiMatchQueryBuilder15.operator = operator18;
        org.elasticsearch.common.io.stream.StreamOutput streamOutput20 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder15.writeTo(streamOutput20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test01417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01417");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str15 = multiMatchQueryBuilder4.fuzzyRewrite;
        java.lang.Integer int16 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"Name\" : \"multi_match\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(fuzziness19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test01418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01418");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder11.getfieldsBoosts();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder11.fieldsBoosts = strObjectFloatHashMap13;
        multiMatchQueryBuilder11.maxExpansions = 97;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
    }

    @Test
    public void test01419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01419");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.useDisMax(true);
        java.lang.String str17 = multiMatchQueryBuilder4.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.field("", (float) (short) 0);
        java.util.List<java.lang.String> strList21 = multiMatchQueryBuilder4.getfields();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str17, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test01420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01420");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float12 = multiMatchQueryBuilder8.gettieBreaker();
        multiMatchQueryBuilder8.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder8.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"fuzziness\" : \"BEST_FIELDS\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Class<?> wildcardClass19 = multiMatchQueryBuilder8.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test01421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01421");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        float float33 = multiMatchQueryBuilder25.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type35 = type34.matchQueryType();
        multiMatchQueryBuilder25.settype(type34);
        multiMatchQueryBuilder4.type = type34;
        java.lang.String str38 = multiMatchQueryBuilder4.fuzzyRewrite;
        multiMatchQueryBuilder4.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException50 = multiMatchQueryBuilder45.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder45.cutoffFrequency((float) (byte) 100);
        java.lang.String str53 = multiMatchQueryBuilder45.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder45.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder45.tieBreaker((-1.0f));
        multiMatchQueryBuilder57.setlenient((java.lang.Boolean) false);
        boolean boolean60 = multiMatchQueryBuilder4.equals((java.lang.Object) multiMatchQueryBuilder57);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery61 = null;
        multiMatchQueryBuilder57.zeroTermsQuery = zeroTermsQuery61;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder57.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery65 = multiMatchQueryBuilder64.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 1.0f + "'", float33 == 1.0f);
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type34.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type35.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(queryValidationException50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNull(zeroTermsQuery65);
    }

    @Test
    public void test01422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01422");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder8.setanalyzer("multi_match");
        org.elasticsearch.index.query.QueryValidationException queryValidationException13 = multiMatchQueryBuilder8.validate();
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) 0.0f);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder16 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params17 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder18 = multiMatchQueryBuilder8.toXContent(xContentBuilder16, params17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(queryValidationException13);
        org.junit.Assert.assertNotNull(params17);
    }

    @Test
    public void test01423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01423");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        float float16 = multiMatchQueryBuilder4.boost();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.tieBreaker((float) (short) 1);
        java.lang.String str21 = multiMatchQueryBuilder18.getrewrite();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params23 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder18.doXContent(xContentBuilder22, params23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 1.0f + "'", float16 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str21, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(params23);
    }

    @Test
    public void test01424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01424");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str20 = multiMatchQueryBuilder19.fuzzyRewrite;
        java.lang.String str21 = multiMatchQueryBuilder19.fuzzyRewrite;
        multiMatchQueryBuilder19.prefixLength = 10;
        multiMatchQueryBuilder19.rewrite = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder19.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type28 = multiMatchQueryBuilder27.type;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(type28);
    }

    @Test
    public void test01425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01425");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 10);
        java.lang.Integer int19 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator22 = null;
        multiMatchQueryBuilder4.setoperator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder4.field("hi!", 52.0f);
        org.elasticsearch.index.query.QueryValidationException queryValidationException27 = multiMatchQueryBuilder26.validate();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(queryValidationException27);
    }

    @Test
    public void test01426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01426");
        org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion fieldCaseConversion0 = org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE;
        java.lang.Class<?> wildcardClass1 = fieldCaseConversion0.getClass();
        java.lang.String[] strArray5 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray5);
        org.elasticsearch.index.query.Operator operator7 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.operator(operator7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder6.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException11 = multiMatchQueryBuilder6.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder6.cutoffFrequency((float) (byte) 100);
        java.lang.String str14 = multiMatchQueryBuilder6.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder6.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness17 = multiMatchQueryBuilder6.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder6.getPROTOTYPE();
        java.lang.String[] strArray22 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder18, strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass1, strArray22);
        float float26 = multiMatchQueryBuilder25.boost();
        java.lang.Boolean boolean27 = multiMatchQueryBuilder25.getuseDisMax();
        java.lang.String[] strArray31 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray31);
        org.elasticsearch.index.query.Operator operator33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.operator(operator33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap37 = multiMatchQueryBuilder36.getfieldsBoosts();
        java.lang.String[] strArray41 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray41);
        org.elasticsearch.index.query.Operator operator43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.operator(operator43);
        java.lang.Boolean boolean45 = multiMatchQueryBuilder42.getlenient();
        multiMatchQueryBuilder42.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder42.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder42.tieBreaker((float) (-1));
        java.lang.Integer int52 = multiMatchQueryBuilder51.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder51.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"cutoffFrequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}", 0.0f);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap56 = multiMatchQueryBuilder51.getfieldsBoosts();
        multiMatchQueryBuilder36.setfieldsBoosts(strObjectFloatHashMap56);
        multiMatchQueryBuilder25.fieldsBoosts = strObjectFloatHashMap56;
        org.junit.Assert.assertTrue("'" + fieldCaseConversion0 + "' != '" + org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE + "'", fieldCaseConversion0.equals(org.elasticsearch.common.xcontent.XContentBuilder.FieldCaseConversion.NONE));
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(queryValidationException11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(fuzziness17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 1.0f + "'", float26 == 1.0f);
        org.junit.Assert.assertNull(boolean27);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(strObjectFloatHashMap37);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(boolean45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap56);
    }

    @Test
    public void test01427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01427");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        multiMatchQueryBuilder4.setminimumShouldMatch("");
        java.lang.String str18 = multiMatchQueryBuilder4.rewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.useDisMax(true);
        java.lang.String str21 = multiMatchQueryBuilder20.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test01428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01428");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Float float12 = multiMatchQueryBuilder4.tieBreaker;
        java.lang.String str13 = multiMatchQueryBuilder4.getfuzzyRewrite();
        java.lang.Integer int14 = multiMatchQueryBuilder4.maxExpansions;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(float12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test01429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01429");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        java.util.List<java.lang.String> strList21 = multiMatchQueryBuilder20.getfields();
        org.elasticsearch.index.query.QueryShardContext queryShardContext22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query23 = multiMatchQueryBuilder20.toFilter(queryShardContext22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test01430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01430");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.tieBreaker((-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField18 = type17.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type19 = type17.matchQueryType();
        org.elasticsearch.common.ParseField parseField20 = type17.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.type(type17);
        java.lang.String[] strArray25 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray25);
        org.elasticsearch.index.query.Operator operator27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.operator(operator27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException31 = multiMatchQueryBuilder26.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder26.cutoffFrequency((float) (byte) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap34 = multiMatchQueryBuilder33.getfieldsBoosts();
        java.lang.String[] strArray38 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray38);
        org.elasticsearch.index.query.Operator operator40 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.operator(operator40);
        java.lang.String str42 = multiMatchQueryBuilder39.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness43 = multiMatchQueryBuilder39.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder39.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type46 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder39.settype(type46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder33.type(type46);
        org.elasticsearch.index.search.MatchQuery.Type type49 = type46.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type50 = type46.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder21.type(type46);
        java.lang.Boolean boolean52 = multiMatchQueryBuilder21.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type53 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type54 = type53.matchQueryType();
        org.elasticsearch.common.ParseField parseField55 = type53.parseField();
        multiMatchQueryBuilder21.settype(type53);
        org.elasticsearch.common.io.stream.StreamInput streamInput57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder21.readFrom(streamInput57);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type17.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type19.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(queryValidationException31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(strObjectFloatHashMap34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "multi_match" + "'", str42, "multi_match");
        org.junit.Assert.assertNull(fuzziness43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type46.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type49.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type50.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(boolean52);
        org.junit.Assert.assertTrue("'" + type53 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type53.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + type54 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type54.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField55);
    }

    @Test
    public void test01431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01431");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        java.lang.Integer int8 = multiMatchQueryBuilder4.getmaxExpansions();
        multiMatchQueryBuilder4.useDisMax = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.prefixLength(0);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params14 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder15 = multiMatchQueryBuilder12.toXContent(xContentBuilder13, params14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(params14);
    }

    @Test
    public void test01432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01432");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Boolean boolean15 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.String str16 = multiMatchQueryBuilder4.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = null;
        multiMatchQueryBuilder18.fieldsBoosts = strObjectFloatHashMap19;
        java.lang.String[] strArray24 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray24);
        org.elasticsearch.index.query.Operator operator26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.operator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException30 = multiMatchQueryBuilder25.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder25.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder25.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder25.fuzzyRewrite("hi!");
        multiMatchQueryBuilder25.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery39 = null;
        multiMatchQueryBuilder25.zeroTermsQuery = zeroTermsQuery39;
        java.lang.Integer int41 = multiMatchQueryBuilder25.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder25.lenient(true);
        multiMatchQueryBuilder43.setmaxExpansions((java.lang.Integer) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder18.type((java.lang.Object) multiMatchQueryBuilder43);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multimatch\" : {?    \"query\" : \"multi_match\",?    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],?    \"analyzer\" : \"hi!\",?    \"maxexpansions\" : 10,?    \"fuzzyrewrite\" : \"hi!\",?    \"tiebreaker\" : 100.0,?    \"lenient\" : true,?    \"cutofffrequency\" : 100.0,?    \"boost\" : 1.0?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(queryValidationException30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
    }

    @Test
    public void test01433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01433");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        float float12 = multiMatchQueryBuilder4.boost();
        multiMatchQueryBuilder4.setanalyzer("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        multiMatchQueryBuilder16.setzeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"10\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"rewrite\" : \"hi!\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 10.0\n  }\n}");
        java.lang.Integer int23 = multiMatchQueryBuilder16.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 1.0f + "'", float12 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(int23);
    }

    @Test
    public void test01434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01434");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type8 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type9 = type8.matchQueryType();
        float float10 = type8.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = multiMatchQueryBuilder11.zeroTermsQuery;
        java.lang.Boolean boolean13 = multiMatchQueryBuilder11.useDisMax;
        java.lang.String str14 = multiMatchQueryBuilder11.rewrite;
        java.lang.Object obj15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.type(obj15);
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("");
        java.lang.String str26 = multiMatchQueryBuilder21.getrewrite();
        java.lang.Object obj27 = multiMatchQueryBuilder21.text;
        float float28 = multiMatchQueryBuilder21.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder21.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float31 = multiMatchQueryBuilder21.gettieBreaker();
        java.lang.String[] strArray35 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray35);
        org.elasticsearch.index.query.Operator operator37 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.operator(operator37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder36.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException41 = multiMatchQueryBuilder36.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder36.cutoffFrequency((float) (byte) 100);
        float float44 = multiMatchQueryBuilder36.boost();
        multiMatchQueryBuilder36.setanalyzer("");
        java.lang.Boolean boolean47 = multiMatchQueryBuilder36.getuseDisMax();
        java.lang.String str48 = multiMatchQueryBuilder36.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder36.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray54 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray54);
        org.elasticsearch.index.query.Operator operator56 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder55.operator(operator56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder55.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder59.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder59.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness64 = multiMatchQueryBuilder59.getfuzziness();
        multiMatchQueryBuilder50.fuzziness = fuzziness64;
        multiMatchQueryBuilder21.setfuzziness(fuzziness64);
        java.lang.String[] strArray71 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray71);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray71);
        java.lang.String[] strArray77 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray77);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strArray71, strArray77);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) fuzziness64, strArray77);
        multiMatchQueryBuilder11.fuzziness = fuzziness64;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder11.fuzzyRewrite("");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type8.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type9.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(zeroTermsQuery12);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + "multi_match" + "'", obj27, "multi_match");
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 1.0f + "'", float28 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(float31);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(queryValidationException41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 1.0f + "'", float44 == 1.0f);
        org.junit.Assert.assertNull(boolean47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(fuzziness64);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
    }

    @Test
    public void test01435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01435");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.Boolean boolean17 = multiMatchQueryBuilder4.getuseDisMax();
        org.elasticsearch.index.query.Operator operator18 = null;
        multiMatchQueryBuilder4.operator = operator18;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery20);
        multiMatchQueryBuilder4.useDisMax = true;
        java.lang.Object obj24 = multiMatchQueryBuilder4.text;
        java.lang.String[] strArray28 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray28);
        org.elasticsearch.index.query.Operator operator30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.operator(operator30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder29.field("");
        java.lang.String str34 = multiMatchQueryBuilder29.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type35 = multiMatchQueryBuilder29.type;
        org.elasticsearch.index.query.Operator operator36 = null;
        multiMatchQueryBuilder29.setoperator(operator36);
        org.elasticsearch.index.query.Operator operator38 = null;
        multiMatchQueryBuilder29.operator = operator38;
        java.lang.String str40 = multiMatchQueryBuilder29.queryName();
        java.util.List<java.lang.String> strList41 = multiMatchQueryBuilder29.fields;
        java.lang.String[] strArray45 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray45);
        org.elasticsearch.index.query.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.operator(operator47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder46.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException51 = multiMatchQueryBuilder46.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder46.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery54 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.zeroTermsQuery(zeroTermsQuery54);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder53.getPROTOTYPE();
        multiMatchQueryBuilder56.settieBreaker((java.lang.Float) 0.0f);
        multiMatchQueryBuilder56.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder56.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        java.lang.String[] strArray66 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray66);
        org.elasticsearch.index.query.Operator operator68 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.operator(operator68);
        java.lang.String str70 = multiMatchQueryBuilder67.getWriteableName();
        java.lang.Boolean boolean71 = multiMatchQueryBuilder67.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder67.getPROTOTYPE();
        multiMatchQueryBuilder67.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}";
        java.lang.String[] strArray78 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray78);
        org.elasticsearch.index.query.Operator operator80 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder79.operator(operator80);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder79.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException84 = multiMatchQueryBuilder79.validate();
        java.lang.Integer int85 = multiMatchQueryBuilder79.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery86 = multiMatchQueryBuilder79.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = multiMatchQueryBuilder79.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = multiMatchQueryBuilder79.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = multiMatchQueryBuilder79.boost((float) 0);
        java.lang.String str94 = multiMatchQueryBuilder79.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap95 = multiMatchQueryBuilder79.fieldsBoosts;
        multiMatchQueryBuilder67.fieldsBoosts = strObjectFloatHashMap95;
        multiMatchQueryBuilder62.fieldsBoosts = strObjectFloatHashMap95;
        multiMatchQueryBuilder29.setfieldsBoosts(strObjectFloatHashMap95);
        multiMatchQueryBuilder4.setfieldsBoosts(strObjectFloatHashMap95);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + "multi_match" + "'", obj24, "multi_match");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(type35);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(queryValidationException51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "multi_match" + "'", str70, "multi_match");
        org.junit.Assert.assertNull(boolean71);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNull(queryValidationException84);
        org.junit.Assert.assertNull(int85);
        org.junit.Assert.assertNull(zeroTermsQuery86);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder91);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder93);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap95);
    }

    @Test
    public void test01436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01436");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.Integer int15 = multiMatchQueryBuilder13.getslop();
        multiMatchQueryBuilder13.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = multiMatchQueryBuilder19.getzeroTermsQuery();
        java.lang.Float float23 = multiMatchQueryBuilder19.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = multiMatchQueryBuilder19.gettype();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(zeroTermsQuery22);
        org.junit.Assert.assertNull(float23);
        org.junit.Assert.assertNull(type24);
    }

    @Test
    public void test01437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01437");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.getPROTOTYPE();
        multiMatchQueryBuilder14.settieBreaker((java.lang.Float) 0.0f);
        multiMatchQueryBuilder14.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        org.elasticsearch.common.io.stream.StreamInput streamInput21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.readFrom(streamInput21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test01438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01438");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery8 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder6.zeroTermsQuery(zeroTermsQuery8);
        multiMatchQueryBuilder9.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder9.zeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.prefixLength((int) (short) 100);
        java.lang.Integer int16 = multiMatchQueryBuilder13.slop;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test01439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01439");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery13);
        multiMatchQueryBuilder4.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder18.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder18.getzeroTermsQuery();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        multiMatchQueryBuilder18.setzeroTermsQuery(zeroTermsQuery22);
        multiMatchQueryBuilder18.setmaxExpansions((java.lang.Integer) 52);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(zeroTermsQuery21);
    }

    @Test
    public void test01440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01440");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.minimumShouldMatch("");
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder4, strArray19);
        java.lang.String str23 = multiMatchQueryBuilder22.getWriteableName();
        multiMatchQueryBuilder22.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "multi_match" + "'", str23, "multi_match");
    }

    @Test
    public void test01441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01441");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) 1.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = null;
        multiMatchQueryBuilder8.fuzziness = fuzziness16;
        java.lang.Object obj18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.type(obj18);
        multiMatchQueryBuilder19.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.operator(operator22);
        java.lang.Boolean boolean24 = multiMatchQueryBuilder23.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(boolean24);
    }

    @Test
    public void test01442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01442");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.tieBreaker((float) '4');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = multiMatchQueryBuilder4.getzeroTermsQuery();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder4.getuseDisMax();
        java.lang.Integer int19 = multiMatchQueryBuilder4.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(zeroTermsQuery17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNull(int19);
    }

    @Test
    public void test01443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01443");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder24.setoperator(operator29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder24.zeroTermsQuery = zeroTermsQuery31;
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        multiMatchQueryBuilder37.maxExpansions = 0;
        java.lang.Boolean boolean40 = multiMatchQueryBuilder37.lenient;
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap50 = multiMatchQueryBuilder49.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.minimumShouldMatch("multi_match");
        java.lang.String str53 = multiMatchQueryBuilder52.toString();
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.Operator operator59 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.operator(operator59);
        java.lang.String str61 = multiMatchQueryBuilder58.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness62 = multiMatchQueryBuilder58.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder58.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.cutoffFrequency((float) '4');
        boolean boolean67 = multiMatchQueryBuilder52.equals((java.lang.Object) multiMatchQueryBuilder64);
        multiMatchQueryBuilder64.setmaxExpansions((java.lang.Integer) (-1));
        multiMatchQueryBuilder64.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder37.fuzziness((java.lang.Object) multiMatchQueryBuilder64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder37.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"fuzziness\" : \"BEST_FIELDS\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Integer int75 = multiMatchQueryBuilder37.getslop();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(boolean40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(strObjectFloatHashMap50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str53, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "multi_match" + "'", str61, "multi_match");
        org.junit.Assert.assertNull(fuzziness62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNull(int75);
    }

    @Test
    public void test01444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01444");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.lenient(true);
        multiMatchQueryBuilder12.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Object obj15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.type(obj15);
        org.elasticsearch.index.query.Operator operator17 = null;
        multiMatchQueryBuilder12.operator = operator17;
        java.lang.Boolean boolean19 = multiMatchQueryBuilder12.getlenient();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + true + "'", boolean19, true);
    }

    @Test
    public void test01445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01445");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setrewrite("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = null;
        multiMatchQueryBuilder4.fieldsBoosts = strObjectFloatHashMap15;
        org.elasticsearch.common.unit.Fuzziness fuzziness17 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder4.fuzziness;
        multiMatchQueryBuilder4.rewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"slop\" : 1,\n    \"max_expansions\" : 10,\n    \"rewrite\" : \"\",\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(fuzziness17);
        org.junit.Assert.assertNull(fuzziness18);
    }

    @Test
    public void test01446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01446");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.slop(1);
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap27 = multiMatchQueryBuilder26.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder26.zeroTermsQuery(zeroTermsQuery28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder26.lenient(false);
        java.lang.Object obj32 = multiMatchQueryBuilder31.gettext();
        java.lang.Integer int33 = multiMatchQueryBuilder31.getslop();
        multiMatchQueryBuilder31.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder31.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.QueryValidationException queryValidationException38 = multiMatchQueryBuilder37.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder37.cutoffFrequency((float) 100L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) multiMatchQueryBuilder40);
        java.lang.String str42 = multiMatchQueryBuilder41.getWriteableName();
        multiMatchQueryBuilder41.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(strObjectFloatHashMap27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + "multi_match" + "'", obj32, "multi_match");
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(queryValidationException38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "multi_match" + "'", str42, "multi_match");
    }

    @Test
    public void test01447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01447");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        multiMatchQueryBuilder13.prefixLength = 10;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap16 = multiMatchQueryBuilder13.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder13.cutoffFrequency((float) (short) 0);
        java.lang.Integer int19 = multiMatchQueryBuilder18.getslop();
        java.lang.String str20 = multiMatchQueryBuilder18.getminimumShouldMatch();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(strObjectFloatHashMap16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test01448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01448");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01449");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.fuzziness;
        java.lang.Integer int13 = multiMatchQueryBuilder11.slop;
        multiMatchQueryBuilder11.setfuzzyRewrite("hi!");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder16 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params17 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder18 = multiMatchQueryBuilder11.toXContent(xContentBuilder16, params17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(params17);
    }

    @Test
    public void test01450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01450");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        multiMatchQueryBuilder4.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery21);
        multiMatchQueryBuilder4.cutoffFrequency = 1.0f;
        java.lang.String str25 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.common.unit.Fuzziness fuzziness26 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder4.boost(52.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.zeroTermsQuery(zeroTermsQuery29);
        java.lang.String[] strArray34 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray34);
        org.elasticsearch.index.query.Operator operator36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.operator(operator36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder35.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException40 = multiMatchQueryBuilder35.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder35.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder35.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder35.fuzzyRewrite("hi!");
        multiMatchQueryBuilder35.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery49 = null;
        multiMatchQueryBuilder35.zeroTermsQuery = zeroTermsQuery49;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder35.slop((int) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder52.prefixLength((-1));
        multiMatchQueryBuilder54.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder54.lenient(true);
        java.lang.String[] strArray62 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray62);
        org.elasticsearch.index.query.Operator operator64 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder63.operator(operator64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder63.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder67.setanalyzer("multi_match");
        org.elasticsearch.index.query.QueryValidationException queryValidationException72 = multiMatchQueryBuilder67.validate();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery73 = multiMatchQueryBuilder67.zeroTermsQuery;
        java.lang.String str74 = multiMatchQueryBuilder67.getrewrite();
        multiMatchQueryBuilder67.lenient = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder67.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}", (float) (short) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap80 = multiMatchQueryBuilder67.fieldsBoosts;
        multiMatchQueryBuilder58.fieldsBoosts = strObjectFloatHashMap80;
        multiMatchQueryBuilder30.setfieldsBoosts(strObjectFloatHashMap80);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(fuzziness26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(queryValidationException40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNull(queryValidationException72);
        org.junit.Assert.assertNull(zeroTermsQuery73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap80);
    }

    @Test
    public void test01451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01451");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        multiMatchQueryBuilder4.maxExpansions = 100;
        org.elasticsearch.index.query.Operator operator17 = multiMatchQueryBuilder4.operator;
        java.lang.String[] strArray21 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray21);
        org.elasticsearch.index.query.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder22.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder26.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness31 = multiMatchQueryBuilder26.getfuzziness();
        multiMatchQueryBuilder4.fuzziness = fuzziness31;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder4.cutoffFrequency(100.0f);
        java.lang.String str35 = multiMatchQueryBuilder34.minimumShouldMatch;
        java.lang.Integer int36 = multiMatchQueryBuilder34.getslop();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(operator17);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(fuzziness31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(int36);
    }

    @Test
    public void test01452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01452");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder11.getfuzziness();
        org.elasticsearch.index.query.Operator operator13 = null;
        multiMatchQueryBuilder11.setoperator(operator13);
        java.lang.Integer int15 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.Operator operator16 = multiMatchQueryBuilder11.getoperator();
        java.lang.Boolean boolean17 = multiMatchQueryBuilder11.lenient;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNull(boolean17);
    }

    @Test
    public void test01453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01453");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder4.minimumShouldMatch;
        multiMatchQueryBuilder4.setslop((java.lang.Integer) 0);
        java.lang.Boolean boolean24 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder4.boost((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.slop(0);
        multiMatchQueryBuilder26.setslop((java.lang.Integer) 10);
        multiMatchQueryBuilder26.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test01454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01454");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getminimumShouldMatch();
        java.lang.String[] strArray11 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray11);
        org.elasticsearch.index.query.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.operator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder16.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.lenient(false);
        multiMatchQueryBuilder16.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery24);
        boolean boolean26 = multiMatchQueryBuilder6.equals((java.lang.Object) multiMatchQueryBuilder25);
        java.lang.Boolean boolean27 = multiMatchQueryBuilder25.getuseDisMax();
        multiMatchQueryBuilder25.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder25.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"tieBreaker\" : 0.0,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean32 = multiMatchQueryBuilder31.useDisMax;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(boolean27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(boolean32);
    }

    @Test
    public void test01455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01455");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str12 = multiMatchQueryBuilder8.minimumShouldMatch;
        multiMatchQueryBuilder8.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder21.slop((int) (short) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.zeroTermsQuery(zeroTermsQuery28);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder16.type((java.lang.Object) multiMatchQueryBuilder27);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multimatch\" : {?    \"query\" : \"multi_match\",?    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],?    \"slop\" : 100,?    \"boost\" : 1.0?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test01456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01456");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.boost((float) (short) 0);
        multiMatchQueryBuilder21.prefixLength = 100;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}^35.0\" ],\n    \"fuzziness\" : \"BEST_FIELDS\",\n    \"tie_breaker\" : 0.0,\n    \"boost\" : 0.0\n  }\n}", (float) 1L);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params28 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder29 = multiMatchQueryBuilder26.toXContent(xContentBuilder27, params28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(params28);
    }

    @Test
    public void test01457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01457");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        java.lang.String str9 = multiMatchQueryBuilder4.getrewrite();
        java.lang.String str10 = multiMatchQueryBuilder4.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.useDisMax(true);
        multiMatchQueryBuilder4.slop = 97;
        java.lang.Float float15 = multiMatchQueryBuilder4.cutoffFrequency;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float15);
    }

    @Test
    public void test01458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01458");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type18 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder8.type = type18;
        java.lang.Integer int20 = multiMatchQueryBuilder8.getslop();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder8.getzeroTermsQuery();
        java.lang.String str22 = multiMatchQueryBuilder8.getminimumShouldMatch();
        java.util.List<java.lang.String> strList23 = multiMatchQueryBuilder8.fields;
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException33 = multiMatchQueryBuilder28.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder28.cutoffFrequency((float) (byte) 100);
        java.lang.String str36 = multiMatchQueryBuilder28.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder28.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder28.tieBreaker((-1.0f));
        org.elasticsearch.index.query.Operator operator41 = null;
        multiMatchQueryBuilder28.operator = operator41;
        boolean boolean43 = multiMatchQueryBuilder8.equals((java.lang.Object) operator41);
        org.elasticsearch.common.io.stream.StreamInput streamInput44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder8.readFrom(streamInput44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type18.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(queryValidationException33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test01459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01459");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        multiMatchQueryBuilder4.prefixLength = 10;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder4.setfieldsBoosts(strObjectFloatHashMap13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("", (float) (byte) 100);
        java.lang.String str18 = multiMatchQueryBuilder17.getrewrite();
        java.lang.String str19 = multiMatchQueryBuilder17.rewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test01460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01460");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder6.lenient(false);
        java.lang.Integer int9 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("hi!");
        java.lang.Integer int12 = multiMatchQueryBuilder8.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder16.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoffFrequency\" : 1.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test01461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01461");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.minimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setminimumShouldMatch("multi_match");
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException25 = multiMatchQueryBuilder20.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.cutoffFrequency((float) (byte) 100);
        java.lang.String str28 = multiMatchQueryBuilder20.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder20.queryName("");
        org.elasticsearch.common.unit.Fuzziness fuzziness31 = multiMatchQueryBuilder20.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder20.getPROTOTYPE();
        java.lang.String[] strArray36 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder32, strArray36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) multiMatchQueryBuilder38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.queryName("hi!");
        java.lang.Boolean boolean42 = multiMatchQueryBuilder39.lenient;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(queryValidationException25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(fuzziness31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(boolean42);
    }

    @Test
    public void test01462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01462");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.boost((float) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.tieBreaker((float) 0L);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
    }

    @Test
    public void test01463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01463");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        java.lang.Integer int10 = multiMatchQueryBuilder4.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder4.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}", (float) '#');
        float float15 = multiMatchQueryBuilder14.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.slop((int) (short) 10);
        multiMatchQueryBuilder14.setcutoffFrequency((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.slop((-1));
        java.lang.Float float22 = multiMatchQueryBuilder21.tieBreaker;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(float22);
    }

    @Test
    public void test01464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01464");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap9 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery10 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.lenient(false);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder17.setuseDisMax((java.lang.Boolean) true);
        multiMatchQueryBuilder17.setprefixLength((java.lang.Integer) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.tieBreaker((float) 100);
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        multiMatchQueryBuilder28.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.Operator operator33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder28.operator(operator33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder28.fuzzyRewrite("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder28.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder23.fuzziness((java.lang.Object) multiMatchQueryBuilder38);
        org.elasticsearch.common.unit.Fuzziness fuzziness40 = multiMatchQueryBuilder39.getfuzziness();
        multiMatchQueryBuilder39.maxExpansions = (-1);
        org.elasticsearch.common.io.stream.StreamInput streamInput43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder39.readFrom(streamInput43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(strObjectFloatHashMap9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(fuzziness40);
    }

    @Test
    public void test01465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01465");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        java.lang.Float float13 = multiMatchQueryBuilder4.gettieBreaker();
        java.lang.Object obj14 = multiMatchQueryBuilder4.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.tieBreaker((float) 100L);
        java.lang.String[] strArray20 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray20);
        org.elasticsearch.index.query.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.operator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException26 = multiMatchQueryBuilder21.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder21.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder21.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness33 = multiMatchQueryBuilder21.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder21.slop((int) (short) 0);
        multiMatchQueryBuilder21.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray41 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray41);
        org.elasticsearch.index.query.Operator operator43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.operator(operator43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException47 = multiMatchQueryBuilder42.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder42.cutoffFrequency((float) (byte) 100);
        float float50 = multiMatchQueryBuilder42.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type51 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type52 = type51.matchQueryType();
        multiMatchQueryBuilder42.settype(type51);
        multiMatchQueryBuilder21.type = type51;
        java.lang.String str55 = multiMatchQueryBuilder21.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder21.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray61 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray61);
        org.elasticsearch.index.query.Operator operator63 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.operator(operator63);
        multiMatchQueryBuilder62.fuzzyRewrite = "hi!";
        java.lang.String str67 = multiMatchQueryBuilder62.rewrite;
        java.lang.String str68 = multiMatchQueryBuilder62.getfuzzyRewrite();
        java.lang.Boolean boolean69 = multiMatchQueryBuilder62.getuseDisMax();
        java.lang.String[] strArray73 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray73);
        org.elasticsearch.index.query.Operator operator75 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder74.operator(operator75);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder74.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException79 = multiMatchQueryBuilder74.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder74.cutoffFrequency((float) (byte) 100);
        java.lang.String str82 = multiMatchQueryBuilder74.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery83 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder74.zeroTermsQuery(zeroTermsQuery83);
        java.lang.Object obj85 = multiMatchQueryBuilder74.gettext();
        java.lang.Object obj86 = multiMatchQueryBuilder74.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = multiMatchQueryBuilder74.boost((float) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type89 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField90 = type89.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type91 = type89.matchQueryType();
        org.elasticsearch.common.ParseField parseField92 = type89.parseField();
        float float93 = type89.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder94 = multiMatchQueryBuilder74.type((java.lang.Object) type89);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder95 = multiMatchQueryBuilder62.type(type89);
        multiMatchQueryBuilder21.settype(type89);
        multiMatchQueryBuilder4.type = type89;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "multi_match" + "'", obj14, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(queryValidationException26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(fuzziness33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNull(queryValidationException47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 1.0f + "'", float50 == 1.0f);
        org.junit.Assert.assertTrue("'" + type51 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type51.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type52 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type52.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertNull(boolean69);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNull(queryValidationException79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
        org.junit.Assert.assertEquals("'" + obj85 + "' != '" + "multi_match" + "'", obj85, "multi_match");
        org.junit.Assert.assertEquals("'" + obj86 + "' != '" + "multi_match" + "'", obj86, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder88);
        org.junit.Assert.assertTrue("'" + type89 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type89.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField90);
        org.junit.Assert.assertTrue("'" + type91 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type91.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField92);
        org.junit.Assert.assertTrue("'" + float93 + "' != '" + 1.0f + "'", float93 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder94);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder95);
    }

    @Test
    public void test01466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01466");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"_name\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.analyzer("hi!");
        java.lang.String str19 = multiMatchQueryBuilder16.getminimumShouldMatch();
        multiMatchQueryBuilder16.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 1,\\n    \\\"lenient\\\" : false,\\n    \\\"cutoff_frequency\\\" : 10.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"slop\" : 10,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test01467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01467");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.lenient(true);
        java.lang.String str18 = multiMatchQueryBuilder17.analyzer;
        java.lang.Boolean boolean19 = multiMatchQueryBuilder17.lenient;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}" + "'", str18, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + true + "'", boolean19, true);
    }

    @Test
    public void test01468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01468");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.queryName("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str15 = multiMatchQueryBuilder14.fuzzyRewrite;
        java.lang.String str16 = multiMatchQueryBuilder14.getWriteableName();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder14.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "multi_match" + "'", str16, "multi_match");
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
    }

    @Test
    public void test01469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01469");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        java.lang.String str13 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.String str14 = multiMatchQueryBuilder4.queryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery15;
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.maxExpansions((int) (short) 100);
        multiMatchQueryBuilder20.setrewrite("");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = null;
        multiMatchQueryBuilder20.zeroTermsQuery = zeroTermsQuery23;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test01470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01470");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder11.settieBreaker((java.lang.Float) 0.0f);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
    }

    @Test
    public void test01471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01471");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type8 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type9 = type8.matchQueryType();
        float float10 = type8.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type8);
        org.elasticsearch.common.ParseField parseField12 = type8.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type13 = type8.matchQueryType();
        org.elasticsearch.common.ParseField parseField14 = type8.parseField();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type8.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type9.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(parseField12);
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField14);
    }

    @Test
    public void test01472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01472");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        java.lang.String str1 = multiMatchQueryBuilder0.getminimumShouldMatch();
        multiMatchQueryBuilder0.maxExpansions = 100;
        multiMatchQueryBuilder0.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0,\n    \"_name\" : \"multi_match\"\n  }\n}");
        multiMatchQueryBuilder0.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str1, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"rewrite\" : \"multi_match\",\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"slop\\\" : 0,\\n    \\\"fuzzy_rewrite\\\" : \\\"hi!\\\",\\n    \\\"tie_breaker\\\" : 100.0,\\n    \\\"cutoff_frequency\\\" : 100.0,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
    }

    @Test
    public void test01473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01473");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator18 = null;
        multiMatchQueryBuilder4.setoperator(operator18);
        multiMatchQueryBuilder4.setanalyzer("");
        java.lang.Object obj22 = multiMatchQueryBuilder4.text;
        org.elasticsearch.common.xcontent.XContentType xContentType23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference24 = multiMatchQueryBuilder4.buildAsBytes(xContentType23);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + "multi_match" + "'", obj22, "multi_match");
    }

    @Test
    public void test01474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01474");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean13 = multiMatchQueryBuilder4.lenient;
        org.elasticsearch.index.query.QueryShardContext queryShardContext14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query15 = multiMatchQueryBuilder4.toFilter(queryShardContext14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(boolean13);
    }

    @Test
    public void test01475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01475");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder4.lenient(false);
        java.lang.Integer int10 = multiMatchQueryBuilder9.prefixLength;
        java.lang.String str11 = multiMatchQueryBuilder9.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder9.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTIMATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAXEXPANSIONS\\\" : 100,\\n    \\\"USEDISMAX\\\" : TRUE,\\n    \\\"TIEBREAKER\\\" : -1.0,\\n    \\\"CUTOFFFREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
    }

    @Test
    public void test01476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01476");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        multiMatchQueryBuilder13.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.prefixLength((int) (short) 100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException29 = multiMatchQueryBuilder24.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder24.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder24.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder24.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = multiMatchQueryBuilder24.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField38 = type37.parseField();
        multiMatchQueryBuilder24.type = type37;
        boolean boolean40 = multiMatchQueryBuilder17.equals((java.lang.Object) multiMatchQueryBuilder24);
        java.lang.String str41 = multiMatchQueryBuilder17.analyzer;
        java.lang.Object obj42 = multiMatchQueryBuilder17.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder17.boost((float) 10);
        java.lang.String str45 = multiMatchQueryBuilder17.getNAME();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(queryValidationException29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(type36);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type37.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multi_match" + "'", str41, "multi_match");
        org.junit.Assert.assertEquals("'" + obj42 + "' != '" + "multi_match" + "'", obj42, "multi_match");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "multi_match" + "'", str45, "multi_match");
    }

    @Test
    public void test01477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01477");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder6.getName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type8 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type9 = type8.matchQueryType();
        float float10 = type8.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder6.type(type8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = multiMatchQueryBuilder11.zeroTermsQuery;
        java.lang.Boolean boolean13 = multiMatchQueryBuilder11.useDisMax;
        java.lang.String str14 = multiMatchQueryBuilder11.rewrite;
        multiMatchQueryBuilder11.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Float float17 = multiMatchQueryBuilder11.gettieBreaker();
        java.lang.Integer int18 = multiMatchQueryBuilder11.getprefixLength();
        java.lang.String str19 = multiMatchQueryBuilder11.fuzzyRewrite;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type8.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type9.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(zeroTermsQuery12);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}" + "'", str19, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test01478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01478");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        java.lang.Object obj17 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.tieBreaker = (-1.0f);
        java.lang.Integer int20 = multiMatchQueryBuilder4.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder4.field("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}", 10.0f);
        java.lang.Object obj24 = multiMatchQueryBuilder4.gettext();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery25;
        java.lang.String str27 = multiMatchQueryBuilder4.getanalyzer();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + "multi_match" + "'", obj24, "multi_match");
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test01479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01479");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.queryName("");
        multiMatchQueryBuilder14.setslop((java.lang.Integer) 0);
        java.lang.String str17 = multiMatchQueryBuilder14.getanalyzer();
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder14.fuzziness;
        multiMatchQueryBuilder14.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"analyzer\" : \"\",\n    \"fuzziness\" : \"BEST_FIELDS\",\n    \"cutoff_frequency\" : -1.0,\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(fuzziness18);
    }

    @Test
    public void test01480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01480");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.maxExpansions((int) (short) 10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder12.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.lenient(true);
        java.lang.Float float16 = multiMatchQueryBuilder12.tieBreaker;
        java.lang.Float float17 = multiMatchQueryBuilder12.cutoffFrequency;
        multiMatchQueryBuilder12.prefixLength = 1;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(float17);
    }

    @Test
    public void test01481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01481");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str16 = multiMatchQueryBuilder15.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder20.getrewrite();
        org.elasticsearch.common.xcontent.XContentType xContentType22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference23 = multiMatchQueryBuilder20.buildAsBytes(xContentType22);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}" + "'", str21, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test01482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01482");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.tieBreaker((float) (short) 0);
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) true);
        java.lang.String str13 = multiMatchQueryBuilder10.getWriteableName();
        java.lang.String str14 = multiMatchQueryBuilder10.getNAME();
        java.lang.String str15 = multiMatchQueryBuilder10.getWriteableName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multi_match" + "'", str13, "multi_match");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "multi_match" + "'", str14, "multi_match");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "multi_match" + "'", str15, "multi_match");
    }

    @Test
    public void test01483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01483");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery12);
        multiMatchQueryBuilder13.prefixLength = 10;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.analyzer("multi_match");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.prefixLength((int) (short) 100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException29 = multiMatchQueryBuilder24.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder24.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder24.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder24.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = multiMatchQueryBuilder24.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField38 = type37.parseField();
        multiMatchQueryBuilder24.type = type37;
        boolean boolean40 = multiMatchQueryBuilder17.equals((java.lang.Object) multiMatchQueryBuilder24);
        org.elasticsearch.common.unit.Fuzziness fuzziness41 = multiMatchQueryBuilder17.getfuzziness();
        multiMatchQueryBuilder17.setrewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.io.stream.StreamInput streamInput44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder17.readFrom(streamInput44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(queryValidationException29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(type36);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type37.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(fuzziness41);
    }

    @Test
    public void test01484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01484");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        multiMatchQueryBuilder4.minimumShouldMatch = "hi!";
        java.lang.Float float11 = multiMatchQueryBuilder4.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type13 = type12.matchQueryType();
        float float14 = type12.tieBreaker();
        multiMatchQueryBuilder4.type = type12;
        multiMatchQueryBuilder4.fuzzyRewrite = "multi_match";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder4.maxExpansions(100);
        java.lang.String[] strArray23 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray23);
        org.elasticsearch.index.query.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.field("");
        org.elasticsearch.index.query.Operator operator29 = null;
        multiMatchQueryBuilder24.setoperator(operator29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder24.zeroTermsQuery = zeroTermsQuery31;
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder24.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"max_expansions\" : 1,\n    \"lenient\" : false,\n    \"cutoff_frequency\" : 10.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        multiMatchQueryBuilder37.maxExpansions = 0;
        java.lang.Boolean boolean40 = multiMatchQueryBuilder37.lenient;
        java.lang.String[] strArray44 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray44);
        org.elasticsearch.index.query.Operator operator46 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.operator(operator46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder45.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap50 = multiMatchQueryBuilder49.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.minimumShouldMatch("multi_match");
        java.lang.String str53 = multiMatchQueryBuilder52.toString();
        java.lang.String[] strArray57 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray57);
        org.elasticsearch.index.query.Operator operator59 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.operator(operator59);
        java.lang.String str61 = multiMatchQueryBuilder58.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness62 = multiMatchQueryBuilder58.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder58.tieBreaker((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.cutoffFrequency((float) '4');
        boolean boolean67 = multiMatchQueryBuilder52.equals((java.lang.Object) multiMatchQueryBuilder64);
        multiMatchQueryBuilder64.setmaxExpansions((java.lang.Integer) (-1));
        multiMatchQueryBuilder64.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder37.fuzziness((java.lang.Object) multiMatchQueryBuilder64);
        java.lang.String str73 = multiMatchQueryBuilder64.getrewrite();
        java.lang.String str74 = multiMatchQueryBuilder64.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = multiMatchQueryBuilder64.rewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"hi!\",\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder77 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params78 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder76.doXContent(xContentBuilder77, params78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type13.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(boolean40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(strObjectFloatHashMap50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str53, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "multi_match" + "'", str61, "multi_match");
        org.junit.Assert.assertNull(fuzziness62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder76);
        org.junit.Assert.assertNotNull(params78);
    }

    @Test
    public void test01485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01485");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        multiMatchQueryBuilder4.analyzer = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder4.zeroTermsQuery = zeroTermsQuery18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder4.maxExpansions((int) (short) -1);
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test01486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01486");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean11 = multiMatchQueryBuilder8.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.boost((float) (short) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.operator(operator16);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder17.setzeroTermsQuery(zeroTermsQuery18);
        org.elasticsearch.common.unit.Fuzziness fuzziness20 = multiMatchQueryBuilder17.fuzziness;
        multiMatchQueryBuilder17.setmaxExpansions((java.lang.Integer) 97);
        org.elasticsearch.index.query.QueryShardContext queryShardContext23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query24 = multiMatchQueryBuilder17.toQuery(queryShardContext23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(fuzziness20);
    }

    @Test
    public void test01487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01487");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder8.setanalyzer("multi_match");
        org.elasticsearch.index.query.QueryValidationException queryValidationException13 = multiMatchQueryBuilder8.validate();
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.tieBreaker((float) (short) -1);
        java.lang.String str20 = multiMatchQueryBuilder19.queryName();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(queryValidationException13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test01488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01488");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.PROTOTYPE;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder2 = multiMatchQueryBuilder0.boost((float) 1);
        java.lang.String[] strArray6 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder7 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray6);
        org.elasticsearch.index.query.Operator operator8 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = multiMatchQueryBuilder7.operator(operator8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder7.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException12 = multiMatchQueryBuilder7.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder7.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder7.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder7.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = multiMatchQueryBuilder7.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder7.slop((int) (short) 0);
        multiMatchQueryBuilder7.setslop((java.lang.Integer) 100);
        java.lang.String[] strArray27 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray27);
        org.elasticsearch.index.query.Operator operator29 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.operator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException33 = multiMatchQueryBuilder28.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder28.cutoffFrequency((float) (byte) 100);
        float float36 = multiMatchQueryBuilder28.boost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        org.elasticsearch.index.search.MatchQuery.Type type38 = type37.matchQueryType();
        multiMatchQueryBuilder28.settype(type37);
        multiMatchQueryBuilder7.type = type37;
        java.lang.String str41 = multiMatchQueryBuilder7.getrewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder7.cutoffFrequency((float) 100L);
        java.lang.String[] strArray47 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray47);
        org.elasticsearch.index.query.Operator operator49 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.operator(operator49);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder48.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException53 = multiMatchQueryBuilder48.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder48.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder48.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder48.fuzzyRewrite("hi!");
        java.lang.String[] strArray63 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray63);
        org.elasticsearch.index.query.Operator operator65 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder64.operator(operator65);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder64.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder68.fuzziness((java.lang.Object) 10);
        multiMatchQueryBuilder68.setanalyzer("multi_match");
        org.elasticsearch.common.unit.Fuzziness fuzziness73 = multiMatchQueryBuilder68.getfuzziness();
        multiMatchQueryBuilder48.setfuzziness(fuzziness73);
        multiMatchQueryBuilder7.fuzziness = fuzziness73;
        multiMatchQueryBuilder0.setfuzziness(fuzziness73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder0.slop((int) '4');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder78.field("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        java.lang.String[] strArray84 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray84);
        org.elasticsearch.index.query.Operator operator86 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder85.operator(operator86);
        java.lang.Boolean boolean88 = multiMatchQueryBuilder85.getlenient();
        multiMatchQueryBuilder85.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String str91 = multiMatchQueryBuilder85.analyzer;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap92 = multiMatchQueryBuilder85.getfieldsBoosts();
        multiMatchQueryBuilder85.cutoffFrequency = 0.0f;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder95 = multiMatchQueryBuilder80.type((java.lang.Object) multiMatchQueryBuilder85);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multimatch\" : {?    \"query\" : \"multi_match\",?    \"fields\" : [ \"multi_match\", \"hi!\" ],?    \"maxexpansions\" : 100,?    \"cutofffrequency\" : 0.0,?    \"boost\" : 1.0?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder0);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(queryValidationException12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(fuzziness19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(queryValidationException33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 1.0f + "'", float36 == 1.0f);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type37.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type38.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(queryValidationException53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(fuzziness73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertNull(boolean88);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertNull(strObjectFloatHashMap92);
    }

    @Test
    public void test01489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01489");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.useDisMax(false);
        java.lang.Boolean boolean17 = multiMatchQueryBuilder16.useDisMax;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + false + "'", boolean17, false);
    }

    @Test
    public void test01490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01490");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
        multiMatchQueryBuilder4.setminimumShouldMatch("multi_match");
        java.lang.String str19 = multiMatchQueryBuilder4.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}" + "'", str19, "{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}");
    }

    @Test
    public void test01491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01491");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        java.lang.Boolean boolean8 = multiMatchQueryBuilder4.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder4.boost((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder4.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String str13 = multiMatchQueryBuilder4.toString();
        multiMatchQueryBuilder4.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"{\\n  \\\"MULTI_MATCH\\\" : {\\n    \\\"QUERY\\\" : \\\"MULTI_MATCH\\\",\\n    \\\"FIELDS\\\" : [ \\\"MULTI_MATCH\\\", \\\"HI!\\\" ],\\n    \\\"ANALYZER\\\" : \\\"{\\\\N  \\\\\\\"MULTI_MATCH\\\\\\\" : {\\\\N    \\\\\\\"QUERY\\\\\\\" : \\\\\\\"MULTI_MATCH\\\\\\\",\\\\N    \\\\\\\"FIELDS\\\\\\\" : [ \\\\\\\"MULTI_MATCH\\\\\\\", \\\\\\\"HI!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\N    \\\\\\\"SLOP\\\\\\\" : 0,\\\\N    \\\\\\\"FUZZY_REWRITE\\\\\\\" : \\\\\\\"HI!\\\\\\\",\\\\N    \\\\\\\"TIE_BREAKER\\\\\\\" : 100.0,\\\\N    \\\\\\\"CUTOFF_FREQUENCY\\\\\\\" : 100.0,\\\\N    \\\\\\\"BOOST\\\\\\\" : 1.0\\\\N  }\\\\N}\\\",\\n    \\\"MAX_EXPANSIONS\\\" : 100,\\n    \\\"USE_DIS_MAX\\\" : TRUE,\\n    \\\"TIE_BREAKER\\\" : -1.0,\\n    \\\"CUTOFF_FREQUENCY\\\" : 0.0,\\n    \\\"BOOST\\\" : 1.0\\n  }\\n}\",\n    \"boost\" : 1.0\n  }\n}");
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.operator(operator21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder20.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap25 = multiMatchQueryBuilder24.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder24.lenient(false);
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder24.zeroTermsQuery(zeroTermsQuery32);
        multiMatchQueryBuilder24.tieBreaker = 10.0f;
        java.util.List<java.lang.String> strList36 = multiMatchQueryBuilder24.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder4.fuzziness((java.lang.Object) multiMatchQueryBuilder24);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap38 = multiMatchQueryBuilder37.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}" + "'", str13, "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\" ],\n    \"boost\" : 0.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(strObjectFloatHashMap25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(strObjectFloatHashMap38);
    }

    @Test
    public void test01492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01492");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder4.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"multi_match\\\",\\n    \\\"fields\\\" : [ \\\"multi_match\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"minimum_should_match\\\" : \\\"hi!\\\",\\n    \\\"lenient\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        java.lang.Boolean boolean23 = multiMatchQueryBuilder22.lenient;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(boolean23);
    }

    @Test
    public void test01493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01493");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        multiMatchQueryBuilder4.fuzzyRewrite = "hi!";
        java.lang.String str9 = multiMatchQueryBuilder4.rewrite;
        java.lang.String[] strArray13 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray13);
        org.elasticsearch.index.query.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.operator(operator15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException19 = multiMatchQueryBuilder14.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.cutoffFrequency((float) (byte) 100);
        float float22 = multiMatchQueryBuilder14.boost();
        multiMatchQueryBuilder14.setanalyzer("");
        multiMatchQueryBuilder14.setcutoffFrequency((java.lang.Float) 0.0f);
        boolean boolean27 = multiMatchQueryBuilder4.equals((java.lang.Object) multiMatchQueryBuilder14);
        java.lang.String[] strArray31 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray31);
        org.elasticsearch.index.query.Operator operator33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.operator(operator33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.fuzziness((java.lang.Object) 10);
        java.lang.Boolean boolean39 = multiMatchQueryBuilder36.useDisMax;
        java.lang.String[] strArray43 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray43);
        org.elasticsearch.index.query.Operator operator45 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.operator(operator45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder44.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException49 = multiMatchQueryBuilder44.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder44.cutoffFrequency((float) (byte) 100);
        java.lang.String str52 = multiMatchQueryBuilder44.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder44.queryName("");
        multiMatchQueryBuilder54.setslop((java.lang.Integer) 0);
        java.lang.String[] strArray60 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean39, strArray60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean27, strArray60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type65 = multiMatchQueryBuilder64.type;
        multiMatchQueryBuilder64.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.common.xcontent.XContentType xContentType68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference69 = multiMatchQueryBuilder64.buildAsBytes(xContentType68);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(queryValidationException19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 1.0f + "'", float22 == 1.0f);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(boolean39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNull(queryValidationException49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNull(type65);
    }

    @Test
    public void test01494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01494");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder4.fuzzyRewrite("hi!");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder4.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder4.slop((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder4.zeroTermsQuery(zeroTermsQuery19);
        org.elasticsearch.common.unit.Fuzziness fuzziness21 = multiMatchQueryBuilder20.fuzziness;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = multiMatchQueryBuilder20.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.getPROTOTYPE();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params25 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder23.doXContent(xContentBuilder24, params25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(fuzziness21);
        org.junit.Assert.assertNull(strObjectFloatHashMap22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(params25);
    }

    @Test
    public void test01495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01495");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.String str12 = multiMatchQueryBuilder4.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.cutoffFrequency((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder4.rewrite("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimum_should_match\" : \"hi!\",\n    \"lenient\" : true,\n    \"boost\" : 1.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap17;
        java.lang.Integer int19 = multiMatchQueryBuilder16.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.getPROTOTYPE();
        multiMatchQueryBuilder20.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"multi_match\",\n    \"boost\" : 1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test01496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01496");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = multiMatchQueryBuilder4.field("");
        org.elasticsearch.index.query.QueryValidationException queryValidationException9 = multiMatchQueryBuilder4.validate();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency((float) (byte) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder4.text;
        multiMatchQueryBuilder4.setrewrite("");
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder4.fields;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap16 = multiMatchQueryBuilder4.fieldsBoosts;
        java.lang.Object obj17 = multiMatchQueryBuilder4.gettext();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder8);
        org.junit.Assert.assertNull(queryValidationException9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "multi_match" + "'", obj12, "multi_match");
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNull(strObjectFloatHashMap16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "multi_match" + "'", obj17, "multi_match");
    }

    @Test
    public void test01497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01497");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type10 = multiMatchQueryBuilder4.gettype();
        multiMatchQueryBuilder4.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder4.minimumShouldMatch("");
        java.lang.String[] strArray19 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (byte) 0, strArray19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder4, strArray19);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput23 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder22.writeTo(streamOutput23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray19);
    }

    @Test
    public void test01498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01498");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        multiMatchQueryBuilder4.operator = operator5;
        org.elasticsearch.common.unit.Fuzziness fuzziness7 = multiMatchQueryBuilder4.getfuzziness();
        multiMatchQueryBuilder4.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.maxExpansions((int) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = multiMatchQueryBuilder4.zeroTermsQuery;
        multiMatchQueryBuilder4.slop = (-1);
        multiMatchQueryBuilder4.settieBreaker((java.lang.Float) 0.0f);
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 32);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNull(fuzziness7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(zeroTermsQuery12);
    }

    @Test
    public void test01499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01499");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.Boolean boolean7 = multiMatchQueryBuilder4.getlenient();
        multiMatchQueryBuilder4.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder4.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder4.tieBreaker((float) (-1));
        multiMatchQueryBuilder4.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"multi_match\",\n    \"fields\" : [ \"multi_match\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"tie_breaker\" : 100.0,\n    \"cutoff_frequency\" : 100.0,\n    \"boost\" : 1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder4.cutoffFrequency((float) (-1L));
        org.elasticsearch.common.io.stream.StreamOutput streamOutput18 = null;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder4.writeTo(streamOutput18);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test01500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01500");
        java.lang.String[] strArray3 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder4 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray3);
        org.elasticsearch.index.query.Operator operator5 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder6 = multiMatchQueryBuilder4.operator(operator5);
        java.lang.String str7 = multiMatchQueryBuilder4.getWriteableName();
        org.elasticsearch.common.unit.Fuzziness fuzziness8 = multiMatchQueryBuilder4.fuzziness;
        multiMatchQueryBuilder4.setlenient((java.lang.Boolean) false);
        multiMatchQueryBuilder4.minimumShouldMatch = "";
        java.lang.String[] strArray16 = new java.lang.String[] { "multi_match", "hi!" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "multi_match", strArray16);
        org.elasticsearch.index.query.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.operator(operator18);
        org.elasticsearch.index.query.Operator operator20 = null;
        multiMatchQueryBuilder17.operator = operator20;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.fuzzyRewrite("multi_match");
        multiMatchQueryBuilder23.tieBreaker = 0.0f;
        java.lang.String str26 = multiMatchQueryBuilder23.queryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder4.type((java.lang.Object) str26);
        org.elasticsearch.index.query.QueryShardContext queryShardContext28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.lucene.search.Query query29 = multiMatchQueryBuilder27.toQuery(queryShardContext28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multi_match" + "'", str7, "multi_match");
        org.junit.Assert.assertNull(fuzziness8);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }
}
